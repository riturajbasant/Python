#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Fri Dec 14 13:12:11 2018 by generateDS.py version 2.30.8.
# Python 2.7.15 (v2.7.15:ca079a3ea3, Apr 30 2018, 16:30:26) [MSC v.1500 64 bit (AMD64)]
#
# Command line options:
#   ('-o', 'dxlxml.py')
#
# Command line arguments:
#   C:\Users\sushant.aggarwal\Documents\Sushant\Work\Releases\Quark\Python DxOpen Client\Python\DXOpenSchema_bkp.xsd
#
# Command line:
#   C:\Python27\Scripts\generateDS.py -o "dxlxml.py" C:\Users\sushant.aggarwal\Documents\Sushant\Work\Releases\Quark\Python DxOpen Client\Python\DXOpenSchema_bkp.xsd
#
# Current working directory (os.getcwd()):
#   
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class Response(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ResearchSignals=None, Collateral=None, DataFeed=None, BenchmarkPerformance=None, Screen=None, BondPricing=None, Dividend=None, DIME=None, Client=None, ClientVariance=None, SF=None, IM=None, Public=None, Intraday=None, Pending=None, Rates=None, AccountPerformance=None, Repo=None, TriPartyTrading=None, Meta=None, DataUpdates=None, Message=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ResearchSignals = ResearchSignals
        self.Collateral = Collateral
        self.DataFeed = DataFeed
        self.BenchmarkPerformance = BenchmarkPerformance
        self.Screen = Screen
        self.BondPricing = BondPricing
        self.Dividend = Dividend
        self.DIME = DIME
        self.Client = Client
        self.ClientVariance = ClientVariance
        self.SF = SF
        self.IM = IM
        self.Public = Public
        self.Intraday = Intraday
        self.Pending = Pending
        self.Rates = Rates
        self.AccountPerformance = AccountPerformance
        self.Repo = Repo
        self.TriPartyTrading = TriPartyTrading
        self.Meta = Meta
        self.DataUpdates = DataUpdates
        self.Message = Message
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Response)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Response.subclass:
            return Response.subclass(*args_, **kwargs_)
        else:
            return Response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ResearchSignals(self):
        return self.ResearchSignals
    def set_ResearchSignals(self, ResearchSignals):
        self.ResearchSignals = ResearchSignals
    def get_Collateral(self):
        return self.Collateral
    def set_Collateral(self, Collateral):
        self.Collateral = Collateral
    def get_DataFeed(self):
        return self.DataFeed
    def set_DataFeed(self, DataFeed):
        self.DataFeed = DataFeed
    def get_BenchmarkPerformance(self):
        return self.BenchmarkPerformance
    def set_BenchmarkPerformance(self, BenchmarkPerformance):
        self.BenchmarkPerformance = BenchmarkPerformance
    def get_Screen(self):
        return self.Screen
    def set_Screen(self, Screen):
        self.Screen = Screen
    def get_BondPricing(self):
        return self.BondPricing
    def set_BondPricing(self, BondPricing):
        self.BondPricing = BondPricing
    def get_Dividend(self):
        return self.Dividend
    def set_Dividend(self, Dividend):
        self.Dividend = Dividend
    def get_DIME(self):
        return self.DIME
    def set_DIME(self, DIME):
        self.DIME = DIME
    def get_Client(self):
        return self.Client
    def set_Client(self, Client):
        self.Client = Client
    def get_ClientVariance(self):
        return self.ClientVariance
    def set_ClientVariance(self, ClientVariance):
        self.ClientVariance = ClientVariance
    def get_SF(self):
        return self.SF
    def set_SF(self, SF):
        self.SF = SF
    def get_IM(self):
        return self.IM
    def set_IM(self, IM):
        self.IM = IM
    def get_Public(self):
        return self.Public
    def set_Public(self, Public):
        self.Public = Public
    def get_Intraday(self):
        return self.Intraday
    def set_Intraday(self, Intraday):
        self.Intraday = Intraday
    def get_Pending(self):
        return self.Pending
    def set_Pending(self, Pending):
        self.Pending = Pending
    def get_Rates(self):
        return self.Rates
    def set_Rates(self, Rates):
        self.Rates = Rates
    def get_AccountPerformance(self):
        return self.AccountPerformance
    def set_AccountPerformance(self, AccountPerformance):
        self.AccountPerformance = AccountPerformance
    def get_Repo(self):
        return self.Repo
    def set_Repo(self, Repo):
        self.Repo = Repo
    def get_TriPartyTrading(self):
        return self.TriPartyTrading
    def set_TriPartyTrading(self, TriPartyTrading):
        self.TriPartyTrading = TriPartyTrading
    def get_Meta(self):
        return self.Meta
    def set_Meta(self, Meta):
        self.Meta = Meta
    def get_DataUpdates(self):
        return self.DataUpdates
    def set_DataUpdates(self, DataUpdates):
        self.DataUpdates = DataUpdates
    def get_Message(self):
        return self.Message
    def set_Message(self, Message):
        self.Message = Message
    def hasContent_(self):
        if (
            self.ResearchSignals is not None or
            self.Collateral is not None or
            self.DataFeed is not None or
            self.BenchmarkPerformance is not None or
            self.Screen is not None or
            self.BondPricing is not None or
            self.Dividend is not None or
            self.DIME is not None or
            self.Client is not None or
            self.ClientVariance is not None or
            self.SF is not None or
            self.IM is not None or
            self.Public is not None or
            self.Intraday is not None or
            self.Pending is not None or
            self.Rates is not None or
            self.AccountPerformance is not None or
            self.Repo is not None or
            self.TriPartyTrading is not None or
            self.Meta is not None or
            self.DataUpdates is not None or
            self.Message is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Response', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Response')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Response')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Response', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Response'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Response', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ResearchSignals is not None:
            self.ResearchSignals.export(outfile, level, namespaceprefix_, name_='ResearchSignals', pretty_print=pretty_print)
        if self.Collateral is not None:
            self.Collateral.export(outfile, level, namespaceprefix_, name_='Collateral', pretty_print=pretty_print)
        if self.DataFeed is not None:
            self.DataFeed.export(outfile, level, namespaceprefix_, name_='DataFeed', pretty_print=pretty_print)
        if self.BenchmarkPerformance is not None:
            self.BenchmarkPerformance.export(outfile, level, namespaceprefix_, name_='BenchmarkPerformance', pretty_print=pretty_print)
        if self.Screen is not None:
            self.Screen.export(outfile, level, namespaceprefix_, name_='Screen', pretty_print=pretty_print)
        if self.BondPricing is not None:
            self.BondPricing.export(outfile, level, namespaceprefix_, name_='BondPricing', pretty_print=pretty_print)
        if self.Dividend is not None:
            self.Dividend.export(outfile, level, namespaceprefix_, name_='Dividend', pretty_print=pretty_print)
        if self.DIME is not None:
            self.DIME.export(outfile, level, namespaceprefix_, name_='DIME', pretty_print=pretty_print)
        if self.Client is not None:
            self.Client.export(outfile, level, namespaceprefix_, name_='Client', pretty_print=pretty_print)
        if self.ClientVariance is not None:
            self.ClientVariance.export(outfile, level, namespaceprefix_, name_='ClientVariance', pretty_print=pretty_print)
        if self.SF is not None:
            self.SF.export(outfile, level, namespaceprefix_, name_='SF', pretty_print=pretty_print)
        if self.IM is not None:
            self.IM.export(outfile, level, namespaceprefix_, name_='IM', pretty_print=pretty_print)
        if self.Public is not None:
            self.Public.export(outfile, level, namespaceprefix_, name_='Public', pretty_print=pretty_print)
        if self.Intraday is not None:
            self.Intraday.export(outfile, level, namespaceprefix_, name_='Intraday', pretty_print=pretty_print)
        if self.Pending is not None:
            self.Pending.export(outfile, level, namespaceprefix_, name_='Pending', pretty_print=pretty_print)
        if self.Rates is not None:
            self.Rates.export(outfile, level, namespaceprefix_, name_='Rates', pretty_print=pretty_print)
        if self.AccountPerformance is not None:
            self.AccountPerformance.export(outfile, level, namespaceprefix_, name_='AccountPerformance', pretty_print=pretty_print)
        if self.Repo is not None:
            self.Repo.export(outfile, level, namespaceprefix_, name_='Repo', pretty_print=pretty_print)
        if self.TriPartyTrading is not None:
            self.TriPartyTrading.export(outfile, level, namespaceprefix_, name_='TriPartyTrading', pretty_print=pretty_print)
        if self.Meta is not None:
            self.Meta.export(outfile, level, namespaceprefix_, name_='Meta', pretty_print=pretty_print)
        if self.DataUpdates is not None:
            self.DataUpdates.export(outfile, level, namespaceprefix_, name_='DataUpdates', pretty_print=pretty_print)
        if self.Message is not None:
            self.Message.export(outfile, level, namespaceprefix_, name_='Message', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ResearchSignals':
            obj_ = ResearchSignals.factory(parent_object_=self)
            obj_.build(child_)
            self.ResearchSignals = obj_
            obj_.original_tagname_ = 'ResearchSignals'
        elif nodeName_ == 'Collateral':
            obj_ = Collateral.factory(parent_object_=self)
            obj_.build(child_)
            self.Collateral = obj_
            obj_.original_tagname_ = 'Collateral'
        elif nodeName_ == 'DataFeed':
            obj_ = DataFeed.factory(parent_object_=self)
            obj_.build(child_)
            self.DataFeed = obj_
            obj_.original_tagname_ = 'DataFeed'
        elif nodeName_ == 'BenchmarkPerformance':
            obj_ = BenchmarkPerformance.factory(parent_object_=self)
            obj_.build(child_)
            self.BenchmarkPerformance = obj_
            obj_.original_tagname_ = 'BenchmarkPerformance'
        elif nodeName_ == 'Screen':
            obj_ = Screen.factory(parent_object_=self)
            obj_.build(child_)
            self.Screen = obj_
            obj_.original_tagname_ = 'Screen'
        elif nodeName_ == 'BondPricing':
            obj_ = BondPricing.factory(parent_object_=self)
            obj_.build(child_)
            self.BondPricing = obj_
            obj_.original_tagname_ = 'BondPricing'
        elif nodeName_ == 'Dividend':
            obj_ = Dividend.factory(parent_object_=self)
            obj_.build(child_)
            self.Dividend = obj_
            obj_.original_tagname_ = 'Dividend'
        elif nodeName_ == 'DIME':
            obj_ = DIME.factory(parent_object_=self)
            obj_.build(child_)
            self.DIME = obj_
            obj_.original_tagname_ = 'DIME'
        elif nodeName_ == 'Client':
            obj_ = Client.factory(parent_object_=self)
            obj_.build(child_)
            self.Client = obj_
            obj_.original_tagname_ = 'Client'
        elif nodeName_ == 'ClientVariance':
            obj_ = ClientVariance.factory(parent_object_=self)
            obj_.build(child_)
            self.ClientVariance = obj_
            obj_.original_tagname_ = 'ClientVariance'
        elif nodeName_ == 'SF':
            obj_ = SF.factory(parent_object_=self)
            obj_.build(child_)
            self.SF = obj_
            obj_.original_tagname_ = 'SF'
        elif nodeName_ == 'IM':
            obj_ = IM.factory(parent_object_=self)
            obj_.build(child_)
            self.IM = obj_
            obj_.original_tagname_ = 'IM'
        elif nodeName_ == 'Public':
            obj_ = Public.factory(parent_object_=self)
            obj_.build(child_)
            self.Public = obj_
            obj_.original_tagname_ = 'Public'
        elif nodeName_ == 'Intraday':
            obj_ = Intraday.factory(parent_object_=self)
            obj_.build(child_)
            self.Intraday = obj_
            obj_.original_tagname_ = 'Intraday'
        elif nodeName_ == 'Pending':
            obj_ = Pending.factory(parent_object_=self)
            obj_.build(child_)
            self.Pending = obj_
            obj_.original_tagname_ = 'Pending'
        elif nodeName_ == 'Rates':
            obj_ = Rates.factory(parent_object_=self)
            obj_.build(child_)
            self.Rates = obj_
            obj_.original_tagname_ = 'Rates'
        elif nodeName_ == 'AccountPerformance':
            obj_ = AccountPerformance.factory(parent_object_=self)
            obj_.build(child_)
            self.AccountPerformance = obj_
            obj_.original_tagname_ = 'AccountPerformance'
        elif nodeName_ == 'Repo':
            obj_ = Repo.factory(parent_object_=self)
            obj_.build(child_)
            self.Repo = obj_
            obj_.original_tagname_ = 'Repo'
        elif nodeName_ == 'TriPartyTrading':
            obj_ = TriPartyTrading.factory(parent_object_=self)
            obj_.build(child_)
            self.TriPartyTrading = obj_
            obj_.original_tagname_ = 'TriPartyTrading'
        elif nodeName_ == 'Meta':
            obj_ = Meta.factory(parent_object_=self)
            obj_.build(child_)
            self.Meta = obj_
            obj_.original_tagname_ = 'Meta'
        elif nodeName_ == 'DataUpdates':
            obj_ = DataUpdates.factory(parent_object_=self)
            obj_.build(child_)
            self.DataUpdates = obj_
            obj_.original_tagname_ = 'DataUpdates'
        elif nodeName_ == 'Message':
            obj_ = Message.factory(parent_object_=self)
            obj_.build(child_)
            self.Message = obj_
            obj_.original_tagname_ = 'Message'
# end class Response


class SOLA(GeneratedsSuper):
    """ETP, Index Mgmt and Dividends dataIncluded for code generation
    purposes - Please ignore."""
    subclass = None
    superclass = None
    def __init__(self, dummy=None, Dividends=None, Encyclopedia=None, ETF=None, Index=None, DividendPoints=None, License=None, Notification=None, Provider=None, Search=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.dummy = _cast(None, dummy)
        if Dividends is None:
            self.Dividends = []
        else:
            self.Dividends = Dividends
        if Encyclopedia is None:
            self.Encyclopedia = []
        else:
            self.Encyclopedia = Encyclopedia
        if ETF is None:
            self.ETF = []
        else:
            self.ETF = ETF
        if Index is None:
            self.Index = []
        else:
            self.Index = Index
        if DividendPoints is None:
            self.DividendPoints = []
        else:
            self.DividendPoints = DividendPoints
        if License is None:
            self.License = []
        else:
            self.License = License
        if Notification is None:
            self.Notification = []
        else:
            self.Notification = Notification
        if Provider is None:
            self.Provider = []
        else:
            self.Provider = Provider
        if Search is None:
            self.Search = []
        else:
            self.Search = Search
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SOLA)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SOLA.subclass:
            return SOLA.subclass(*args_, **kwargs_)
        else:
            return SOLA(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Dividends(self):
        return self.Dividends
    def set_Dividends(self, Dividends):
        self.Dividends = Dividends
    def add_Dividends(self, value):
        self.Dividends.append(value)
    def add_Dividends(self, value):
        self.Dividends.append(value)
    def insert_Dividends_at(self, index, value):
        self.Dividends.insert(index, value)
    def replace_Dividends_at(self, index, value):
        self.Dividends[index] = value
    def get_Encyclopedia(self):
        return self.Encyclopedia
    def set_Encyclopedia(self, Encyclopedia):
        self.Encyclopedia = Encyclopedia
    def add_Encyclopedia(self, value):
        self.Encyclopedia.append(value)
    def add_Encyclopedia(self, value):
        self.Encyclopedia.append(value)
    def insert_Encyclopedia_at(self, index, value):
        self.Encyclopedia.insert(index, value)
    def replace_Encyclopedia_at(self, index, value):
        self.Encyclopedia[index] = value
    def get_ETF(self):
        return self.ETF
    def set_ETF(self, ETF):
        self.ETF = ETF
    def add_ETF(self, value):
        self.ETF.append(value)
    def add_ETF(self, value):
        self.ETF.append(value)
    def insert_ETF_at(self, index, value):
        self.ETF.insert(index, value)
    def replace_ETF_at(self, index, value):
        self.ETF[index] = value
    def get_Index(self):
        return self.Index
    def set_Index(self, Index):
        self.Index = Index
    def add_Index(self, value):
        self.Index.append(value)
    def add_Index(self, value):
        self.Index.append(value)
    def insert_Index_at(self, index, value):
        self.Index.insert(index, value)
    def replace_Index_at(self, index, value):
        self.Index[index] = value
    def get_DividendPoints(self):
        return self.DividendPoints
    def set_DividendPoints(self, DividendPoints):
        self.DividendPoints = DividendPoints
    def add_DividendPoints(self, value):
        self.DividendPoints.append(value)
    def add_DividendPoints(self, value):
        self.DividendPoints.append(value)
    def insert_DividendPoints_at(self, index, value):
        self.DividendPoints.insert(index, value)
    def replace_DividendPoints_at(self, index, value):
        self.DividendPoints[index] = value
    def get_License(self):
        return self.License
    def set_License(self, License):
        self.License = License
    def add_License(self, value):
        self.License.append(value)
    def add_License(self, value):
        self.License.append(value)
    def insert_License_at(self, index, value):
        self.License.insert(index, value)
    def replace_License_at(self, index, value):
        self.License[index] = value
    def get_Notification(self):
        return self.Notification
    def set_Notification(self, Notification):
        self.Notification = Notification
    def add_Notification(self, value):
        self.Notification.append(value)
    def add_Notification(self, value):
        self.Notification.append(value)
    def insert_Notification_at(self, index, value):
        self.Notification.insert(index, value)
    def replace_Notification_at(self, index, value):
        self.Notification[index] = value
    def get_Provider(self):
        return self.Provider
    def set_Provider(self, Provider):
        self.Provider = Provider
    def add_Provider(self, value):
        self.Provider.append(value)
    def add_Provider(self, value):
        self.Provider.append(value)
    def insert_Provider_at(self, index, value):
        self.Provider.insert(index, value)
    def replace_Provider_at(self, index, value):
        self.Provider[index] = value
    def get_Search(self):
        return self.Search
    def set_Search(self, Search):
        self.Search = Search
    def add_Search(self, value):
        self.Search.append(value)
    def add_Search(self, value):
        self.Search.append(value)
    def insert_Search_at(self, index, value):
        self.Search.insert(index, value)
    def replace_Search_at(self, index, value):
        self.Search[index] = value
    def get_dummy(self):
        return self.dummy
    def set_dummy(self, dummy):
        self.dummy = dummy
    def hasContent_(self):
        if (
            self.Dividends or
            self.Encyclopedia or
            self.ETF or
            self.Index or
            self.DividendPoints or
            self.License or
            self.Notification or
            self.Provider or
            self.Search
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SOLA', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SOLA')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SOLA')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SOLA', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SOLA'):
        if self.dummy is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            outfile.write(' dummy=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dummy), input_name='dummy')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SOLA', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Dividends_ in self.Dividends:
            Dividends_.export(outfile, level, namespaceprefix_, name_='Dividends', pretty_print=pretty_print)
        for Encyclopedia_ in self.Encyclopedia:
            Encyclopedia_.export(outfile, level, namespaceprefix_, name_='Encyclopedia', pretty_print=pretty_print)
        for ETF_ in self.ETF:
            ETF_.export(outfile, level, namespaceprefix_, name_='ETF', pretty_print=pretty_print)
        for Index_ in self.Index:
            Index_.export(outfile, level, namespaceprefix_, name_='Index', pretty_print=pretty_print)
        for DividendPoints_ in self.DividendPoints:
            DividendPoints_.export(outfile, level, namespaceprefix_, name_='DividendPoints', pretty_print=pretty_print)
        for License_ in self.License:
            License_.export(outfile, level, namespaceprefix_, name_='License', pretty_print=pretty_print)
        for Notification_ in self.Notification:
            Notification_.export(outfile, level, namespaceprefix_, name_='Notification', pretty_print=pretty_print)
        for Provider_ in self.Provider:
            Provider_.export(outfile, level, namespaceprefix_, name_='Provider', pretty_print=pretty_print)
        for Search_ in self.Search:
            Search_.export(outfile, level, namespaceprefix_, name_='Search', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dummy', node)
        if value is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            self.dummy = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Dividends':
            obj_ = DividendsType.factory(parent_object_=self)
            obj_.build(child_)
            self.Dividends.append(obj_)
            obj_.original_tagname_ = 'Dividends'
        elif nodeName_ == 'Encyclopedia':
            obj_ = EncyclopediaType.factory(parent_object_=self)
            obj_.build(child_)
            self.Encyclopedia.append(obj_)
            obj_.original_tagname_ = 'Encyclopedia'
        elif nodeName_ == 'ETF':
            obj_ = ETFType.factory(parent_object_=self)
            obj_.build(child_)
            self.ETF.append(obj_)
            obj_.original_tagname_ = 'ETF'
        elif nodeName_ == 'Index':
            obj_ = IndexType.factory(parent_object_=self)
            obj_.build(child_)
            self.Index.append(obj_)
            obj_.original_tagname_ = 'Index'
        elif nodeName_ == 'DividendPoints':
            obj_ = DividendPointsType.factory(parent_object_=self)
            obj_.build(child_)
            self.DividendPoints.append(obj_)
            obj_.original_tagname_ = 'DividendPoints'
        elif nodeName_ == 'License':
            obj_ = LicenseType.factory(parent_object_=self)
            obj_.build(child_)
            self.License.append(obj_)
            obj_.original_tagname_ = 'License'
        elif nodeName_ == 'Notification':
            obj_ = NotificationType16.factory(parent_object_=self)
            obj_.build(child_)
            self.Notification.append(obj_)
            obj_.original_tagname_ = 'Notification'
        elif nodeName_ == 'Provider':
            obj_ = ProviderType.factory(parent_object_=self)
            obj_.build(child_)
            self.Provider.append(obj_)
            obj_.original_tagname_ = 'Provider'
        elif nodeName_ == 'Search':
            obj_ = SearchType.factory(parent_object_=self)
            obj_.build(child_)
            self.Search.append(obj_)
            obj_.original_tagname_ = 'Search'
# end class SOLA


class ResearchSignals(GeneratedsSuper):
    """Research Signals DataIncluded for code generation purposes - Please
    ignore."""
    subclass = None
    superclass = None
    def __init__(self, dummy=None, ShortSqueeze=None, RankedInstrument=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.dummy = _cast(None, dummy)
        if ShortSqueeze is None:
            self.ShortSqueeze = []
        else:
            self.ShortSqueeze = ShortSqueeze
        if RankedInstrument is None:
            self.RankedInstrument = []
        else:
            self.RankedInstrument = RankedInstrument
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ResearchSignals)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ResearchSignals.subclass:
            return ResearchSignals.subclass(*args_, **kwargs_)
        else:
            return ResearchSignals(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ShortSqueeze(self):
        return self.ShortSqueeze
    def set_ShortSqueeze(self, ShortSqueeze):
        self.ShortSqueeze = ShortSqueeze
    def add_ShortSqueeze(self, value):
        self.ShortSqueeze.append(value)
    def add_ShortSqueeze(self, value):
        self.ShortSqueeze.append(value)
    def insert_ShortSqueeze_at(self, index, value):
        self.ShortSqueeze.insert(index, value)
    def replace_ShortSqueeze_at(self, index, value):
        self.ShortSqueeze[index] = value
    def get_RankedInstrument(self):
        return self.RankedInstrument
    def set_RankedInstrument(self, RankedInstrument):
        self.RankedInstrument = RankedInstrument
    def add_RankedInstrument(self, value):
        self.RankedInstrument.append(value)
    def add_RankedInstrument(self, value):
        self.RankedInstrument.append(value)
    def insert_RankedInstrument_at(self, index, value):
        self.RankedInstrument.insert(index, value)
    def replace_RankedInstrument_at(self, index, value):
        self.RankedInstrument[index] = value
    def get_dummy(self):
        return self.dummy
    def set_dummy(self, dummy):
        self.dummy = dummy
    def hasContent_(self):
        if (
            self.ShortSqueeze or
            self.RankedInstrument
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ResearchSignals', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ResearchSignals')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ResearchSignals')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ResearchSignals', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ResearchSignals'):
        if self.dummy is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            outfile.write(' dummy=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dummy), input_name='dummy')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ResearchSignals', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ShortSqueeze_ in self.ShortSqueeze:
            ShortSqueeze_.export(outfile, level, namespaceprefix_, name_='ShortSqueeze', pretty_print=pretty_print)
        for RankedInstrument_ in self.RankedInstrument:
            RankedInstrument_.export(outfile, level, namespaceprefix_, name_='RankedInstrument', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dummy', node)
        if value is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            self.dummy = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ShortSqueeze':
            obj_ = ShortSqueezeType.factory(parent_object_=self)
            obj_.build(child_)
            self.ShortSqueeze.append(obj_)
            obj_.original_tagname_ = 'ShortSqueeze'
        elif nodeName_ == 'RankedInstrument':
            obj_ = RankedInstrument.factory(parent_object_=self)
            obj_.build(child_)
            self.RankedInstrument.append(obj_)
            obj_.original_tagname_ = 'RankedInstrument'
# end class ResearchSignals


class Collateral(GeneratedsSuper):
    """CollateralIncluded for code generation purposes - Please ignore."""
    subclass = None
    superclass = None
    def __init__(self, dummy=None, InstrumentDetail=None, MarketDetail=None, CounterpartDetail=None, RankedInstrument=None, RankedCounterpart=None, Transaction=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.dummy = _cast(None, dummy)
        if InstrumentDetail is None:
            self.InstrumentDetail = []
        else:
            self.InstrumentDetail = InstrumentDetail
        if MarketDetail is None:
            self.MarketDetail = []
        else:
            self.MarketDetail = MarketDetail
        if CounterpartDetail is None:
            self.CounterpartDetail = []
        else:
            self.CounterpartDetail = CounterpartDetail
        if RankedInstrument is None:
            self.RankedInstrument = []
        else:
            self.RankedInstrument = RankedInstrument
        if RankedCounterpart is None:
            self.RankedCounterpart = []
        else:
            self.RankedCounterpart = RankedCounterpart
        if Transaction is None:
            self.Transaction = []
        else:
            self.Transaction = Transaction
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Collateral)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Collateral.subclass:
            return Collateral.subclass(*args_, **kwargs_)
        else:
            return Collateral(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_InstrumentDetail(self):
        return self.InstrumentDetail
    def set_InstrumentDetail(self, InstrumentDetail):
        self.InstrumentDetail = InstrumentDetail
    def add_InstrumentDetail(self, value):
        self.InstrumentDetail.append(value)
    def add_InstrumentDetail(self, value):
        self.InstrumentDetail.append(value)
    def insert_InstrumentDetail_at(self, index, value):
        self.InstrumentDetail.insert(index, value)
    def replace_InstrumentDetail_at(self, index, value):
        self.InstrumentDetail[index] = value
    def get_MarketDetail(self):
        return self.MarketDetail
    def set_MarketDetail(self, MarketDetail):
        self.MarketDetail = MarketDetail
    def add_MarketDetail(self, value):
        self.MarketDetail.append(value)
    def add_MarketDetail(self, value):
        self.MarketDetail.append(value)
    def insert_MarketDetail_at(self, index, value):
        self.MarketDetail.insert(index, value)
    def replace_MarketDetail_at(self, index, value):
        self.MarketDetail[index] = value
    def get_CounterpartDetail(self):
        return self.CounterpartDetail
    def set_CounterpartDetail(self, CounterpartDetail):
        self.CounterpartDetail = CounterpartDetail
    def add_CounterpartDetail(self, value):
        self.CounterpartDetail.append(value)
    def add_CounterpartDetail(self, value):
        self.CounterpartDetail.append(value)
    def insert_CounterpartDetail_at(self, index, value):
        self.CounterpartDetail.insert(index, value)
    def replace_CounterpartDetail_at(self, index, value):
        self.CounterpartDetail[index] = value
    def get_RankedInstrument(self):
        return self.RankedInstrument
    def set_RankedInstrument(self, RankedInstrument):
        self.RankedInstrument = RankedInstrument
    def add_RankedInstrument(self, value):
        self.RankedInstrument.append(value)
    def add_RankedInstrument(self, value):
        self.RankedInstrument.append(value)
    def insert_RankedInstrument_at(self, index, value):
        self.RankedInstrument.insert(index, value)
    def replace_RankedInstrument_at(self, index, value):
        self.RankedInstrument[index] = value
    def get_RankedCounterpart(self):
        return self.RankedCounterpart
    def set_RankedCounterpart(self, RankedCounterpart):
        self.RankedCounterpart = RankedCounterpart
    def add_RankedCounterpart(self, value):
        self.RankedCounterpart.append(value)
    def add_RankedCounterpart(self, value):
        self.RankedCounterpart.append(value)
    def insert_RankedCounterpart_at(self, index, value):
        self.RankedCounterpart.insert(index, value)
    def replace_RankedCounterpart_at(self, index, value):
        self.RankedCounterpart[index] = value
    def get_Transaction(self):
        return self.Transaction
    def set_Transaction(self, Transaction):
        self.Transaction = Transaction
    def add_Transaction(self, value):
        self.Transaction.append(value)
    def add_Transaction(self, value):
        self.Transaction.append(value)
    def insert_Transaction_at(self, index, value):
        self.Transaction.insert(index, value)
    def replace_Transaction_at(self, index, value):
        self.Transaction[index] = value
    def get_dummy(self):
        return self.dummy
    def set_dummy(self, dummy):
        self.dummy = dummy
    def hasContent_(self):
        if (
            self.InstrumentDetail or
            self.MarketDetail or
            self.CounterpartDetail or
            self.RankedInstrument or
            self.RankedCounterpart or
            self.Transaction
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Collateral', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Collateral')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Collateral')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Collateral', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Collateral'):
        if self.dummy is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            outfile.write(' dummy=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dummy), input_name='dummy')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Collateral', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for InstrumentDetail_ in self.InstrumentDetail:
            InstrumentDetail_.export(outfile, level, namespaceprefix_, name_='InstrumentDetail', pretty_print=pretty_print)
        for MarketDetail_ in self.MarketDetail:
            MarketDetail_.export(outfile, level, namespaceprefix_, name_='MarketDetail', pretty_print=pretty_print)
        for CounterpartDetail_ in self.CounterpartDetail:
            CounterpartDetail_.export(outfile, level, namespaceprefix_, name_='CounterpartDetail', pretty_print=pretty_print)
        for RankedInstrument_ in self.RankedInstrument:
            RankedInstrument_.export(outfile, level, namespaceprefix_, name_='RankedInstrument', pretty_print=pretty_print)
        for RankedCounterpart_ in self.RankedCounterpart:
            RankedCounterpart_.export(outfile, level, namespaceprefix_, name_='RankedCounterpart', pretty_print=pretty_print)
        for Transaction_ in self.Transaction:
            Transaction_.export(outfile, level, namespaceprefix_, name_='Transaction', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dummy', node)
        if value is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            self.dummy = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'InstrumentDetail':
            obj_ = InstrumentDetailType.factory(parent_object_=self)
            obj_.build(child_)
            self.InstrumentDetail.append(obj_)
            obj_.original_tagname_ = 'InstrumentDetail'
        elif nodeName_ == 'MarketDetail':
            obj_ = MarketDetailType.factory(parent_object_=self)
            obj_.build(child_)
            self.MarketDetail.append(obj_)
            obj_.original_tagname_ = 'MarketDetail'
        elif nodeName_ == 'CounterpartDetail':
            obj_ = CounterpartDetailType.factory(parent_object_=self)
            obj_.build(child_)
            self.CounterpartDetail.append(obj_)
            obj_.original_tagname_ = 'CounterpartDetail'
        elif nodeName_ == 'RankedInstrument':
            obj_ = RankedInstrumentType.factory(parent_object_=self)
            obj_.build(child_)
            self.RankedInstrument.append(obj_)
            obj_.original_tagname_ = 'RankedInstrument'
        elif nodeName_ == 'RankedCounterpart':
            obj_ = RankedCounterpartType.factory(parent_object_=self)
            obj_.build(child_)
            self.RankedCounterpart.append(obj_)
            obj_.original_tagname_ = 'RankedCounterpart'
        elif nodeName_ == 'Transaction':
            obj_ = TransactionType.factory(parent_object_=self)
            obj_.build(child_)
            self.Transaction.append(obj_)
            obj_.original_tagname_ = 'Transaction'
# end class Collateral


class DataFeed(GeneratedsSuper):
    """Data FeedIncluded for code generation purposes - Please ignore."""
    subclass = None
    superclass = None
    def __init__(self, dummy=None, DataSource=None, DataFeedStatus=None, PeerGroup=None, DataRun=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.dummy = _cast(None, dummy)
        if DataSource is None:
            self.DataSource = []
        else:
            self.DataSource = DataSource
        if DataFeedStatus is None:
            self.DataFeedStatus = []
        else:
            self.DataFeedStatus = DataFeedStatus
        if PeerGroup is None:
            self.PeerGroup = []
        else:
            self.PeerGroup = PeerGroup
        if DataRun is None:
            self.DataRun = []
        else:
            self.DataRun = DataRun
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataFeed)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataFeed.subclass:
            return DataFeed.subclass(*args_, **kwargs_)
        else:
            return DataFeed(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataSource(self):
        return self.DataSource
    def set_DataSource(self, DataSource):
        self.DataSource = DataSource
    def add_DataSource(self, value):
        self.DataSource.append(value)
    def add_DataSource(self, value):
        self.DataSource.append(value)
    def insert_DataSource_at(self, index, value):
        self.DataSource.insert(index, value)
    def replace_DataSource_at(self, index, value):
        self.DataSource[index] = value
    def get_DataFeedStatus(self):
        return self.DataFeedStatus
    def set_DataFeedStatus(self, DataFeedStatus):
        self.DataFeedStatus = DataFeedStatus
    def add_DataFeedStatus(self, value):
        self.DataFeedStatus.append(value)
    def add_DataFeedStatus(self, value):
        self.DataFeedStatus.append(value)
    def insert_DataFeedStatus_at(self, index, value):
        self.DataFeedStatus.insert(index, value)
    def replace_DataFeedStatus_at(self, index, value):
        self.DataFeedStatus[index] = value
    def get_PeerGroup(self):
        return self.PeerGroup
    def set_PeerGroup(self, PeerGroup):
        self.PeerGroup = PeerGroup
    def add_PeerGroup(self, value):
        self.PeerGroup.append(value)
    def add_PeerGroup(self, value):
        self.PeerGroup.append(value)
    def insert_PeerGroup_at(self, index, value):
        self.PeerGroup.insert(index, value)
    def replace_PeerGroup_at(self, index, value):
        self.PeerGroup[index] = value
    def get_DataRun(self):
        return self.DataRun
    def set_DataRun(self, DataRun):
        self.DataRun = DataRun
    def add_DataRun(self, value):
        self.DataRun.append(value)
    def add_DataRun(self, value):
        self.DataRun.append(value)
    def insert_DataRun_at(self, index, value):
        self.DataRun.insert(index, value)
    def replace_DataRun_at(self, index, value):
        self.DataRun[index] = value
    def get_dummy(self):
        return self.dummy
    def set_dummy(self, dummy):
        self.dummy = dummy
    def hasContent_(self):
        if (
            self.DataSource or
            self.DataFeedStatus or
            self.PeerGroup or
            self.DataRun
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataFeed', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataFeed')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataFeed')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataFeed', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataFeed'):
        if self.dummy is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            outfile.write(' dummy=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dummy), input_name='dummy')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataFeed', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataSource_ in self.DataSource:
            DataSource_.export(outfile, level, namespaceprefix_, name_='DataSource', pretty_print=pretty_print)
        for DataFeedStatus_ in self.DataFeedStatus:
            DataFeedStatus_.export(outfile, level, namespaceprefix_, name_='DataFeedStatus', pretty_print=pretty_print)
        for PeerGroup_ in self.PeerGroup:
            PeerGroup_.export(outfile, level, namespaceprefix_, name_='PeerGroup', pretty_print=pretty_print)
        for DataRun_ in self.DataRun:
            DataRun_.export(outfile, level, namespaceprefix_, name_='DataRun', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dummy', node)
        if value is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            self.dummy = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataSource':
            obj_ = DataSourceType.factory(parent_object_=self)
            obj_.build(child_)
            self.DataSource.append(obj_)
            obj_.original_tagname_ = 'DataSource'
        elif nodeName_ == 'DataFeedStatus':
            obj_ = DataFeedStatusType.factory(parent_object_=self)
            obj_.build(child_)
            self.DataFeedStatus.append(obj_)
            obj_.original_tagname_ = 'DataFeedStatus'
        elif nodeName_ == 'PeerGroup':
            obj_ = PeerGroupType.factory(parent_object_=self)
            obj_.build(child_)
            self.PeerGroup.append(obj_)
            obj_.original_tagname_ = 'PeerGroup'
        elif nodeName_ == 'DataRun':
            obj_ = DataRunType.factory(parent_object_=self)
            obj_.build(child_)
            self.DataRun.append(obj_)
            obj_.original_tagname_ = 'DataRun'
# end class DataFeed


class BenchmarkPerformance(GeneratedsSuper):
    """Benchmark PerformanceIncluded for code generation purposes - Please
    ignore."""
    subclass = None
    superclass = None
    def __init__(self, dummy=None, CounterpartDetail=None, InstrumentDetail=None, MarketDetail=None, RankedCounterpart=None, RankedFund=None, RankedInstrument=None, FilterDefinition=None, AccountDetail=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.dummy = _cast(None, dummy)
        if CounterpartDetail is None:
            self.CounterpartDetail = []
        else:
            self.CounterpartDetail = CounterpartDetail
        if InstrumentDetail is None:
            self.InstrumentDetail = []
        else:
            self.InstrumentDetail = InstrumentDetail
        if MarketDetail is None:
            self.MarketDetail = []
        else:
            self.MarketDetail = MarketDetail
        if RankedCounterpart is None:
            self.RankedCounterpart = []
        else:
            self.RankedCounterpart = RankedCounterpart
        if RankedFund is None:
            self.RankedFund = []
        else:
            self.RankedFund = RankedFund
        if RankedInstrument is None:
            self.RankedInstrument = []
        else:
            self.RankedInstrument = RankedInstrument
        if FilterDefinition is None:
            self.FilterDefinition = []
        else:
            self.FilterDefinition = FilterDefinition
        if AccountDetail is None:
            self.AccountDetail = []
        else:
            self.AccountDetail = AccountDetail
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BenchmarkPerformance)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BenchmarkPerformance.subclass:
            return BenchmarkPerformance.subclass(*args_, **kwargs_)
        else:
            return BenchmarkPerformance(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CounterpartDetail(self):
        return self.CounterpartDetail
    def set_CounterpartDetail(self, CounterpartDetail):
        self.CounterpartDetail = CounterpartDetail
    def add_CounterpartDetail(self, value):
        self.CounterpartDetail.append(value)
    def add_CounterpartDetail(self, value):
        self.CounterpartDetail.append(value)
    def insert_CounterpartDetail_at(self, index, value):
        self.CounterpartDetail.insert(index, value)
    def replace_CounterpartDetail_at(self, index, value):
        self.CounterpartDetail[index] = value
    def get_InstrumentDetail(self):
        return self.InstrumentDetail
    def set_InstrumentDetail(self, InstrumentDetail):
        self.InstrumentDetail = InstrumentDetail
    def add_InstrumentDetail(self, value):
        self.InstrumentDetail.append(value)
    def add_InstrumentDetail(self, value):
        self.InstrumentDetail.append(value)
    def insert_InstrumentDetail_at(self, index, value):
        self.InstrumentDetail.insert(index, value)
    def replace_InstrumentDetail_at(self, index, value):
        self.InstrumentDetail[index] = value
    def get_MarketDetail(self):
        return self.MarketDetail
    def set_MarketDetail(self, MarketDetail):
        self.MarketDetail = MarketDetail
    def add_MarketDetail(self, value):
        self.MarketDetail.append(value)
    def add_MarketDetail(self, value):
        self.MarketDetail.append(value)
    def insert_MarketDetail_at(self, index, value):
        self.MarketDetail.insert(index, value)
    def replace_MarketDetail_at(self, index, value):
        self.MarketDetail[index] = value
    def get_RankedCounterpart(self):
        return self.RankedCounterpart
    def set_RankedCounterpart(self, RankedCounterpart):
        self.RankedCounterpart = RankedCounterpart
    def add_RankedCounterpart(self, value):
        self.RankedCounterpart.append(value)
    def add_RankedCounterpart(self, value):
        self.RankedCounterpart.append(value)
    def insert_RankedCounterpart_at(self, index, value):
        self.RankedCounterpart.insert(index, value)
    def replace_RankedCounterpart_at(self, index, value):
        self.RankedCounterpart[index] = value
    def get_RankedFund(self):
        return self.RankedFund
    def set_RankedFund(self, RankedFund):
        self.RankedFund = RankedFund
    def add_RankedFund(self, value):
        self.RankedFund.append(value)
    def add_RankedFund(self, value):
        self.RankedFund.append(value)
    def insert_RankedFund_at(self, index, value):
        self.RankedFund.insert(index, value)
    def replace_RankedFund_at(self, index, value):
        self.RankedFund[index] = value
    def get_RankedInstrument(self):
        return self.RankedInstrument
    def set_RankedInstrument(self, RankedInstrument):
        self.RankedInstrument = RankedInstrument
    def add_RankedInstrument(self, value):
        self.RankedInstrument.append(value)
    def add_RankedInstrument(self, value):
        self.RankedInstrument.append(value)
    def insert_RankedInstrument_at(self, index, value):
        self.RankedInstrument.insert(index, value)
    def replace_RankedInstrument_at(self, index, value):
        self.RankedInstrument[index] = value
    def get_FilterDefinition(self):
        return self.FilterDefinition
    def set_FilterDefinition(self, FilterDefinition):
        self.FilterDefinition = FilterDefinition
    def add_FilterDefinition(self, value):
        self.FilterDefinition.append(value)
    def add_FilterDefinition(self, value):
        self.FilterDefinition.append(value)
    def insert_FilterDefinition_at(self, index, value):
        self.FilterDefinition.insert(index, value)
    def replace_FilterDefinition_at(self, index, value):
        self.FilterDefinition[index] = value
    def get_AccountDetail(self):
        return self.AccountDetail
    def set_AccountDetail(self, AccountDetail):
        self.AccountDetail = AccountDetail
    def add_AccountDetail(self, value):
        self.AccountDetail.append(value)
    def add_AccountDetail(self, value):
        self.AccountDetail.append(value)
    def insert_AccountDetail_at(self, index, value):
        self.AccountDetail.insert(index, value)
    def replace_AccountDetail_at(self, index, value):
        self.AccountDetail[index] = value
    def get_dummy(self):
        return self.dummy
    def set_dummy(self, dummy):
        self.dummy = dummy
    def hasContent_(self):
        if (
            self.CounterpartDetail or
            self.InstrumentDetail or
            self.MarketDetail or
            self.RankedCounterpart or
            self.RankedFund or
            self.RankedInstrument or
            self.FilterDefinition or
            self.AccountDetail
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BenchmarkPerformance', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BenchmarkPerformance')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BenchmarkPerformance')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BenchmarkPerformance', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BenchmarkPerformance'):
        if self.dummy is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            outfile.write(' dummy=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dummy), input_name='dummy')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BenchmarkPerformance', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for CounterpartDetail_ in self.CounterpartDetail:
            CounterpartDetail_.export(outfile, level, namespaceprefix_, name_='CounterpartDetail', pretty_print=pretty_print)
        for InstrumentDetail_ in self.InstrumentDetail:
            InstrumentDetail_.export(outfile, level, namespaceprefix_, name_='InstrumentDetail', pretty_print=pretty_print)
        for MarketDetail_ in self.MarketDetail:
            MarketDetail_.export(outfile, level, namespaceprefix_, name_='MarketDetail', pretty_print=pretty_print)
        for RankedCounterpart_ in self.RankedCounterpart:
            RankedCounterpart_.export(outfile, level, namespaceprefix_, name_='RankedCounterpart', pretty_print=pretty_print)
        for RankedFund_ in self.RankedFund:
            RankedFund_.export(outfile, level, namespaceprefix_, name_='RankedFund', pretty_print=pretty_print)
        for RankedInstrument_ in self.RankedInstrument:
            RankedInstrument_.export(outfile, level, namespaceprefix_, name_='RankedInstrument', pretty_print=pretty_print)
        for FilterDefinition_ in self.FilterDefinition:
            FilterDefinition_.export(outfile, level, namespaceprefix_, name_='FilterDefinition', pretty_print=pretty_print)
        for AccountDetail_ in self.AccountDetail:
            AccountDetail_.export(outfile, level, namespaceprefix_, name_='AccountDetail', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dummy', node)
        if value is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            self.dummy = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CounterpartDetail':
            obj_ = CounterpartDetailType45.factory(parent_object_=self)
            obj_.build(child_)
            self.CounterpartDetail.append(obj_)
            obj_.original_tagname_ = 'CounterpartDetail'
        elif nodeName_ == 'InstrumentDetail':
            obj_ = InstrumentDetailType48.factory(parent_object_=self)
            obj_.build(child_)
            self.InstrumentDetail.append(obj_)
            obj_.original_tagname_ = 'InstrumentDetail'
        elif nodeName_ == 'MarketDetail':
            obj_ = MarketDetailType55.factory(parent_object_=self)
            obj_.build(child_)
            self.MarketDetail.append(obj_)
            obj_.original_tagname_ = 'MarketDetail'
        elif nodeName_ == 'RankedCounterpart':
            obj_ = RankedCounterpartType62.factory(parent_object_=self)
            obj_.build(child_)
            self.RankedCounterpart.append(obj_)
            obj_.original_tagname_ = 'RankedCounterpart'
        elif nodeName_ == 'RankedFund':
            obj_ = RankedFundType.factory(parent_object_=self)
            obj_.build(child_)
            self.RankedFund.append(obj_)
            obj_.original_tagname_ = 'RankedFund'
        elif nodeName_ == 'RankedInstrument':
            obj_ = RankedInstrumentType67.factory(parent_object_=self)
            obj_.build(child_)
            self.RankedInstrument.append(obj_)
            obj_.original_tagname_ = 'RankedInstrument'
        elif nodeName_ == 'FilterDefinition':
            obj_ = FilterDefinitionType.factory(parent_object_=self)
            obj_.build(child_)
            self.FilterDefinition.append(obj_)
            obj_.original_tagname_ = 'FilterDefinition'
        elif nodeName_ == 'AccountDetail':
            obj_ = AccountDetailType.factory(parent_object_=self)
            obj_.build(child_)
            self.AccountDetail.append(obj_)
            obj_.original_tagname_ = 'AccountDetail'
# end class BenchmarkPerformance


class Screen(GeneratedsSuper):
    """Screening dataIncluded for code generation purposes - Please ignore."""
    subclass = None
    superclass = None
    def __init__(self, dummy=None, Instrument=None, InstrumentDistribution=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.dummy = _cast(None, dummy)
        if Instrument is None:
            self.Instrument = []
        else:
            self.Instrument = Instrument
        if InstrumentDistribution is None:
            self.InstrumentDistribution = []
        else:
            self.InstrumentDistribution = InstrumentDistribution
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Screen)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Screen.subclass:
            return Screen.subclass(*args_, **kwargs_)
        else:
            return Screen(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Instrument(self):
        return self.Instrument
    def set_Instrument(self, Instrument):
        self.Instrument = Instrument
    def add_Instrument(self, value):
        self.Instrument.append(value)
    def add_Instrument(self, value):
        self.Instrument.append(value)
    def insert_Instrument_at(self, index, value):
        self.Instrument.insert(index, value)
    def replace_Instrument_at(self, index, value):
        self.Instrument[index] = value
    def get_InstrumentDistribution(self):
        return self.InstrumentDistribution
    def set_InstrumentDistribution(self, InstrumentDistribution):
        self.InstrumentDistribution = InstrumentDistribution
    def add_InstrumentDistribution(self, value):
        self.InstrumentDistribution.append(value)
    def add_InstrumentDistribution(self, value):
        self.InstrumentDistribution.append(value)
    def insert_InstrumentDistribution_at(self, index, value):
        self.InstrumentDistribution.insert(index, value)
    def replace_InstrumentDistribution_at(self, index, value):
        self.InstrumentDistribution[index] = value
    def get_dummy(self):
        return self.dummy
    def set_dummy(self, dummy):
        self.dummy = dummy
    def hasContent_(self):
        if (
            self.Instrument or
            self.InstrumentDistribution
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Screen', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Screen')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Screen')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Screen', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Screen'):
        if self.dummy is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            outfile.write(' dummy=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dummy), input_name='dummy')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Screen', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Instrument_ in self.Instrument:
            Instrument_.export(outfile, level, namespaceprefix_, name_='Instrument', pretty_print=pretty_print)
        for InstrumentDistribution_ in self.InstrumentDistribution:
            InstrumentDistribution_.export(outfile, level, namespaceprefix_, name_='InstrumentDistribution', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dummy', node)
        if value is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            self.dummy = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Instrument':
            obj_ = InstrumentType74.factory(parent_object_=self)
            obj_.build(child_)
            self.Instrument.append(obj_)
            obj_.original_tagname_ = 'Instrument'
        elif nodeName_ == 'InstrumentDistribution':
            obj_ = InstrumentDistributionType.factory(parent_object_=self)
            obj_.build(child_)
            self.InstrumentDistribution.append(obj_)
            obj_.original_tagname_ = 'InstrumentDistribution'
# end class Screen


class BondPricing(GeneratedsSuper):
    """Bond PricingIncluded for code generation purposes - Please ignore."""
    subclass = None
    superclass = None
    def __init__(self, dummy=None, BondPricingDetail=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.dummy = _cast(None, dummy)
        if BondPricingDetail is None:
            self.BondPricingDetail = []
        else:
            self.BondPricingDetail = BondPricingDetail
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BondPricing)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BondPricing.subclass:
            return BondPricing.subclass(*args_, **kwargs_)
        else:
            return BondPricing(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BondPricingDetail(self):
        return self.BondPricingDetail
    def set_BondPricingDetail(self, BondPricingDetail):
        self.BondPricingDetail = BondPricingDetail
    def add_BondPricingDetail(self, value):
        self.BondPricingDetail.append(value)
    def add_BondPricingDetail(self, value):
        self.BondPricingDetail.append(value)
    def insert_BondPricingDetail_at(self, index, value):
        self.BondPricingDetail.insert(index, value)
    def replace_BondPricingDetail_at(self, index, value):
        self.BondPricingDetail[index] = value
    def get_dummy(self):
        return self.dummy
    def set_dummy(self, dummy):
        self.dummy = dummy
    def hasContent_(self):
        if (
            self.BondPricingDetail
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BondPricing', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BondPricing')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BondPricing')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BondPricing', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BondPricing'):
        if self.dummy is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            outfile.write(' dummy=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dummy), input_name='dummy')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BondPricing', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for BondPricingDetail_ in self.BondPricingDetail:
            BondPricingDetail_.export(outfile, level, namespaceprefix_, name_='BondPricingDetail', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dummy', node)
        if value is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            self.dummy = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BondPricingDetail':
            obj_ = BondPricingDetail.factory(parent_object_=self)
            obj_.build(child_)
            self.BondPricingDetail.append(obj_)
            obj_.original_tagname_ = 'BondPricingDetail'
# end class BondPricing


class Dividend(GeneratedsSuper):
    """Markit dividend dataIncluded for code generation purposes - Please
    ignore."""
    subclass = None
    superclass = None
    def __init__(self, dummy=None, DividendDetail=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.dummy = _cast(None, dummy)
        if DividendDetail is None:
            self.DividendDetail = []
        else:
            self.DividendDetail = DividendDetail
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Dividend)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Dividend.subclass:
            return Dividend.subclass(*args_, **kwargs_)
        else:
            return Dividend(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DividendDetail(self):
        return self.DividendDetail
    def set_DividendDetail(self, DividendDetail):
        self.DividendDetail = DividendDetail
    def add_DividendDetail(self, value):
        self.DividendDetail.append(value)
    def add_DividendDetail(self, value):
        self.DividendDetail.append(value)
    def insert_DividendDetail_at(self, index, value):
        self.DividendDetail.insert(index, value)
    def replace_DividendDetail_at(self, index, value):
        self.DividendDetail[index] = value
    def get_dummy(self):
        return self.dummy
    def set_dummy(self, dummy):
        self.dummy = dummy
    def hasContent_(self):
        if (
            self.DividendDetail
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Dividend', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Dividend')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Dividend')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Dividend', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Dividend'):
        if self.dummy is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            outfile.write(' dummy=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dummy), input_name='dummy')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Dividend', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DividendDetail_ in self.DividendDetail:
            DividendDetail_.export(outfile, level, namespaceprefix_, name_='DividendDetail', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dummy', node)
        if value is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            self.dummy = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DividendDetail':
            obj_ = DividendDetail.factory(parent_object_=self)
            obj_.build(child_)
            self.DividendDetail.append(obj_)
            obj_.original_tagname_ = 'DividendDetail'
# end class Dividend


class DIME(GeneratedsSuper):
    """ETP, Index Mgmt and Dividends dataIncluded for code generation
    purposes - Please ignore."""
    subclass = None
    superclass = None
    def __init__(self, dummy=None, Asset=None, Calculation=None, Dividend=None, ETPEncyclopaedia=None, ETPComposition=None, Exchange=None, Cluster=None, InstrumentSummary=None, Stock=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.dummy = _cast(None, dummy)
        if Asset is None:
            self.Asset = []
        else:
            self.Asset = Asset
        if Calculation is None:
            self.Calculation = []
        else:
            self.Calculation = Calculation
        if Dividend is None:
            self.Dividend = []
        else:
            self.Dividend = Dividend
        if ETPEncyclopaedia is None:
            self.ETPEncyclopaedia = []
        else:
            self.ETPEncyclopaedia = ETPEncyclopaedia
        if ETPComposition is None:
            self.ETPComposition = []
        else:
            self.ETPComposition = ETPComposition
        if Exchange is None:
            self.Exchange = []
        else:
            self.Exchange = Exchange
        if Cluster is None:
            self.Cluster = []
        else:
            self.Cluster = Cluster
        if InstrumentSummary is None:
            self.InstrumentSummary = []
        else:
            self.InstrumentSummary = InstrumentSummary
        if Stock is None:
            self.Stock = []
        else:
            self.Stock = Stock
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DIME)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DIME.subclass:
            return DIME.subclass(*args_, **kwargs_)
        else:
            return DIME(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Asset(self):
        return self.Asset
    def set_Asset(self, Asset):
        self.Asset = Asset
    def add_Asset(self, value):
        self.Asset.append(value)
    def add_Asset(self, value):
        self.Asset.append(value)
    def insert_Asset_at(self, index, value):
        self.Asset.insert(index, value)
    def replace_Asset_at(self, index, value):
        self.Asset[index] = value
    def get_Calculation(self):
        return self.Calculation
    def set_Calculation(self, Calculation):
        self.Calculation = Calculation
    def add_Calculation(self, value):
        self.Calculation.append(value)
    def add_Calculation(self, value):
        self.Calculation.append(value)
    def insert_Calculation_at(self, index, value):
        self.Calculation.insert(index, value)
    def replace_Calculation_at(self, index, value):
        self.Calculation[index] = value
    def get_Dividend(self):
        return self.Dividend
    def set_Dividend(self, Dividend):
        self.Dividend = Dividend
    def add_Dividend(self, value):
        self.Dividend.append(value)
    def add_Dividend(self, value):
        self.Dividend.append(value)
    def insert_Dividend_at(self, index, value):
        self.Dividend.insert(index, value)
    def replace_Dividend_at(self, index, value):
        self.Dividend[index] = value
    def get_ETPEncyclopaedia(self):
        return self.ETPEncyclopaedia
    def set_ETPEncyclopaedia(self, ETPEncyclopaedia):
        self.ETPEncyclopaedia = ETPEncyclopaedia
    def add_ETPEncyclopaedia(self, value):
        self.ETPEncyclopaedia.append(value)
    def add_ETPEncyclopaedia(self, value):
        self.ETPEncyclopaedia.append(value)
    def insert_ETPEncyclopaedia_at(self, index, value):
        self.ETPEncyclopaedia.insert(index, value)
    def replace_ETPEncyclopaedia_at(self, index, value):
        self.ETPEncyclopaedia[index] = value
    def get_ETPComposition(self):
        return self.ETPComposition
    def set_ETPComposition(self, ETPComposition):
        self.ETPComposition = ETPComposition
    def add_ETPComposition(self, value):
        self.ETPComposition.append(value)
    def add_ETPComposition(self, value):
        self.ETPComposition.append(value)
    def insert_ETPComposition_at(self, index, value):
        self.ETPComposition.insert(index, value)
    def replace_ETPComposition_at(self, index, value):
        self.ETPComposition[index] = value
    def get_Exchange(self):
        return self.Exchange
    def set_Exchange(self, Exchange):
        self.Exchange = Exchange
    def add_Exchange(self, value):
        self.Exchange.append(value)
    def add_Exchange(self, value):
        self.Exchange.append(value)
    def insert_Exchange_at(self, index, value):
        self.Exchange.insert(index, value)
    def replace_Exchange_at(self, index, value):
        self.Exchange[index] = value
    def get_Cluster(self):
        return self.Cluster
    def set_Cluster(self, Cluster):
        self.Cluster = Cluster
    def add_Cluster(self, value):
        self.Cluster.append(value)
    def add_Cluster(self, value):
        self.Cluster.append(value)
    def insert_Cluster_at(self, index, value):
        self.Cluster.insert(index, value)
    def replace_Cluster_at(self, index, value):
        self.Cluster[index] = value
    def get_InstrumentSummary(self):
        return self.InstrumentSummary
    def set_InstrumentSummary(self, InstrumentSummary):
        self.InstrumentSummary = InstrumentSummary
    def add_InstrumentSummary(self, value):
        self.InstrumentSummary.append(value)
    def add_InstrumentSummary(self, value):
        self.InstrumentSummary.append(value)
    def insert_InstrumentSummary_at(self, index, value):
        self.InstrumentSummary.insert(index, value)
    def replace_InstrumentSummary_at(self, index, value):
        self.InstrumentSummary[index] = value
    def get_Stock(self):
        return self.Stock
    def set_Stock(self, Stock):
        self.Stock = Stock
    def add_Stock(self, value):
        self.Stock.append(value)
    def add_Stock(self, value):
        self.Stock.append(value)
    def insert_Stock_at(self, index, value):
        self.Stock.insert(index, value)
    def replace_Stock_at(self, index, value):
        self.Stock[index] = value
    def get_dummy(self):
        return self.dummy
    def set_dummy(self, dummy):
        self.dummy = dummy
    def hasContent_(self):
        if (
            self.Asset or
            self.Calculation or
            self.Dividend or
            self.ETPEncyclopaedia or
            self.ETPComposition or
            self.Exchange or
            self.Cluster or
            self.InstrumentSummary or
            self.Stock
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DIME', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DIME')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DIME')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DIME', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DIME'):
        if self.dummy is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            outfile.write(' dummy=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dummy), input_name='dummy')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DIME', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Asset_ in self.Asset:
            Asset_.export(outfile, level, namespaceprefix_, name_='Asset', pretty_print=pretty_print)
        for Calculation_ in self.Calculation:
            Calculation_.export(outfile, level, namespaceprefix_, name_='Calculation', pretty_print=pretty_print)
        for Dividend_ in self.Dividend:
            Dividend_.export(outfile, level, namespaceprefix_, name_='Dividend', pretty_print=pretty_print)
        for ETPEncyclopaedia_ in self.ETPEncyclopaedia:
            ETPEncyclopaedia_.export(outfile, level, namespaceprefix_, name_='ETPEncyclopaedia', pretty_print=pretty_print)
        for ETPComposition_ in self.ETPComposition:
            ETPComposition_.export(outfile, level, namespaceprefix_, name_='ETPComposition', pretty_print=pretty_print)
        for Exchange_ in self.Exchange:
            Exchange_.export(outfile, level, namespaceprefix_, name_='Exchange', pretty_print=pretty_print)
        for Cluster_ in self.Cluster:
            Cluster_.export(outfile, level, namespaceprefix_, name_='Cluster', pretty_print=pretty_print)
        for InstrumentSummary_ in self.InstrumentSummary:
            InstrumentSummary_.export(outfile, level, namespaceprefix_, name_='InstrumentSummary', pretty_print=pretty_print)
        for Stock_ in self.Stock:
            Stock_.export(outfile, level, namespaceprefix_, name_='Stock', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dummy', node)
        if value is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            self.dummy = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Asset':
            obj_ = AssetType.factory(parent_object_=self)
            obj_.build(child_)
            self.Asset.append(obj_)
            obj_.original_tagname_ = 'Asset'
        elif nodeName_ == 'Calculation':
            obj_ = CalculationType.factory(parent_object_=self)
            obj_.build(child_)
            self.Calculation.append(obj_)
            obj_.original_tagname_ = 'Calculation'
        elif nodeName_ == 'Dividend':
            obj_ = DividendType88.factory(parent_object_=self)
            obj_.build(child_)
            self.Dividend.append(obj_)
            obj_.original_tagname_ = 'Dividend'
        elif nodeName_ == 'ETPEncyclopaedia':
            obj_ = ETPEncyclopaediaType.factory(parent_object_=self)
            obj_.build(child_)
            self.ETPEncyclopaedia.append(obj_)
            obj_.original_tagname_ = 'ETPEncyclopaedia'
        elif nodeName_ == 'ETPComposition':
            obj_ = ETPCompositionType.factory(parent_object_=self)
            obj_.build(child_)
            self.ETPComposition.append(obj_)
            obj_.original_tagname_ = 'ETPComposition'
        elif nodeName_ == 'Exchange':
            obj_ = ExchangeType.factory(parent_object_=self)
            obj_.build(child_)
            self.Exchange.append(obj_)
            obj_.original_tagname_ = 'Exchange'
        elif nodeName_ == 'Cluster':
            obj_ = ClusterType.factory(parent_object_=self)
            obj_.build(child_)
            self.Cluster.append(obj_)
            obj_.original_tagname_ = 'Cluster'
        elif nodeName_ == 'InstrumentSummary':
            obj_ = InstrumentSummaryType.factory(parent_object_=self)
            obj_.build(child_)
            self.InstrumentSummary.append(obj_)
            obj_.original_tagname_ = 'InstrumentSummary'
        elif nodeName_ == 'Stock':
            obj_ = StockType.factory(parent_object_=self)
            obj_.build(child_)
            self.Stock.append(obj_)
            obj_.original_tagname_ = 'Stock'
# end class DIME


class Client(GeneratedsSuper):
    """Client dataIncluded for code generation purposes - Please ignore."""
    subclass = None
    superclass = None
    def __init__(self, dummy=None, Instrument=None, Transaction=None, Market=None, Constituent=None, CounterpartDetail=None, RankedCounterpart=None, MarketDetail=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.dummy = _cast(None, dummy)
        if Instrument is None:
            self.Instrument = []
        else:
            self.Instrument = Instrument
        if Transaction is None:
            self.Transaction = []
        else:
            self.Transaction = Transaction
        if Market is None:
            self.Market = []
        else:
            self.Market = Market
        if Constituent is None:
            self.Constituent = []
        else:
            self.Constituent = Constituent
        if CounterpartDetail is None:
            self.CounterpartDetail = []
        else:
            self.CounterpartDetail = CounterpartDetail
        if RankedCounterpart is None:
            self.RankedCounterpart = []
        else:
            self.RankedCounterpart = RankedCounterpart
        if MarketDetail is None:
            self.MarketDetail = []
        else:
            self.MarketDetail = MarketDetail
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Client)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Client.subclass:
            return Client.subclass(*args_, **kwargs_)
        else:
            return Client(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Instrument(self):
        return self.Instrument
    def set_Instrument(self, Instrument):
        self.Instrument = Instrument
    def add_Instrument(self, value):
        self.Instrument.append(value)
    def add_Instrument(self, value):
        self.Instrument.append(value)
    def insert_Instrument_at(self, index, value):
        self.Instrument.insert(index, value)
    def replace_Instrument_at(self, index, value):
        self.Instrument[index] = value
    def get_Transaction(self):
        return self.Transaction
    def set_Transaction(self, Transaction):
        self.Transaction = Transaction
    def add_Transaction(self, value):
        self.Transaction.append(value)
    def add_Transaction(self, value):
        self.Transaction.append(value)
    def insert_Transaction_at(self, index, value):
        self.Transaction.insert(index, value)
    def replace_Transaction_at(self, index, value):
        self.Transaction[index] = value
    def get_Market(self):
        return self.Market
    def set_Market(self, Market):
        self.Market = Market
    def add_Market(self, value):
        self.Market.append(value)
    def add_Market(self, value):
        self.Market.append(value)
    def insert_Market_at(self, index, value):
        self.Market.insert(index, value)
    def replace_Market_at(self, index, value):
        self.Market[index] = value
    def get_Constituent(self):
        return self.Constituent
    def set_Constituent(self, Constituent):
        self.Constituent = Constituent
    def add_Constituent(self, value):
        self.Constituent.append(value)
    def add_Constituent(self, value):
        self.Constituent.append(value)
    def insert_Constituent_at(self, index, value):
        self.Constituent.insert(index, value)
    def replace_Constituent_at(self, index, value):
        self.Constituent[index] = value
    def get_CounterpartDetail(self):
        return self.CounterpartDetail
    def set_CounterpartDetail(self, CounterpartDetail):
        self.CounterpartDetail = CounterpartDetail
    def add_CounterpartDetail(self, value):
        self.CounterpartDetail.append(value)
    def add_CounterpartDetail(self, value):
        self.CounterpartDetail.append(value)
    def insert_CounterpartDetail_at(self, index, value):
        self.CounterpartDetail.insert(index, value)
    def replace_CounterpartDetail_at(self, index, value):
        self.CounterpartDetail[index] = value
    def get_RankedCounterpart(self):
        return self.RankedCounterpart
    def set_RankedCounterpart(self, RankedCounterpart):
        self.RankedCounterpart = RankedCounterpart
    def add_RankedCounterpart(self, value):
        self.RankedCounterpart.append(value)
    def add_RankedCounterpart(self, value):
        self.RankedCounterpart.append(value)
    def insert_RankedCounterpart_at(self, index, value):
        self.RankedCounterpart.insert(index, value)
    def replace_RankedCounterpart_at(self, index, value):
        self.RankedCounterpart[index] = value
    def get_MarketDetail(self):
        return self.MarketDetail
    def set_MarketDetail(self, MarketDetail):
        self.MarketDetail = MarketDetail
    def add_MarketDetail(self, value):
        self.MarketDetail.append(value)
    def add_MarketDetail(self, value):
        self.MarketDetail.append(value)
    def insert_MarketDetail_at(self, index, value):
        self.MarketDetail.insert(index, value)
    def replace_MarketDetail_at(self, index, value):
        self.MarketDetail[index] = value
    def get_dummy(self):
        return self.dummy
    def set_dummy(self, dummy):
        self.dummy = dummy
    def hasContent_(self):
        if (
            self.Instrument or
            self.Transaction or
            self.Market or
            self.Constituent or
            self.CounterpartDetail or
            self.RankedCounterpart or
            self.MarketDetail
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Client', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Client')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Client')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Client', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Client'):
        if self.dummy is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            outfile.write(' dummy=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dummy), input_name='dummy')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Client', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Instrument_ in self.Instrument:
            Instrument_.export(outfile, level, namespaceprefix_, name_='Instrument', pretty_print=pretty_print)
        for Transaction_ in self.Transaction:
            Transaction_.export(outfile, level, namespaceprefix_, name_='Transaction', pretty_print=pretty_print)
        for Market_ in self.Market:
            Market_.export(outfile, level, namespaceprefix_, name_='Market', pretty_print=pretty_print)
        for Constituent_ in self.Constituent:
            Constituent_.export(outfile, level, namespaceprefix_, name_='Constituent', pretty_print=pretty_print)
        for CounterpartDetail_ in self.CounterpartDetail:
            CounterpartDetail_.export(outfile, level, namespaceprefix_, name_='CounterpartDetail', pretty_print=pretty_print)
        for RankedCounterpart_ in self.RankedCounterpart:
            RankedCounterpart_.export(outfile, level, namespaceprefix_, name_='RankedCounterpart', pretty_print=pretty_print)
        for MarketDetail_ in self.MarketDetail:
            MarketDetail_.export(outfile, level, namespaceprefix_, name_='MarketDetail', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dummy', node)
        if value is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            self.dummy = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Instrument':
            obj_ = Instrument.factory(parent_object_=self)
            obj_.build(child_)
            self.Instrument.append(obj_)
            obj_.original_tagname_ = 'Instrument'
        elif nodeName_ == 'Transaction':
            obj_ = Transaction.factory(parent_object_=self)
            obj_.build(child_)
            self.Transaction.append(obj_)
            obj_.original_tagname_ = 'Transaction'
        elif nodeName_ == 'Market':
            obj_ = Market.factory(parent_object_=self)
            obj_.build(child_)
            self.Market.append(obj_)
            obj_.original_tagname_ = 'Market'
        elif nodeName_ == 'Constituent':
            obj_ = Constituent.factory(parent_object_=self)
            obj_.build(child_)
            self.Constituent.append(obj_)
            obj_.original_tagname_ = 'Constituent'
        elif nodeName_ == 'CounterpartDetail':
            obj_ = CounterpartDetailType109.factory(parent_object_=self)
            obj_.build(child_)
            self.CounterpartDetail.append(obj_)
            obj_.original_tagname_ = 'CounterpartDetail'
        elif nodeName_ == 'RankedCounterpart':
            obj_ = RankedCounterpartType113.factory(parent_object_=self)
            obj_.build(child_)
            self.RankedCounterpart.append(obj_)
            obj_.original_tagname_ = 'RankedCounterpart'
        elif nodeName_ == 'MarketDetail':
            obj_ = MarketDetailType116.factory(parent_object_=self)
            obj_.build(child_)
            self.MarketDetail.append(obj_)
            obj_.original_tagname_ = 'MarketDetail'
# end class Client


class ClientVariance(GeneratedsSuper):
    """Client variance dataIncluded for code generation purposes - Please
    ignore."""
    subclass = None
    superclass = None
    def __init__(self, dummy=None, Instrument=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.dummy = _cast(None, dummy)
        if Instrument is None:
            self.Instrument = []
        else:
            self.Instrument = Instrument
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClientVariance)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClientVariance.subclass:
            return ClientVariance.subclass(*args_, **kwargs_)
        else:
            return ClientVariance(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Instrument(self):
        return self.Instrument
    def set_Instrument(self, Instrument):
        self.Instrument = Instrument
    def add_Instrument(self, value):
        self.Instrument.append(value)
    def add_Instrument(self, value):
        self.Instrument.append(value)
    def insert_Instrument_at(self, index, value):
        self.Instrument.insert(index, value)
    def replace_Instrument_at(self, index, value):
        self.Instrument[index] = value
    def get_dummy(self):
        return self.dummy
    def set_dummy(self, dummy):
        self.dummy = dummy
    def hasContent_(self):
        if (
            self.Instrument
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ClientVariance', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClientVariance')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ClientVariance')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ClientVariance', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ClientVariance'):
        if self.dummy is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            outfile.write(' dummy=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dummy), input_name='dummy')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ClientVariance', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Instrument_ in self.Instrument:
            Instrument_.export(outfile, level, namespaceprefix_, name_='Instrument', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dummy', node)
        if value is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            self.dummy = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Instrument':
            obj_ = Instrument.factory(parent_object_=self)
            obj_.build(child_)
            self.Instrument.append(obj_)
            obj_.original_tagname_ = 'Instrument'
# end class ClientVariance


class SF(GeneratedsSuper):
    """Securities finance group dataIncluded for code generation purposes -
    Please ignore."""
    subclass = None
    superclass = None
    def __init__(self, dummy=None, Instrument=None, Transaction=None, Market=None, Constituent=None, Search=None, RelatedInstruments=None, Inventory=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.dummy = _cast(None, dummy)
        if Instrument is None:
            self.Instrument = []
        else:
            self.Instrument = Instrument
        if Transaction is None:
            self.Transaction = []
        else:
            self.Transaction = Transaction
        if Market is None:
            self.Market = []
        else:
            self.Market = Market
        if Constituent is None:
            self.Constituent = []
        else:
            self.Constituent = Constituent
        if Search is None:
            self.Search = []
        else:
            self.Search = Search
        if RelatedInstruments is None:
            self.RelatedInstruments = []
        else:
            self.RelatedInstruments = RelatedInstruments
        if Inventory is None:
            self.Inventory = []
        else:
            self.Inventory = Inventory
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SF)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SF.subclass:
            return SF.subclass(*args_, **kwargs_)
        else:
            return SF(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Instrument(self):
        return self.Instrument
    def set_Instrument(self, Instrument):
        self.Instrument = Instrument
    def add_Instrument(self, value):
        self.Instrument.append(value)
    def add_Instrument(self, value):
        self.Instrument.append(value)
    def insert_Instrument_at(self, index, value):
        self.Instrument.insert(index, value)
    def replace_Instrument_at(self, index, value):
        self.Instrument[index] = value
    def get_Transaction(self):
        return self.Transaction
    def set_Transaction(self, Transaction):
        self.Transaction = Transaction
    def add_Transaction(self, value):
        self.Transaction.append(value)
    def add_Transaction(self, value):
        self.Transaction.append(value)
    def insert_Transaction_at(self, index, value):
        self.Transaction.insert(index, value)
    def replace_Transaction_at(self, index, value):
        self.Transaction[index] = value
    def get_Market(self):
        return self.Market
    def set_Market(self, Market):
        self.Market = Market
    def add_Market(self, value):
        self.Market.append(value)
    def add_Market(self, value):
        self.Market.append(value)
    def insert_Market_at(self, index, value):
        self.Market.insert(index, value)
    def replace_Market_at(self, index, value):
        self.Market[index] = value
    def get_Constituent(self):
        return self.Constituent
    def set_Constituent(self, Constituent):
        self.Constituent = Constituent
    def add_Constituent(self, value):
        self.Constituent.append(value)
    def add_Constituent(self, value):
        self.Constituent.append(value)
    def insert_Constituent_at(self, index, value):
        self.Constituent.insert(index, value)
    def replace_Constituent_at(self, index, value):
        self.Constituent[index] = value
    def get_Search(self):
        return self.Search
    def set_Search(self, Search):
        self.Search = Search
    def add_Search(self, value):
        self.Search.append(value)
    def add_Search(self, value):
        self.Search.append(value)
    def insert_Search_at(self, index, value):
        self.Search.insert(index, value)
    def replace_Search_at(self, index, value):
        self.Search[index] = value
    def get_RelatedInstruments(self):
        return self.RelatedInstruments
    def set_RelatedInstruments(self, RelatedInstruments):
        self.RelatedInstruments = RelatedInstruments
    def add_RelatedInstruments(self, value):
        self.RelatedInstruments.append(value)
    def add_RelatedInstruments(self, value):
        self.RelatedInstruments.append(value)
    def insert_RelatedInstruments_at(self, index, value):
        self.RelatedInstruments.insert(index, value)
    def replace_RelatedInstruments_at(self, index, value):
        self.RelatedInstruments[index] = value
    def get_Inventory(self):
        return self.Inventory
    def set_Inventory(self, Inventory):
        self.Inventory = Inventory
    def add_Inventory(self, value):
        self.Inventory.append(value)
    def add_Inventory(self, value):
        self.Inventory.append(value)
    def insert_Inventory_at(self, index, value):
        self.Inventory.insert(index, value)
    def replace_Inventory_at(self, index, value):
        self.Inventory[index] = value
    def get_dummy(self):
        return self.dummy
    def set_dummy(self, dummy):
        self.dummy = dummy
    def hasContent_(self):
        if (
            self.Instrument or
            self.Transaction or
            self.Market or
            self.Constituent or
            self.Search or
            self.RelatedInstruments or
            self.Inventory
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SF', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SF')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SF')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SF', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SF'):
        if self.dummy is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            outfile.write(' dummy=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dummy), input_name='dummy')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SF', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Instrument_ in self.Instrument:
            Instrument_.export(outfile, level, namespaceprefix_, name_='Instrument', pretty_print=pretty_print)
        for Transaction_ in self.Transaction:
            Transaction_.export(outfile, level, namespaceprefix_, name_='Transaction', pretty_print=pretty_print)
        for Market_ in self.Market:
            Market_.export(outfile, level, namespaceprefix_, name_='Market', pretty_print=pretty_print)
        for Constituent_ in self.Constituent:
            Constituent_.export(outfile, level, namespaceprefix_, name_='Constituent', pretty_print=pretty_print)
        for Search_ in self.Search:
            Search_.export(outfile, level, namespaceprefix_, name_='Search', pretty_print=pretty_print)
        for RelatedInstruments_ in self.RelatedInstruments:
            RelatedInstruments_.export(outfile, level, namespaceprefix_, name_='RelatedInstruments', pretty_print=pretty_print)
        for Inventory_ in self.Inventory:
            Inventory_.export(outfile, level, namespaceprefix_, name_='Inventory', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dummy', node)
        if value is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            self.dummy = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Instrument':
            obj_ = Instrument.factory(parent_object_=self)
            obj_.build(child_)
            self.Instrument.append(obj_)
            obj_.original_tagname_ = 'Instrument'
        elif nodeName_ == 'Transaction':
            obj_ = Transaction.factory(parent_object_=self)
            obj_.build(child_)
            self.Transaction.append(obj_)
            obj_.original_tagname_ = 'Transaction'
        elif nodeName_ == 'Market':
            obj_ = Market.factory(parent_object_=self)
            obj_.build(child_)
            self.Market.append(obj_)
            obj_.original_tagname_ = 'Market'
        elif nodeName_ == 'Constituent':
            obj_ = Constituent.factory(parent_object_=self)
            obj_.build(child_)
            self.Constituent.append(obj_)
            obj_.original_tagname_ = 'Constituent'
        elif nodeName_ == 'Search':
            obj_ = Search.factory(parent_object_=self)
            obj_.build(child_)
            self.Search.append(obj_)
            obj_.original_tagname_ = 'Search'
        elif nodeName_ == 'RelatedInstruments':
            obj_ = RelatedInstruments.factory(parent_object_=self)
            obj_.build(child_)
            self.RelatedInstruments.append(obj_)
            obj_.original_tagname_ = 'RelatedInstruments'
        elif nodeName_ == 'Inventory':
            obj_ = Inventory.factory(parent_object_=self)
            obj_.build(child_)
            self.Inventory.append(obj_)
            obj_.original_tagname_ = 'Inventory'
# end class SF


class IM(GeneratedsSuper):
    """Investment management group dataIncluded for code generation
    purposes - Please ignore."""
    subclass = None
    superclass = None
    def __init__(self, dummy=None, Instrument=None, Transaction=None, Market=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.dummy = _cast(None, dummy)
        if Instrument is None:
            self.Instrument = []
        else:
            self.Instrument = Instrument
        if Transaction is None:
            self.Transaction = []
        else:
            self.Transaction = Transaction
        if Market is None:
            self.Market = []
        else:
            self.Market = Market
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IM)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IM.subclass:
            return IM.subclass(*args_, **kwargs_)
        else:
            return IM(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Instrument(self):
        return self.Instrument
    def set_Instrument(self, Instrument):
        self.Instrument = Instrument
    def add_Instrument(self, value):
        self.Instrument.append(value)
    def add_Instrument(self, value):
        self.Instrument.append(value)
    def insert_Instrument_at(self, index, value):
        self.Instrument.insert(index, value)
    def replace_Instrument_at(self, index, value):
        self.Instrument[index] = value
    def get_Transaction(self):
        return self.Transaction
    def set_Transaction(self, Transaction):
        self.Transaction = Transaction
    def add_Transaction(self, value):
        self.Transaction.append(value)
    def add_Transaction(self, value):
        self.Transaction.append(value)
    def insert_Transaction_at(self, index, value):
        self.Transaction.insert(index, value)
    def replace_Transaction_at(self, index, value):
        self.Transaction[index] = value
    def get_Market(self):
        return self.Market
    def set_Market(self, Market):
        self.Market = Market
    def add_Market(self, value):
        self.Market.append(value)
    def add_Market(self, value):
        self.Market.append(value)
    def insert_Market_at(self, index, value):
        self.Market.insert(index, value)
    def replace_Market_at(self, index, value):
        self.Market[index] = value
    def get_dummy(self):
        return self.dummy
    def set_dummy(self, dummy):
        self.dummy = dummy
    def hasContent_(self):
        if (
            self.Instrument or
            self.Transaction or
            self.Market
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='IM', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IM')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IM')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IM', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='IM'):
        if self.dummy is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            outfile.write(' dummy=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dummy), input_name='dummy')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='IM', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Instrument_ in self.Instrument:
            Instrument_.export(outfile, level, namespaceprefix_, name_='Instrument', pretty_print=pretty_print)
        for Transaction_ in self.Transaction:
            Transaction_.export(outfile, level, namespaceprefix_, name_='Transaction', pretty_print=pretty_print)
        for Market_ in self.Market:
            Market_.export(outfile, level, namespaceprefix_, name_='Market', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dummy', node)
        if value is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            self.dummy = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Instrument':
            obj_ = Instrument.factory(parent_object_=self)
            obj_.build(child_)
            self.Instrument.append(obj_)
            obj_.original_tagname_ = 'Instrument'
        elif nodeName_ == 'Transaction':
            obj_ = Transaction.factory(parent_object_=self)
            obj_.build(child_)
            self.Transaction.append(obj_)
            obj_.original_tagname_ = 'Transaction'
        elif nodeName_ == 'Market':
            obj_ = Market.factory(parent_object_=self)
            obj_.build(child_)
            self.Market.append(obj_)
            obj_.original_tagname_ = 'Market'
# end class IM


class Public(GeneratedsSuper):
    """Public dataIncluded for code generation purposes - Please ignore."""
    subclass = None
    superclass = None
    def __init__(self, dummy=None, Ban=None, Disclosure=None, Exchange=None, Margin=None, News=None, SearchAll=None, MarketHierarchy=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.dummy = _cast(None, dummy)
        if Ban is None:
            self.Ban = []
        else:
            self.Ban = Ban
        if Disclosure is None:
            self.Disclosure = []
        else:
            self.Disclosure = Disclosure
        if Exchange is None:
            self.Exchange = []
        else:
            self.Exchange = Exchange
        if Margin is None:
            self.Margin = []
        else:
            self.Margin = Margin
        if News is None:
            self.News = []
        else:
            self.News = News
        if SearchAll is None:
            self.SearchAll = []
        else:
            self.SearchAll = SearchAll
        if MarketHierarchy is None:
            self.MarketHierarchy = []
        else:
            self.MarketHierarchy = MarketHierarchy
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Public)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Public.subclass:
            return Public.subclass(*args_, **kwargs_)
        else:
            return Public(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Ban(self):
        return self.Ban
    def set_Ban(self, Ban):
        self.Ban = Ban
    def add_Ban(self, value):
        self.Ban.append(value)
    def add_Ban(self, value):
        self.Ban.append(value)
    def insert_Ban_at(self, index, value):
        self.Ban.insert(index, value)
    def replace_Ban_at(self, index, value):
        self.Ban[index] = value
    def get_Disclosure(self):
        return self.Disclosure
    def set_Disclosure(self, Disclosure):
        self.Disclosure = Disclosure
    def add_Disclosure(self, value):
        self.Disclosure.append(value)
    def add_Disclosure(self, value):
        self.Disclosure.append(value)
    def insert_Disclosure_at(self, index, value):
        self.Disclosure.insert(index, value)
    def replace_Disclosure_at(self, index, value):
        self.Disclosure[index] = value
    def get_Exchange(self):
        return self.Exchange
    def set_Exchange(self, Exchange):
        self.Exchange = Exchange
    def add_Exchange(self, value):
        self.Exchange.append(value)
    def add_Exchange(self, value):
        self.Exchange.append(value)
    def insert_Exchange_at(self, index, value):
        self.Exchange.insert(index, value)
    def replace_Exchange_at(self, index, value):
        self.Exchange[index] = value
    def get_Margin(self):
        return self.Margin
    def set_Margin(self, Margin):
        self.Margin = Margin
    def add_Margin(self, value):
        self.Margin.append(value)
    def add_Margin(self, value):
        self.Margin.append(value)
    def insert_Margin_at(self, index, value):
        self.Margin.insert(index, value)
    def replace_Margin_at(self, index, value):
        self.Margin[index] = value
    def get_News(self):
        return self.News
    def set_News(self, News):
        self.News = News
    def add_News(self, value):
        self.News.append(value)
    def add_News(self, value):
        self.News.append(value)
    def insert_News_at(self, index, value):
        self.News.insert(index, value)
    def replace_News_at(self, index, value):
        self.News[index] = value
    def get_SearchAll(self):
        return self.SearchAll
    def set_SearchAll(self, SearchAll):
        self.SearchAll = SearchAll
    def add_SearchAll(self, value):
        self.SearchAll.append(value)
    def add_SearchAll(self, value):
        self.SearchAll.append(value)
    def insert_SearchAll_at(self, index, value):
        self.SearchAll.insert(index, value)
    def replace_SearchAll_at(self, index, value):
        self.SearchAll[index] = value
    def get_MarketHierarchy(self):
        return self.MarketHierarchy
    def set_MarketHierarchy(self, MarketHierarchy):
        self.MarketHierarchy = MarketHierarchy
    def add_MarketHierarchy(self, value):
        self.MarketHierarchy.append(value)
    def add_MarketHierarchy(self, value):
        self.MarketHierarchy.append(value)
    def insert_MarketHierarchy_at(self, index, value):
        self.MarketHierarchy.insert(index, value)
    def replace_MarketHierarchy_at(self, index, value):
        self.MarketHierarchy[index] = value
    def get_dummy(self):
        return self.dummy
    def set_dummy(self, dummy):
        self.dummy = dummy
    def hasContent_(self):
        if (
            self.Ban or
            self.Disclosure or
            self.Exchange or
            self.Margin or
            self.News or
            self.SearchAll or
            self.MarketHierarchy
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Public', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Public')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Public')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Public', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Public'):
        if self.dummy is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            outfile.write(' dummy=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dummy), input_name='dummy')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Public', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Ban_ in self.Ban:
            Ban_.export(outfile, level, namespaceprefix_, name_='Ban', pretty_print=pretty_print)
        for Disclosure_ in self.Disclosure:
            Disclosure_.export(outfile, level, namespaceprefix_, name_='Disclosure', pretty_print=pretty_print)
        for Exchange_ in self.Exchange:
            Exchange_.export(outfile, level, namespaceprefix_, name_='Exchange', pretty_print=pretty_print)
        for Margin_ in self.Margin:
            Margin_.export(outfile, level, namespaceprefix_, name_='Margin', pretty_print=pretty_print)
        for News_ in self.News:
            News_.export(outfile, level, namespaceprefix_, name_='News', pretty_print=pretty_print)
        for SearchAll_ in self.SearchAll:
            SearchAll_.export(outfile, level, namespaceprefix_, name_='SearchAll', pretty_print=pretty_print)
        for MarketHierarchy_ in self.MarketHierarchy:
            MarketHierarchy_.export(outfile, level, namespaceprefix_, name_='MarketHierarchy', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dummy', node)
        if value is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            self.dummy = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Ban':
            obj_ = Ban.factory(parent_object_=self)
            obj_.build(child_)
            self.Ban.append(obj_)
            obj_.original_tagname_ = 'Ban'
        elif nodeName_ == 'Disclosure':
            obj_ = Disclosure.factory(parent_object_=self)
            obj_.build(child_)
            self.Disclosure.append(obj_)
            obj_.original_tagname_ = 'Disclosure'
        elif nodeName_ == 'Exchange':
            obj_ = Exchange.factory(parent_object_=self)
            obj_.build(child_)
            self.Exchange.append(obj_)
            obj_.original_tagname_ = 'Exchange'
        elif nodeName_ == 'Margin':
            obj_ = Margin.factory(parent_object_=self)
            obj_.build(child_)
            self.Margin.append(obj_)
            obj_.original_tagname_ = 'Margin'
        elif nodeName_ == 'News':
            obj_ = News.factory(parent_object_=self)
            obj_.build(child_)
            self.News.append(obj_)
            obj_.original_tagname_ = 'News'
        elif nodeName_ == 'SearchAll':
            obj_ = SearchAll.factory(parent_object_=self)
            obj_.build(child_)
            self.SearchAll.append(obj_)
            obj_.original_tagname_ = 'SearchAll'
        elif nodeName_ == 'MarketHierarchy':
            obj_ = MarketHierarchy.factory(parent_object_=self)
            obj_.build(child_)
            self.MarketHierarchy.append(obj_)
            obj_.original_tagname_ = 'MarketHierarchy'
# end class Public


class Intraday(GeneratedsSuper):
    """Recently processed dataIncluded for code generation purposes -
    Please ignore."""
    subclass = None
    superclass = None
    def __init__(self, dummy=None, Transaction=None, ClientTransaction=None, Instrument=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.dummy = _cast(None, dummy)
        if Transaction is None:
            self.Transaction = []
        else:
            self.Transaction = Transaction
        if ClientTransaction is None:
            self.ClientTransaction = []
        else:
            self.ClientTransaction = ClientTransaction
        if Instrument is None:
            self.Instrument = []
        else:
            self.Instrument = Instrument
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Intraday)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Intraday.subclass:
            return Intraday.subclass(*args_, **kwargs_)
        else:
            return Intraday(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transaction(self):
        return self.Transaction
    def set_Transaction(self, Transaction):
        self.Transaction = Transaction
    def add_Transaction(self, value):
        self.Transaction.append(value)
    def add_Transaction(self, value):
        self.Transaction.append(value)
    def insert_Transaction_at(self, index, value):
        self.Transaction.insert(index, value)
    def replace_Transaction_at(self, index, value):
        self.Transaction[index] = value
    def get_ClientTransaction(self):
        return self.ClientTransaction
    def set_ClientTransaction(self, ClientTransaction):
        self.ClientTransaction = ClientTransaction
    def add_ClientTransaction(self, value):
        self.ClientTransaction.append(value)
    def add_ClientTransaction(self, value):
        self.ClientTransaction.append(value)
    def insert_ClientTransaction_at(self, index, value):
        self.ClientTransaction.insert(index, value)
    def replace_ClientTransaction_at(self, index, value):
        self.ClientTransaction[index] = value
    def get_Instrument(self):
        return self.Instrument
    def set_Instrument(self, Instrument):
        self.Instrument = Instrument
    def add_Instrument(self, value):
        self.Instrument.append(value)
    def add_Instrument(self, value):
        self.Instrument.append(value)
    def insert_Instrument_at(self, index, value):
        self.Instrument.insert(index, value)
    def replace_Instrument_at(self, index, value):
        self.Instrument[index] = value
    def get_dummy(self):
        return self.dummy
    def set_dummy(self, dummy):
        self.dummy = dummy
    def hasContent_(self):
        if (
            self.Transaction or
            self.ClientTransaction or
            self.Instrument
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Intraday', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Intraday')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Intraday')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Intraday', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Intraday'):
        if self.dummy is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            outfile.write(' dummy=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dummy), input_name='dummy')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Intraday', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Transaction_ in self.Transaction:
            Transaction_.export(outfile, level, namespaceprefix_, name_='Transaction', pretty_print=pretty_print)
        for ClientTransaction_ in self.ClientTransaction:
            ClientTransaction_.export(outfile, level, namespaceprefix_, name_='ClientTransaction', pretty_print=pretty_print)
        for Instrument_ in self.Instrument:
            Instrument_.export(outfile, level, namespaceprefix_, name_='Instrument', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dummy', node)
        if value is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            self.dummy = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transaction':
            obj_ = Transaction.factory(parent_object_=self)
            obj_.build(child_)
            self.Transaction.append(obj_)
            obj_.original_tagname_ = 'Transaction'
        elif nodeName_ == 'ClientTransaction':
            obj_ = ClientTransaction.factory(parent_object_=self)
            obj_.build(child_)
            self.ClientTransaction.append(obj_)
            obj_.original_tagname_ = 'ClientTransaction'
        elif nodeName_ == 'Instrument':
            obj_ = Instrument.factory(parent_object_=self)
            obj_.build(child_)
            self.Instrument.append(obj_)
            obj_.original_tagname_ = 'Instrument'
# end class Intraday


class Pending(GeneratedsSuper):
    """Recently processed dataIncluded for code generation purposes -
    Please ignore."""
    subclass = None
    superclass = None
    def __init__(self, dummy=None, Transaction=None, ClientTransaction=None, Instrument=None, ClientInstrument=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.dummy = _cast(None, dummy)
        if Transaction is None:
            self.Transaction = []
        else:
            self.Transaction = Transaction
        if ClientTransaction is None:
            self.ClientTransaction = []
        else:
            self.ClientTransaction = ClientTransaction
        if Instrument is None:
            self.Instrument = []
        else:
            self.Instrument = Instrument
        if ClientInstrument is None:
            self.ClientInstrument = []
        else:
            self.ClientInstrument = ClientInstrument
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Pending)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Pending.subclass:
            return Pending.subclass(*args_, **kwargs_)
        else:
            return Pending(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transaction(self):
        return self.Transaction
    def set_Transaction(self, Transaction):
        self.Transaction = Transaction
    def add_Transaction(self, value):
        self.Transaction.append(value)
    def add_Transaction(self, value):
        self.Transaction.append(value)
    def insert_Transaction_at(self, index, value):
        self.Transaction.insert(index, value)
    def replace_Transaction_at(self, index, value):
        self.Transaction[index] = value
    def get_ClientTransaction(self):
        return self.ClientTransaction
    def set_ClientTransaction(self, ClientTransaction):
        self.ClientTransaction = ClientTransaction
    def add_ClientTransaction(self, value):
        self.ClientTransaction.append(value)
    def add_ClientTransaction(self, value):
        self.ClientTransaction.append(value)
    def insert_ClientTransaction_at(self, index, value):
        self.ClientTransaction.insert(index, value)
    def replace_ClientTransaction_at(self, index, value):
        self.ClientTransaction[index] = value
    def get_Instrument(self):
        return self.Instrument
    def set_Instrument(self, Instrument):
        self.Instrument = Instrument
    def add_Instrument(self, value):
        self.Instrument.append(value)
    def add_Instrument(self, value):
        self.Instrument.append(value)
    def insert_Instrument_at(self, index, value):
        self.Instrument.insert(index, value)
    def replace_Instrument_at(self, index, value):
        self.Instrument[index] = value
    def get_ClientInstrument(self):
        return self.ClientInstrument
    def set_ClientInstrument(self, ClientInstrument):
        self.ClientInstrument = ClientInstrument
    def add_ClientInstrument(self, value):
        self.ClientInstrument.append(value)
    def add_ClientInstrument(self, value):
        self.ClientInstrument.append(value)
    def insert_ClientInstrument_at(self, index, value):
        self.ClientInstrument.insert(index, value)
    def replace_ClientInstrument_at(self, index, value):
        self.ClientInstrument[index] = value
    def get_dummy(self):
        return self.dummy
    def set_dummy(self, dummy):
        self.dummy = dummy
    def hasContent_(self):
        if (
            self.Transaction or
            self.ClientTransaction or
            self.Instrument or
            self.ClientInstrument
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Pending', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Pending')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Pending')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Pending', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Pending'):
        if self.dummy is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            outfile.write(' dummy=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dummy), input_name='dummy')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Pending', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Transaction_ in self.Transaction:
            Transaction_.export(outfile, level, namespaceprefix_, name_='Transaction', pretty_print=pretty_print)
        for ClientTransaction_ in self.ClientTransaction:
            ClientTransaction_.export(outfile, level, namespaceprefix_, name_='ClientTransaction', pretty_print=pretty_print)
        for Instrument_ in self.Instrument:
            Instrument_.export(outfile, level, namespaceprefix_, name_='Instrument', pretty_print=pretty_print)
        for ClientInstrument_ in self.ClientInstrument:
            ClientInstrument_.export(outfile, level, namespaceprefix_, name_='ClientInstrument', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dummy', node)
        if value is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            self.dummy = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transaction':
            obj_ = Transaction.factory(parent_object_=self)
            obj_.build(child_)
            self.Transaction.append(obj_)
            obj_.original_tagname_ = 'Transaction'
        elif nodeName_ == 'ClientTransaction':
            obj_ = ClientTransaction.factory(parent_object_=self)
            obj_.build(child_)
            self.ClientTransaction.append(obj_)
            obj_.original_tagname_ = 'ClientTransaction'
        elif nodeName_ == 'Instrument':
            obj_ = Instrument.factory(parent_object_=self)
            obj_.build(child_)
            self.Instrument.append(obj_)
            obj_.original_tagname_ = 'Instrument'
        elif nodeName_ == 'ClientInstrument':
            obj_ = ClientInstrument.factory(parent_object_=self)
            obj_.build(child_)
            self.ClientInstrument.append(obj_)
            obj_.original_tagname_ = 'ClientInstrument'
# end class Pending


class Rates(GeneratedsSuper):
    """Rates dataIncluded for code generation purposes - Please ignore."""
    subclass = None
    superclass = None
    def __init__(self, dummy=None, Currency=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.dummy = _cast(None, dummy)
        if Currency is None:
            self.Currency = []
        else:
            self.Currency = Currency
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Rates)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Rates.subclass:
            return Rates.subclass(*args_, **kwargs_)
        else:
            return Rates(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Currency(self):
        return self.Currency
    def set_Currency(self, Currency):
        self.Currency = Currency
    def add_Currency(self, value):
        self.Currency.append(value)
    def add_Currency(self, value):
        self.Currency.append(value)
    def insert_Currency_at(self, index, value):
        self.Currency.insert(index, value)
    def replace_Currency_at(self, index, value):
        self.Currency[index] = value
    def get_dummy(self):
        return self.dummy
    def set_dummy(self, dummy):
        self.dummy = dummy
    def hasContent_(self):
        if (
            self.Currency
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Rates', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Rates')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Rates')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Rates', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Rates'):
        if self.dummy is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            outfile.write(' dummy=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dummy), input_name='dummy')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Rates', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Currency_ in self.Currency:
            Currency_.export(outfile, level, namespaceprefix_, name_='Currency', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dummy', node)
        if value is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            self.dummy = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Currency':
            obj_ = Currency.factory(parent_object_=self)
            obj_.build(child_)
            self.Currency.append(obj_)
            obj_.original_tagname_ = 'Currency'
# end class Rates


class AccountPerformance(GeneratedsSuper):
    """Account PerformanceIncluded for code generation purposes - Please
    ignore."""
    subclass = None
    superclass = None
    def __init__(self, dummy=None, MarketDetail=None, RankedInstrument=None, InstrumentDetail=None, RankedCounterpart=None, CounterpartDetail=None, Account=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.dummy = _cast(None, dummy)
        if MarketDetail is None:
            self.MarketDetail = []
        else:
            self.MarketDetail = MarketDetail
        if RankedInstrument is None:
            self.RankedInstrument = []
        else:
            self.RankedInstrument = RankedInstrument
        if InstrumentDetail is None:
            self.InstrumentDetail = []
        else:
            self.InstrumentDetail = InstrumentDetail
        if RankedCounterpart is None:
            self.RankedCounterpart = []
        else:
            self.RankedCounterpart = RankedCounterpart
        if CounterpartDetail is None:
            self.CounterpartDetail = []
        else:
            self.CounterpartDetail = CounterpartDetail
        if Account is None:
            self.Account = []
        else:
            self.Account = Account
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AccountPerformance)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AccountPerformance.subclass:
            return AccountPerformance.subclass(*args_, **kwargs_)
        else:
            return AccountPerformance(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MarketDetail(self):
        return self.MarketDetail
    def set_MarketDetail(self, MarketDetail):
        self.MarketDetail = MarketDetail
    def add_MarketDetail(self, value):
        self.MarketDetail.append(value)
    def add_MarketDetail(self, value):
        self.MarketDetail.append(value)
    def insert_MarketDetail_at(self, index, value):
        self.MarketDetail.insert(index, value)
    def replace_MarketDetail_at(self, index, value):
        self.MarketDetail[index] = value
    def get_RankedInstrument(self):
        return self.RankedInstrument
    def set_RankedInstrument(self, RankedInstrument):
        self.RankedInstrument = RankedInstrument
    def add_RankedInstrument(self, value):
        self.RankedInstrument.append(value)
    def add_RankedInstrument(self, value):
        self.RankedInstrument.append(value)
    def insert_RankedInstrument_at(self, index, value):
        self.RankedInstrument.insert(index, value)
    def replace_RankedInstrument_at(self, index, value):
        self.RankedInstrument[index] = value
    def get_InstrumentDetail(self):
        return self.InstrumentDetail
    def set_InstrumentDetail(self, InstrumentDetail):
        self.InstrumentDetail = InstrumentDetail
    def add_InstrumentDetail(self, value):
        self.InstrumentDetail.append(value)
    def add_InstrumentDetail(self, value):
        self.InstrumentDetail.append(value)
    def insert_InstrumentDetail_at(self, index, value):
        self.InstrumentDetail.insert(index, value)
    def replace_InstrumentDetail_at(self, index, value):
        self.InstrumentDetail[index] = value
    def get_RankedCounterpart(self):
        return self.RankedCounterpart
    def set_RankedCounterpart(self, RankedCounterpart):
        self.RankedCounterpart = RankedCounterpart
    def add_RankedCounterpart(self, value):
        self.RankedCounterpart.append(value)
    def add_RankedCounterpart(self, value):
        self.RankedCounterpart.append(value)
    def insert_RankedCounterpart_at(self, index, value):
        self.RankedCounterpart.insert(index, value)
    def replace_RankedCounterpart_at(self, index, value):
        self.RankedCounterpart[index] = value
    def get_CounterpartDetail(self):
        return self.CounterpartDetail
    def set_CounterpartDetail(self, CounterpartDetail):
        self.CounterpartDetail = CounterpartDetail
    def add_CounterpartDetail(self, value):
        self.CounterpartDetail.append(value)
    def add_CounterpartDetail(self, value):
        self.CounterpartDetail.append(value)
    def insert_CounterpartDetail_at(self, index, value):
        self.CounterpartDetail.insert(index, value)
    def replace_CounterpartDetail_at(self, index, value):
        self.CounterpartDetail[index] = value
    def get_Account(self):
        return self.Account
    def set_Account(self, Account):
        self.Account = Account
    def add_Account(self, value):
        self.Account.append(value)
    def add_Account(self, value):
        self.Account.append(value)
    def insert_Account_at(self, index, value):
        self.Account.insert(index, value)
    def replace_Account_at(self, index, value):
        self.Account[index] = value
    def get_dummy(self):
        return self.dummy
    def set_dummy(self, dummy):
        self.dummy = dummy
    def hasContent_(self):
        if (
            self.MarketDetail or
            self.RankedInstrument or
            self.InstrumentDetail or
            self.RankedCounterpart or
            self.CounterpartDetail or
            self.Account
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AccountPerformance', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AccountPerformance')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AccountPerformance')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AccountPerformance', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AccountPerformance'):
        if self.dummy is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            outfile.write(' dummy=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dummy), input_name='dummy')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AccountPerformance', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for MarketDetail_ in self.MarketDetail:
            MarketDetail_.export(outfile, level, namespaceprefix_, name_='MarketDetail', pretty_print=pretty_print)
        for RankedInstrument_ in self.RankedInstrument:
            RankedInstrument_.export(outfile, level, namespaceprefix_, name_='RankedInstrument', pretty_print=pretty_print)
        for InstrumentDetail_ in self.InstrumentDetail:
            InstrumentDetail_.export(outfile, level, namespaceprefix_, name_='InstrumentDetail', pretty_print=pretty_print)
        for RankedCounterpart_ in self.RankedCounterpart:
            RankedCounterpart_.export(outfile, level, namespaceprefix_, name_='RankedCounterpart', pretty_print=pretty_print)
        for CounterpartDetail_ in self.CounterpartDetail:
            CounterpartDetail_.export(outfile, level, namespaceprefix_, name_='CounterpartDetail', pretty_print=pretty_print)
        for Account_ in self.Account:
            Account_.export(outfile, level, namespaceprefix_, name_='Account', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dummy', node)
        if value is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            self.dummy = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MarketDetail':
            obj_ = MarketDetail.factory(parent_object_=self)
            obj_.build(child_)
            self.MarketDetail.append(obj_)
            obj_.original_tagname_ = 'MarketDetail'
        elif nodeName_ == 'RankedInstrument':
            obj_ = RankedInstrument.factory(parent_object_=self)
            obj_.build(child_)
            self.RankedInstrument.append(obj_)
            obj_.original_tagname_ = 'RankedInstrument'
        elif nodeName_ == 'InstrumentDetail':
            obj_ = InstrumentDetail.factory(parent_object_=self)
            obj_.build(child_)
            self.InstrumentDetail.append(obj_)
            obj_.original_tagname_ = 'InstrumentDetail'
        elif nodeName_ == 'RankedCounterpart':
            obj_ = RankedCounterpart.factory(parent_object_=self)
            obj_.build(child_)
            self.RankedCounterpart.append(obj_)
            obj_.original_tagname_ = 'RankedCounterpart'
        elif nodeName_ == 'CounterpartDetail':
            obj_ = CounterpartDetail.factory(parent_object_=self)
            obj_.build(child_)
            self.CounterpartDetail.append(obj_)
            obj_.original_tagname_ = 'CounterpartDetail'
        elif nodeName_ == 'Account':
            obj_ = Account.factory(parent_object_=self)
            obj_.build(child_)
            self.Account.append(obj_)
            obj_.original_tagname_ = 'Account'
# end class AccountPerformance


class Repo(GeneratedsSuper):
    """Repo - Tri-Party Collateral group dataIncluded for code generation
    purposes - Please ignore."""
    subclass = None
    superclass = None
    def __init__(self, dummy=None, Instrument=None, Market=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.dummy = _cast(None, dummy)
        if Instrument is None:
            self.Instrument = []
        else:
            self.Instrument = Instrument
        if Market is None:
            self.Market = []
        else:
            self.Market = Market
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Repo)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Repo.subclass:
            return Repo.subclass(*args_, **kwargs_)
        else:
            return Repo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Instrument(self):
        return self.Instrument
    def set_Instrument(self, Instrument):
        self.Instrument = Instrument
    def add_Instrument(self, value):
        self.Instrument.append(value)
    def add_Instrument(self, value):
        self.Instrument.append(value)
    def insert_Instrument_at(self, index, value):
        self.Instrument.insert(index, value)
    def replace_Instrument_at(self, index, value):
        self.Instrument[index] = value
    def get_Market(self):
        return self.Market
    def set_Market(self, Market):
        self.Market = Market
    def add_Market(self, value):
        self.Market.append(value)
    def add_Market(self, value):
        self.Market.append(value)
    def insert_Market_at(self, index, value):
        self.Market.insert(index, value)
    def replace_Market_at(self, index, value):
        self.Market[index] = value
    def get_dummy(self):
        return self.dummy
    def set_dummy(self, dummy):
        self.dummy = dummy
    def hasContent_(self):
        if (
            self.Instrument or
            self.Market
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Repo', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Repo')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Repo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Repo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Repo'):
        if self.dummy is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            outfile.write(' dummy=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dummy), input_name='dummy')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Repo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Instrument_ in self.Instrument:
            Instrument_.export(outfile, level, namespaceprefix_, name_='Instrument', pretty_print=pretty_print)
        for Market_ in self.Market:
            Market_.export(outfile, level, namespaceprefix_, name_='Market', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dummy', node)
        if value is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            self.dummy = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Instrument':
            obj_ = Instrument.factory(parent_object_=self)
            obj_.build(child_)
            self.Instrument.append(obj_)
            obj_.original_tagname_ = 'Instrument'
        elif nodeName_ == 'Market':
            obj_ = Market.factory(parent_object_=self)
            obj_.build(child_)
            self.Market.append(obj_)
            obj_.original_tagname_ = 'Market'
# end class Repo


class TriPartyTrading(GeneratedsSuper):
    """Repo - Tri-Party Trading group dataIncluded for code generation
    purposes - Please ignore."""
    subclass = None
    superclass = None
    def __init__(self, dummy=None, Instrument=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.dummy = _cast(None, dummy)
        if Instrument is None:
            self.Instrument = []
        else:
            self.Instrument = Instrument
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TriPartyTrading)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TriPartyTrading.subclass:
            return TriPartyTrading.subclass(*args_, **kwargs_)
        else:
            return TriPartyTrading(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Instrument(self):
        return self.Instrument
    def set_Instrument(self, Instrument):
        self.Instrument = Instrument
    def add_Instrument(self, value):
        self.Instrument.append(value)
    def add_Instrument(self, value):
        self.Instrument.append(value)
    def insert_Instrument_at(self, index, value):
        self.Instrument.insert(index, value)
    def replace_Instrument_at(self, index, value):
        self.Instrument[index] = value
    def get_dummy(self):
        return self.dummy
    def set_dummy(self, dummy):
        self.dummy = dummy
    def hasContent_(self):
        if (
            self.Instrument
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TriPartyTrading', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TriPartyTrading')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TriPartyTrading')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TriPartyTrading', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TriPartyTrading'):
        if self.dummy is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            outfile.write(' dummy=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dummy), input_name='dummy')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TriPartyTrading', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Instrument_ in self.Instrument:
            Instrument_.export(outfile, level, namespaceprefix_, name_='Instrument', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dummy', node)
        if value is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            self.dummy = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Instrument':
            obj_ = Instrument.factory(parent_object_=self)
            obj_.build(child_)
            self.Instrument.append(obj_)
            obj_.original_tagname_ = 'Instrument'
# end class TriPartyTrading


class RankedInstrument(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MARKET=None, DATATYPE=None, RANK=None, RANKTYPE=None, DataDate=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.MARKET = _cast(None, MARKET)
        self.DATATYPE = _cast(None, DATATYPE)
        self.RANK = _cast(None, RANK)
        self.RANKTYPE = _cast(None, RANKTYPE)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RankedInstrument)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RankedInstrument.subclass:
            return RankedInstrument.subclass(*args_, **kwargs_)
        else:
            return RankedInstrument(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_MARKET(self):
        return self.MARKET
    def set_MARKET(self, MARKET):
        self.MARKET = MARKET
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_RANKTYPE(self):
        return self.RANKTYPE
    def set_RANKTYPE(self, RANKTYPE):
        self.RANKTYPE = RANKTYPE
    def hasContent_(self):
        if (
            self.DataDate or
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RankedInstrument', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RankedInstrument')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RankedInstrument')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RankedInstrument', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RankedInstrument'):
        if self.MARKET is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            outfile.write(' MARKET=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.MARKET), input_name='MARKET')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.RANKTYPE is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            outfile.write(' RANKTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANKTYPE), input_name='RANKTYPE')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RankedInstrument', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('MARKET', node)
        if value is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            self.MARKET = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('RANKTYPE', node)
        if value is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            self.RANKTYPE = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType119.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
        elif nodeName_ == 'General':
            obj_ = GeneralType122.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class RankedInstrument


class BondPricingDetail(GeneratedsSuper):
    """Bond pricing information"""
    subclass = None
    superclass = None
    def __init__(self, ANY=None, ISIN=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ANY = _cast(None, ANY)
        self.ISIN = _cast(None, ISIN)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BondPricingDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BondPricingDetail.subclass:
            return BondPricingDetail.subclass(*args_, **kwargs_)
        else:
            return BondPricingDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_ANY(self):
        return self.ANY
    def set_ANY(self, ANY):
        self.ANY = ANY
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BondPricingDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BondPricingDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BondPricingDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BondPricingDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BondPricingDetail'):
        if self.ANY is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            outfile.write(' ANY=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ANY), input_name='ANY')), ))
        if self.ISIN is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            outfile.write(' ISIN=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ISIN), input_name='ISIN')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BondPricingDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ANY', node)
        if value is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            self.ANY = value
        value = find_attr_value_('ISIN', node)
        if value is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            self.ISIN = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType123.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class BondPricingDetail


class DividendDetail(GeneratedsSuper):
    """Latest dividend data"""
    subclass = None
    superclass = None
    def __init__(self, ANY=None, CUSIP=None, DATATYPE=None, DXLID=None, ISIN=None, QUICK=None, RANK=None, RANKTYPE=None, SEDOL=None, TICKER=None, TICKER_CODE=None, INSTRUMENTID=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ANY = _cast(None, ANY)
        self.CUSIP = _cast(None, CUSIP)
        self.DATATYPE = _cast(None, DATATYPE)
        self.DXLID = _cast(None, DXLID)
        self.ISIN = _cast(None, ISIN)
        self.QUICK = _cast(None, QUICK)
        self.RANK = _cast(None, RANK)
        self.RANKTYPE = _cast(None, RANKTYPE)
        self.SEDOL = _cast(None, SEDOL)
        self.TICKER = _cast(None, TICKER)
        self.TICKER_CODE = _cast(None, TICKER_CODE)
        self.INSTRUMENTID = _cast(None, INSTRUMENTID)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DividendDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DividendDetail.subclass:
            return DividendDetail.subclass(*args_, **kwargs_)
        else:
            return DividendDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_ANY(self):
        return self.ANY
    def set_ANY(self, ANY):
        self.ANY = ANY
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_RANKTYPE(self):
        return self.RANKTYPE
    def set_RANKTYPE(self, RANKTYPE):
        self.RANKTYPE = RANKTYPE
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def get_TICKER_CODE(self):
        return self.TICKER_CODE
    def set_TICKER_CODE(self, TICKER_CODE):
        self.TICKER_CODE = TICKER_CODE
    def get_INSTRUMENTID(self):
        return self.INSTRUMENTID
    def set_INSTRUMENTID(self, INSTRUMENTID):
        self.INSTRUMENTID = INSTRUMENTID
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DividendDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DividendDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DividendDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DividendDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DividendDetail'):
        if self.ANY is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            outfile.write(' ANY=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ANY), input_name='ANY')), ))
        if self.CUSIP is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            outfile.write(' CUSIP=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.CUSIP), input_name='CUSIP')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.DXLID is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            outfile.write(' DXLID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DXLID), input_name='DXLID')), ))
        if self.ISIN is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            outfile.write(' ISIN=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ISIN), input_name='ISIN')), ))
        if self.QUICK is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            outfile.write(' QUICK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.QUICK), input_name='QUICK')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.RANKTYPE is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            outfile.write(' RANKTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANKTYPE), input_name='RANKTYPE')), ))
        if self.SEDOL is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            outfile.write(' SEDOL=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SEDOL), input_name='SEDOL')), ))
        if self.TICKER is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            outfile.write(' TICKER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER), input_name='TICKER')), ))
        if self.TICKER_CODE is not None and 'TICKER_CODE' not in already_processed:
            already_processed.add('TICKER_CODE')
            outfile.write(' TICKER.CODE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER_CODE), input_name='TICKER.CODE')), ))
        if self.INSTRUMENTID is not None and 'INSTRUMENTID' not in already_processed:
            already_processed.add('INSTRUMENTID')
            outfile.write(' INSTRUMENTID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.INSTRUMENTID), input_name='INSTRUMENTID')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DividendDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ANY', node)
        if value is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            self.ANY = value
        value = find_attr_value_('CUSIP', node)
        if value is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            self.CUSIP = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('DXLID', node)
        if value is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            self.DXLID = value
        value = find_attr_value_('ISIN', node)
        if value is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            self.ISIN = value
        value = find_attr_value_('QUICK', node)
        if value is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            self.QUICK = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('RANKTYPE', node)
        if value is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            self.RANKTYPE = value
        value = find_attr_value_('SEDOL', node)
        if value is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            self.SEDOL = value
        value = find_attr_value_('TICKER', node)
        if value is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            self.TICKER = value
        value = find_attr_value_('TICKER.CODE', node)
        if value is not None and 'TICKER.CODE' not in already_processed:
            already_processed.add('TICKER.CODE')
            self.TICKER_CODE = value
        value = find_attr_value_('INSTRUMENTID', node)
        if value is not None and 'INSTRUMENTID' not in already_processed:
            already_processed.add('INSTRUMENTID')
            self.INSTRUMENTID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType125.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class DividendDetail


class Instrument(GeneratedsSuper):
    """Aggregated instrument data"""
    subclass = None
    superclass = None
    def __init__(self, ANY=None, CUSIP=None, DATATYPE=None, INSTRUMENTTYPE=None, ISIN=None, QUICK=None, SEDOL=None, DXLID=None, TICKER=None, TICKER_CODE=None, INSTRUMENTID=None, FILTER=None, DataDate=None, InstrumentData=None, Trading=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ANY = _cast(None, ANY)
        self.CUSIP = _cast(None, CUSIP)
        self.DATATYPE = _cast(None, DATATYPE)
        self.INSTRUMENTTYPE = _cast(None, INSTRUMENTTYPE)
        self.ISIN = _cast(None, ISIN)
        self.QUICK = _cast(None, QUICK)
        self.SEDOL = _cast(None, SEDOL)
        self.DXLID = _cast(None, DXLID)
        self.TICKER = _cast(None, TICKER)
        self.TICKER_CODE = _cast(None, TICKER_CODE)
        self.INSTRUMENTID = _cast(None, INSTRUMENTID)
        self.FILTER = _cast(None, FILTER)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
        self.InstrumentData = InstrumentData
        self.Trading = Trading
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Instrument)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Instrument.subclass:
            return Instrument.subclass(*args_, **kwargs_)
        else:
            return Instrument(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_InstrumentData(self):
        return self.InstrumentData
    def set_InstrumentData(self, InstrumentData):
        self.InstrumentData = InstrumentData
    def get_Trading(self):
        return self.Trading
    def set_Trading(self, Trading):
        self.Trading = Trading
    def get_ANY(self):
        return self.ANY
    def set_ANY(self, ANY):
        self.ANY = ANY
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_INSTRUMENTTYPE(self):
        return self.INSTRUMENTTYPE
    def set_INSTRUMENTTYPE(self, INSTRUMENTTYPE):
        self.INSTRUMENTTYPE = INSTRUMENTTYPE
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def get_TICKER_CODE(self):
        return self.TICKER_CODE
    def set_TICKER_CODE(self, TICKER_CODE):
        self.TICKER_CODE = TICKER_CODE
    def get_INSTRUMENTID(self):
        return self.INSTRUMENTID
    def set_INSTRUMENTID(self, INSTRUMENTID):
        self.INSTRUMENTID = INSTRUMENTID
    def get_FILTER(self):
        return self.FILTER
    def set_FILTER(self, FILTER):
        self.FILTER = FILTER
    def hasContent_(self):
        if (
            self.DataDate or
            self.InstrumentData is not None or
            self.Trading is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Instrument', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Instrument')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Instrument')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Instrument', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Instrument'):
        if self.ANY is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            outfile.write(' ANY=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ANY), input_name='ANY')), ))
        if self.CUSIP is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            outfile.write(' CUSIP=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.CUSIP), input_name='CUSIP')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.INSTRUMENTTYPE is not None and 'INSTRUMENTTYPE' not in already_processed:
            already_processed.add('INSTRUMENTTYPE')
            outfile.write(' INSTRUMENTTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.INSTRUMENTTYPE), input_name='INSTRUMENTTYPE')), ))
        if self.ISIN is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            outfile.write(' ISIN=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ISIN), input_name='ISIN')), ))
        if self.QUICK is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            outfile.write(' QUICK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.QUICK), input_name='QUICK')), ))
        if self.SEDOL is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            outfile.write(' SEDOL=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SEDOL), input_name='SEDOL')), ))
        if self.DXLID is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            outfile.write(' DXLID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DXLID), input_name='DXLID')), ))
        if self.TICKER is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            outfile.write(' TICKER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER), input_name='TICKER')), ))
        if self.TICKER_CODE is not None and 'TICKER_CODE' not in already_processed:
            already_processed.add('TICKER_CODE')
            outfile.write(' TICKER.CODE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER_CODE), input_name='TICKER.CODE')), ))
        if self.INSTRUMENTID is not None and 'INSTRUMENTID' not in already_processed:
            already_processed.add('INSTRUMENTID')
            outfile.write(' INSTRUMENTID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.INSTRUMENTID), input_name='INSTRUMENTID')), ))
        if self.FILTER is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            outfile.write(' FILTER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.FILTER), input_name='FILTER')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Instrument', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
        if self.InstrumentData is not None:
            self.InstrumentData.export(outfile, level, namespaceprefix_, name_='InstrumentData', pretty_print=pretty_print)
        if self.Trading is not None:
            self.Trading.export(outfile, level, namespaceprefix_, name_='Trading', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ANY', node)
        if value is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            self.ANY = value
        value = find_attr_value_('CUSIP', node)
        if value is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            self.CUSIP = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('INSTRUMENTTYPE', node)
        if value is not None and 'INSTRUMENTTYPE' not in already_processed:
            already_processed.add('INSTRUMENTTYPE')
            self.INSTRUMENTTYPE = value
        value = find_attr_value_('ISIN', node)
        if value is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            self.ISIN = value
        value = find_attr_value_('QUICK', node)
        if value is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            self.QUICK = value
        value = find_attr_value_('SEDOL', node)
        if value is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            self.SEDOL = value
        value = find_attr_value_('DXLID', node)
        if value is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            self.DXLID = value
        value = find_attr_value_('TICKER', node)
        if value is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            self.TICKER = value
        value = find_attr_value_('TICKER.CODE', node)
        if value is not None and 'TICKER.CODE' not in already_processed:
            already_processed.add('TICKER.CODE')
            self.TICKER_CODE = value
        value = find_attr_value_('INSTRUMENTID', node)
        if value is not None and 'INSTRUMENTID' not in already_processed:
            already_processed.add('INSTRUMENTID')
            self.INSTRUMENTID = value
        value = find_attr_value_('FILTER', node)
        if value is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            self.FILTER = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType127.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
        elif nodeName_ == 'InstrumentData':
            obj_ = InstrumentDataType144.factory(parent_object_=self)
            obj_.build(child_)
            self.InstrumentData = obj_
            obj_.original_tagname_ = 'InstrumentData'
        elif nodeName_ == 'Trading':
            obj_ = TradingType145.factory(parent_object_=self)
            obj_.build(child_)
            self.Trading = obj_
            obj_.original_tagname_ = 'Trading'
# end class Instrument


class Transaction(GeneratedsSuper):
    """Transaction data"""
    subclass = None
    superclass = None
    def __init__(self, TRANSACTION=None, ANY=None, CUSIP=None, DATATYPE=None, DXLID=None, ISIN=None, QUICK=None, RANK=None, SEDOL=None, TICKER=None, TICKER_CODE=None, INSTRUMENTID=None, FILTER=None, BENCHMARKFILTER1=None, BENCHMARKFILTER2=None, MARKET=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.TRANSACTION = _cast(None, TRANSACTION)
        self.ANY = _cast(None, ANY)
        self.CUSIP = _cast(None, CUSIP)
        self.DATATYPE = _cast(None, DATATYPE)
        self.DXLID = _cast(None, DXLID)
        self.ISIN = _cast(None, ISIN)
        self.QUICK = _cast(None, QUICK)
        self.RANK = _cast(None, RANK)
        self.SEDOL = _cast(None, SEDOL)
        self.TICKER = _cast(None, TICKER)
        self.TICKER_CODE = _cast(None, TICKER_CODE)
        self.INSTRUMENTID = _cast(None, INSTRUMENTID)
        self.FILTER = _cast(None, FILTER)
        self.BENCHMARKFILTER1 = _cast(None, BENCHMARKFILTER1)
        self.BENCHMARKFILTER2 = _cast(None, BENCHMARKFILTER2)
        self.MARKET = _cast(None, MARKET)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Transaction)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Transaction.subclass:
            return Transaction.subclass(*args_, **kwargs_)
        else:
            return Transaction(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_TRANSACTION(self):
        return self.TRANSACTION
    def set_TRANSACTION(self, TRANSACTION):
        self.TRANSACTION = TRANSACTION
    def get_ANY(self):
        return self.ANY
    def set_ANY(self, ANY):
        self.ANY = ANY
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def get_TICKER_CODE(self):
        return self.TICKER_CODE
    def set_TICKER_CODE(self, TICKER_CODE):
        self.TICKER_CODE = TICKER_CODE
    def get_INSTRUMENTID(self):
        return self.INSTRUMENTID
    def set_INSTRUMENTID(self, INSTRUMENTID):
        self.INSTRUMENTID = INSTRUMENTID
    def get_FILTER(self):
        return self.FILTER
    def set_FILTER(self, FILTER):
        self.FILTER = FILTER
    def get_BENCHMARKFILTER1(self):
        return self.BENCHMARKFILTER1
    def set_BENCHMARKFILTER1(self, BENCHMARKFILTER1):
        self.BENCHMARKFILTER1 = BENCHMARKFILTER1
    def get_BENCHMARKFILTER2(self):
        return self.BENCHMARKFILTER2
    def set_BENCHMARKFILTER2(self, BENCHMARKFILTER2):
        self.BENCHMARKFILTER2 = BENCHMARKFILTER2
    def get_MARKET(self):
        return self.MARKET
    def set_MARKET(self, MARKET):
        self.MARKET = MARKET
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Transaction', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Transaction')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Transaction')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Transaction', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Transaction'):
        if self.TRANSACTION is not None and 'TRANSACTION' not in already_processed:
            already_processed.add('TRANSACTION')
            outfile.write(' TRANSACTION=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TRANSACTION), input_name='TRANSACTION')), ))
        if self.ANY is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            outfile.write(' ANY=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ANY), input_name='ANY')), ))
        if self.CUSIP is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            outfile.write(' CUSIP=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.CUSIP), input_name='CUSIP')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.DXLID is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            outfile.write(' DXLID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DXLID), input_name='DXLID')), ))
        if self.ISIN is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            outfile.write(' ISIN=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ISIN), input_name='ISIN')), ))
        if self.QUICK is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            outfile.write(' QUICK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.QUICK), input_name='QUICK')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.SEDOL is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            outfile.write(' SEDOL=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SEDOL), input_name='SEDOL')), ))
        if self.TICKER is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            outfile.write(' TICKER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER), input_name='TICKER')), ))
        if self.TICKER_CODE is not None and 'TICKER_CODE' not in already_processed:
            already_processed.add('TICKER_CODE')
            outfile.write(' TICKER.CODE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER_CODE), input_name='TICKER.CODE')), ))
        if self.INSTRUMENTID is not None and 'INSTRUMENTID' not in already_processed:
            already_processed.add('INSTRUMENTID')
            outfile.write(' INSTRUMENTID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.INSTRUMENTID), input_name='INSTRUMENTID')), ))
        if self.FILTER is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            outfile.write(' FILTER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.FILTER), input_name='FILTER')), ))
        if self.BENCHMARKFILTER1 is not None and 'BENCHMARKFILTER1' not in already_processed:
            already_processed.add('BENCHMARKFILTER1')
            outfile.write(' BENCHMARKFILTER1=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.BENCHMARKFILTER1), input_name='BENCHMARKFILTER1')), ))
        if self.BENCHMARKFILTER2 is not None and 'BENCHMARKFILTER2' not in already_processed:
            already_processed.add('BENCHMARKFILTER2')
            outfile.write(' BENCHMARKFILTER2=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.BENCHMARKFILTER2), input_name='BENCHMARKFILTER2')), ))
        if self.MARKET is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            outfile.write(' MARKET=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.MARKET), input_name='MARKET')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Transaction', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('TRANSACTION', node)
        if value is not None and 'TRANSACTION' not in already_processed:
            already_processed.add('TRANSACTION')
            self.TRANSACTION = value
        value = find_attr_value_('ANY', node)
        if value is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            self.ANY = value
        value = find_attr_value_('CUSIP', node)
        if value is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            self.CUSIP = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('DXLID', node)
        if value is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            self.DXLID = value
        value = find_attr_value_('ISIN', node)
        if value is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            self.ISIN = value
        value = find_attr_value_('QUICK', node)
        if value is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            self.QUICK = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('SEDOL', node)
        if value is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            self.SEDOL = value
        value = find_attr_value_('TICKER', node)
        if value is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            self.TICKER = value
        value = find_attr_value_('TICKER.CODE', node)
        if value is not None and 'TICKER.CODE' not in already_processed:
            already_processed.add('TICKER.CODE')
            self.TICKER_CODE = value
        value = find_attr_value_('INSTRUMENTID', node)
        if value is not None and 'INSTRUMENTID' not in already_processed:
            already_processed.add('INSTRUMENTID')
            self.INSTRUMENTID = value
        value = find_attr_value_('FILTER', node)
        if value is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            self.FILTER = value
        value = find_attr_value_('BENCHMARKFILTER1', node)
        if value is not None and 'BENCHMARKFILTER1' not in already_processed:
            already_processed.add('BENCHMARKFILTER1')
            self.BENCHMARKFILTER1 = value
        value = find_attr_value_('BENCHMARKFILTER2', node)
        if value is not None and 'BENCHMARKFILTER2' not in already_processed:
            already_processed.add('BENCHMARKFILTER2')
            self.BENCHMARKFILTER2 = value
        value = find_attr_value_('MARKET', node)
        if value is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            self.MARKET = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType146.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class Transaction


class Market(GeneratedsSuper):
    """Aggregated market data"""
    subclass = None
    superclass = None
    def __init__(self, MARKET=None, DATATYPE=None, FILTER=None, DataDate=None, MarketData=None, Trading=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.MARKET = _cast(None, MARKET)
        self.DATATYPE = _cast(None, DATATYPE)
        self.FILTER = _cast(None, FILTER)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
        self.MarketData = MarketData
        self.Trading = Trading
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Market)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Market.subclass:
            return Market.subclass(*args_, **kwargs_)
        else:
            return Market(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_MarketData(self):
        return self.MarketData
    def set_MarketData(self, MarketData):
        self.MarketData = MarketData
    def get_Trading(self):
        return self.Trading
    def set_Trading(self, Trading):
        self.Trading = Trading
    def get_MARKET(self):
        return self.MARKET
    def set_MARKET(self, MARKET):
        self.MARKET = MARKET
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_FILTER(self):
        return self.FILTER
    def set_FILTER(self, FILTER):
        self.FILTER = FILTER
    def hasContent_(self):
        if (
            self.DataDate or
            self.MarketData is not None or
            self.Trading is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Market', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Market')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Market')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Market', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Market'):
        if self.MARKET is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            outfile.write(' MARKET=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.MARKET), input_name='MARKET')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.FILTER is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            outfile.write(' FILTER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.FILTER), input_name='FILTER')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Market', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
        if self.MarketData is not None:
            self.MarketData.export(outfile, level, namespaceprefix_, name_='MarketData', pretty_print=pretty_print)
        if self.Trading is not None:
            self.Trading.export(outfile, level, namespaceprefix_, name_='Trading', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('MARKET', node)
        if value is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            self.MARKET = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('FILTER', node)
        if value is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            self.FILTER = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType148.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
        elif nodeName_ == 'MarketData':
            obj_ = MarketDataType.factory(parent_object_=self)
            obj_.build(child_)
            self.MarketData = obj_
            obj_.original_tagname_ = 'MarketData'
        elif nodeName_ == 'Trading':
            obj_ = TradingType157.factory(parent_object_=self)
            obj_.build(child_)
            self.Trading = obj_
            obj_.original_tagname_ = 'Trading'
# end class Market


class Constituent(GeneratedsSuper):
    """Instruments as market constituents"""
    subclass = None
    superclass = None
    def __init__(self, CONSTITUENT=None, DATATYPE=None, MARKET=None, RANK=None, RANKTYPE=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.CONSTITUENT = _cast(None, CONSTITUENT)
        self.DATATYPE = _cast(None, DATATYPE)
        self.MARKET = _cast(None, MARKET)
        self.RANK = _cast(None, RANK)
        self.RANKTYPE = _cast(None, RANKTYPE)
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Constituent)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Constituent.subclass:
            return Constituent.subclass(*args_, **kwargs_)
        else:
            return Constituent(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_CONSTITUENT(self):
        return self.CONSTITUENT
    def set_CONSTITUENT(self, CONSTITUENT):
        self.CONSTITUENT = CONSTITUENT
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_MARKET(self):
        return self.MARKET
    def set_MARKET(self, MARKET):
        self.MARKET = MARKET
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_RANKTYPE(self):
        return self.RANKTYPE
    def set_RANKTYPE(self, RANKTYPE):
        self.RANKTYPE = RANKTYPE
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Constituent', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Constituent')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Constituent')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Constituent', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Constituent'):
        if self.CONSTITUENT is not None and 'CONSTITUENT' not in already_processed:
            already_processed.add('CONSTITUENT')
            outfile.write(' CONSTITUENT=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.CONSTITUENT), input_name='CONSTITUENT')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.MARKET is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            outfile.write(' MARKET=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.MARKET), input_name='MARKET')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.RANKTYPE is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            outfile.write(' RANKTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANKTYPE), input_name='RANKTYPE')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Constituent', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('CONSTITUENT', node)
        if value is not None and 'CONSTITUENT' not in already_processed:
            already_processed.add('CONSTITUENT')
            self.CONSTITUENT = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('MARKET', node)
        if value is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            self.MARKET = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('RANKTYPE', node)
        if value is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            self.RANKTYPE = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType158.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class Constituent


class Search(GeneratedsSuper):
    """Instrument search results"""
    subclass = None
    superclass = None
    def __init__(self, ANY=None, CUSIP=None, DATATYPE=None, DXLID=None, INSTRUMENTNAME=None, INSTRUMENTTYPE=None, ISIN=None, QUICK=None, RANK=None, SEDOL=None, TICKER=None, TICKER_CODE=None, FILTER=None, DE_INHOUSE=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ANY = _cast(None, ANY)
        self.CUSIP = _cast(None, CUSIP)
        self.DATATYPE = _cast(None, DATATYPE)
        self.DXLID = _cast(None, DXLID)
        self.INSTRUMENTNAME = _cast(None, INSTRUMENTNAME)
        self.INSTRUMENTTYPE = _cast(None, INSTRUMENTTYPE)
        self.ISIN = _cast(None, ISIN)
        self.QUICK = _cast(None, QUICK)
        self.RANK = _cast(None, RANK)
        self.SEDOL = _cast(None, SEDOL)
        self.TICKER = _cast(None, TICKER)
        self.TICKER_CODE = _cast(None, TICKER_CODE)
        self.FILTER = _cast(None, FILTER)
        self.DE_INHOUSE = _cast(None, DE_INHOUSE)
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Search)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Search.subclass:
            return Search.subclass(*args_, **kwargs_)
        else:
            return Search(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_ANY(self):
        return self.ANY
    def set_ANY(self, ANY):
        self.ANY = ANY
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_INSTRUMENTNAME(self):
        return self.INSTRUMENTNAME
    def set_INSTRUMENTNAME(self, INSTRUMENTNAME):
        self.INSTRUMENTNAME = INSTRUMENTNAME
    def get_INSTRUMENTTYPE(self):
        return self.INSTRUMENTTYPE
    def set_INSTRUMENTTYPE(self, INSTRUMENTTYPE):
        self.INSTRUMENTTYPE = INSTRUMENTTYPE
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def get_TICKER_CODE(self):
        return self.TICKER_CODE
    def set_TICKER_CODE(self, TICKER_CODE):
        self.TICKER_CODE = TICKER_CODE
    def get_FILTER(self):
        return self.FILTER
    def set_FILTER(self, FILTER):
        self.FILTER = FILTER
    def get_DE_INHOUSE(self):
        return self.DE_INHOUSE
    def set_DE_INHOUSE(self, DE_INHOUSE):
        self.DE_INHOUSE = DE_INHOUSE
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Search', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Search')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Search')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Search', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Search'):
        if self.ANY is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            outfile.write(' ANY=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ANY), input_name='ANY')), ))
        if self.CUSIP is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            outfile.write(' CUSIP=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.CUSIP), input_name='CUSIP')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.DXLID is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            outfile.write(' DXLID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DXLID), input_name='DXLID')), ))
        if self.INSTRUMENTNAME is not None and 'INSTRUMENTNAME' not in already_processed:
            already_processed.add('INSTRUMENTNAME')
            outfile.write(' INSTRUMENTNAME=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.INSTRUMENTNAME), input_name='INSTRUMENTNAME')), ))
        if self.INSTRUMENTTYPE is not None and 'INSTRUMENTTYPE' not in already_processed:
            already_processed.add('INSTRUMENTTYPE')
            outfile.write(' INSTRUMENTTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.INSTRUMENTTYPE), input_name='INSTRUMENTTYPE')), ))
        if self.ISIN is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            outfile.write(' ISIN=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ISIN), input_name='ISIN')), ))
        if self.QUICK is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            outfile.write(' QUICK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.QUICK), input_name='QUICK')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.SEDOL is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            outfile.write(' SEDOL=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SEDOL), input_name='SEDOL')), ))
        if self.TICKER is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            outfile.write(' TICKER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER), input_name='TICKER')), ))
        if self.TICKER_CODE is not None and 'TICKER_CODE' not in already_processed:
            already_processed.add('TICKER_CODE')
            outfile.write(' TICKER.CODE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER_CODE), input_name='TICKER.CODE')), ))
        if self.FILTER is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            outfile.write(' FILTER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.FILTER), input_name='FILTER')), ))
        if self.DE_INHOUSE is not None and 'DE_INHOUSE' not in already_processed:
            already_processed.add('DE_INHOUSE')
            outfile.write(' DE_INHOUSE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DE_INHOUSE), input_name='DE_INHOUSE')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Search', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ANY', node)
        if value is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            self.ANY = value
        value = find_attr_value_('CUSIP', node)
        if value is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            self.CUSIP = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('DXLID', node)
        if value is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            self.DXLID = value
        value = find_attr_value_('INSTRUMENTNAME', node)
        if value is not None and 'INSTRUMENTNAME' not in already_processed:
            already_processed.add('INSTRUMENTNAME')
            self.INSTRUMENTNAME = value
        value = find_attr_value_('INSTRUMENTTYPE', node)
        if value is not None and 'INSTRUMENTTYPE' not in already_processed:
            already_processed.add('INSTRUMENTTYPE')
            self.INSTRUMENTTYPE = value
        value = find_attr_value_('ISIN', node)
        if value is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            self.ISIN = value
        value = find_attr_value_('QUICK', node)
        if value is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            self.QUICK = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('SEDOL', node)
        if value is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            self.SEDOL = value
        value = find_attr_value_('TICKER', node)
        if value is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            self.TICKER = value
        value = find_attr_value_('TICKER.CODE', node)
        if value is not None and 'TICKER.CODE' not in already_processed:
            already_processed.add('TICKER.CODE')
            self.TICKER_CODE = value
        value = find_attr_value_('FILTER', node)
        if value is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            self.FILTER = value
        value = find_attr_value_('DE_INHOUSE', node)
        if value is not None and 'DE_INHOUSE' not in already_processed:
            already_processed.add('DE_INHOUSE')
            self.DE_INHOUSE = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType159.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class Search


class RelatedInstruments(GeneratedsSuper):
    """Related issues"""
    subclass = None
    superclass = None
    def __init__(self, ANY=None, CUSIP=None, DATATYPE=None, DXLID=None, INSTRUMENTTYPE=None, ISIN=None, QUICK=None, SEDOL=None, TICKER=None, TICKER_CODE=None, INSTRUMENTID=None, RANK=None, FILTER=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ANY = _cast(None, ANY)
        self.CUSIP = _cast(None, CUSIP)
        self.DATATYPE = _cast(None, DATATYPE)
        self.DXLID = _cast(None, DXLID)
        self.INSTRUMENTTYPE = _cast(None, INSTRUMENTTYPE)
        self.ISIN = _cast(None, ISIN)
        self.QUICK = _cast(None, QUICK)
        self.SEDOL = _cast(None, SEDOL)
        self.TICKER = _cast(None, TICKER)
        self.TICKER_CODE = _cast(None, TICKER_CODE)
        self.INSTRUMENTID = _cast(None, INSTRUMENTID)
        self.RANK = _cast(None, RANK)
        self.FILTER = _cast(None, FILTER)
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RelatedInstruments)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RelatedInstruments.subclass:
            return RelatedInstruments.subclass(*args_, **kwargs_)
        else:
            return RelatedInstruments(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_ANY(self):
        return self.ANY
    def set_ANY(self, ANY):
        self.ANY = ANY
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_INSTRUMENTTYPE(self):
        return self.INSTRUMENTTYPE
    def set_INSTRUMENTTYPE(self, INSTRUMENTTYPE):
        self.INSTRUMENTTYPE = INSTRUMENTTYPE
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def get_TICKER_CODE(self):
        return self.TICKER_CODE
    def set_TICKER_CODE(self, TICKER_CODE):
        self.TICKER_CODE = TICKER_CODE
    def get_INSTRUMENTID(self):
        return self.INSTRUMENTID
    def set_INSTRUMENTID(self, INSTRUMENTID):
        self.INSTRUMENTID = INSTRUMENTID
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_FILTER(self):
        return self.FILTER
    def set_FILTER(self, FILTER):
        self.FILTER = FILTER
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RelatedInstruments', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RelatedInstruments')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RelatedInstruments')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RelatedInstruments', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RelatedInstruments'):
        if self.ANY is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            outfile.write(' ANY=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ANY), input_name='ANY')), ))
        if self.CUSIP is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            outfile.write(' CUSIP=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.CUSIP), input_name='CUSIP')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.DXLID is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            outfile.write(' DXLID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DXLID), input_name='DXLID')), ))
        if self.INSTRUMENTTYPE is not None and 'INSTRUMENTTYPE' not in already_processed:
            already_processed.add('INSTRUMENTTYPE')
            outfile.write(' INSTRUMENTTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.INSTRUMENTTYPE), input_name='INSTRUMENTTYPE')), ))
        if self.ISIN is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            outfile.write(' ISIN=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ISIN), input_name='ISIN')), ))
        if self.QUICK is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            outfile.write(' QUICK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.QUICK), input_name='QUICK')), ))
        if self.SEDOL is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            outfile.write(' SEDOL=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SEDOL), input_name='SEDOL')), ))
        if self.TICKER is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            outfile.write(' TICKER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER), input_name='TICKER')), ))
        if self.TICKER_CODE is not None and 'TICKER_CODE' not in already_processed:
            already_processed.add('TICKER_CODE')
            outfile.write(' TICKER.CODE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER_CODE), input_name='TICKER.CODE')), ))
        if self.INSTRUMENTID is not None and 'INSTRUMENTID' not in already_processed:
            already_processed.add('INSTRUMENTID')
            outfile.write(' INSTRUMENTID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.INSTRUMENTID), input_name='INSTRUMENTID')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.FILTER is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            outfile.write(' FILTER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.FILTER), input_name='FILTER')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RelatedInstruments', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ANY', node)
        if value is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            self.ANY = value
        value = find_attr_value_('CUSIP', node)
        if value is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            self.CUSIP = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('DXLID', node)
        if value is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            self.DXLID = value
        value = find_attr_value_('INSTRUMENTTYPE', node)
        if value is not None and 'INSTRUMENTTYPE' not in already_processed:
            already_processed.add('INSTRUMENTTYPE')
            self.INSTRUMENTTYPE = value
        value = find_attr_value_('ISIN', node)
        if value is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            self.ISIN = value
        value = find_attr_value_('QUICK', node)
        if value is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            self.QUICK = value
        value = find_attr_value_('SEDOL', node)
        if value is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            self.SEDOL = value
        value = find_attr_value_('TICKER', node)
        if value is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            self.TICKER = value
        value = find_attr_value_('TICKER.CODE', node)
        if value is not None and 'TICKER.CODE' not in already_processed:
            already_processed.add('TICKER.CODE')
            self.TICKER_CODE = value
        value = find_attr_value_('INSTRUMENTID', node)
        if value is not None and 'INSTRUMENTID' not in already_processed:
            already_processed.add('INSTRUMENTID')
            self.INSTRUMENTID = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('FILTER', node)
        if value is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            self.FILTER = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType160.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class RelatedInstruments


class Inventory(GeneratedsSuper):
    """Inventory data"""
    subclass = None
    superclass = None
    def __init__(self, ANY=None, CUSIP=None, DATATYPE=None, DXLID=None, ISIN=None, QUICK=None, RANK=None, SEDOL=None, TICKER=None, TICKER_CODE=None, INSTRUMENTID=None, FILTER=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ANY = _cast(None, ANY)
        self.CUSIP = _cast(None, CUSIP)
        self.DATATYPE = _cast(None, DATATYPE)
        self.DXLID = _cast(None, DXLID)
        self.ISIN = _cast(None, ISIN)
        self.QUICK = _cast(None, QUICK)
        self.RANK = _cast(None, RANK)
        self.SEDOL = _cast(None, SEDOL)
        self.TICKER = _cast(None, TICKER)
        self.TICKER_CODE = _cast(None, TICKER_CODE)
        self.INSTRUMENTID = _cast(None, INSTRUMENTID)
        self.FILTER = _cast(None, FILTER)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Inventory)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Inventory.subclass:
            return Inventory.subclass(*args_, **kwargs_)
        else:
            return Inventory(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_ANY(self):
        return self.ANY
    def set_ANY(self, ANY):
        self.ANY = ANY
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def get_TICKER_CODE(self):
        return self.TICKER_CODE
    def set_TICKER_CODE(self, TICKER_CODE):
        self.TICKER_CODE = TICKER_CODE
    def get_INSTRUMENTID(self):
        return self.INSTRUMENTID
    def set_INSTRUMENTID(self, INSTRUMENTID):
        self.INSTRUMENTID = INSTRUMENTID
    def get_FILTER(self):
        return self.FILTER
    def set_FILTER(self, FILTER):
        self.FILTER = FILTER
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Inventory', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Inventory')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Inventory')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Inventory', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Inventory'):
        if self.ANY is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            outfile.write(' ANY=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ANY), input_name='ANY')), ))
        if self.CUSIP is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            outfile.write(' CUSIP=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.CUSIP), input_name='CUSIP')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.DXLID is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            outfile.write(' DXLID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DXLID), input_name='DXLID')), ))
        if self.ISIN is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            outfile.write(' ISIN=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ISIN), input_name='ISIN')), ))
        if self.QUICK is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            outfile.write(' QUICK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.QUICK), input_name='QUICK')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.SEDOL is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            outfile.write(' SEDOL=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SEDOL), input_name='SEDOL')), ))
        if self.TICKER is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            outfile.write(' TICKER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER), input_name='TICKER')), ))
        if self.TICKER_CODE is not None and 'TICKER_CODE' not in already_processed:
            already_processed.add('TICKER_CODE')
            outfile.write(' TICKER.CODE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER_CODE), input_name='TICKER.CODE')), ))
        if self.INSTRUMENTID is not None and 'INSTRUMENTID' not in already_processed:
            already_processed.add('INSTRUMENTID')
            outfile.write(' INSTRUMENTID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.INSTRUMENTID), input_name='INSTRUMENTID')), ))
        if self.FILTER is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            outfile.write(' FILTER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.FILTER), input_name='FILTER')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Inventory', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ANY', node)
        if value is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            self.ANY = value
        value = find_attr_value_('CUSIP', node)
        if value is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            self.CUSIP = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('DXLID', node)
        if value is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            self.DXLID = value
        value = find_attr_value_('ISIN', node)
        if value is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            self.ISIN = value
        value = find_attr_value_('QUICK', node)
        if value is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            self.QUICK = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('SEDOL', node)
        if value is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            self.SEDOL = value
        value = find_attr_value_('TICKER', node)
        if value is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            self.TICKER = value
        value = find_attr_value_('TICKER.CODE', node)
        if value is not None and 'TICKER.CODE' not in already_processed:
            already_processed.add('TICKER.CODE')
            self.TICKER_CODE = value
        value = find_attr_value_('INSTRUMENTID', node)
        if value is not None and 'INSTRUMENTID' not in already_processed:
            already_processed.add('INSTRUMENTID')
            self.INSTRUMENTID = value
        value = find_attr_value_('FILTER', node)
        if value is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            self.FILTER = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType161.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class Inventory


class Ban(GeneratedsSuper):
    """Ban data"""
    subclass = None
    superclass = None
    def __init__(self, BAN=None, ANY=None, AUTH=None, CUSIP=None, DATATYPE=None, DXLID=None, ISIN=None, QUICK=None, RANK=None, SEDOL=None, TICKER=None, TICKER_CODE=None, FILTER=None, DataDate=None, InstrumentData=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.BAN = _cast(None, BAN)
        self.ANY = _cast(None, ANY)
        self.AUTH = _cast(None, AUTH)
        self.CUSIP = _cast(None, CUSIP)
        self.DATATYPE = _cast(None, DATATYPE)
        self.DXLID = _cast(None, DXLID)
        self.ISIN = _cast(None, ISIN)
        self.QUICK = _cast(None, QUICK)
        self.RANK = _cast(None, RANK)
        self.SEDOL = _cast(None, SEDOL)
        self.TICKER = _cast(None, TICKER)
        self.TICKER_CODE = _cast(None, TICKER_CODE)
        self.FILTER = _cast(None, FILTER)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
        self.InstrumentData = InstrumentData
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Ban)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Ban.subclass:
            return Ban.subclass(*args_, **kwargs_)
        else:
            return Ban(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_InstrumentData(self):
        return self.InstrumentData
    def set_InstrumentData(self, InstrumentData):
        self.InstrumentData = InstrumentData
    def get_BAN(self):
        return self.BAN
    def set_BAN(self, BAN):
        self.BAN = BAN
    def get_ANY(self):
        return self.ANY
    def set_ANY(self, ANY):
        self.ANY = ANY
    def get_AUTH(self):
        return self.AUTH
    def set_AUTH(self, AUTH):
        self.AUTH = AUTH
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def get_TICKER_CODE(self):
        return self.TICKER_CODE
    def set_TICKER_CODE(self, TICKER_CODE):
        self.TICKER_CODE = TICKER_CODE
    def get_FILTER(self):
        return self.FILTER
    def set_FILTER(self, FILTER):
        self.FILTER = FILTER
    def hasContent_(self):
        if (
            self.DataDate or
            self.InstrumentData is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Ban', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Ban')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Ban')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Ban', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Ban'):
        if self.BAN is not None and 'BAN' not in already_processed:
            already_processed.add('BAN')
            outfile.write(' BAN=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.BAN), input_name='BAN')), ))
        if self.ANY is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            outfile.write(' ANY=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ANY), input_name='ANY')), ))
        if self.AUTH is not None and 'AUTH' not in already_processed:
            already_processed.add('AUTH')
            outfile.write(' AUTH=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.AUTH), input_name='AUTH')), ))
        if self.CUSIP is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            outfile.write(' CUSIP=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.CUSIP), input_name='CUSIP')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.DXLID is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            outfile.write(' DXLID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DXLID), input_name='DXLID')), ))
        if self.ISIN is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            outfile.write(' ISIN=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ISIN), input_name='ISIN')), ))
        if self.QUICK is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            outfile.write(' QUICK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.QUICK), input_name='QUICK')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.SEDOL is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            outfile.write(' SEDOL=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SEDOL), input_name='SEDOL')), ))
        if self.TICKER is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            outfile.write(' TICKER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER), input_name='TICKER')), ))
        if self.TICKER_CODE is not None and 'TICKER_CODE' not in already_processed:
            already_processed.add('TICKER_CODE')
            outfile.write(' TICKER.CODE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER_CODE), input_name='TICKER.CODE')), ))
        if self.FILTER is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            outfile.write(' FILTER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.FILTER), input_name='FILTER')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Ban', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
        if self.InstrumentData is not None:
            self.InstrumentData.export(outfile, level, namespaceprefix_, name_='InstrumentData', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('BAN', node)
        if value is not None and 'BAN' not in already_processed:
            already_processed.add('BAN')
            self.BAN = value
        value = find_attr_value_('ANY', node)
        if value is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            self.ANY = value
        value = find_attr_value_('AUTH', node)
        if value is not None and 'AUTH' not in already_processed:
            already_processed.add('AUTH')
            self.AUTH = value
        value = find_attr_value_('CUSIP', node)
        if value is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            self.CUSIP = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('DXLID', node)
        if value is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            self.DXLID = value
        value = find_attr_value_('ISIN', node)
        if value is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            self.ISIN = value
        value = find_attr_value_('QUICK', node)
        if value is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            self.QUICK = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('SEDOL', node)
        if value is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            self.SEDOL = value
        value = find_attr_value_('TICKER', node)
        if value is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            self.TICKER = value
        value = find_attr_value_('TICKER.CODE', node)
        if value is not None and 'TICKER.CODE' not in already_processed:
            already_processed.add('TICKER.CODE')
            self.TICKER_CODE = value
        value = find_attr_value_('FILTER', node)
        if value is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            self.FILTER = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType163.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
        elif nodeName_ == 'InstrumentData':
            obj_ = InstrumentDataType164.factory(parent_object_=self)
            obj_.build(child_)
            self.InstrumentData = obj_
            obj_.original_tagname_ = 'InstrumentData'
# end class Ban


class Disclosure(GeneratedsSuper):
    """Disclosure data"""
    subclass = None
    superclass = None
    def __init__(self, DISCLOSURE=None, ANY=None, AUTH=None, CUSIP=None, DATATYPE=None, DXLID=None, ENTITY=None, ISIN=None, QUICK=None, RANK=None, SEDOL=None, TICKER=None, TICKER_CODE=None, FILTER=None, DataDate=None, InstrumentData=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DISCLOSURE = _cast(None, DISCLOSURE)
        self.ANY = _cast(None, ANY)
        self.AUTH = _cast(None, AUTH)
        self.CUSIP = _cast(None, CUSIP)
        self.DATATYPE = _cast(None, DATATYPE)
        self.DXLID = _cast(None, DXLID)
        self.ENTITY = _cast(None, ENTITY)
        self.ISIN = _cast(None, ISIN)
        self.QUICK = _cast(None, QUICK)
        self.RANK = _cast(None, RANK)
        self.SEDOL = _cast(None, SEDOL)
        self.TICKER = _cast(None, TICKER)
        self.TICKER_CODE = _cast(None, TICKER_CODE)
        self.FILTER = _cast(None, FILTER)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
        self.InstrumentData = InstrumentData
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Disclosure)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Disclosure.subclass:
            return Disclosure.subclass(*args_, **kwargs_)
        else:
            return Disclosure(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_InstrumentData(self):
        return self.InstrumentData
    def set_InstrumentData(self, InstrumentData):
        self.InstrumentData = InstrumentData
    def get_DISCLOSURE(self):
        return self.DISCLOSURE
    def set_DISCLOSURE(self, DISCLOSURE):
        self.DISCLOSURE = DISCLOSURE
    def get_ANY(self):
        return self.ANY
    def set_ANY(self, ANY):
        self.ANY = ANY
    def get_AUTH(self):
        return self.AUTH
    def set_AUTH(self, AUTH):
        self.AUTH = AUTH
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_ENTITY(self):
        return self.ENTITY
    def set_ENTITY(self, ENTITY):
        self.ENTITY = ENTITY
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def get_TICKER_CODE(self):
        return self.TICKER_CODE
    def set_TICKER_CODE(self, TICKER_CODE):
        self.TICKER_CODE = TICKER_CODE
    def get_FILTER(self):
        return self.FILTER
    def set_FILTER(self, FILTER):
        self.FILTER = FILTER
    def hasContent_(self):
        if (
            self.DataDate or
            self.InstrumentData is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Disclosure', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Disclosure')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Disclosure')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Disclosure', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Disclosure'):
        if self.DISCLOSURE is not None and 'DISCLOSURE' not in already_processed:
            already_processed.add('DISCLOSURE')
            outfile.write(' DISCLOSURE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DISCLOSURE), input_name='DISCLOSURE')), ))
        if self.ANY is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            outfile.write(' ANY=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ANY), input_name='ANY')), ))
        if self.AUTH is not None and 'AUTH' not in already_processed:
            already_processed.add('AUTH')
            outfile.write(' AUTH=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.AUTH), input_name='AUTH')), ))
        if self.CUSIP is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            outfile.write(' CUSIP=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.CUSIP), input_name='CUSIP')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.DXLID is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            outfile.write(' DXLID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DXLID), input_name='DXLID')), ))
        if self.ENTITY is not None and 'ENTITY' not in already_processed:
            already_processed.add('ENTITY')
            outfile.write(' ENTITY=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ENTITY), input_name='ENTITY')), ))
        if self.ISIN is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            outfile.write(' ISIN=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ISIN), input_name='ISIN')), ))
        if self.QUICK is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            outfile.write(' QUICK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.QUICK), input_name='QUICK')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.SEDOL is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            outfile.write(' SEDOL=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SEDOL), input_name='SEDOL')), ))
        if self.TICKER is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            outfile.write(' TICKER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER), input_name='TICKER')), ))
        if self.TICKER_CODE is not None and 'TICKER_CODE' not in already_processed:
            already_processed.add('TICKER_CODE')
            outfile.write(' TICKER.CODE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER_CODE), input_name='TICKER.CODE')), ))
        if self.FILTER is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            outfile.write(' FILTER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.FILTER), input_name='FILTER')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Disclosure', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
        if self.InstrumentData is not None:
            self.InstrumentData.export(outfile, level, namespaceprefix_, name_='InstrumentData', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DISCLOSURE', node)
        if value is not None and 'DISCLOSURE' not in already_processed:
            already_processed.add('DISCLOSURE')
            self.DISCLOSURE = value
        value = find_attr_value_('ANY', node)
        if value is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            self.ANY = value
        value = find_attr_value_('AUTH', node)
        if value is not None and 'AUTH' not in already_processed:
            already_processed.add('AUTH')
            self.AUTH = value
        value = find_attr_value_('CUSIP', node)
        if value is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            self.CUSIP = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('DXLID', node)
        if value is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            self.DXLID = value
        value = find_attr_value_('ENTITY', node)
        if value is not None and 'ENTITY' not in already_processed:
            already_processed.add('ENTITY')
            self.ENTITY = value
        value = find_attr_value_('ISIN', node)
        if value is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            self.ISIN = value
        value = find_attr_value_('QUICK', node)
        if value is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            self.QUICK = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('SEDOL', node)
        if value is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            self.SEDOL = value
        value = find_attr_value_('TICKER', node)
        if value is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            self.TICKER = value
        value = find_attr_value_('TICKER.CODE', node)
        if value is not None and 'TICKER.CODE' not in already_processed:
            already_processed.add('TICKER.CODE')
            self.TICKER_CODE = value
        value = find_attr_value_('FILTER', node)
        if value is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            self.FILTER = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType165.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
        elif nodeName_ == 'InstrumentData':
            obj_ = InstrumentDataType166.factory(parent_object_=self)
            obj_.build(child_)
            self.InstrumentData = obj_
            obj_.original_tagname_ = 'InstrumentData'
# end class Disclosure


class Exchange(GeneratedsSuper):
    """Exchange data"""
    subclass = None
    superclass = None
    def __init__(self, ANY=None, CUSIP=None, DATATYPE=None, DXLID=None, ENTITY=None, ISIN=None, QUICK=None, RANK=None, SEDOL=None, TICKER=None, TICKER_CODE=None, FILTER=None, DataDate=None, InstrumentData=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ANY = _cast(None, ANY)
        self.CUSIP = _cast(None, CUSIP)
        self.DATATYPE = _cast(None, DATATYPE)
        self.DXLID = _cast(None, DXLID)
        self.ENTITY = _cast(None, ENTITY)
        self.ISIN = _cast(None, ISIN)
        self.QUICK = _cast(None, QUICK)
        self.RANK = _cast(None, RANK)
        self.SEDOL = _cast(None, SEDOL)
        self.TICKER = _cast(None, TICKER)
        self.TICKER_CODE = _cast(None, TICKER_CODE)
        self.FILTER = _cast(None, FILTER)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
        self.InstrumentData = InstrumentData
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Exchange)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Exchange.subclass:
            return Exchange.subclass(*args_, **kwargs_)
        else:
            return Exchange(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_InstrumentData(self):
        return self.InstrumentData
    def set_InstrumentData(self, InstrumentData):
        self.InstrumentData = InstrumentData
    def get_ANY(self):
        return self.ANY
    def set_ANY(self, ANY):
        self.ANY = ANY
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_ENTITY(self):
        return self.ENTITY
    def set_ENTITY(self, ENTITY):
        self.ENTITY = ENTITY
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def get_TICKER_CODE(self):
        return self.TICKER_CODE
    def set_TICKER_CODE(self, TICKER_CODE):
        self.TICKER_CODE = TICKER_CODE
    def get_FILTER(self):
        return self.FILTER
    def set_FILTER(self, FILTER):
        self.FILTER = FILTER
    def hasContent_(self):
        if (
            self.DataDate or
            self.InstrumentData is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Exchange', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Exchange')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Exchange')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Exchange', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Exchange'):
        if self.ANY is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            outfile.write(' ANY=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ANY), input_name='ANY')), ))
        if self.CUSIP is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            outfile.write(' CUSIP=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.CUSIP), input_name='CUSIP')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.DXLID is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            outfile.write(' DXLID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DXLID), input_name='DXLID')), ))
        if self.ENTITY is not None and 'ENTITY' not in already_processed:
            already_processed.add('ENTITY')
            outfile.write(' ENTITY=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ENTITY), input_name='ENTITY')), ))
        if self.ISIN is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            outfile.write(' ISIN=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ISIN), input_name='ISIN')), ))
        if self.QUICK is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            outfile.write(' QUICK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.QUICK), input_name='QUICK')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.SEDOL is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            outfile.write(' SEDOL=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SEDOL), input_name='SEDOL')), ))
        if self.TICKER is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            outfile.write(' TICKER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER), input_name='TICKER')), ))
        if self.TICKER_CODE is not None and 'TICKER_CODE' not in already_processed:
            already_processed.add('TICKER_CODE')
            outfile.write(' TICKER.CODE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER_CODE), input_name='TICKER.CODE')), ))
        if self.FILTER is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            outfile.write(' FILTER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.FILTER), input_name='FILTER')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Exchange', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
        if self.InstrumentData is not None:
            self.InstrumentData.export(outfile, level, namespaceprefix_, name_='InstrumentData', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ANY', node)
        if value is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            self.ANY = value
        value = find_attr_value_('CUSIP', node)
        if value is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            self.CUSIP = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('DXLID', node)
        if value is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            self.DXLID = value
        value = find_attr_value_('ENTITY', node)
        if value is not None and 'ENTITY' not in already_processed:
            already_processed.add('ENTITY')
            self.ENTITY = value
        value = find_attr_value_('ISIN', node)
        if value is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            self.ISIN = value
        value = find_attr_value_('QUICK', node)
        if value is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            self.QUICK = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('SEDOL', node)
        if value is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            self.SEDOL = value
        value = find_attr_value_('TICKER', node)
        if value is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            self.TICKER = value
        value = find_attr_value_('TICKER.CODE', node)
        if value is not None and 'TICKER.CODE' not in already_processed:
            already_processed.add('TICKER.CODE')
            self.TICKER_CODE = value
        value = find_attr_value_('FILTER', node)
        if value is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            self.FILTER = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType167.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
        elif nodeName_ == 'InstrumentData':
            obj_ = InstrumentDataType168.factory(parent_object_=self)
            obj_.build(child_)
            self.InstrumentData = obj_
            obj_.original_tagname_ = 'InstrumentData'
# end class Exchange


class Margin(GeneratedsSuper):
    """Margin data"""
    subclass = None
    superclass = None
    def __init__(self, ANY=None, CUSIP=None, DATATYPE=None, DXLID=None, ENTITY=None, ISIN=None, QUICK=None, RANK=None, RANKTYPE=None, SEDOL=None, TICKER=None, TICKER_CODE=None, FILTER=None, DataDate=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ANY = _cast(None, ANY)
        self.CUSIP = _cast(None, CUSIP)
        self.DATATYPE = _cast(None, DATATYPE)
        self.DXLID = _cast(None, DXLID)
        self.ENTITY = _cast(None, ENTITY)
        self.ISIN = _cast(None, ISIN)
        self.QUICK = _cast(None, QUICK)
        self.RANK = _cast(None, RANK)
        self.RANKTYPE = _cast(None, RANKTYPE)
        self.SEDOL = _cast(None, SEDOL)
        self.TICKER = _cast(None, TICKER)
        self.TICKER_CODE = _cast(None, TICKER_CODE)
        self.FILTER = _cast(None, FILTER)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Margin)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Margin.subclass:
            return Margin.subclass(*args_, **kwargs_)
        else:
            return Margin(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_ANY(self):
        return self.ANY
    def set_ANY(self, ANY):
        self.ANY = ANY
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_ENTITY(self):
        return self.ENTITY
    def set_ENTITY(self, ENTITY):
        self.ENTITY = ENTITY
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_RANKTYPE(self):
        return self.RANKTYPE
    def set_RANKTYPE(self, RANKTYPE):
        self.RANKTYPE = RANKTYPE
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def get_TICKER_CODE(self):
        return self.TICKER_CODE
    def set_TICKER_CODE(self, TICKER_CODE):
        self.TICKER_CODE = TICKER_CODE
    def get_FILTER(self):
        return self.FILTER
    def set_FILTER(self, FILTER):
        self.FILTER = FILTER
    def hasContent_(self):
        if (
            self.DataDate or
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Margin', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Margin')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Margin')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Margin', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Margin'):
        if self.ANY is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            outfile.write(' ANY=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ANY), input_name='ANY')), ))
        if self.CUSIP is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            outfile.write(' CUSIP=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.CUSIP), input_name='CUSIP')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.DXLID is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            outfile.write(' DXLID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DXLID), input_name='DXLID')), ))
        if self.ENTITY is not None and 'ENTITY' not in already_processed:
            already_processed.add('ENTITY')
            outfile.write(' ENTITY=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ENTITY), input_name='ENTITY')), ))
        if self.ISIN is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            outfile.write(' ISIN=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ISIN), input_name='ISIN')), ))
        if self.QUICK is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            outfile.write(' QUICK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.QUICK), input_name='QUICK')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.RANKTYPE is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            outfile.write(' RANKTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANKTYPE), input_name='RANKTYPE')), ))
        if self.SEDOL is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            outfile.write(' SEDOL=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SEDOL), input_name='SEDOL')), ))
        if self.TICKER is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            outfile.write(' TICKER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER), input_name='TICKER')), ))
        if self.TICKER_CODE is not None and 'TICKER_CODE' not in already_processed:
            already_processed.add('TICKER_CODE')
            outfile.write(' TICKER.CODE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER_CODE), input_name='TICKER.CODE')), ))
        if self.FILTER is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            outfile.write(' FILTER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.FILTER), input_name='FILTER')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Margin', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ANY', node)
        if value is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            self.ANY = value
        value = find_attr_value_('CUSIP', node)
        if value is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            self.CUSIP = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('DXLID', node)
        if value is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            self.DXLID = value
        value = find_attr_value_('ENTITY', node)
        if value is not None and 'ENTITY' not in already_processed:
            already_processed.add('ENTITY')
            self.ENTITY = value
        value = find_attr_value_('ISIN', node)
        if value is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            self.ISIN = value
        value = find_attr_value_('QUICK', node)
        if value is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            self.QUICK = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('RANKTYPE', node)
        if value is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            self.RANKTYPE = value
        value = find_attr_value_('SEDOL', node)
        if value is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            self.SEDOL = value
        value = find_attr_value_('TICKER', node)
        if value is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            self.TICKER = value
        value = find_attr_value_('TICKER.CODE', node)
        if value is not None and 'TICKER.CODE' not in already_processed:
            already_processed.add('TICKER.CODE')
            self.TICKER_CODE = value
        value = find_attr_value_('FILTER', node)
        if value is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            self.FILTER = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType169.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
        elif nodeName_ == 'General':
            obj_ = GeneralType171.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class Margin


class News(GeneratedsSuper):
    """News data"""
    subclass = None
    superclass = None
    def __init__(self, NEWS=None, ANY=None, CUSIP=None, DATATYPE=None, DXLID=None, ISIN=None, QUICK=None, SEDOL=None, TICKER=None, TICKER_CODE=None, MARKET=None, NEWSIDENTIFIER=None, RANK=None, FILTER=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.NEWS = _cast(None, NEWS)
        self.ANY = _cast(None, ANY)
        self.CUSIP = _cast(None, CUSIP)
        self.DATATYPE = _cast(None, DATATYPE)
        self.DXLID = _cast(None, DXLID)
        self.ISIN = _cast(None, ISIN)
        self.QUICK = _cast(None, QUICK)
        self.SEDOL = _cast(None, SEDOL)
        self.TICKER = _cast(None, TICKER)
        self.TICKER_CODE = _cast(None, TICKER_CODE)
        self.MARKET = _cast(None, MARKET)
        self.NEWSIDENTIFIER = _cast(None, NEWSIDENTIFIER)
        self.RANK = _cast(None, RANK)
        self.FILTER = _cast(None, FILTER)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, News)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if News.subclass:
            return News.subclass(*args_, **kwargs_)
        else:
            return News(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_NEWS(self):
        return self.NEWS
    def set_NEWS(self, NEWS):
        self.NEWS = NEWS
    def get_ANY(self):
        return self.ANY
    def set_ANY(self, ANY):
        self.ANY = ANY
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def get_TICKER_CODE(self):
        return self.TICKER_CODE
    def set_TICKER_CODE(self, TICKER_CODE):
        self.TICKER_CODE = TICKER_CODE
    def get_MARKET(self):
        return self.MARKET
    def set_MARKET(self, MARKET):
        self.MARKET = MARKET
    def get_NEWSIDENTIFIER(self):
        return self.NEWSIDENTIFIER
    def set_NEWSIDENTIFIER(self, NEWSIDENTIFIER):
        self.NEWSIDENTIFIER = NEWSIDENTIFIER
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_FILTER(self):
        return self.FILTER
    def set_FILTER(self, FILTER):
        self.FILTER = FILTER
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='News', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('News')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='News')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='News', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='News'):
        if self.NEWS is not None and 'NEWS' not in already_processed:
            already_processed.add('NEWS')
            outfile.write(' NEWS=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.NEWS), input_name='NEWS')), ))
        if self.ANY is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            outfile.write(' ANY=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ANY), input_name='ANY')), ))
        if self.CUSIP is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            outfile.write(' CUSIP=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.CUSIP), input_name='CUSIP')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.DXLID is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            outfile.write(' DXLID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DXLID), input_name='DXLID')), ))
        if self.ISIN is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            outfile.write(' ISIN=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ISIN), input_name='ISIN')), ))
        if self.QUICK is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            outfile.write(' QUICK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.QUICK), input_name='QUICK')), ))
        if self.SEDOL is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            outfile.write(' SEDOL=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SEDOL), input_name='SEDOL')), ))
        if self.TICKER is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            outfile.write(' TICKER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER), input_name='TICKER')), ))
        if self.TICKER_CODE is not None and 'TICKER_CODE' not in already_processed:
            already_processed.add('TICKER_CODE')
            outfile.write(' TICKER.CODE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER_CODE), input_name='TICKER.CODE')), ))
        if self.MARKET is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            outfile.write(' MARKET=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.MARKET), input_name='MARKET')), ))
        if self.NEWSIDENTIFIER is not None and 'NEWSIDENTIFIER' not in already_processed:
            already_processed.add('NEWSIDENTIFIER')
            outfile.write(' NEWSIDENTIFIER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.NEWSIDENTIFIER), input_name='NEWSIDENTIFIER')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.FILTER is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            outfile.write(' FILTER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.FILTER), input_name='FILTER')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='News', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('NEWS', node)
        if value is not None and 'NEWS' not in already_processed:
            already_processed.add('NEWS')
            self.NEWS = value
        value = find_attr_value_('ANY', node)
        if value is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            self.ANY = value
        value = find_attr_value_('CUSIP', node)
        if value is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            self.CUSIP = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('DXLID', node)
        if value is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            self.DXLID = value
        value = find_attr_value_('ISIN', node)
        if value is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            self.ISIN = value
        value = find_attr_value_('QUICK', node)
        if value is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            self.QUICK = value
        value = find_attr_value_('SEDOL', node)
        if value is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            self.SEDOL = value
        value = find_attr_value_('TICKER', node)
        if value is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            self.TICKER = value
        value = find_attr_value_('TICKER.CODE', node)
        if value is not None and 'TICKER.CODE' not in already_processed:
            already_processed.add('TICKER.CODE')
            self.TICKER_CODE = value
        value = find_attr_value_('MARKET', node)
        if value is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            self.MARKET = value
        value = find_attr_value_('NEWSIDENTIFIER', node)
        if value is not None and 'NEWSIDENTIFIER' not in already_processed:
            already_processed.add('NEWSIDENTIFIER')
            self.NEWSIDENTIFIER = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('FILTER', node)
        if value is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            self.FILTER = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType172.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class News


class SearchAll(GeneratedsSuper):
    """Search results"""
    subclass = None
    superclass = None
    def __init__(self, ANY=None, DATATYPE=None, INSTRUMENTNAME=None, INSTRUMENTTYPE=None, RANK=None, SEDOL=None, ISIN=None, QUICK=None, TICKER=None, MARKET=None, MARKETTYPE=None, NEWS=None, ACCOUNT=None, SEARCHCODE=None, SEARCHTYPE=None, PORTFOLIO=None, COUNTERPART=None, DataDate=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ANY = _cast(None, ANY)
        self.DATATYPE = _cast(None, DATATYPE)
        self.INSTRUMENTNAME = _cast(None, INSTRUMENTNAME)
        self.INSTRUMENTTYPE = _cast(None, INSTRUMENTTYPE)
        self.RANK = _cast(None, RANK)
        self.SEDOL = _cast(None, SEDOL)
        self.ISIN = _cast(None, ISIN)
        self.QUICK = _cast(None, QUICK)
        self.TICKER = _cast(None, TICKER)
        self.MARKET = _cast(None, MARKET)
        self.MARKETTYPE = _cast(None, MARKETTYPE)
        self.NEWS = _cast(None, NEWS)
        self.ACCOUNT = _cast(None, ACCOUNT)
        self.SEARCHCODE = _cast(None, SEARCHCODE)
        self.SEARCHTYPE = _cast(None, SEARCHTYPE)
        self.PORTFOLIO = _cast(None, PORTFOLIO)
        self.COUNTERPART = _cast(None, COUNTERPART)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SearchAll)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SearchAll.subclass:
            return SearchAll.subclass(*args_, **kwargs_)
        else:
            return SearchAll(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_ANY(self):
        return self.ANY
    def set_ANY(self, ANY):
        self.ANY = ANY
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_INSTRUMENTNAME(self):
        return self.INSTRUMENTNAME
    def set_INSTRUMENTNAME(self, INSTRUMENTNAME):
        self.INSTRUMENTNAME = INSTRUMENTNAME
    def get_INSTRUMENTTYPE(self):
        return self.INSTRUMENTTYPE
    def set_INSTRUMENTTYPE(self, INSTRUMENTTYPE):
        self.INSTRUMENTTYPE = INSTRUMENTTYPE
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def get_MARKET(self):
        return self.MARKET
    def set_MARKET(self, MARKET):
        self.MARKET = MARKET
    def get_MARKETTYPE(self):
        return self.MARKETTYPE
    def set_MARKETTYPE(self, MARKETTYPE):
        self.MARKETTYPE = MARKETTYPE
    def get_NEWS(self):
        return self.NEWS
    def set_NEWS(self, NEWS):
        self.NEWS = NEWS
    def get_ACCOUNT(self):
        return self.ACCOUNT
    def set_ACCOUNT(self, ACCOUNT):
        self.ACCOUNT = ACCOUNT
    def get_SEARCHCODE(self):
        return self.SEARCHCODE
    def set_SEARCHCODE(self, SEARCHCODE):
        self.SEARCHCODE = SEARCHCODE
    def get_SEARCHTYPE(self):
        return self.SEARCHTYPE
    def set_SEARCHTYPE(self, SEARCHTYPE):
        self.SEARCHTYPE = SEARCHTYPE
    def get_PORTFOLIO(self):
        return self.PORTFOLIO
    def set_PORTFOLIO(self, PORTFOLIO):
        self.PORTFOLIO = PORTFOLIO
    def get_COUNTERPART(self):
        return self.COUNTERPART
    def set_COUNTERPART(self, COUNTERPART):
        self.COUNTERPART = COUNTERPART
    def hasContent_(self):
        if (
            self.DataDate or
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SearchAll', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SearchAll')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SearchAll')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SearchAll', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SearchAll'):
        if self.ANY is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            outfile.write(' ANY=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ANY), input_name='ANY')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.INSTRUMENTNAME is not None and 'INSTRUMENTNAME' not in already_processed:
            already_processed.add('INSTRUMENTNAME')
            outfile.write(' INSTRUMENTNAME=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.INSTRUMENTNAME), input_name='INSTRUMENTNAME')), ))
        if self.INSTRUMENTTYPE is not None and 'INSTRUMENTTYPE' not in already_processed:
            already_processed.add('INSTRUMENTTYPE')
            outfile.write(' INSTRUMENTTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.INSTRUMENTTYPE), input_name='INSTRUMENTTYPE')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.SEDOL is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            outfile.write(' SEDOL=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SEDOL), input_name='SEDOL')), ))
        if self.ISIN is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            outfile.write(' ISIN=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ISIN), input_name='ISIN')), ))
        if self.QUICK is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            outfile.write(' QUICK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.QUICK), input_name='QUICK')), ))
        if self.TICKER is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            outfile.write(' TICKER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER), input_name='TICKER')), ))
        if self.MARKET is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            outfile.write(' MARKET=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.MARKET), input_name='MARKET')), ))
        if self.MARKETTYPE is not None and 'MARKETTYPE' not in already_processed:
            already_processed.add('MARKETTYPE')
            outfile.write(' MARKETTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.MARKETTYPE), input_name='MARKETTYPE')), ))
        if self.NEWS is not None and 'NEWS' not in already_processed:
            already_processed.add('NEWS')
            outfile.write(' NEWS=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.NEWS), input_name='NEWS')), ))
        if self.ACCOUNT is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            outfile.write(' ACCOUNT=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ACCOUNT), input_name='ACCOUNT')), ))
        if self.SEARCHCODE is not None and 'SEARCHCODE' not in already_processed:
            already_processed.add('SEARCHCODE')
            outfile.write(' SEARCHCODE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SEARCHCODE), input_name='SEARCHCODE')), ))
        if self.SEARCHTYPE is not None and 'SEARCHTYPE' not in already_processed:
            already_processed.add('SEARCHTYPE')
            outfile.write(' SEARCHTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SEARCHTYPE), input_name='SEARCHTYPE')), ))
        if self.PORTFOLIO is not None and 'PORTFOLIO' not in already_processed:
            already_processed.add('PORTFOLIO')
            outfile.write(' PORTFOLIO=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.PORTFOLIO), input_name='PORTFOLIO')), ))
        if self.COUNTERPART is not None and 'COUNTERPART' not in already_processed:
            already_processed.add('COUNTERPART')
            outfile.write(' COUNTERPART=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.COUNTERPART), input_name='COUNTERPART')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SearchAll', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ANY', node)
        if value is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            self.ANY = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('INSTRUMENTNAME', node)
        if value is not None and 'INSTRUMENTNAME' not in already_processed:
            already_processed.add('INSTRUMENTNAME')
            self.INSTRUMENTNAME = value
        value = find_attr_value_('INSTRUMENTTYPE', node)
        if value is not None and 'INSTRUMENTTYPE' not in already_processed:
            already_processed.add('INSTRUMENTTYPE')
            self.INSTRUMENTTYPE = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('SEDOL', node)
        if value is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            self.SEDOL = value
        value = find_attr_value_('ISIN', node)
        if value is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            self.ISIN = value
        value = find_attr_value_('QUICK', node)
        if value is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            self.QUICK = value
        value = find_attr_value_('TICKER', node)
        if value is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            self.TICKER = value
        value = find_attr_value_('MARKET', node)
        if value is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            self.MARKET = value
        value = find_attr_value_('MARKETTYPE', node)
        if value is not None and 'MARKETTYPE' not in already_processed:
            already_processed.add('MARKETTYPE')
            self.MARKETTYPE = value
        value = find_attr_value_('NEWS', node)
        if value is not None and 'NEWS' not in already_processed:
            already_processed.add('NEWS')
            self.NEWS = value
        value = find_attr_value_('ACCOUNT', node)
        if value is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            self.ACCOUNT = value
        value = find_attr_value_('SEARCHCODE', node)
        if value is not None and 'SEARCHCODE' not in already_processed:
            already_processed.add('SEARCHCODE')
            self.SEARCHCODE = value
        value = find_attr_value_('SEARCHTYPE', node)
        if value is not None and 'SEARCHTYPE' not in already_processed:
            already_processed.add('SEARCHTYPE')
            self.SEARCHTYPE = value
        value = find_attr_value_('PORTFOLIO', node)
        if value is not None and 'PORTFOLIO' not in already_processed:
            already_processed.add('PORTFOLIO')
            self.PORTFOLIO = value
        value = find_attr_value_('COUNTERPART', node)
        if value is not None and 'COUNTERPART' not in already_processed:
            already_processed.add('COUNTERPART')
            self.COUNTERPART = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType174.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
        elif nodeName_ == 'General':
            obj_ = GeneralType176.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class SearchAll


class MarketHierarchy(GeneratedsSuper):
    """Market hierachy details"""
    subclass = None
    superclass = None
    def __init__(self, MARKET=None, RANK=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.MARKET = _cast(None, MARKET)
        self.RANK = _cast(None, RANK)
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarketHierarchy)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarketHierarchy.subclass:
            return MarketHierarchy.subclass(*args_, **kwargs_)
        else:
            return MarketHierarchy(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_MARKET(self):
        return self.MARKET
    def set_MARKET(self, MARKET):
        self.MARKET = MARKET
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MarketHierarchy', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarketHierarchy')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarketHierarchy')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarketHierarchy', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarketHierarchy'):
        if self.MARKET is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            outfile.write(' MARKET=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.MARKET), input_name='MARKET')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MarketHierarchy', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('MARKET', node)
        if value is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            self.MARKET = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType177.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class MarketHierarchy


class ClientTransaction(GeneratedsSuper):
    """Recent client transaction data"""
    subclass = None
    superclass = None
    def __init__(self, TRANSACTION=None, ANY=None, CUSIP=None, DATATYPE=None, DXLID=None, ISIN=None, QUICK=None, RANK=None, SEDOL=None, TICKER=None, TICKER_CODE=None, INSTRUMENTID=None, MARKET=None, FILTER=None, DataDate=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.TRANSACTION = _cast(None, TRANSACTION)
        self.ANY = _cast(None, ANY)
        self.CUSIP = _cast(None, CUSIP)
        self.DATATYPE = _cast(None, DATATYPE)
        self.DXLID = _cast(None, DXLID)
        self.ISIN = _cast(None, ISIN)
        self.QUICK = _cast(None, QUICK)
        self.RANK = _cast(None, RANK)
        self.SEDOL = _cast(None, SEDOL)
        self.TICKER = _cast(None, TICKER)
        self.TICKER_CODE = _cast(None, TICKER_CODE)
        self.INSTRUMENTID = _cast(None, INSTRUMENTID)
        self.MARKET = _cast(None, MARKET)
        self.FILTER = _cast(None, FILTER)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClientTransaction)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClientTransaction.subclass:
            return ClientTransaction.subclass(*args_, **kwargs_)
        else:
            return ClientTransaction(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_TRANSACTION(self):
        return self.TRANSACTION
    def set_TRANSACTION(self, TRANSACTION):
        self.TRANSACTION = TRANSACTION
    def get_ANY(self):
        return self.ANY
    def set_ANY(self, ANY):
        self.ANY = ANY
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def get_TICKER_CODE(self):
        return self.TICKER_CODE
    def set_TICKER_CODE(self, TICKER_CODE):
        self.TICKER_CODE = TICKER_CODE
    def get_INSTRUMENTID(self):
        return self.INSTRUMENTID
    def set_INSTRUMENTID(self, INSTRUMENTID):
        self.INSTRUMENTID = INSTRUMENTID
    def get_MARKET(self):
        return self.MARKET
    def set_MARKET(self, MARKET):
        self.MARKET = MARKET
    def get_FILTER(self):
        return self.FILTER
    def set_FILTER(self, FILTER):
        self.FILTER = FILTER
    def hasContent_(self):
        if (
            self.DataDate or
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ClientTransaction', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClientTransaction')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ClientTransaction')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ClientTransaction', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ClientTransaction'):
        if self.TRANSACTION is not None and 'TRANSACTION' not in already_processed:
            already_processed.add('TRANSACTION')
            outfile.write(' TRANSACTION=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TRANSACTION), input_name='TRANSACTION')), ))
        if self.ANY is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            outfile.write(' ANY=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ANY), input_name='ANY')), ))
        if self.CUSIP is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            outfile.write(' CUSIP=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.CUSIP), input_name='CUSIP')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.DXLID is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            outfile.write(' DXLID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DXLID), input_name='DXLID')), ))
        if self.ISIN is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            outfile.write(' ISIN=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ISIN), input_name='ISIN')), ))
        if self.QUICK is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            outfile.write(' QUICK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.QUICK), input_name='QUICK')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.SEDOL is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            outfile.write(' SEDOL=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SEDOL), input_name='SEDOL')), ))
        if self.TICKER is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            outfile.write(' TICKER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER), input_name='TICKER')), ))
        if self.TICKER_CODE is not None and 'TICKER_CODE' not in already_processed:
            already_processed.add('TICKER_CODE')
            outfile.write(' TICKER.CODE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER_CODE), input_name='TICKER.CODE')), ))
        if self.INSTRUMENTID is not None and 'INSTRUMENTID' not in already_processed:
            already_processed.add('INSTRUMENTID')
            outfile.write(' INSTRUMENTID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.INSTRUMENTID), input_name='INSTRUMENTID')), ))
        if self.MARKET is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            outfile.write(' MARKET=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.MARKET), input_name='MARKET')), ))
        if self.FILTER is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            outfile.write(' FILTER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.FILTER), input_name='FILTER')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ClientTransaction', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('TRANSACTION', node)
        if value is not None and 'TRANSACTION' not in already_processed:
            already_processed.add('TRANSACTION')
            self.TRANSACTION = value
        value = find_attr_value_('ANY', node)
        if value is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            self.ANY = value
        value = find_attr_value_('CUSIP', node)
        if value is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            self.CUSIP = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('DXLID', node)
        if value is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            self.DXLID = value
        value = find_attr_value_('ISIN', node)
        if value is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            self.ISIN = value
        value = find_attr_value_('QUICK', node)
        if value is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            self.QUICK = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('SEDOL', node)
        if value is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            self.SEDOL = value
        value = find_attr_value_('TICKER', node)
        if value is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            self.TICKER = value
        value = find_attr_value_('TICKER.CODE', node)
        if value is not None and 'TICKER.CODE' not in already_processed:
            already_processed.add('TICKER.CODE')
            self.TICKER_CODE = value
        value = find_attr_value_('INSTRUMENTID', node)
        if value is not None and 'INSTRUMENTID' not in already_processed:
            already_processed.add('INSTRUMENTID')
            self.INSTRUMENTID = value
        value = find_attr_value_('MARKET', node)
        if value is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            self.MARKET = value
        value = find_attr_value_('FILTER', node)
        if value is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            self.FILTER = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType178.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
        elif nodeName_ == 'General':
            obj_ = GeneralType180.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class ClientTransaction


class ClientInstrument(GeneratedsSuper):
    """Recent client instrument aggregated data"""
    subclass = None
    superclass = None
    def __init__(self, INSTRUMENT=None, ANY=None, CUSIP=None, DATATYPE=None, DXLID=None, ISIN=None, QUICK=None, RANK=None, SEDOL=None, TICKER=None, TICKER_CODE=None, INSTRUMENTID=None, FILTER=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.INSTRUMENT = _cast(None, INSTRUMENT)
        self.ANY = _cast(None, ANY)
        self.CUSIP = _cast(None, CUSIP)
        self.DATATYPE = _cast(None, DATATYPE)
        self.DXLID = _cast(None, DXLID)
        self.ISIN = _cast(None, ISIN)
        self.QUICK = _cast(None, QUICK)
        self.RANK = _cast(None, RANK)
        self.SEDOL = _cast(None, SEDOL)
        self.TICKER = _cast(None, TICKER)
        self.TICKER_CODE = _cast(None, TICKER_CODE)
        self.INSTRUMENTID = _cast(None, INSTRUMENTID)
        self.FILTER = _cast(None, FILTER)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClientInstrument)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClientInstrument.subclass:
            return ClientInstrument.subclass(*args_, **kwargs_)
        else:
            return ClientInstrument(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_INSTRUMENT(self):
        return self.INSTRUMENT
    def set_INSTRUMENT(self, INSTRUMENT):
        self.INSTRUMENT = INSTRUMENT
    def get_ANY(self):
        return self.ANY
    def set_ANY(self, ANY):
        self.ANY = ANY
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def get_TICKER_CODE(self):
        return self.TICKER_CODE
    def set_TICKER_CODE(self, TICKER_CODE):
        self.TICKER_CODE = TICKER_CODE
    def get_INSTRUMENTID(self):
        return self.INSTRUMENTID
    def set_INSTRUMENTID(self, INSTRUMENTID):
        self.INSTRUMENTID = INSTRUMENTID
    def get_FILTER(self):
        return self.FILTER
    def set_FILTER(self, FILTER):
        self.FILTER = FILTER
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ClientInstrument', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClientInstrument')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ClientInstrument')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ClientInstrument', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ClientInstrument'):
        if self.INSTRUMENT is not None and 'INSTRUMENT' not in already_processed:
            already_processed.add('INSTRUMENT')
            outfile.write(' INSTRUMENT=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.INSTRUMENT), input_name='INSTRUMENT')), ))
        if self.ANY is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            outfile.write(' ANY=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ANY), input_name='ANY')), ))
        if self.CUSIP is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            outfile.write(' CUSIP=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.CUSIP), input_name='CUSIP')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.DXLID is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            outfile.write(' DXLID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DXLID), input_name='DXLID')), ))
        if self.ISIN is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            outfile.write(' ISIN=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ISIN), input_name='ISIN')), ))
        if self.QUICK is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            outfile.write(' QUICK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.QUICK), input_name='QUICK')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.SEDOL is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            outfile.write(' SEDOL=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SEDOL), input_name='SEDOL')), ))
        if self.TICKER is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            outfile.write(' TICKER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER), input_name='TICKER')), ))
        if self.TICKER_CODE is not None and 'TICKER_CODE' not in already_processed:
            already_processed.add('TICKER_CODE')
            outfile.write(' TICKER.CODE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER_CODE), input_name='TICKER.CODE')), ))
        if self.INSTRUMENTID is not None and 'INSTRUMENTID' not in already_processed:
            already_processed.add('INSTRUMENTID')
            outfile.write(' INSTRUMENTID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.INSTRUMENTID), input_name='INSTRUMENTID')), ))
        if self.FILTER is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            outfile.write(' FILTER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.FILTER), input_name='FILTER')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ClientInstrument', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('INSTRUMENT', node)
        if value is not None and 'INSTRUMENT' not in already_processed:
            already_processed.add('INSTRUMENT')
            self.INSTRUMENT = value
        value = find_attr_value_('ANY', node)
        if value is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            self.ANY = value
        value = find_attr_value_('CUSIP', node)
        if value is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            self.CUSIP = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('DXLID', node)
        if value is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            self.DXLID = value
        value = find_attr_value_('ISIN', node)
        if value is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            self.ISIN = value
        value = find_attr_value_('QUICK', node)
        if value is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            self.QUICK = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('SEDOL', node)
        if value is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            self.SEDOL = value
        value = find_attr_value_('TICKER', node)
        if value is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            self.TICKER = value
        value = find_attr_value_('TICKER.CODE', node)
        if value is not None and 'TICKER.CODE' not in already_processed:
            already_processed.add('TICKER.CODE')
            self.TICKER_CODE = value
        value = find_attr_value_('INSTRUMENTID', node)
        if value is not None and 'INSTRUMENTID' not in already_processed:
            already_processed.add('INSTRUMENTID')
            self.INSTRUMENTID = value
        value = find_attr_value_('FILTER', node)
        if value is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            self.FILTER = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType181.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class ClientInstrument


class Currency(GeneratedsSuper):
    """Currency rates data"""
    subclass = None
    superclass = None
    def __init__(self, CURRENCYISO=None, DATATYPE=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.CURRENCYISO = _cast(None, CURRENCYISO)
        self.DATATYPE = _cast(None, DATATYPE)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Currency)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Currency.subclass:
            return Currency.subclass(*args_, **kwargs_)
        else:
            return Currency(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_CURRENCYISO(self):
        return self.CURRENCYISO
    def set_CURRENCYISO(self, CURRENCYISO):
        self.CURRENCYISO = CURRENCYISO
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Currency', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Currency')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Currency')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Currency', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Currency'):
        if self.CURRENCYISO is not None and 'CURRENCYISO' not in already_processed:
            already_processed.add('CURRENCYISO')
            outfile.write(' CURRENCYISO=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.CURRENCYISO), input_name='CURRENCYISO')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Currency', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('CURRENCYISO', node)
        if value is not None and 'CURRENCYISO' not in already_processed:
            already_processed.add('CURRENCYISO')
            self.CURRENCYISO = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType183.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class Currency


class MarketDetail(GeneratedsSuper):
    """Market level account performance information"""
    subclass = None
    superclass = None
    def __init__(self, ACCOUNT=None, MARKET=None, SOURCE=None, DATATYPE=None, FILTER=None, DataDate=None, Trading=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ACCOUNT = _cast(None, ACCOUNT)
        self.MARKET = _cast(None, MARKET)
        self.SOURCE = _cast(None, SOURCE)
        self.DATATYPE = _cast(None, DATATYPE)
        self.FILTER = _cast(None, FILTER)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
        self.Trading = Trading
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarketDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarketDetail.subclass:
            return MarketDetail.subclass(*args_, **kwargs_)
        else:
            return MarketDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_Trading(self):
        return self.Trading
    def set_Trading(self, Trading):
        self.Trading = Trading
    def get_ACCOUNT(self):
        return self.ACCOUNT
    def set_ACCOUNT(self, ACCOUNT):
        self.ACCOUNT = ACCOUNT
    def get_MARKET(self):
        return self.MARKET
    def set_MARKET(self, MARKET):
        self.MARKET = MARKET
    def get_SOURCE(self):
        return self.SOURCE
    def set_SOURCE(self, SOURCE):
        self.SOURCE = SOURCE
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_FILTER(self):
        return self.FILTER
    def set_FILTER(self, FILTER):
        self.FILTER = FILTER
    def hasContent_(self):
        if (
            self.DataDate or
            self.Trading is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MarketDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarketDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarketDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarketDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarketDetail'):
        if self.ACCOUNT is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            outfile.write(' ACCOUNT=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ACCOUNT), input_name='ACCOUNT')), ))
        if self.MARKET is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            outfile.write(' MARKET=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.MARKET), input_name='MARKET')), ))
        if self.SOURCE is not None and 'SOURCE' not in already_processed:
            already_processed.add('SOURCE')
            outfile.write(' SOURCE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SOURCE), input_name='SOURCE')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.FILTER is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            outfile.write(' FILTER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.FILTER), input_name='FILTER')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MarketDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
        if self.Trading is not None:
            self.Trading.export(outfile, level, namespaceprefix_, name_='Trading', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ACCOUNT', node)
        if value is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            self.ACCOUNT = value
        value = find_attr_value_('MARKET', node)
        if value is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            self.MARKET = value
        value = find_attr_value_('SOURCE', node)
        if value is not None and 'SOURCE' not in already_processed:
            already_processed.add('SOURCE')
            self.SOURCE = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('FILTER', node)
        if value is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            self.FILTER = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType185.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
        elif nodeName_ == 'Trading':
            obj_ = TradingType189.factory(parent_object_=self)
            obj_.build(child_)
            self.Trading = obj_
            obj_.original_tagname_ = 'Trading'
# end class MarketDetail


class InstrumentDetail(GeneratedsSuper):
    """Instrument level account performance information"""
    subclass = None
    superclass = None
    def __init__(self, ACCOUNT=None, ANY=None, CUSIP=None, DATATYPE=None, DXLID=None, INSTRUMENTID=None, INSTRUMENTTYPE=None, ISIN=None, QUICK=None, SEDOL=None, SOURCE=None, TICKER=None, TICKER_CODE=None, FILTER=None, DE_INHOUSE=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ACCOUNT = _cast(None, ACCOUNT)
        self.ANY = _cast(None, ANY)
        self.CUSIP = _cast(None, CUSIP)
        self.DATATYPE = _cast(None, DATATYPE)
        self.DXLID = _cast(None, DXLID)
        self.INSTRUMENTID = _cast(None, INSTRUMENTID)
        self.INSTRUMENTTYPE = _cast(None, INSTRUMENTTYPE)
        self.ISIN = _cast(None, ISIN)
        self.QUICK = _cast(None, QUICK)
        self.SEDOL = _cast(None, SEDOL)
        self.SOURCE = _cast(None, SOURCE)
        self.TICKER = _cast(None, TICKER)
        self.TICKER_CODE = _cast(None, TICKER_CODE)
        self.FILTER = _cast(None, FILTER)
        self.DE_INHOUSE = _cast(None, DE_INHOUSE)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InstrumentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InstrumentDetail.subclass:
            return InstrumentDetail.subclass(*args_, **kwargs_)
        else:
            return InstrumentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_ACCOUNT(self):
        return self.ACCOUNT
    def set_ACCOUNT(self, ACCOUNT):
        self.ACCOUNT = ACCOUNT
    def get_ANY(self):
        return self.ANY
    def set_ANY(self, ANY):
        self.ANY = ANY
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_INSTRUMENTID(self):
        return self.INSTRUMENTID
    def set_INSTRUMENTID(self, INSTRUMENTID):
        self.INSTRUMENTID = INSTRUMENTID
    def get_INSTRUMENTTYPE(self):
        return self.INSTRUMENTTYPE
    def set_INSTRUMENTTYPE(self, INSTRUMENTTYPE):
        self.INSTRUMENTTYPE = INSTRUMENTTYPE
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_SOURCE(self):
        return self.SOURCE
    def set_SOURCE(self, SOURCE):
        self.SOURCE = SOURCE
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def get_TICKER_CODE(self):
        return self.TICKER_CODE
    def set_TICKER_CODE(self, TICKER_CODE):
        self.TICKER_CODE = TICKER_CODE
    def get_FILTER(self):
        return self.FILTER
    def set_FILTER(self, FILTER):
        self.FILTER = FILTER
    def get_DE_INHOUSE(self):
        return self.DE_INHOUSE
    def set_DE_INHOUSE(self, DE_INHOUSE):
        self.DE_INHOUSE = DE_INHOUSE
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InstrumentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InstrumentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InstrumentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InstrumentDetail'):
        if self.ACCOUNT is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            outfile.write(' ACCOUNT=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ACCOUNT), input_name='ACCOUNT')), ))
        if self.ANY is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            outfile.write(' ANY=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ANY), input_name='ANY')), ))
        if self.CUSIP is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            outfile.write(' CUSIP=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.CUSIP), input_name='CUSIP')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.DXLID is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            outfile.write(' DXLID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DXLID), input_name='DXLID')), ))
        if self.INSTRUMENTID is not None and 'INSTRUMENTID' not in already_processed:
            already_processed.add('INSTRUMENTID')
            outfile.write(' INSTRUMENTID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.INSTRUMENTID), input_name='INSTRUMENTID')), ))
        if self.INSTRUMENTTYPE is not None and 'INSTRUMENTTYPE' not in already_processed:
            already_processed.add('INSTRUMENTTYPE')
            outfile.write(' INSTRUMENTTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.INSTRUMENTTYPE), input_name='INSTRUMENTTYPE')), ))
        if self.ISIN is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            outfile.write(' ISIN=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ISIN), input_name='ISIN')), ))
        if self.QUICK is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            outfile.write(' QUICK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.QUICK), input_name='QUICK')), ))
        if self.SEDOL is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            outfile.write(' SEDOL=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SEDOL), input_name='SEDOL')), ))
        if self.SOURCE is not None and 'SOURCE' not in already_processed:
            already_processed.add('SOURCE')
            outfile.write(' SOURCE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SOURCE), input_name='SOURCE')), ))
        if self.TICKER is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            outfile.write(' TICKER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER), input_name='TICKER')), ))
        if self.TICKER_CODE is not None and 'TICKER_CODE' not in already_processed:
            already_processed.add('TICKER_CODE')
            outfile.write(' TICKER.CODE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER_CODE), input_name='TICKER.CODE')), ))
        if self.FILTER is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            outfile.write(' FILTER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.FILTER), input_name='FILTER')), ))
        if self.DE_INHOUSE is not None and 'DE_INHOUSE' not in already_processed:
            already_processed.add('DE_INHOUSE')
            outfile.write(' DE_INHOUSE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DE_INHOUSE), input_name='DE_INHOUSE')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ACCOUNT', node)
        if value is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            self.ACCOUNT = value
        value = find_attr_value_('ANY', node)
        if value is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            self.ANY = value
        value = find_attr_value_('CUSIP', node)
        if value is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            self.CUSIP = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('DXLID', node)
        if value is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            self.DXLID = value
        value = find_attr_value_('INSTRUMENTID', node)
        if value is not None and 'INSTRUMENTID' not in already_processed:
            already_processed.add('INSTRUMENTID')
            self.INSTRUMENTID = value
        value = find_attr_value_('INSTRUMENTTYPE', node)
        if value is not None and 'INSTRUMENTTYPE' not in already_processed:
            already_processed.add('INSTRUMENTTYPE')
            self.INSTRUMENTTYPE = value
        value = find_attr_value_('ISIN', node)
        if value is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            self.ISIN = value
        value = find_attr_value_('QUICK', node)
        if value is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            self.QUICK = value
        value = find_attr_value_('SEDOL', node)
        if value is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            self.SEDOL = value
        value = find_attr_value_('SOURCE', node)
        if value is not None and 'SOURCE' not in already_processed:
            already_processed.add('SOURCE')
            self.SOURCE = value
        value = find_attr_value_('TICKER', node)
        if value is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            self.TICKER = value
        value = find_attr_value_('TICKER.CODE', node)
        if value is not None and 'TICKER.CODE' not in already_processed:
            already_processed.add('TICKER.CODE')
            self.TICKER_CODE = value
        value = find_attr_value_('FILTER', node)
        if value is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            self.FILTER = value
        value = find_attr_value_('DE_INHOUSE', node)
        if value is not None and 'DE_INHOUSE' not in already_processed:
            already_processed.add('DE_INHOUSE')
            self.DE_INHOUSE = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType190.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class InstrumentDetail


class RankedCounterpart(GeneratedsSuper):
    """Ranked Counterpart account performance information"""
    subclass = None
    superclass = None
    def __init__(self, ACCOUNT=None, RANK=None, RANKTYPE=None, DATATYPE=None, FILTER=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ACCOUNT = _cast(None, ACCOUNT)
        self.RANK = _cast(None, RANK)
        self.RANKTYPE = _cast(None, RANKTYPE)
        self.DATATYPE = _cast(None, DATATYPE)
        self.FILTER = _cast(None, FILTER)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RankedCounterpart)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RankedCounterpart.subclass:
            return RankedCounterpart.subclass(*args_, **kwargs_)
        else:
            return RankedCounterpart(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_ACCOUNT(self):
        return self.ACCOUNT
    def set_ACCOUNT(self, ACCOUNT):
        self.ACCOUNT = ACCOUNT
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_RANKTYPE(self):
        return self.RANKTYPE
    def set_RANKTYPE(self, RANKTYPE):
        self.RANKTYPE = RANKTYPE
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_FILTER(self):
        return self.FILTER
    def set_FILTER(self, FILTER):
        self.FILTER = FILTER
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RankedCounterpart', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RankedCounterpart')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RankedCounterpart')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RankedCounterpart', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RankedCounterpart'):
        if self.ACCOUNT is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            outfile.write(' ACCOUNT=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ACCOUNT), input_name='ACCOUNT')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.RANKTYPE is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            outfile.write(' RANKTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANKTYPE), input_name='RANKTYPE')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.FILTER is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            outfile.write(' FILTER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.FILTER), input_name='FILTER')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RankedCounterpart', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ACCOUNT', node)
        if value is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            self.ACCOUNT = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('RANKTYPE', node)
        if value is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            self.RANKTYPE = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('FILTER', node)
        if value is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            self.FILTER = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType194.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class RankedCounterpart


class CounterpartDetail(GeneratedsSuper):
    """Counterpart level account performance information"""
    subclass = None
    superclass = None
    def __init__(self, ACCOUNT=None, COUNTERPART=None, DATATYPE=None, FILTER=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ACCOUNT = _cast(None, ACCOUNT)
        self.COUNTERPART = _cast(None, COUNTERPART)
        self.DATATYPE = _cast(None, DATATYPE)
        self.FILTER = _cast(None, FILTER)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CounterpartDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CounterpartDetail.subclass:
            return CounterpartDetail.subclass(*args_, **kwargs_)
        else:
            return CounterpartDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_ACCOUNT(self):
        return self.ACCOUNT
    def set_ACCOUNT(self, ACCOUNT):
        self.ACCOUNT = ACCOUNT
    def get_COUNTERPART(self):
        return self.COUNTERPART
    def set_COUNTERPART(self, COUNTERPART):
        self.COUNTERPART = COUNTERPART
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_FILTER(self):
        return self.FILTER
    def set_FILTER(self, FILTER):
        self.FILTER = FILTER
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CounterpartDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CounterpartDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CounterpartDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CounterpartDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CounterpartDetail'):
        if self.ACCOUNT is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            outfile.write(' ACCOUNT=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ACCOUNT), input_name='ACCOUNT')), ))
        if self.COUNTERPART is not None and 'COUNTERPART' not in already_processed:
            already_processed.add('COUNTERPART')
            outfile.write(' COUNTERPART=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.COUNTERPART), input_name='COUNTERPART')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.FILTER is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            outfile.write(' FILTER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.FILTER), input_name='FILTER')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CounterpartDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ACCOUNT', node)
        if value is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            self.ACCOUNT = value
        value = find_attr_value_('COUNTERPART', node)
        if value is not None and 'COUNTERPART' not in already_processed:
            already_processed.add('COUNTERPART')
            self.COUNTERPART = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('FILTER', node)
        if value is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            self.FILTER = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType196.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class CounterpartDetail


class Account(GeneratedsSuper):
    """Account information"""
    subclass = None
    superclass = None
    def __init__(self, ACCOUNT=None, DATATYPE=None, RANK=None, FILTER=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ACCOUNT = _cast(None, ACCOUNT)
        self.DATATYPE = _cast(None, DATATYPE)
        self.RANK = _cast(None, RANK)
        self.FILTER = _cast(None, FILTER)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Account)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Account.subclass:
            return Account.subclass(*args_, **kwargs_)
        else:
            return Account(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_ACCOUNT(self):
        return self.ACCOUNT
    def set_ACCOUNT(self, ACCOUNT):
        self.ACCOUNT = ACCOUNT
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_FILTER(self):
        return self.FILTER
    def set_FILTER(self, FILTER):
        self.FILTER = FILTER
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Account', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Account')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Account')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Account', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Account'):
        if self.ACCOUNT is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            outfile.write(' ACCOUNT=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ACCOUNT), input_name='ACCOUNT')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.FILTER is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            outfile.write(' FILTER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.FILTER), input_name='FILTER')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Account', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ACCOUNT', node)
        if value is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            self.ACCOUNT = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('FILTER', node)
        if value is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            self.FILTER = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType198.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class Account


class Meta(GeneratedsSuper):
    """Included for code generation purposes - Please ignore."""
    subclass = None
    superclass = None
    def __init__(self, dummy=None, Source=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.dummy = _cast(None, dummy)
        if Source is None:
            self.Source = []
        else:
            self.Source = Source
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Meta)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Meta.subclass:
            return Meta.subclass(*args_, **kwargs_)
        else:
            return Meta(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Source(self):
        return self.Source
    def set_Source(self, Source):
        self.Source = Source
    def add_Source(self, value):
        self.Source.append(value)
    def add_Source(self, value):
        self.Source.append(value)
    def insert_Source_at(self, index, value):
        self.Source.insert(index, value)
    def replace_Source_at(self, index, value):
        self.Source[index] = value
    def get_dummy(self):
        return self.dummy
    def set_dummy(self, dummy):
        self.dummy = dummy
    def hasContent_(self):
        if (
            self.Source
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Meta', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Meta')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Meta')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Meta', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Meta'):
        if self.dummy is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            outfile.write(' dummy=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dummy), input_name='dummy')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Meta', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Source_ in self.Source:
            Source_.export(outfile, level, namespaceprefix_, name_='Source', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dummy', node)
        if value is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            self.dummy = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Source':
            obj_ = SourceType200.factory(parent_object_=self)
            obj_.build(child_)
            self.Source.append(obj_)
            obj_.original_tagname_ = 'Source'
# end class Meta


class DataUpdates(GeneratedsSuper):
    """Included for code generation purposes - Please ignore."""
    subclass = None
    superclass = None
    def __init__(self, dummy=None, DataUpdateInfo=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.dummy = _cast(None, dummy)
        if DataUpdateInfo is None:
            self.DataUpdateInfo = []
        else:
            self.DataUpdateInfo = DataUpdateInfo
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataUpdates)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataUpdates.subclass:
            return DataUpdates.subclass(*args_, **kwargs_)
        else:
            return DataUpdates(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataUpdateInfo(self):
        return self.DataUpdateInfo
    def set_DataUpdateInfo(self, DataUpdateInfo):
        self.DataUpdateInfo = DataUpdateInfo
    def add_DataUpdateInfo(self, value):
        self.DataUpdateInfo.append(value)
    def add_DataUpdateInfo(self, value):
        self.DataUpdateInfo.append(value)
    def insert_DataUpdateInfo_at(self, index, value):
        self.DataUpdateInfo.insert(index, value)
    def replace_DataUpdateInfo_at(self, index, value):
        self.DataUpdateInfo[index] = value
    def get_dummy(self):
        return self.dummy
    def set_dummy(self, dummy):
        self.dummy = dummy
    def hasContent_(self):
        if (
            self.DataUpdateInfo
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataUpdates', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataUpdates')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataUpdates')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataUpdates', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataUpdates'):
        if self.dummy is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            outfile.write(' dummy=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dummy), input_name='dummy')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataUpdates', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataUpdateInfo_ in self.DataUpdateInfo:
            DataUpdateInfo_.export(outfile, level, namespaceprefix_, name_='DataUpdateInfo', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dummy', node)
        if value is not None and 'dummy' not in already_processed:
            already_processed.add('dummy')
            self.dummy = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataUpdateInfo':
            obj_ = DataUpdateInfoType.factory(parent_object_=self)
            obj_.build(child_)
            self.DataUpdateInfo.append(obj_)
            obj_.original_tagname_ = 'DataUpdateInfo'
# end class DataUpdates


class Message(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Item=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if Item is None:
            self.Item = []
        else:
            self.Item = Item
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Message)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Message.subclass:
            return Message.subclass(*args_, **kwargs_)
        else:
            return Message(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Item(self):
        return self.Item
    def set_Item(self, Item):
        self.Item = Item
    def add_Item(self, value):
        self.Item.append(value)
    def add_Item(self, value):
        self.Item.append(value)
    def insert_Item_at(self, index, value):
        self.Item.insert(index, value)
    def replace_Item_at(self, index, value):
        self.Item[index] = value
    def hasContent_(self):
        if (
            self.Item
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Message', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Message')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Message')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Message', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Message'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Message', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Item_ in self.Item:
            Item_.export(outfile, level, namespaceprefix_, name_='Item', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Item':
            obj_ = ItemType.factory(parent_object_=self)
            obj_.build(child_)
            self.Item.append(obj_)
            obj_.original_tagname_ = 'Item'
# end class Message


class DividendsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DATATYPE=None, RANK=None, RANKTYPE=None, SECURITYID=None, SOLALISTINGID=None, SOLADIVSOURCE=None, DataDate=None, Dividends=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DATATYPE = _cast(None, DATATYPE)
        self.RANK = _cast(None, RANK)
        self.RANKTYPE = _cast(None, RANKTYPE)
        self.SECURITYID = _cast(None, SECURITYID)
        self.SOLALISTINGID = _cast(None, SOLALISTINGID)
        self.SOLADIVSOURCE = _cast(None, SOLADIVSOURCE)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
        self.Dividends = Dividends
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DividendsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DividendsType.subclass:
            return DividendsType.subclass(*args_, **kwargs_)
        else:
            return DividendsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_Dividends(self):
        return self.Dividends
    def set_Dividends(self, Dividends):
        self.Dividends = Dividends
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_RANKTYPE(self):
        return self.RANKTYPE
    def set_RANKTYPE(self, RANKTYPE):
        self.RANKTYPE = RANKTYPE
    def get_SECURITYID(self):
        return self.SECURITYID
    def set_SECURITYID(self, SECURITYID):
        self.SECURITYID = SECURITYID
    def get_SOLALISTINGID(self):
        return self.SOLALISTINGID
    def set_SOLALISTINGID(self, SOLALISTINGID):
        self.SOLALISTINGID = SOLALISTINGID
    def get_SOLADIVSOURCE(self):
        return self.SOLADIVSOURCE
    def set_SOLADIVSOURCE(self, SOLADIVSOURCE):
        self.SOLADIVSOURCE = SOLADIVSOURCE
    def hasContent_(self):
        if (
            self.DataDate or
            self.Dividends is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DividendsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DividendsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DividendsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DividendsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DividendsType'):
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.RANKTYPE is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            outfile.write(' RANKTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANKTYPE), input_name='RANKTYPE')), ))
        if self.SECURITYID is not None and 'SECURITYID' not in already_processed:
            already_processed.add('SECURITYID')
            outfile.write(' SECURITYID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SECURITYID), input_name='SECURITYID')), ))
        if self.SOLALISTINGID is not None and 'SOLALISTINGID' not in already_processed:
            already_processed.add('SOLALISTINGID')
            outfile.write(' SOLALISTINGID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SOLALISTINGID), input_name='SOLALISTINGID')), ))
        if self.SOLADIVSOURCE is not None and 'SOLADIVSOURCE' not in already_processed:
            already_processed.add('SOLADIVSOURCE')
            outfile.write(' SOLADIVSOURCE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SOLADIVSOURCE), input_name='SOLADIVSOURCE')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DividendsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
        if self.Dividends is not None:
            self.Dividends.export(outfile, level, namespaceprefix_, name_='Dividends', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('RANKTYPE', node)
        if value is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            self.RANKTYPE = value
        value = find_attr_value_('SECURITYID', node)
        if value is not None and 'SECURITYID' not in already_processed:
            already_processed.add('SECURITYID')
            self.SECURITYID = value
        value = find_attr_value_('SOLALISTINGID', node)
        if value is not None and 'SOLALISTINGID' not in already_processed:
            already_processed.add('SOLALISTINGID')
            self.SOLALISTINGID = value
        value = find_attr_value_('SOLADIVSOURCE', node)
        if value is not None and 'SOLADIVSOURCE' not in already_processed:
            already_processed.add('SOLADIVSOURCE')
            self.SOLADIVSOURCE = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
        elif nodeName_ == 'Dividends':
            obj_ = DividendsType2.factory(parent_object_=self)
            obj_.build(child_)
            self.Dividends = obj_
            obj_.original_tagname_ = 'Dividends'
# end class DividendsType


class DataDateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, Dividends=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.Dividends = Dividends
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType.subclass:
            return DataDateType.subclass(*args_, **kwargs_)
        else:
            return DataDateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Dividends(self):
        return self.Dividends
    def set_Dividends(self, Dividends):
        self.Dividends = Dividends
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.Dividends is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Dividends is not None:
            self.Dividends.export(outfile, level, namespaceprefix_, name_='Dividends', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Dividends':
            obj_ = DividendsType1.factory(parent_object_=self)
            obj_.build(child_)
            self.Dividends = obj_
            obj_.original_tagname_ = 'Dividends'
# end class DataDateType


class DividendsType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AGMDate=None, AmountConfidenceRank=None, AnnounceDate=None, Bloomberg=None, ConversionDate=None, ConversionRate=None, CurrencyCode=None, DividendForm=None, DividendType=None, ExchangeTicker=None, FinancialYearEndDate=None, FinancialYearStartDate=None, ForecastMask=None, Franking=None, Frequency=None, GrossAmount=None, Health=None, IsScripOptional=None, LastReviewDate=None, ListingCurrency=None, ListingID=None, LoyaltyAmount=None, Mic=None, Name=None, NetAmount=None, Notes=None, Other=None, PayDate=None, ProviderDividendID=None, RecordDate=None, Ric=None, SecurityID=None, SecurityType=None, StockRatio=None, TaxCode=None, TaxJurisdiction=None, TaxRate=None, UnadjustedAmount=None, XdDate=None, XdDateConfidenceRank=None, Year=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.AGMDate = AGMDate
        self.AmountConfidenceRank = AmountConfidenceRank
        self.AnnounceDate = AnnounceDate
        self.Bloomberg = Bloomberg
        self.ConversionDate = ConversionDate
        self.ConversionRate = ConversionRate
        self.CurrencyCode = CurrencyCode
        self.DividendForm = DividendForm
        self.DividendType = DividendType
        self.ExchangeTicker = ExchangeTicker
        self.FinancialYearEndDate = FinancialYearEndDate
        self.FinancialYearStartDate = FinancialYearStartDate
        self.ForecastMask = ForecastMask
        self.Franking = Franking
        self.Frequency = Frequency
        self.GrossAmount = GrossAmount
        self.Health = Health
        self.IsScripOptional = IsScripOptional
        self.LastReviewDate = LastReviewDate
        self.ListingCurrency = ListingCurrency
        self.ListingID = ListingID
        self.LoyaltyAmount = LoyaltyAmount
        self.Mic = Mic
        self.Name = Name
        self.NetAmount = NetAmount
        self.Notes = Notes
        self.Other = Other
        self.PayDate = PayDate
        self.ProviderDividendID = ProviderDividendID
        self.RecordDate = RecordDate
        self.Ric = Ric
        self.SecurityID = SecurityID
        self.SecurityType = SecurityType
        self.StockRatio = StockRatio
        self.TaxCode = TaxCode
        self.TaxJurisdiction = TaxJurisdiction
        self.TaxRate = TaxRate
        self.UnadjustedAmount = UnadjustedAmount
        self.XdDate = XdDate
        self.XdDateConfidenceRank = XdDateConfidenceRank
        self.Year = Year
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DividendsType1)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DividendsType1.subclass:
            return DividendsType1.subclass(*args_, **kwargs_)
        else:
            return DividendsType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AGMDate(self):
        return self.AGMDate
    def set_AGMDate(self, AGMDate):
        self.AGMDate = AGMDate
    def get_AmountConfidenceRank(self):
        return self.AmountConfidenceRank
    def set_AmountConfidenceRank(self, AmountConfidenceRank):
        self.AmountConfidenceRank = AmountConfidenceRank
    def get_AnnounceDate(self):
        return self.AnnounceDate
    def set_AnnounceDate(self, AnnounceDate):
        self.AnnounceDate = AnnounceDate
    def get_Bloomberg(self):
        return self.Bloomberg
    def set_Bloomberg(self, Bloomberg):
        self.Bloomberg = Bloomberg
    def get_ConversionDate(self):
        return self.ConversionDate
    def set_ConversionDate(self, ConversionDate):
        self.ConversionDate = ConversionDate
    def get_ConversionRate(self):
        return self.ConversionRate
    def set_ConversionRate(self, ConversionRate):
        self.ConversionRate = ConversionRate
    def get_CurrencyCode(self):
        return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode):
        self.CurrencyCode = CurrencyCode
    def get_DividendForm(self):
        return self.DividendForm
    def set_DividendForm(self, DividendForm):
        self.DividendForm = DividendForm
    def get_DividendType(self):
        return self.DividendType
    def set_DividendType(self, DividendType):
        self.DividendType = DividendType
    def get_ExchangeTicker(self):
        return self.ExchangeTicker
    def set_ExchangeTicker(self, ExchangeTicker):
        self.ExchangeTicker = ExchangeTicker
    def get_FinancialYearEndDate(self):
        return self.FinancialYearEndDate
    def set_FinancialYearEndDate(self, FinancialYearEndDate):
        self.FinancialYearEndDate = FinancialYearEndDate
    def get_FinancialYearStartDate(self):
        return self.FinancialYearStartDate
    def set_FinancialYearStartDate(self, FinancialYearStartDate):
        self.FinancialYearStartDate = FinancialYearStartDate
    def get_ForecastMask(self):
        return self.ForecastMask
    def set_ForecastMask(self, ForecastMask):
        self.ForecastMask = ForecastMask
    def get_Franking(self):
        return self.Franking
    def set_Franking(self, Franking):
        self.Franking = Franking
    def get_Frequency(self):
        return self.Frequency
    def set_Frequency(self, Frequency):
        self.Frequency = Frequency
    def get_GrossAmount(self):
        return self.GrossAmount
    def set_GrossAmount(self, GrossAmount):
        self.GrossAmount = GrossAmount
    def get_Health(self):
        return self.Health
    def set_Health(self, Health):
        self.Health = Health
    def get_IsScripOptional(self):
        return self.IsScripOptional
    def set_IsScripOptional(self, IsScripOptional):
        self.IsScripOptional = IsScripOptional
    def get_LastReviewDate(self):
        return self.LastReviewDate
    def set_LastReviewDate(self, LastReviewDate):
        self.LastReviewDate = LastReviewDate
    def get_ListingCurrency(self):
        return self.ListingCurrency
    def set_ListingCurrency(self, ListingCurrency):
        self.ListingCurrency = ListingCurrency
    def get_ListingID(self):
        return self.ListingID
    def set_ListingID(self, ListingID):
        self.ListingID = ListingID
    def get_LoyaltyAmount(self):
        return self.LoyaltyAmount
    def set_LoyaltyAmount(self, LoyaltyAmount):
        self.LoyaltyAmount = LoyaltyAmount
    def get_Mic(self):
        return self.Mic
    def set_Mic(self, Mic):
        self.Mic = Mic
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_NetAmount(self):
        return self.NetAmount
    def set_NetAmount(self, NetAmount):
        self.NetAmount = NetAmount
    def get_Notes(self):
        return self.Notes
    def set_Notes(self, Notes):
        self.Notes = Notes
    def get_Other(self):
        return self.Other
    def set_Other(self, Other):
        self.Other = Other
    def get_PayDate(self):
        return self.PayDate
    def set_PayDate(self, PayDate):
        self.PayDate = PayDate
    def get_ProviderDividendID(self):
        return self.ProviderDividendID
    def set_ProviderDividendID(self, ProviderDividendID):
        self.ProviderDividendID = ProviderDividendID
    def get_RecordDate(self):
        return self.RecordDate
    def set_RecordDate(self, RecordDate):
        self.RecordDate = RecordDate
    def get_Ric(self):
        return self.Ric
    def set_Ric(self, Ric):
        self.Ric = Ric
    def get_SecurityID(self):
        return self.SecurityID
    def set_SecurityID(self, SecurityID):
        self.SecurityID = SecurityID
    def get_SecurityType(self):
        return self.SecurityType
    def set_SecurityType(self, SecurityType):
        self.SecurityType = SecurityType
    def get_StockRatio(self):
        return self.StockRatio
    def set_StockRatio(self, StockRatio):
        self.StockRatio = StockRatio
    def get_TaxCode(self):
        return self.TaxCode
    def set_TaxCode(self, TaxCode):
        self.TaxCode = TaxCode
    def get_TaxJurisdiction(self):
        return self.TaxJurisdiction
    def set_TaxJurisdiction(self, TaxJurisdiction):
        self.TaxJurisdiction = TaxJurisdiction
    def get_TaxRate(self):
        return self.TaxRate
    def set_TaxRate(self, TaxRate):
        self.TaxRate = TaxRate
    def get_UnadjustedAmount(self):
        return self.UnadjustedAmount
    def set_UnadjustedAmount(self, UnadjustedAmount):
        self.UnadjustedAmount = UnadjustedAmount
    def get_XdDate(self):
        return self.XdDate
    def set_XdDate(self, XdDate):
        self.XdDate = XdDate
    def get_XdDateConfidenceRank(self):
        return self.XdDateConfidenceRank
    def set_XdDateConfidenceRank(self, XdDateConfidenceRank):
        self.XdDateConfidenceRank = XdDateConfidenceRank
    def get_Year(self):
        return self.Year
    def set_Year(self, Year):
        self.Year = Year
    def hasContent_(self):
        if (
            self.AGMDate is not None or
            self.AmountConfidenceRank is not None or
            self.AnnounceDate is not None or
            self.Bloomberg is not None or
            self.ConversionDate is not None or
            self.ConversionRate is not None or
            self.CurrencyCode is not None or
            self.DividendForm is not None or
            self.DividendType is not None or
            self.ExchangeTicker is not None or
            self.FinancialYearEndDate is not None or
            self.FinancialYearStartDate is not None or
            self.ForecastMask is not None or
            self.Franking is not None or
            self.Frequency is not None or
            self.GrossAmount is not None or
            self.Health is not None or
            self.IsScripOptional is not None or
            self.LastReviewDate is not None or
            self.ListingCurrency is not None or
            self.ListingID is not None or
            self.LoyaltyAmount is not None or
            self.Mic is not None or
            self.Name is not None or
            self.NetAmount is not None or
            self.Notes is not None or
            self.Other is not None or
            self.PayDate is not None or
            self.ProviderDividendID is not None or
            self.RecordDate is not None or
            self.Ric is not None or
            self.SecurityID is not None or
            self.SecurityType is not None or
            self.StockRatio is not None or
            self.TaxCode is not None or
            self.TaxJurisdiction is not None or
            self.TaxRate is not None or
            self.UnadjustedAmount is not None or
            self.XdDate is not None or
            self.XdDateConfidenceRank is not None or
            self.Year is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DividendsType1', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DividendsType1')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DividendsType1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DividendsType1', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DividendsType1'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DividendsType1', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AGMDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAGMDate>%s</%sAGMDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AGMDate), input_name='AGMDate')), namespaceprefix_ , eol_))
        if self.AmountConfidenceRank is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAmountConfidenceRank>%s</%sAmountConfidenceRank>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AmountConfidenceRank), input_name='AmountConfidenceRank')), namespaceprefix_ , eol_))
        if self.AnnounceDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAnnounceDate>%s</%sAnnounceDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AnnounceDate), input_name='AnnounceDate')), namespaceprefix_ , eol_))
        if self.Bloomberg is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBloomberg>%s</%sBloomberg>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Bloomberg), input_name='Bloomberg')), namespaceprefix_ , eol_))
        if self.ConversionDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConversionDate>%s</%sConversionDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ConversionDate), input_name='ConversionDate')), namespaceprefix_ , eol_))
        if self.ConversionRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConversionRate>%s</%sConversionRate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ConversionRate), input_name='ConversionRate')), namespaceprefix_ , eol_))
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyCode>%s</%sCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), namespaceprefix_ , eol_))
        if self.DividendForm is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividendForm>%s</%sDividendForm>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DividendForm), input_name='DividendForm')), namespaceprefix_ , eol_))
        if self.DividendType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividendType>%s</%sDividendType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DividendType), input_name='DividendType')), namespaceprefix_ , eol_))
        if self.ExchangeTicker is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExchangeTicker>%s</%sExchangeTicker>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExchangeTicker), input_name='ExchangeTicker')), namespaceprefix_ , eol_))
        if self.FinancialYearEndDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFinancialYearEndDate>%s</%sFinancialYearEndDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FinancialYearEndDate), input_name='FinancialYearEndDate')), namespaceprefix_ , eol_))
        if self.FinancialYearStartDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFinancialYearStartDate>%s</%sFinancialYearStartDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FinancialYearStartDate), input_name='FinancialYearStartDate')), namespaceprefix_ , eol_))
        if self.ForecastMask is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sForecastMask>%s</%sForecastMask>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ForecastMask), input_name='ForecastMask')), namespaceprefix_ , eol_))
        if self.Franking is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFranking>%s</%sFranking>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Franking), input_name='Franking')), namespaceprefix_ , eol_))
        if self.Frequency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFrequency>%s</%sFrequency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Frequency), input_name='Frequency')), namespaceprefix_ , eol_))
        if self.GrossAmount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGrossAmount>%s</%sGrossAmount>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GrossAmount), input_name='GrossAmount')), namespaceprefix_ , eol_))
        if self.Health is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHealth>%s</%sHealth>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Health), input_name='Health')), namespaceprefix_ , eol_))
        if self.IsScripOptional is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsScripOptional>%s</%sIsScripOptional>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsScripOptional), input_name='IsScripOptional')), namespaceprefix_ , eol_))
        if self.LastReviewDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLastReviewDate>%s</%sLastReviewDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LastReviewDate), input_name='LastReviewDate')), namespaceprefix_ , eol_))
        if self.ListingCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListingCurrency>%s</%sListingCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ListingCurrency), input_name='ListingCurrency')), namespaceprefix_ , eol_))
        if self.ListingID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListingID>%s</%sListingID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ListingID), input_name='ListingID')), namespaceprefix_ , eol_))
        if self.LoyaltyAmount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLoyaltyAmount>%s</%sLoyaltyAmount>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LoyaltyAmount), input_name='LoyaltyAmount')), namespaceprefix_ , eol_))
        if self.Mic is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMic>%s</%sMic>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Mic), input_name='Mic')), namespaceprefix_ , eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.NetAmount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNetAmount>%s</%sNetAmount>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NetAmount), input_name='NetAmount')), namespaceprefix_ , eol_))
        if self.Notes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNotes>%s</%sNotes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Notes), input_name='Notes')), namespaceprefix_ , eol_))
        if self.Other is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOther>%s</%sOther>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Other), input_name='Other')), namespaceprefix_ , eol_))
        if self.PayDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPayDate>%s</%sPayDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PayDate), input_name='PayDate')), namespaceprefix_ , eol_))
        if self.ProviderDividendID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProviderDividendID>%s</%sProviderDividendID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProviderDividendID), input_name='ProviderDividendID')), namespaceprefix_ , eol_))
        if self.RecordDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordDate>%s</%sRecordDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordDate), input_name='RecordDate')), namespaceprefix_ , eol_))
        if self.Ric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRic>%s</%sRic>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Ric), input_name='Ric')), namespaceprefix_ , eol_))
        if self.SecurityID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSecurityID>%s</%sSecurityID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SecurityID), input_name='SecurityID')), namespaceprefix_ , eol_))
        if self.SecurityType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSecurityType>%s</%sSecurityType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SecurityType), input_name='SecurityType')), namespaceprefix_ , eol_))
        if self.StockRatio is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStockRatio>%s</%sStockRatio>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StockRatio), input_name='StockRatio')), namespaceprefix_ , eol_))
        if self.TaxCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxCode>%s</%sTaxCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TaxCode), input_name='TaxCode')), namespaceprefix_ , eol_))
        if self.TaxJurisdiction is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxJurisdiction>%s</%sTaxJurisdiction>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TaxJurisdiction), input_name='TaxJurisdiction')), namespaceprefix_ , eol_))
        if self.TaxRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxRate>%s</%sTaxRate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TaxRate), input_name='TaxRate')), namespaceprefix_ , eol_))
        if self.UnadjustedAmount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnadjustedAmount>%s</%sUnadjustedAmount>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UnadjustedAmount), input_name='UnadjustedAmount')), namespaceprefix_ , eol_))
        if self.XdDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sXdDate>%s</%sXdDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.XdDate), input_name='XdDate')), namespaceprefix_ , eol_))
        if self.XdDateConfidenceRank is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sXdDateConfidenceRank>%s</%sXdDateConfidenceRank>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.XdDateConfidenceRank), input_name='XdDateConfidenceRank')), namespaceprefix_ , eol_))
        if self.Year is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sYear>%s</%sYear>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Year), input_name='Year')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AGMDate':
            AGMDate_ = child_.text
            AGMDate_ = self.gds_validate_string(AGMDate_, node, 'AGMDate')
            self.AGMDate = AGMDate_
        elif nodeName_ == 'AmountConfidenceRank':
            AmountConfidenceRank_ = child_.text
            AmountConfidenceRank_ = self.gds_validate_string(AmountConfidenceRank_, node, 'AmountConfidenceRank')
            self.AmountConfidenceRank = AmountConfidenceRank_
        elif nodeName_ == 'AnnounceDate':
            AnnounceDate_ = child_.text
            AnnounceDate_ = self.gds_validate_string(AnnounceDate_, node, 'AnnounceDate')
            self.AnnounceDate = AnnounceDate_
        elif nodeName_ == 'Bloomberg':
            Bloomberg_ = child_.text
            Bloomberg_ = self.gds_validate_string(Bloomberg_, node, 'Bloomberg')
            self.Bloomberg = Bloomberg_
        elif nodeName_ == 'ConversionDate':
            ConversionDate_ = child_.text
            ConversionDate_ = self.gds_validate_string(ConversionDate_, node, 'ConversionDate')
            self.ConversionDate = ConversionDate_
        elif nodeName_ == 'ConversionRate':
            ConversionRate_ = child_.text
            ConversionRate_ = self.gds_validate_string(ConversionRate_, node, 'ConversionRate')
            self.ConversionRate = ConversionRate_
        elif nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'DividendForm':
            DividendForm_ = child_.text
            DividendForm_ = self.gds_validate_string(DividendForm_, node, 'DividendForm')
            self.DividendForm = DividendForm_
        elif nodeName_ == 'DividendType':
            DividendType_ = child_.text
            DividendType_ = self.gds_validate_string(DividendType_, node, 'DividendType')
            self.DividendType = DividendType_
        elif nodeName_ == 'ExchangeTicker':
            ExchangeTicker_ = child_.text
            ExchangeTicker_ = self.gds_validate_string(ExchangeTicker_, node, 'ExchangeTicker')
            self.ExchangeTicker = ExchangeTicker_
        elif nodeName_ == 'FinancialYearEndDate':
            FinancialYearEndDate_ = child_.text
            FinancialYearEndDate_ = self.gds_validate_string(FinancialYearEndDate_, node, 'FinancialYearEndDate')
            self.FinancialYearEndDate = FinancialYearEndDate_
        elif nodeName_ == 'FinancialYearStartDate':
            FinancialYearStartDate_ = child_.text
            FinancialYearStartDate_ = self.gds_validate_string(FinancialYearStartDate_, node, 'FinancialYearStartDate')
            self.FinancialYearStartDate = FinancialYearStartDate_
        elif nodeName_ == 'ForecastMask':
            ForecastMask_ = child_.text
            ForecastMask_ = self.gds_validate_string(ForecastMask_, node, 'ForecastMask')
            self.ForecastMask = ForecastMask_
        elif nodeName_ == 'Franking':
            Franking_ = child_.text
            Franking_ = self.gds_validate_string(Franking_, node, 'Franking')
            self.Franking = Franking_
        elif nodeName_ == 'Frequency':
            Frequency_ = child_.text
            Frequency_ = self.gds_validate_string(Frequency_, node, 'Frequency')
            self.Frequency = Frequency_
        elif nodeName_ == 'GrossAmount':
            GrossAmount_ = child_.text
            GrossAmount_ = self.gds_validate_string(GrossAmount_, node, 'GrossAmount')
            self.GrossAmount = GrossAmount_
        elif nodeName_ == 'Health':
            Health_ = child_.text
            Health_ = self.gds_validate_string(Health_, node, 'Health')
            self.Health = Health_
        elif nodeName_ == 'IsScripOptional':
            IsScripOptional_ = child_.text
            IsScripOptional_ = self.gds_validate_string(IsScripOptional_, node, 'IsScripOptional')
            self.IsScripOptional = IsScripOptional_
        elif nodeName_ == 'LastReviewDate':
            LastReviewDate_ = child_.text
            LastReviewDate_ = self.gds_validate_string(LastReviewDate_, node, 'LastReviewDate')
            self.LastReviewDate = LastReviewDate_
        elif nodeName_ == 'ListingCurrency':
            ListingCurrency_ = child_.text
            ListingCurrency_ = self.gds_validate_string(ListingCurrency_, node, 'ListingCurrency')
            self.ListingCurrency = ListingCurrency_
        elif nodeName_ == 'ListingID':
            ListingID_ = child_.text
            ListingID_ = self.gds_validate_string(ListingID_, node, 'ListingID')
            self.ListingID = ListingID_
        elif nodeName_ == 'LoyaltyAmount':
            LoyaltyAmount_ = child_.text
            LoyaltyAmount_ = self.gds_validate_string(LoyaltyAmount_, node, 'LoyaltyAmount')
            self.LoyaltyAmount = LoyaltyAmount_
        elif nodeName_ == 'Mic':
            Mic_ = child_.text
            Mic_ = self.gds_validate_string(Mic_, node, 'Mic')
            self.Mic = Mic_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'NetAmount':
            NetAmount_ = child_.text
            NetAmount_ = self.gds_validate_string(NetAmount_, node, 'NetAmount')
            self.NetAmount = NetAmount_
        elif nodeName_ == 'Notes':
            Notes_ = child_.text
            Notes_ = self.gds_validate_string(Notes_, node, 'Notes')
            self.Notes = Notes_
        elif nodeName_ == 'Other':
            Other_ = child_.text
            Other_ = self.gds_validate_string(Other_, node, 'Other')
            self.Other = Other_
        elif nodeName_ == 'PayDate':
            PayDate_ = child_.text
            PayDate_ = self.gds_validate_string(PayDate_, node, 'PayDate')
            self.PayDate = PayDate_
        elif nodeName_ == 'ProviderDividendID':
            ProviderDividendID_ = child_.text
            ProviderDividendID_ = self.gds_validate_string(ProviderDividendID_, node, 'ProviderDividendID')
            self.ProviderDividendID = ProviderDividendID_
        elif nodeName_ == 'RecordDate':
            RecordDate_ = child_.text
            RecordDate_ = self.gds_validate_string(RecordDate_, node, 'RecordDate')
            self.RecordDate = RecordDate_
        elif nodeName_ == 'Ric':
            Ric_ = child_.text
            Ric_ = self.gds_validate_string(Ric_, node, 'Ric')
            self.Ric = Ric_
        elif nodeName_ == 'SecurityID':
            SecurityID_ = child_.text
            SecurityID_ = self.gds_validate_string(SecurityID_, node, 'SecurityID')
            self.SecurityID = SecurityID_
        elif nodeName_ == 'SecurityType':
            SecurityType_ = child_.text
            SecurityType_ = self.gds_validate_string(SecurityType_, node, 'SecurityType')
            self.SecurityType = SecurityType_
        elif nodeName_ == 'StockRatio':
            StockRatio_ = child_.text
            StockRatio_ = self.gds_validate_string(StockRatio_, node, 'StockRatio')
            self.StockRatio = StockRatio_
        elif nodeName_ == 'TaxCode':
            TaxCode_ = child_.text
            TaxCode_ = self.gds_validate_string(TaxCode_, node, 'TaxCode')
            self.TaxCode = TaxCode_
        elif nodeName_ == 'TaxJurisdiction':
            TaxJurisdiction_ = child_.text
            TaxJurisdiction_ = self.gds_validate_string(TaxJurisdiction_, node, 'TaxJurisdiction')
            self.TaxJurisdiction = TaxJurisdiction_
        elif nodeName_ == 'TaxRate':
            TaxRate_ = child_.text
            TaxRate_ = self.gds_validate_string(TaxRate_, node, 'TaxRate')
            self.TaxRate = TaxRate_
        elif nodeName_ == 'UnadjustedAmount':
            UnadjustedAmount_ = child_.text
            UnadjustedAmount_ = self.gds_validate_string(UnadjustedAmount_, node, 'UnadjustedAmount')
            self.UnadjustedAmount = UnadjustedAmount_
        elif nodeName_ == 'XdDate':
            XdDate_ = child_.text
            XdDate_ = self.gds_validate_string(XdDate_, node, 'XdDate')
            self.XdDate = XdDate_
        elif nodeName_ == 'XdDateConfidenceRank':
            XdDateConfidenceRank_ = child_.text
            XdDateConfidenceRank_ = self.gds_validate_string(XdDateConfidenceRank_, node, 'XdDateConfidenceRank')
            self.XdDateConfidenceRank = XdDateConfidenceRank_
        elif nodeName_ == 'Year':
            Year_ = child_.text
            Year_ = self.gds_validate_string(Year_, node, 'Year')
            self.Year = Year_
# end class DividendsType1


class DividendsType2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CUSIP=None, ISIN=None, SEDOL=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.CUSIP = CUSIP
        self.ISIN = ISIN
        self.SEDOL = SEDOL
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DividendsType2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DividendsType2.subclass:
            return DividendsType2.subclass(*args_, **kwargs_)
        else:
            return DividendsType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def hasContent_(self):
        if (
            self.CUSIP is not None or
            self.ISIN is not None or
            self.SEDOL is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DividendsType2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DividendsType2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DividendsType2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DividendsType2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DividendsType2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DividendsType2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CUSIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUSIP>%s</%sCUSIP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CUSIP), input_name='CUSIP')), namespaceprefix_ , eol_))
        if self.ISIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sISIN>%s</%sISIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ISIN), input_name='ISIN')), namespaceprefix_ , eol_))
        if self.SEDOL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSEDOL>%s</%sSEDOL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SEDOL), input_name='SEDOL')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CUSIP':
            CUSIP_ = child_.text
            CUSIP_ = self.gds_validate_string(CUSIP_, node, 'CUSIP')
            self.CUSIP = CUSIP_
        elif nodeName_ == 'ISIN':
            ISIN_ = child_.text
            ISIN_ = self.gds_validate_string(ISIN_, node, 'ISIN')
            self.ISIN = ISIN_
        elif nodeName_ == 'SEDOL':
            SEDOL_ = child_.text
            SEDOL_ = self.gds_validate_string(SEDOL_, node, 'SEDOL')
            self.SEDOL = SEDOL_
# end class DividendsType2


class EncyclopediaType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DATATYPE=None, RANK=None, SECURITYID=None, SOLALISTINGID=None, DataDate=None, Encyclopedia=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DATATYPE = _cast(None, DATATYPE)
        self.RANK = _cast(None, RANK)
        self.SECURITYID = _cast(None, SECURITYID)
        self.SOLALISTINGID = _cast(None, SOLALISTINGID)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
        self.Encyclopedia = Encyclopedia
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EncyclopediaType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EncyclopediaType.subclass:
            return EncyclopediaType.subclass(*args_, **kwargs_)
        else:
            return EncyclopediaType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_Encyclopedia(self):
        return self.Encyclopedia
    def set_Encyclopedia(self, Encyclopedia):
        self.Encyclopedia = Encyclopedia
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_SECURITYID(self):
        return self.SECURITYID
    def set_SECURITYID(self, SECURITYID):
        self.SECURITYID = SECURITYID
    def get_SOLALISTINGID(self):
        return self.SOLALISTINGID
    def set_SOLALISTINGID(self, SOLALISTINGID):
        self.SOLALISTINGID = SOLALISTINGID
    def hasContent_(self):
        if (
            self.DataDate or
            self.Encyclopedia is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EncyclopediaType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EncyclopediaType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EncyclopediaType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EncyclopediaType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EncyclopediaType'):
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.SECURITYID is not None and 'SECURITYID' not in already_processed:
            already_processed.add('SECURITYID')
            outfile.write(' SECURITYID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SECURITYID), input_name='SECURITYID')), ))
        if self.SOLALISTINGID is not None and 'SOLALISTINGID' not in already_processed:
            already_processed.add('SOLALISTINGID')
            outfile.write(' SOLALISTINGID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SOLALISTINGID), input_name='SOLALISTINGID')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EncyclopediaType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
        if self.Encyclopedia is not None:
            self.Encyclopedia.export(outfile, level, namespaceprefix_, name_='Encyclopedia', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('SECURITYID', node)
        if value is not None and 'SECURITYID' not in already_processed:
            already_processed.add('SECURITYID')
            self.SECURITYID = value
        value = find_attr_value_('SOLALISTINGID', node)
        if value is not None and 'SOLALISTINGID' not in already_processed:
            already_processed.add('SOLALISTINGID')
            self.SOLALISTINGID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType3.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
        elif nodeName_ == 'Encyclopedia':
            obj_ = EncyclopediaType5.factory(parent_object_=self)
            obj_.build(child_)
            self.Encyclopedia = obj_
            obj_.original_tagname_ = 'Encyclopedia'
# end class EncyclopediaType


class DataDateType3(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, Encyclopedia=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.Encyclopedia = Encyclopedia
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType3)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType3.subclass:
            return DataDateType3.subclass(*args_, **kwargs_)
        else:
            return DataDateType3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Encyclopedia(self):
        return self.Encyclopedia
    def set_Encyclopedia(self, Encyclopedia):
        self.Encyclopedia = Encyclopedia
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.Encyclopedia is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType3', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType3')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType3')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType3', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType3'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType3', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Encyclopedia is not None:
            self.Encyclopedia.export(outfile, level, namespaceprefix_, name_='Encyclopedia', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Encyclopedia':
            obj_ = EncyclopediaType4.factory(parent_object_=self)
            obj_.build(child_)
            self.Encyclopedia = obj_
            obj_.original_tagname_ = 'Encyclopedia'
# end class DataDateType3


class EncyclopediaType4(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Bloomberg=None, ExchangeTicker=None, ListingCurrency=None, ListingID=None, Mic=None, Name=None, Other=None, Property=None, Ric=None, SecurityType=None, Value=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Bloomberg = Bloomberg
        self.ExchangeTicker = ExchangeTicker
        self.ListingCurrency = ListingCurrency
        self.ListingID = ListingID
        self.Mic = Mic
        self.Name = Name
        self.Other = Other
        self.Property = Property
        self.Ric = Ric
        self.SecurityType = SecurityType
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EncyclopediaType4)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EncyclopediaType4.subclass:
            return EncyclopediaType4.subclass(*args_, **kwargs_)
        else:
            return EncyclopediaType4(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Bloomberg(self):
        return self.Bloomberg
    def set_Bloomberg(self, Bloomberg):
        self.Bloomberg = Bloomberg
    def get_ExchangeTicker(self):
        return self.ExchangeTicker
    def set_ExchangeTicker(self, ExchangeTicker):
        self.ExchangeTicker = ExchangeTicker
    def get_ListingCurrency(self):
        return self.ListingCurrency
    def set_ListingCurrency(self, ListingCurrency):
        self.ListingCurrency = ListingCurrency
    def get_ListingID(self):
        return self.ListingID
    def set_ListingID(self, ListingID):
        self.ListingID = ListingID
    def get_Mic(self):
        return self.Mic
    def set_Mic(self, Mic):
        self.Mic = Mic
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_Other(self):
        return self.Other
    def set_Other(self, Other):
        self.Other = Other
    def get_Property(self):
        return self.Property
    def set_Property(self, Property):
        self.Property = Property
    def get_Ric(self):
        return self.Ric
    def set_Ric(self, Ric):
        self.Ric = Ric
    def get_SecurityType(self):
        return self.SecurityType
    def set_SecurityType(self, SecurityType):
        self.SecurityType = SecurityType
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def hasContent_(self):
        if (
            self.Bloomberg is not None or
            self.ExchangeTicker is not None or
            self.ListingCurrency is not None or
            self.ListingID is not None or
            self.Mic is not None or
            self.Name is not None or
            self.Other is not None or
            self.Property is not None or
            self.Ric is not None or
            self.SecurityType is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EncyclopediaType4', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EncyclopediaType4')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EncyclopediaType4')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EncyclopediaType4', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EncyclopediaType4'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EncyclopediaType4', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Bloomberg is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBloomberg>%s</%sBloomberg>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Bloomberg), input_name='Bloomberg')), namespaceprefix_ , eol_))
        if self.ExchangeTicker is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExchangeTicker>%s</%sExchangeTicker>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExchangeTicker), input_name='ExchangeTicker')), namespaceprefix_ , eol_))
        if self.ListingCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListingCurrency>%s</%sListingCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ListingCurrency), input_name='ListingCurrency')), namespaceprefix_ , eol_))
        if self.ListingID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListingID>%s</%sListingID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ListingID), input_name='ListingID')), namespaceprefix_ , eol_))
        if self.Mic is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMic>%s</%sMic>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Mic), input_name='Mic')), namespaceprefix_ , eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.Other is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOther>%s</%sOther>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Other), input_name='Other')), namespaceprefix_ , eol_))
        if self.Property is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProperty>%s</%sProperty>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Property), input_name='Property')), namespaceprefix_ , eol_))
        if self.Ric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRic>%s</%sRic>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Ric), input_name='Ric')), namespaceprefix_ , eol_))
        if self.SecurityType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSecurityType>%s</%sSecurityType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SecurityType), input_name='SecurityType')), namespaceprefix_ , eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_format_float(self.Value, input_name='Value'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Bloomberg':
            Bloomberg_ = child_.text
            Bloomberg_ = self.gds_validate_string(Bloomberg_, node, 'Bloomberg')
            self.Bloomberg = Bloomberg_
        elif nodeName_ == 'ExchangeTicker':
            ExchangeTicker_ = child_.text
            ExchangeTicker_ = self.gds_validate_string(ExchangeTicker_, node, 'ExchangeTicker')
            self.ExchangeTicker = ExchangeTicker_
        elif nodeName_ == 'ListingCurrency':
            ListingCurrency_ = child_.text
            ListingCurrency_ = self.gds_validate_string(ListingCurrency_, node, 'ListingCurrency')
            self.ListingCurrency = ListingCurrency_
        elif nodeName_ == 'ListingID':
            ListingID_ = child_.text
            ListingID_ = self.gds_validate_string(ListingID_, node, 'ListingID')
            self.ListingID = ListingID_
        elif nodeName_ == 'Mic':
            Mic_ = child_.text
            Mic_ = self.gds_validate_string(Mic_, node, 'Mic')
            self.Mic = Mic_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'Other':
            Other_ = child_.text
            Other_ = self.gds_validate_string(Other_, node, 'Other')
            self.Other = Other_
        elif nodeName_ == 'Property':
            Property_ = child_.text
            Property_ = self.gds_validate_string(Property_, node, 'Property')
            self.Property = Property_
        elif nodeName_ == 'Ric':
            Ric_ = child_.text
            Ric_ = self.gds_validate_string(Ric_, node, 'Ric')
            self.Ric = Ric_
        elif nodeName_ == 'SecurityType':
            SecurityType_ = child_.text
            SecurityType_ = self.gds_validate_string(SecurityType_, node, 'SecurityType')
            self.SecurityType = SecurityType_
        elif nodeName_ == 'Value' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Value')
            self.Value = fval_
# end class EncyclopediaType4


class EncyclopediaType5(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CUSIP=None, ISIN=None, SEDOL=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.CUSIP = CUSIP
        self.ISIN = ISIN
        self.SEDOL = SEDOL
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EncyclopediaType5)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EncyclopediaType5.subclass:
            return EncyclopediaType5.subclass(*args_, **kwargs_)
        else:
            return EncyclopediaType5(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def hasContent_(self):
        if (
            self.CUSIP is not None or
            self.ISIN is not None or
            self.SEDOL is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EncyclopediaType5', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EncyclopediaType5')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EncyclopediaType5')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EncyclopediaType5', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EncyclopediaType5'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EncyclopediaType5', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CUSIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUSIP>%s</%sCUSIP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CUSIP), input_name='CUSIP')), namespaceprefix_ , eol_))
        if self.ISIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sISIN>%s</%sISIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ISIN), input_name='ISIN')), namespaceprefix_ , eol_))
        if self.SEDOL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSEDOL>%s</%sSEDOL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SEDOL), input_name='SEDOL')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CUSIP':
            CUSIP_ = child_.text
            CUSIP_ = self.gds_validate_string(CUSIP_, node, 'CUSIP')
            self.CUSIP = CUSIP_
        elif nodeName_ == 'ISIN':
            ISIN_ = child_.text
            ISIN_ = self.gds_validate_string(ISIN_, node, 'ISIN')
            self.ISIN = ISIN_
        elif nodeName_ == 'SEDOL':
            SEDOL_ = child_.text
            SEDOL_ = self.gds_validate_string(SEDOL_, node, 'SEDOL')
            self.SEDOL = SEDOL_
# end class EncyclopediaType5


class ETFType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DATATYPE=None, RANK=None, SECURITYID=None, SOLALISTINGID=None, SOLAISOPEN=None, SOLABASKETTYPE=None, BasketPositions=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DATATYPE = _cast(None, DATATYPE)
        self.RANK = _cast(None, RANK)
        self.SECURITYID = _cast(None, SECURITYID)
        self.SOLALISTINGID = _cast(None, SOLALISTINGID)
        self.SOLAISOPEN = _cast(None, SOLAISOPEN)
        self.SOLABASKETTYPE = _cast(None, SOLABASKETTYPE)
        self.BasketPositions = BasketPositions
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ETFType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ETFType.subclass:
            return ETFType.subclass(*args_, **kwargs_)
        else:
            return ETFType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BasketPositions(self):
        return self.BasketPositions
    def set_BasketPositions(self, BasketPositions):
        self.BasketPositions = BasketPositions
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_SECURITYID(self):
        return self.SECURITYID
    def set_SECURITYID(self, SECURITYID):
        self.SECURITYID = SECURITYID
    def get_SOLALISTINGID(self):
        return self.SOLALISTINGID
    def set_SOLALISTINGID(self, SOLALISTINGID):
        self.SOLALISTINGID = SOLALISTINGID
    def get_SOLAISOPEN(self):
        return self.SOLAISOPEN
    def set_SOLAISOPEN(self, SOLAISOPEN):
        self.SOLAISOPEN = SOLAISOPEN
    def get_SOLABASKETTYPE(self):
        return self.SOLABASKETTYPE
    def set_SOLABASKETTYPE(self, SOLABASKETTYPE):
        self.SOLABASKETTYPE = SOLABASKETTYPE
    def hasContent_(self):
        if (
            self.BasketPositions is not None or
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ETFType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ETFType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ETFType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ETFType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ETFType'):
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.SECURITYID is not None and 'SECURITYID' not in already_processed:
            already_processed.add('SECURITYID')
            outfile.write(' SECURITYID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SECURITYID), input_name='SECURITYID')), ))
        if self.SOLALISTINGID is not None and 'SOLALISTINGID' not in already_processed:
            already_processed.add('SOLALISTINGID')
            outfile.write(' SOLALISTINGID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SOLALISTINGID), input_name='SOLALISTINGID')), ))
        if self.SOLAISOPEN is not None and 'SOLAISOPEN' not in already_processed:
            already_processed.add('SOLAISOPEN')
            outfile.write(' SOLAISOPEN=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SOLAISOPEN), input_name='SOLAISOPEN')), ))
        if self.SOLABASKETTYPE is not None and 'SOLABASKETTYPE' not in already_processed:
            already_processed.add('SOLABASKETTYPE')
            outfile.write(' SOLABASKETTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SOLABASKETTYPE), input_name='SOLABASKETTYPE')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ETFType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BasketPositions is not None:
            self.BasketPositions.export(outfile, level, namespaceprefix_, name_='BasketPositions', pretty_print=pretty_print)
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('SECURITYID', node)
        if value is not None and 'SECURITYID' not in already_processed:
            already_processed.add('SECURITYID')
            self.SECURITYID = value
        value = find_attr_value_('SOLALISTINGID', node)
        if value is not None and 'SOLALISTINGID' not in already_processed:
            already_processed.add('SOLALISTINGID')
            self.SOLALISTINGID = value
        value = find_attr_value_('SOLAISOPEN', node)
        if value is not None and 'SOLAISOPEN' not in already_processed:
            already_processed.add('SOLAISOPEN')
            self.SOLAISOPEN = value
        value = find_attr_value_('SOLABASKETTYPE', node)
        if value is not None and 'SOLABASKETTYPE' not in already_processed:
            already_processed.add('SOLABASKETTYPE')
            self.SOLABASKETTYPE = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BasketPositions':
            obj_ = BasketPositionsType.factory(parent_object_=self)
            obj_.build(child_)
            self.BasketPositions = obj_
            obj_.original_tagname_ = 'BasketPositions'
        elif nodeName_ == 'DataDate':
            obj_ = DataDateType6.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class ETFType


class BasketPositionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CUSIP=None, ISIN=None, SEDOL=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.CUSIP = CUSIP
        self.ISIN = ISIN
        self.SEDOL = SEDOL
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BasketPositionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BasketPositionsType.subclass:
            return BasketPositionsType.subclass(*args_, **kwargs_)
        else:
            return BasketPositionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def hasContent_(self):
        if (
            self.CUSIP is not None or
            self.ISIN is not None or
            self.SEDOL is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BasketPositionsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BasketPositionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BasketPositionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BasketPositionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BasketPositionsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BasketPositionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CUSIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUSIP>%s</%sCUSIP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CUSIP), input_name='CUSIP')), namespaceprefix_ , eol_))
        if self.ISIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sISIN>%s</%sISIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ISIN), input_name='ISIN')), namespaceprefix_ , eol_))
        if self.SEDOL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSEDOL>%s</%sSEDOL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SEDOL), input_name='SEDOL')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CUSIP':
            CUSIP_ = child_.text
            CUSIP_ = self.gds_validate_string(CUSIP_, node, 'CUSIP')
            self.CUSIP = CUSIP_
        elif nodeName_ == 'ISIN':
            ISIN_ = child_.text
            ISIN_ = self.gds_validate_string(ISIN_, node, 'ISIN')
            self.ISIN = ISIN_
        elif nodeName_ == 'SEDOL':
            SEDOL_ = child_.text
            SEDOL_ = self.gds_validate_string(SEDOL_, node, 'SEDOL')
            self.SEDOL = SEDOL_
# end class BasketPositionsType


class DataDateType6(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, BasketPositions=None, Constituents=None, ETFPositions=None, Header=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.BasketPositions = BasketPositions
        self.Constituents = Constituents
        self.ETFPositions = ETFPositions
        self.Header = Header
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType6)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType6.subclass:
            return DataDateType6.subclass(*args_, **kwargs_)
        else:
            return DataDateType6(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BasketPositions(self):
        return self.BasketPositions
    def set_BasketPositions(self, BasketPositions):
        self.BasketPositions = BasketPositions
    def get_Constituents(self):
        return self.Constituents
    def set_Constituents(self, Constituents):
        self.Constituents = Constituents
    def get_ETFPositions(self):
        return self.ETFPositions
    def set_ETFPositions(self, ETFPositions):
        self.ETFPositions = ETFPositions
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.BasketPositions is not None or
            self.Constituents is not None or
            self.ETFPositions is not None or
            self.Header is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType6', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType6')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType6')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType6', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType6'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType6', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BasketPositions is not None:
            self.BasketPositions.export(outfile, level, namespaceprefix_, name_='BasketPositions', pretty_print=pretty_print)
        if self.Constituents is not None:
            self.Constituents.export(outfile, level, namespaceprefix_, name_='Constituents', pretty_print=pretty_print)
        if self.ETFPositions is not None:
            self.ETFPositions.export(outfile, level, namespaceprefix_, name_='ETFPositions', pretty_print=pretty_print)
        if self.Header is not None:
            self.Header.export(outfile, level, namespaceprefix_, name_='Header', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BasketPositions':
            obj_ = BasketPositionsType7.factory(parent_object_=self)
            obj_.build(child_)
            self.BasketPositions = obj_
            obj_.original_tagname_ = 'BasketPositions'
        elif nodeName_ == 'Constituents':
            obj_ = ConstituentsType.factory(parent_object_=self)
            obj_.build(child_)
            self.Constituents = obj_
            obj_.original_tagname_ = 'Constituents'
        elif nodeName_ == 'ETFPositions':
            obj_ = ETFPositionsType.factory(parent_object_=self)
            obj_.build(child_)
            self.ETFPositions = obj_
            obj_.original_tagname_ = 'ETFPositions'
        elif nodeName_ == 'Header':
            obj_ = HeaderType.factory(parent_object_=self)
            obj_.build(child_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
# end class DataDateType6


class BasketPositionsType7(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AsAtDate=None, BasketType=None, Bloomberg=None, Cash=None, ConstituentCount=None, CurrencyCode=None, EstimatedCash=None, ExchangeTicker=None, FXDate=None, ListingID=None, Mic=None, Name=None, Other=None, Ric=None, SecurityType=None, TotalCash=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.AsAtDate = AsAtDate
        self.BasketType = BasketType
        self.Bloomberg = Bloomberg
        self.Cash = Cash
        self.ConstituentCount = ConstituentCount
        self.CurrencyCode = CurrencyCode
        self.EstimatedCash = EstimatedCash
        self.ExchangeTicker = ExchangeTicker
        self.FXDate = FXDate
        self.ListingID = ListingID
        self.Mic = Mic
        self.Name = Name
        self.Other = Other
        self.Ric = Ric
        self.SecurityType = SecurityType
        self.TotalCash = TotalCash
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BasketPositionsType7)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BasketPositionsType7.subclass:
            return BasketPositionsType7.subclass(*args_, **kwargs_)
        else:
            return BasketPositionsType7(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AsAtDate(self):
        return self.AsAtDate
    def set_AsAtDate(self, AsAtDate):
        self.AsAtDate = AsAtDate
    def get_BasketType(self):
        return self.BasketType
    def set_BasketType(self, BasketType):
        self.BasketType = BasketType
    def get_Bloomberg(self):
        return self.Bloomberg
    def set_Bloomberg(self, Bloomberg):
        self.Bloomberg = Bloomberg
    def get_Cash(self):
        return self.Cash
    def set_Cash(self, Cash):
        self.Cash = Cash
    def get_ConstituentCount(self):
        return self.ConstituentCount
    def set_ConstituentCount(self, ConstituentCount):
        self.ConstituentCount = ConstituentCount
    def get_CurrencyCode(self):
        return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode):
        self.CurrencyCode = CurrencyCode
    def get_EstimatedCash(self):
        return self.EstimatedCash
    def set_EstimatedCash(self, EstimatedCash):
        self.EstimatedCash = EstimatedCash
    def get_ExchangeTicker(self):
        return self.ExchangeTicker
    def set_ExchangeTicker(self, ExchangeTicker):
        self.ExchangeTicker = ExchangeTicker
    def get_FXDate(self):
        return self.FXDate
    def set_FXDate(self, FXDate):
        self.FXDate = FXDate
    def get_ListingID(self):
        return self.ListingID
    def set_ListingID(self, ListingID):
        self.ListingID = ListingID
    def get_Mic(self):
        return self.Mic
    def set_Mic(self, Mic):
        self.Mic = Mic
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_Other(self):
        return self.Other
    def set_Other(self, Other):
        self.Other = Other
    def get_Ric(self):
        return self.Ric
    def set_Ric(self, Ric):
        self.Ric = Ric
    def get_SecurityType(self):
        return self.SecurityType
    def set_SecurityType(self, SecurityType):
        self.SecurityType = SecurityType
    def get_TotalCash(self):
        return self.TotalCash
    def set_TotalCash(self, TotalCash):
        self.TotalCash = TotalCash
    def hasContent_(self):
        if (
            self.AsAtDate is not None or
            self.BasketType is not None or
            self.Bloomberg is not None or
            self.Cash is not None or
            self.ConstituentCount is not None or
            self.CurrencyCode is not None or
            self.EstimatedCash is not None or
            self.ExchangeTicker is not None or
            self.FXDate is not None or
            self.ListingID is not None or
            self.Mic is not None or
            self.Name is not None or
            self.Other is not None or
            self.Ric is not None or
            self.SecurityType is not None or
            self.TotalCash is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BasketPositionsType7', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BasketPositionsType7')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BasketPositionsType7')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BasketPositionsType7', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BasketPositionsType7'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BasketPositionsType7', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AsAtDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAsAtDate>%s</%sAsAtDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AsAtDate), input_name='AsAtDate')), namespaceprefix_ , eol_))
        if self.BasketType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBasketType>%s</%sBasketType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BasketType), input_name='BasketType')), namespaceprefix_ , eol_))
        if self.Bloomberg is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBloomberg>%s</%sBloomberg>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Bloomberg), input_name='Bloomberg')), namespaceprefix_ , eol_))
        if self.Cash is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCash>%s</%sCash>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Cash), input_name='Cash')), namespaceprefix_ , eol_))
        if self.ConstituentCount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituentCount>%s</%sConstituentCount>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ConstituentCount), input_name='ConstituentCount')), namespaceprefix_ , eol_))
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyCode>%s</%sCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), namespaceprefix_ , eol_))
        if self.EstimatedCash is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEstimatedCash>%s</%sEstimatedCash>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EstimatedCash), input_name='EstimatedCash')), namespaceprefix_ , eol_))
        if self.ExchangeTicker is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExchangeTicker>%s</%sExchangeTicker>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExchangeTicker), input_name='ExchangeTicker')), namespaceprefix_ , eol_))
        if self.FXDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFXDate>%s</%sFXDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FXDate), input_name='FXDate')), namespaceprefix_ , eol_))
        if self.ListingID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListingID>%s</%sListingID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ListingID), input_name='ListingID')), namespaceprefix_ , eol_))
        if self.Mic is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMic>%s</%sMic>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Mic), input_name='Mic')), namespaceprefix_ , eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.Other is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOther>%s</%sOther>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Other), input_name='Other')), namespaceprefix_ , eol_))
        if self.Ric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRic>%s</%sRic>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Ric), input_name='Ric')), namespaceprefix_ , eol_))
        if self.SecurityType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSecurityType>%s</%sSecurityType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SecurityType), input_name='SecurityType')), namespaceprefix_ , eol_))
        if self.TotalCash is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalCash>%s</%sTotalCash>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TotalCash), input_name='TotalCash')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AsAtDate':
            AsAtDate_ = child_.text
            AsAtDate_ = self.gds_validate_string(AsAtDate_, node, 'AsAtDate')
            self.AsAtDate = AsAtDate_
        elif nodeName_ == 'BasketType':
            BasketType_ = child_.text
            BasketType_ = self.gds_validate_string(BasketType_, node, 'BasketType')
            self.BasketType = BasketType_
        elif nodeName_ == 'Bloomberg':
            Bloomberg_ = child_.text
            Bloomberg_ = self.gds_validate_string(Bloomberg_, node, 'Bloomberg')
            self.Bloomberg = Bloomberg_
        elif nodeName_ == 'Cash':
            Cash_ = child_.text
            Cash_ = self.gds_validate_string(Cash_, node, 'Cash')
            self.Cash = Cash_
        elif nodeName_ == 'ConstituentCount':
            ConstituentCount_ = child_.text
            ConstituentCount_ = self.gds_validate_string(ConstituentCount_, node, 'ConstituentCount')
            self.ConstituentCount = ConstituentCount_
        elif nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'EstimatedCash':
            EstimatedCash_ = child_.text
            EstimatedCash_ = self.gds_validate_string(EstimatedCash_, node, 'EstimatedCash')
            self.EstimatedCash = EstimatedCash_
        elif nodeName_ == 'ExchangeTicker':
            ExchangeTicker_ = child_.text
            ExchangeTicker_ = self.gds_validate_string(ExchangeTicker_, node, 'ExchangeTicker')
            self.ExchangeTicker = ExchangeTicker_
        elif nodeName_ == 'FXDate':
            FXDate_ = child_.text
            FXDate_ = self.gds_validate_string(FXDate_, node, 'FXDate')
            self.FXDate = FXDate_
        elif nodeName_ == 'ListingID':
            ListingID_ = child_.text
            ListingID_ = self.gds_validate_string(ListingID_, node, 'ListingID')
            self.ListingID = ListingID_
        elif nodeName_ == 'Mic':
            Mic_ = child_.text
            Mic_ = self.gds_validate_string(Mic_, node, 'Mic')
            self.Mic = Mic_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'Other':
            Other_ = child_.text
            Other_ = self.gds_validate_string(Other_, node, 'Other')
            self.Other = Other_
        elif nodeName_ == 'Ric':
            Ric_ = child_.text
            Ric_ = self.gds_validate_string(Ric_, node, 'Ric')
            self.Ric = Ric_
        elif nodeName_ == 'SecurityType':
            SecurityType_ = child_.text
            SecurityType_ = self.gds_validate_string(SecurityType_, node, 'SecurityType')
            self.SecurityType = SecurityType_
        elif nodeName_ == 'TotalCash':
            TotalCash_ = child_.text
            TotalCash_ = self.gds_validate_string(TotalCash_, node, 'TotalCash')
            self.TotalCash = TotalCash_
# end class BasketPositionsType7


class ConstituentsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AccruedInterest=None, CleanPrice=None, Constituent_BasketType=None, Constituent_Bloomberg=None, Constituent_CUSIP=None, Constituent_ExchangeTicker=None, Constituent_FxRate=None, Constituent_ISIN=None, Constituent_ListingCurrency=None, Constituent_ListingID=None, Constituent_Mic=None, Constituent_Name=None, Constituent_Other=None, Constituent_Ric=None, Constituent_SecurityType=None, Constituent_Sedol=None, ConstituentType=None, DirtyPrice=None, Factor1=None, Factor2=None, Factor3=None, Factor4=None, Factor5=None, Factor6=None, Factor7=None, Factor8=None, Factor9=None, IndexQuantity=None, NumberOfUnits=None, Price=None, PriceAdjustmentFactor=None, PriceCurrency=None, UnadjustedPrice=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.AccruedInterest = AccruedInterest
        self.CleanPrice = CleanPrice
        self.Constituent_BasketType = Constituent_BasketType
        self.Constituent_Bloomberg = Constituent_Bloomberg
        self.Constituent_CUSIP = Constituent_CUSIP
        self.Constituent_ExchangeTicker = Constituent_ExchangeTicker
        self.Constituent_FxRate = Constituent_FxRate
        self.Constituent_ISIN = Constituent_ISIN
        self.Constituent_ListingCurrency = Constituent_ListingCurrency
        self.Constituent_ListingID = Constituent_ListingID
        self.Constituent_Mic = Constituent_Mic
        self.Constituent_Name = Constituent_Name
        self.Constituent_Other = Constituent_Other
        self.Constituent_Ric = Constituent_Ric
        self.Constituent_SecurityType = Constituent_SecurityType
        self.Constituent_Sedol = Constituent_Sedol
        self.ConstituentType = ConstituentType
        self.DirtyPrice = DirtyPrice
        self.Factor1 = Factor1
        self.Factor2 = Factor2
        self.Factor3 = Factor3
        self.Factor4 = Factor4
        self.Factor5 = Factor5
        self.Factor6 = Factor6
        self.Factor7 = Factor7
        self.Factor8 = Factor8
        self.Factor9 = Factor9
        self.IndexQuantity = IndexQuantity
        self.NumberOfUnits = NumberOfUnits
        self.Price = Price
        self.PriceAdjustmentFactor = PriceAdjustmentFactor
        self.PriceCurrency = PriceCurrency
        self.UnadjustedPrice = UnadjustedPrice
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ConstituentsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ConstituentsType.subclass:
            return ConstituentsType.subclass(*args_, **kwargs_)
        else:
            return ConstituentsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AccruedInterest(self):
        return self.AccruedInterest
    def set_AccruedInterest(self, AccruedInterest):
        self.AccruedInterest = AccruedInterest
    def get_CleanPrice(self):
        return self.CleanPrice
    def set_CleanPrice(self, CleanPrice):
        self.CleanPrice = CleanPrice
    def get_Constituent_BasketType(self):
        return self.Constituent_BasketType
    def set_Constituent_BasketType(self, Constituent_BasketType):
        self.Constituent_BasketType = Constituent_BasketType
    def get_Constituent_Bloomberg(self):
        return self.Constituent_Bloomberg
    def set_Constituent_Bloomberg(self, Constituent_Bloomberg):
        self.Constituent_Bloomberg = Constituent_Bloomberg
    def get_Constituent_CUSIP(self):
        return self.Constituent_CUSIP
    def set_Constituent_CUSIP(self, Constituent_CUSIP):
        self.Constituent_CUSIP = Constituent_CUSIP
    def get_Constituent_ExchangeTicker(self):
        return self.Constituent_ExchangeTicker
    def set_Constituent_ExchangeTicker(self, Constituent_ExchangeTicker):
        self.Constituent_ExchangeTicker = Constituent_ExchangeTicker
    def get_Constituent_FxRate(self):
        return self.Constituent_FxRate
    def set_Constituent_FxRate(self, Constituent_FxRate):
        self.Constituent_FxRate = Constituent_FxRate
    def get_Constituent_ISIN(self):
        return self.Constituent_ISIN
    def set_Constituent_ISIN(self, Constituent_ISIN):
        self.Constituent_ISIN = Constituent_ISIN
    def get_Constituent_ListingCurrency(self):
        return self.Constituent_ListingCurrency
    def set_Constituent_ListingCurrency(self, Constituent_ListingCurrency):
        self.Constituent_ListingCurrency = Constituent_ListingCurrency
    def get_Constituent_ListingID(self):
        return self.Constituent_ListingID
    def set_Constituent_ListingID(self, Constituent_ListingID):
        self.Constituent_ListingID = Constituent_ListingID
    def get_Constituent_Mic(self):
        return self.Constituent_Mic
    def set_Constituent_Mic(self, Constituent_Mic):
        self.Constituent_Mic = Constituent_Mic
    def get_Constituent_Name(self):
        return self.Constituent_Name
    def set_Constituent_Name(self, Constituent_Name):
        self.Constituent_Name = Constituent_Name
    def get_Constituent_Other(self):
        return self.Constituent_Other
    def set_Constituent_Other(self, Constituent_Other):
        self.Constituent_Other = Constituent_Other
    def get_Constituent_Ric(self):
        return self.Constituent_Ric
    def set_Constituent_Ric(self, Constituent_Ric):
        self.Constituent_Ric = Constituent_Ric
    def get_Constituent_SecurityType(self):
        return self.Constituent_SecurityType
    def set_Constituent_SecurityType(self, Constituent_SecurityType):
        self.Constituent_SecurityType = Constituent_SecurityType
    def get_Constituent_Sedol(self):
        return self.Constituent_Sedol
    def set_Constituent_Sedol(self, Constituent_Sedol):
        self.Constituent_Sedol = Constituent_Sedol
    def get_ConstituentType(self):
        return self.ConstituentType
    def set_ConstituentType(self, ConstituentType):
        self.ConstituentType = ConstituentType
    def get_DirtyPrice(self):
        return self.DirtyPrice
    def set_DirtyPrice(self, DirtyPrice):
        self.DirtyPrice = DirtyPrice
    def get_Factor1(self):
        return self.Factor1
    def set_Factor1(self, Factor1):
        self.Factor1 = Factor1
    def get_Factor2(self):
        return self.Factor2
    def set_Factor2(self, Factor2):
        self.Factor2 = Factor2
    def get_Factor3(self):
        return self.Factor3
    def set_Factor3(self, Factor3):
        self.Factor3 = Factor3
    def get_Factor4(self):
        return self.Factor4
    def set_Factor4(self, Factor4):
        self.Factor4 = Factor4
    def get_Factor5(self):
        return self.Factor5
    def set_Factor5(self, Factor5):
        self.Factor5 = Factor5
    def get_Factor6(self):
        return self.Factor6
    def set_Factor6(self, Factor6):
        self.Factor6 = Factor6
    def get_Factor7(self):
        return self.Factor7
    def set_Factor7(self, Factor7):
        self.Factor7 = Factor7
    def get_Factor8(self):
        return self.Factor8
    def set_Factor8(self, Factor8):
        self.Factor8 = Factor8
    def get_Factor9(self):
        return self.Factor9
    def set_Factor9(self, Factor9):
        self.Factor9 = Factor9
    def get_IndexQuantity(self):
        return self.IndexQuantity
    def set_IndexQuantity(self, IndexQuantity):
        self.IndexQuantity = IndexQuantity
    def get_NumberOfUnits(self):
        return self.NumberOfUnits
    def set_NumberOfUnits(self, NumberOfUnits):
        self.NumberOfUnits = NumberOfUnits
    def get_Price(self):
        return self.Price
    def set_Price(self, Price):
        self.Price = Price
    def get_PriceAdjustmentFactor(self):
        return self.PriceAdjustmentFactor
    def set_PriceAdjustmentFactor(self, PriceAdjustmentFactor):
        self.PriceAdjustmentFactor = PriceAdjustmentFactor
    def get_PriceCurrency(self):
        return self.PriceCurrency
    def set_PriceCurrency(self, PriceCurrency):
        self.PriceCurrency = PriceCurrency
    def get_UnadjustedPrice(self):
        return self.UnadjustedPrice
    def set_UnadjustedPrice(self, UnadjustedPrice):
        self.UnadjustedPrice = UnadjustedPrice
    def hasContent_(self):
        if (
            self.AccruedInterest is not None or
            self.CleanPrice is not None or
            self.Constituent_BasketType is not None or
            self.Constituent_Bloomberg is not None or
            self.Constituent_CUSIP is not None or
            self.Constituent_ExchangeTicker is not None or
            self.Constituent_FxRate is not None or
            self.Constituent_ISIN is not None or
            self.Constituent_ListingCurrency is not None or
            self.Constituent_ListingID is not None or
            self.Constituent_Mic is not None or
            self.Constituent_Name is not None or
            self.Constituent_Other is not None or
            self.Constituent_Ric is not None or
            self.Constituent_SecurityType is not None or
            self.Constituent_Sedol is not None or
            self.ConstituentType is not None or
            self.DirtyPrice is not None or
            self.Factor1 is not None or
            self.Factor2 is not None or
            self.Factor3 is not None or
            self.Factor4 is not None or
            self.Factor5 is not None or
            self.Factor6 is not None or
            self.Factor7 is not None or
            self.Factor8 is not None or
            self.Factor9 is not None or
            self.IndexQuantity is not None or
            self.NumberOfUnits is not None or
            self.Price is not None or
            self.PriceAdjustmentFactor is not None or
            self.PriceCurrency is not None or
            self.UnadjustedPrice is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConstituentsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ConstituentsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ConstituentsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ConstituentsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ConstituentsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConstituentsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccruedInterest is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccruedInterest>%s</%sAccruedInterest>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccruedInterest), input_name='AccruedInterest')), namespaceprefix_ , eol_))
        if self.CleanPrice is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCleanPrice>%s</%sCleanPrice>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CleanPrice), input_name='CleanPrice')), namespaceprefix_ , eol_))
        if self.Constituent_BasketType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_BasketType>%s</%sConstituent_BasketType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_BasketType), input_name='Constituent_BasketType')), namespaceprefix_ , eol_))
        if self.Constituent_Bloomberg is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_Bloomberg>%s</%sConstituent_Bloomberg>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_Bloomberg), input_name='Constituent_Bloomberg')), namespaceprefix_ , eol_))
        if self.Constituent_CUSIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_CUSIP>%s</%sConstituent_CUSIP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_CUSIP), input_name='Constituent_CUSIP')), namespaceprefix_ , eol_))
        if self.Constituent_ExchangeTicker is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_ExchangeTicker>%s</%sConstituent_ExchangeTicker>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_ExchangeTicker), input_name='Constituent_ExchangeTicker')), namespaceprefix_ , eol_))
        if self.Constituent_FxRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_FxRate>%s</%sConstituent_FxRate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_FxRate), input_name='Constituent_FxRate')), namespaceprefix_ , eol_))
        if self.Constituent_ISIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_ISIN>%s</%sConstituent_ISIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_ISIN), input_name='Constituent_ISIN')), namespaceprefix_ , eol_))
        if self.Constituent_ListingCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_ListingCurrency>%s</%sConstituent_ListingCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_ListingCurrency), input_name='Constituent_ListingCurrency')), namespaceprefix_ , eol_))
        if self.Constituent_ListingID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_ListingID>%s</%sConstituent_ListingID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_ListingID), input_name='Constituent_ListingID')), namespaceprefix_ , eol_))
        if self.Constituent_Mic is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_Mic>%s</%sConstituent_Mic>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_Mic), input_name='Constituent_Mic')), namespaceprefix_ , eol_))
        if self.Constituent_Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_Name>%s</%sConstituent_Name>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_Name), input_name='Constituent_Name')), namespaceprefix_ , eol_))
        if self.Constituent_Other is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_Other>%s</%sConstituent_Other>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_Other), input_name='Constituent_Other')), namespaceprefix_ , eol_))
        if self.Constituent_Ric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_Ric>%s</%sConstituent_Ric>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_Ric), input_name='Constituent_Ric')), namespaceprefix_ , eol_))
        if self.Constituent_SecurityType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_SecurityType>%s</%sConstituent_SecurityType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_SecurityType), input_name='Constituent_SecurityType')), namespaceprefix_ , eol_))
        if self.Constituent_Sedol is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_Sedol>%s</%sConstituent_Sedol>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_Sedol), input_name='Constituent_Sedol')), namespaceprefix_ , eol_))
        if self.ConstituentType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituentType>%s</%sConstituentType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ConstituentType), input_name='ConstituentType')), namespaceprefix_ , eol_))
        if self.DirtyPrice is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDirtyPrice>%s</%sDirtyPrice>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DirtyPrice), input_name='DirtyPrice')), namespaceprefix_ , eol_))
        if self.Factor1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFactor1>%s</%sFactor1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Factor1), input_name='Factor1')), namespaceprefix_ , eol_))
        if self.Factor2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFactor2>%s</%sFactor2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Factor2), input_name='Factor2')), namespaceprefix_ , eol_))
        if self.Factor3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFactor3>%s</%sFactor3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Factor3), input_name='Factor3')), namespaceprefix_ , eol_))
        if self.Factor4 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFactor4>%s</%sFactor4>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Factor4), input_name='Factor4')), namespaceprefix_ , eol_))
        if self.Factor5 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFactor5>%s</%sFactor5>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Factor5), input_name='Factor5')), namespaceprefix_ , eol_))
        if self.Factor6 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFactor6>%s</%sFactor6>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Factor6), input_name='Factor6')), namespaceprefix_ , eol_))
        if self.Factor7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFactor7>%s</%sFactor7>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Factor7), input_name='Factor7')), namespaceprefix_ , eol_))
        if self.Factor8 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFactor8>%s</%sFactor8>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Factor8), input_name='Factor8')), namespaceprefix_ , eol_))
        if self.Factor9 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFactor9>%s</%sFactor9>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Factor9), input_name='Factor9')), namespaceprefix_ , eol_))
        if self.IndexQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndexQuantity>%s</%sIndexQuantity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IndexQuantity), input_name='IndexQuantity')), namespaceprefix_ , eol_))
        if self.NumberOfUnits is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfUnits>%s</%sNumberOfUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NumberOfUnits), input_name='NumberOfUnits')), namespaceprefix_ , eol_))
        if self.Price is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrice>%s</%sPrice>%s' % (namespaceprefix_ , self.gds_format_float(self.Price, input_name='Price'), namespaceprefix_ , eol_))
        if self.PriceAdjustmentFactor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceAdjustmentFactor>%s</%sPriceAdjustmentFactor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PriceAdjustmentFactor), input_name='PriceAdjustmentFactor')), namespaceprefix_ , eol_))
        if self.PriceCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceCurrency>%s</%sPriceCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PriceCurrency), input_name='PriceCurrency')), namespaceprefix_ , eol_))
        if self.UnadjustedPrice is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnadjustedPrice>%s</%sUnadjustedPrice>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UnadjustedPrice), input_name='UnadjustedPrice')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AccruedInterest':
            AccruedInterest_ = child_.text
            AccruedInterest_ = self.gds_validate_string(AccruedInterest_, node, 'AccruedInterest')
            self.AccruedInterest = AccruedInterest_
        elif nodeName_ == 'CleanPrice':
            CleanPrice_ = child_.text
            CleanPrice_ = self.gds_validate_string(CleanPrice_, node, 'CleanPrice')
            self.CleanPrice = CleanPrice_
        elif nodeName_ == 'Constituent_BasketType':
            Constituent_BasketType_ = child_.text
            Constituent_BasketType_ = self.gds_validate_string(Constituent_BasketType_, node, 'Constituent_BasketType')
            self.Constituent_BasketType = Constituent_BasketType_
        elif nodeName_ == 'Constituent_Bloomberg':
            Constituent_Bloomberg_ = child_.text
            Constituent_Bloomberg_ = self.gds_validate_string(Constituent_Bloomberg_, node, 'Constituent_Bloomberg')
            self.Constituent_Bloomberg = Constituent_Bloomberg_
        elif nodeName_ == 'Constituent_CUSIP':
            Constituent_CUSIP_ = child_.text
            Constituent_CUSIP_ = self.gds_validate_string(Constituent_CUSIP_, node, 'Constituent_CUSIP')
            self.Constituent_CUSIP = Constituent_CUSIP_
        elif nodeName_ == 'Constituent_ExchangeTicker':
            Constituent_ExchangeTicker_ = child_.text
            Constituent_ExchangeTicker_ = self.gds_validate_string(Constituent_ExchangeTicker_, node, 'Constituent_ExchangeTicker')
            self.Constituent_ExchangeTicker = Constituent_ExchangeTicker_
        elif nodeName_ == 'Constituent_FxRate':
            Constituent_FxRate_ = child_.text
            Constituent_FxRate_ = self.gds_validate_string(Constituent_FxRate_, node, 'Constituent_FxRate')
            self.Constituent_FxRate = Constituent_FxRate_
        elif nodeName_ == 'Constituent_ISIN':
            Constituent_ISIN_ = child_.text
            Constituent_ISIN_ = self.gds_validate_string(Constituent_ISIN_, node, 'Constituent_ISIN')
            self.Constituent_ISIN = Constituent_ISIN_
        elif nodeName_ == 'Constituent_ListingCurrency':
            Constituent_ListingCurrency_ = child_.text
            Constituent_ListingCurrency_ = self.gds_validate_string(Constituent_ListingCurrency_, node, 'Constituent_ListingCurrency')
            self.Constituent_ListingCurrency = Constituent_ListingCurrency_
        elif nodeName_ == 'Constituent_ListingID':
            Constituent_ListingID_ = child_.text
            Constituent_ListingID_ = self.gds_validate_string(Constituent_ListingID_, node, 'Constituent_ListingID')
            self.Constituent_ListingID = Constituent_ListingID_
        elif nodeName_ == 'Constituent_Mic':
            Constituent_Mic_ = child_.text
            Constituent_Mic_ = self.gds_validate_string(Constituent_Mic_, node, 'Constituent_Mic')
            self.Constituent_Mic = Constituent_Mic_
        elif nodeName_ == 'Constituent_Name':
            Constituent_Name_ = child_.text
            Constituent_Name_ = self.gds_validate_string(Constituent_Name_, node, 'Constituent_Name')
            self.Constituent_Name = Constituent_Name_
        elif nodeName_ == 'Constituent_Other':
            Constituent_Other_ = child_.text
            Constituent_Other_ = self.gds_validate_string(Constituent_Other_, node, 'Constituent_Other')
            self.Constituent_Other = Constituent_Other_
        elif nodeName_ == 'Constituent_Ric':
            Constituent_Ric_ = child_.text
            Constituent_Ric_ = self.gds_validate_string(Constituent_Ric_, node, 'Constituent_Ric')
            self.Constituent_Ric = Constituent_Ric_
        elif nodeName_ == 'Constituent_SecurityType':
            Constituent_SecurityType_ = child_.text
            Constituent_SecurityType_ = self.gds_validate_string(Constituent_SecurityType_, node, 'Constituent_SecurityType')
            self.Constituent_SecurityType = Constituent_SecurityType_
        elif nodeName_ == 'Constituent_Sedol':
            Constituent_Sedol_ = child_.text
            Constituent_Sedol_ = self.gds_validate_string(Constituent_Sedol_, node, 'Constituent_Sedol')
            self.Constituent_Sedol = Constituent_Sedol_
        elif nodeName_ == 'ConstituentType':
            ConstituentType_ = child_.text
            ConstituentType_ = self.gds_validate_string(ConstituentType_, node, 'ConstituentType')
            self.ConstituentType = ConstituentType_
        elif nodeName_ == 'DirtyPrice':
            DirtyPrice_ = child_.text
            DirtyPrice_ = self.gds_validate_string(DirtyPrice_, node, 'DirtyPrice')
            self.DirtyPrice = DirtyPrice_
        elif nodeName_ == 'Factor1':
            Factor1_ = child_.text
            Factor1_ = self.gds_validate_string(Factor1_, node, 'Factor1')
            self.Factor1 = Factor1_
        elif nodeName_ == 'Factor2':
            Factor2_ = child_.text
            Factor2_ = self.gds_validate_string(Factor2_, node, 'Factor2')
            self.Factor2 = Factor2_
        elif nodeName_ == 'Factor3':
            Factor3_ = child_.text
            Factor3_ = self.gds_validate_string(Factor3_, node, 'Factor3')
            self.Factor3 = Factor3_
        elif nodeName_ == 'Factor4':
            Factor4_ = child_.text
            Factor4_ = self.gds_validate_string(Factor4_, node, 'Factor4')
            self.Factor4 = Factor4_
        elif nodeName_ == 'Factor5':
            Factor5_ = child_.text
            Factor5_ = self.gds_validate_string(Factor5_, node, 'Factor5')
            self.Factor5 = Factor5_
        elif nodeName_ == 'Factor6':
            Factor6_ = child_.text
            Factor6_ = self.gds_validate_string(Factor6_, node, 'Factor6')
            self.Factor6 = Factor6_
        elif nodeName_ == 'Factor7':
            Factor7_ = child_.text
            Factor7_ = self.gds_validate_string(Factor7_, node, 'Factor7')
            self.Factor7 = Factor7_
        elif nodeName_ == 'Factor8':
            Factor8_ = child_.text
            Factor8_ = self.gds_validate_string(Factor8_, node, 'Factor8')
            self.Factor8 = Factor8_
        elif nodeName_ == 'Factor9':
            Factor9_ = child_.text
            Factor9_ = self.gds_validate_string(Factor9_, node, 'Factor9')
            self.Factor9 = Factor9_
        elif nodeName_ == 'IndexQuantity':
            IndexQuantity_ = child_.text
            IndexQuantity_ = self.gds_validate_string(IndexQuantity_, node, 'IndexQuantity')
            self.IndexQuantity = IndexQuantity_
        elif nodeName_ == 'NumberOfUnits':
            NumberOfUnits_ = child_.text
            NumberOfUnits_ = self.gds_validate_string(NumberOfUnits_, node, 'NumberOfUnits')
            self.NumberOfUnits = NumberOfUnits_
        elif nodeName_ == 'Price' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Price')
            self.Price = fval_
        elif nodeName_ == 'PriceAdjustmentFactor':
            PriceAdjustmentFactor_ = child_.text
            PriceAdjustmentFactor_ = self.gds_validate_string(PriceAdjustmentFactor_, node, 'PriceAdjustmentFactor')
            self.PriceAdjustmentFactor = PriceAdjustmentFactor_
        elif nodeName_ == 'PriceCurrency':
            PriceCurrency_ = child_.text
            PriceCurrency_ = self.gds_validate_string(PriceCurrency_, node, 'PriceCurrency')
            self.PriceCurrency = PriceCurrency_
        elif nodeName_ == 'UnadjustedPrice':
            UnadjustedPrice_ = child_.text
            UnadjustedPrice_ = self.gds_validate_string(UnadjustedPrice_, node, 'UnadjustedPrice')
            self.UnadjustedPrice = UnadjustedPrice_
# end class ConstituentsType


class ETFPositionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AUM=None, CreationUnits=None, DataStatusMask=None, Divisor=None, EscrowCash=None, ExcludedCash=None, IsOpen=None, IsPrimaryListing=None, Leverage=None, ListingCurrencyToUSD=None, NAV=None, NAVDate=None, Position_AsAtDate=None, Position_Bloomberg=None, Position_CUSIP=None, Position_ExchangeTicker=None, Position_FxDate=None, Position_ISIN=None, Position_ListingCurrency=None, Position_ListingID=None, Position_Mic=None, Position_Name=None, Position_Other=None, Position_Ric=None, Position_SecurityType=None, Position_Sedol=None, PositionCurrency=None, PositionCurrencyToUSD=None, PriceDate=None, SharesOutstanding=None, Ter=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.AUM = AUM
        self.CreationUnits = CreationUnits
        self.DataStatusMask = DataStatusMask
        self.Divisor = Divisor
        self.EscrowCash = EscrowCash
        self.ExcludedCash = ExcludedCash
        self.IsOpen = IsOpen
        self.IsPrimaryListing = IsPrimaryListing
        self.Leverage = Leverage
        self.ListingCurrencyToUSD = ListingCurrencyToUSD
        self.NAV = NAV
        self.NAVDate = NAVDate
        self.Position_AsAtDate = Position_AsAtDate
        self.Position_Bloomberg = Position_Bloomberg
        self.Position_CUSIP = Position_CUSIP
        self.Position_ExchangeTicker = Position_ExchangeTicker
        self.Position_FxDate = Position_FxDate
        self.Position_ISIN = Position_ISIN
        self.Position_ListingCurrency = Position_ListingCurrency
        self.Position_ListingID = Position_ListingID
        self.Position_Mic = Position_Mic
        self.Position_Name = Position_Name
        self.Position_Other = Position_Other
        self.Position_Ric = Position_Ric
        self.Position_SecurityType = Position_SecurityType
        self.Position_Sedol = Position_Sedol
        self.PositionCurrency = PositionCurrency
        self.PositionCurrencyToUSD = PositionCurrencyToUSD
        self.PriceDate = PriceDate
        self.SharesOutstanding = SharesOutstanding
        self.Ter = Ter
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ETFPositionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ETFPositionsType.subclass:
            return ETFPositionsType.subclass(*args_, **kwargs_)
        else:
            return ETFPositionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AUM(self):
        return self.AUM
    def set_AUM(self, AUM):
        self.AUM = AUM
    def get_CreationUnits(self):
        return self.CreationUnits
    def set_CreationUnits(self, CreationUnits):
        self.CreationUnits = CreationUnits
    def get_DataStatusMask(self):
        return self.DataStatusMask
    def set_DataStatusMask(self, DataStatusMask):
        self.DataStatusMask = DataStatusMask
    def get_Divisor(self):
        return self.Divisor
    def set_Divisor(self, Divisor):
        self.Divisor = Divisor
    def get_EscrowCash(self):
        return self.EscrowCash
    def set_EscrowCash(self, EscrowCash):
        self.EscrowCash = EscrowCash
    def get_ExcludedCash(self):
        return self.ExcludedCash
    def set_ExcludedCash(self, ExcludedCash):
        self.ExcludedCash = ExcludedCash
    def get_IsOpen(self):
        return self.IsOpen
    def set_IsOpen(self, IsOpen):
        self.IsOpen = IsOpen
    def get_IsPrimaryListing(self):
        return self.IsPrimaryListing
    def set_IsPrimaryListing(self, IsPrimaryListing):
        self.IsPrimaryListing = IsPrimaryListing
    def get_Leverage(self):
        return self.Leverage
    def set_Leverage(self, Leverage):
        self.Leverage = Leverage
    def get_ListingCurrencyToUSD(self):
        return self.ListingCurrencyToUSD
    def set_ListingCurrencyToUSD(self, ListingCurrencyToUSD):
        self.ListingCurrencyToUSD = ListingCurrencyToUSD
    def get_NAV(self):
        return self.NAV
    def set_NAV(self, NAV):
        self.NAV = NAV
    def get_NAVDate(self):
        return self.NAVDate
    def set_NAVDate(self, NAVDate):
        self.NAVDate = NAVDate
    def get_Position_AsAtDate(self):
        return self.Position_AsAtDate
    def set_Position_AsAtDate(self, Position_AsAtDate):
        self.Position_AsAtDate = Position_AsAtDate
    def get_Position_Bloomberg(self):
        return self.Position_Bloomberg
    def set_Position_Bloomberg(self, Position_Bloomberg):
        self.Position_Bloomberg = Position_Bloomberg
    def get_Position_CUSIP(self):
        return self.Position_CUSIP
    def set_Position_CUSIP(self, Position_CUSIP):
        self.Position_CUSIP = Position_CUSIP
    def get_Position_ExchangeTicker(self):
        return self.Position_ExchangeTicker
    def set_Position_ExchangeTicker(self, Position_ExchangeTicker):
        self.Position_ExchangeTicker = Position_ExchangeTicker
    def get_Position_FxDate(self):
        return self.Position_FxDate
    def set_Position_FxDate(self, Position_FxDate):
        self.Position_FxDate = Position_FxDate
    def get_Position_ISIN(self):
        return self.Position_ISIN
    def set_Position_ISIN(self, Position_ISIN):
        self.Position_ISIN = Position_ISIN
    def get_Position_ListingCurrency(self):
        return self.Position_ListingCurrency
    def set_Position_ListingCurrency(self, Position_ListingCurrency):
        self.Position_ListingCurrency = Position_ListingCurrency
    def get_Position_ListingID(self):
        return self.Position_ListingID
    def set_Position_ListingID(self, Position_ListingID):
        self.Position_ListingID = Position_ListingID
    def get_Position_Mic(self):
        return self.Position_Mic
    def set_Position_Mic(self, Position_Mic):
        self.Position_Mic = Position_Mic
    def get_Position_Name(self):
        return self.Position_Name
    def set_Position_Name(self, Position_Name):
        self.Position_Name = Position_Name
    def get_Position_Other(self):
        return self.Position_Other
    def set_Position_Other(self, Position_Other):
        self.Position_Other = Position_Other
    def get_Position_Ric(self):
        return self.Position_Ric
    def set_Position_Ric(self, Position_Ric):
        self.Position_Ric = Position_Ric
    def get_Position_SecurityType(self):
        return self.Position_SecurityType
    def set_Position_SecurityType(self, Position_SecurityType):
        self.Position_SecurityType = Position_SecurityType
    def get_Position_Sedol(self):
        return self.Position_Sedol
    def set_Position_Sedol(self, Position_Sedol):
        self.Position_Sedol = Position_Sedol
    def get_PositionCurrency(self):
        return self.PositionCurrency
    def set_PositionCurrency(self, PositionCurrency):
        self.PositionCurrency = PositionCurrency
    def get_PositionCurrencyToUSD(self):
        return self.PositionCurrencyToUSD
    def set_PositionCurrencyToUSD(self, PositionCurrencyToUSD):
        self.PositionCurrencyToUSD = PositionCurrencyToUSD
    def get_PriceDate(self):
        return self.PriceDate
    def set_PriceDate(self, PriceDate):
        self.PriceDate = PriceDate
    def get_SharesOutstanding(self):
        return self.SharesOutstanding
    def set_SharesOutstanding(self, SharesOutstanding):
        self.SharesOutstanding = SharesOutstanding
    def get_Ter(self):
        return self.Ter
    def set_Ter(self, Ter):
        self.Ter = Ter
    def hasContent_(self):
        if (
            self.AUM is not None or
            self.CreationUnits is not None or
            self.DataStatusMask is not None or
            self.Divisor is not None or
            self.EscrowCash is not None or
            self.ExcludedCash is not None or
            self.IsOpen is not None or
            self.IsPrimaryListing is not None or
            self.Leverage is not None or
            self.ListingCurrencyToUSD is not None or
            self.NAV is not None or
            self.NAVDate is not None or
            self.Position_AsAtDate is not None or
            self.Position_Bloomberg is not None or
            self.Position_CUSIP is not None or
            self.Position_ExchangeTicker is not None or
            self.Position_FxDate is not None or
            self.Position_ISIN is not None or
            self.Position_ListingCurrency is not None or
            self.Position_ListingID is not None or
            self.Position_Mic is not None or
            self.Position_Name is not None or
            self.Position_Other is not None or
            self.Position_Ric is not None or
            self.Position_SecurityType is not None or
            self.Position_Sedol is not None or
            self.PositionCurrency is not None or
            self.PositionCurrencyToUSD is not None or
            self.PriceDate is not None or
            self.SharesOutstanding is not None or
            self.Ter is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ETFPositionsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ETFPositionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ETFPositionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ETFPositionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ETFPositionsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ETFPositionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AUM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAUM>%s</%sAUM>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AUM), input_name='AUM')), namespaceprefix_ , eol_))
        if self.CreationUnits is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreationUnits>%s</%sCreationUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreationUnits), input_name='CreationUnits')), namespaceprefix_ , eol_))
        if self.DataStatusMask is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataStatusMask>%s</%sDataStatusMask>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DataStatusMask), input_name='DataStatusMask')), namespaceprefix_ , eol_))
        if self.Divisor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDivisor>%s</%sDivisor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Divisor), input_name='Divisor')), namespaceprefix_ , eol_))
        if self.EscrowCash is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEscrowCash>%s</%sEscrowCash>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EscrowCash), input_name='EscrowCash')), namespaceprefix_ , eol_))
        if self.ExcludedCash is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExcludedCash>%s</%sExcludedCash>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExcludedCash), input_name='ExcludedCash')), namespaceprefix_ , eol_))
        if self.IsOpen is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsOpen>%s</%sIsOpen>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsOpen), input_name='IsOpen')), namespaceprefix_ , eol_))
        if self.IsPrimaryListing is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsPrimaryListing>%s</%sIsPrimaryListing>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsPrimaryListing), input_name='IsPrimaryListing')), namespaceprefix_ , eol_))
        if self.Leverage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLeverage>%s</%sLeverage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Leverage), input_name='Leverage')), namespaceprefix_ , eol_))
        if self.ListingCurrencyToUSD is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListingCurrencyToUSD>%s</%sListingCurrencyToUSD>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ListingCurrencyToUSD), input_name='ListingCurrencyToUSD')), namespaceprefix_ , eol_))
        if self.NAV is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNAV>%s</%sNAV>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NAV), input_name='NAV')), namespaceprefix_ , eol_))
        if self.NAVDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNAVDate>%s</%sNAVDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NAVDate), input_name='NAVDate')), namespaceprefix_ , eol_))
        if self.Position_AsAtDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosition_AsAtDate>%s</%sPosition_AsAtDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Position_AsAtDate), input_name='Position_AsAtDate')), namespaceprefix_ , eol_))
        if self.Position_Bloomberg is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosition_Bloomberg>%s</%sPosition_Bloomberg>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Position_Bloomberg), input_name='Position_Bloomberg')), namespaceprefix_ , eol_))
        if self.Position_CUSIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosition_CUSIP>%s</%sPosition_CUSIP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Position_CUSIP), input_name='Position_CUSIP')), namespaceprefix_ , eol_))
        if self.Position_ExchangeTicker is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosition_ExchangeTicker>%s</%sPosition_ExchangeTicker>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Position_ExchangeTicker), input_name='Position_ExchangeTicker')), namespaceprefix_ , eol_))
        if self.Position_FxDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosition_FxDate>%s</%sPosition_FxDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Position_FxDate), input_name='Position_FxDate')), namespaceprefix_ , eol_))
        if self.Position_ISIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosition_ISIN>%s</%sPosition_ISIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Position_ISIN), input_name='Position_ISIN')), namespaceprefix_ , eol_))
        if self.Position_ListingCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosition_ListingCurrency>%s</%sPosition_ListingCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Position_ListingCurrency), input_name='Position_ListingCurrency')), namespaceprefix_ , eol_))
        if self.Position_ListingID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosition_ListingID>%s</%sPosition_ListingID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Position_ListingID), input_name='Position_ListingID')), namespaceprefix_ , eol_))
        if self.Position_Mic is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosition_Mic>%s</%sPosition_Mic>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Position_Mic), input_name='Position_Mic')), namespaceprefix_ , eol_))
        if self.Position_Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosition_Name>%s</%sPosition_Name>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Position_Name), input_name='Position_Name')), namespaceprefix_ , eol_))
        if self.Position_Other is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosition_Other>%s</%sPosition_Other>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Position_Other), input_name='Position_Other')), namespaceprefix_ , eol_))
        if self.Position_Ric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosition_Ric>%s</%sPosition_Ric>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Position_Ric), input_name='Position_Ric')), namespaceprefix_ , eol_))
        if self.Position_SecurityType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosition_SecurityType>%s</%sPosition_SecurityType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Position_SecurityType), input_name='Position_SecurityType')), namespaceprefix_ , eol_))
        if self.Position_Sedol is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosition_Sedol>%s</%sPosition_Sedol>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Position_Sedol), input_name='Position_Sedol')), namespaceprefix_ , eol_))
        if self.PositionCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPositionCurrency>%s</%sPositionCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PositionCurrency), input_name='PositionCurrency')), namespaceprefix_ , eol_))
        if self.PositionCurrencyToUSD is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPositionCurrencyToUSD>%s</%sPositionCurrencyToUSD>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PositionCurrencyToUSD), input_name='PositionCurrencyToUSD')), namespaceprefix_ , eol_))
        if self.PriceDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceDate>%s</%sPriceDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PriceDate), input_name='PriceDate')), namespaceprefix_ , eol_))
        if self.SharesOutstanding is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSharesOutstanding>%s</%sSharesOutstanding>%s' % (namespaceprefix_ , self.gds_format_float(self.SharesOutstanding, input_name='SharesOutstanding'), namespaceprefix_ , eol_))
        if self.Ter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTer>%s</%sTer>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Ter), input_name='Ter')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AUM':
            AUM_ = child_.text
            AUM_ = self.gds_validate_string(AUM_, node, 'AUM')
            self.AUM = AUM_
        elif nodeName_ == 'CreationUnits':
            CreationUnits_ = child_.text
            CreationUnits_ = self.gds_validate_string(CreationUnits_, node, 'CreationUnits')
            self.CreationUnits = CreationUnits_
        elif nodeName_ == 'DataStatusMask':
            DataStatusMask_ = child_.text
            DataStatusMask_ = self.gds_validate_string(DataStatusMask_, node, 'DataStatusMask')
            self.DataStatusMask = DataStatusMask_
        elif nodeName_ == 'Divisor':
            Divisor_ = child_.text
            Divisor_ = self.gds_validate_string(Divisor_, node, 'Divisor')
            self.Divisor = Divisor_
        elif nodeName_ == 'EscrowCash':
            EscrowCash_ = child_.text
            EscrowCash_ = self.gds_validate_string(EscrowCash_, node, 'EscrowCash')
            self.EscrowCash = EscrowCash_
        elif nodeName_ == 'ExcludedCash':
            ExcludedCash_ = child_.text
            ExcludedCash_ = self.gds_validate_string(ExcludedCash_, node, 'ExcludedCash')
            self.ExcludedCash = ExcludedCash_
        elif nodeName_ == 'IsOpen':
            IsOpen_ = child_.text
            IsOpen_ = self.gds_validate_string(IsOpen_, node, 'IsOpen')
            self.IsOpen = IsOpen_
        elif nodeName_ == 'IsPrimaryListing':
            IsPrimaryListing_ = child_.text
            IsPrimaryListing_ = self.gds_validate_string(IsPrimaryListing_, node, 'IsPrimaryListing')
            self.IsPrimaryListing = IsPrimaryListing_
        elif nodeName_ == 'Leverage':
            Leverage_ = child_.text
            Leverage_ = self.gds_validate_string(Leverage_, node, 'Leverage')
            self.Leverage = Leverage_
        elif nodeName_ == 'ListingCurrencyToUSD':
            ListingCurrencyToUSD_ = child_.text
            ListingCurrencyToUSD_ = self.gds_validate_string(ListingCurrencyToUSD_, node, 'ListingCurrencyToUSD')
            self.ListingCurrencyToUSD = ListingCurrencyToUSD_
        elif nodeName_ == 'NAV':
            NAV_ = child_.text
            NAV_ = self.gds_validate_string(NAV_, node, 'NAV')
            self.NAV = NAV_
        elif nodeName_ == 'NAVDate':
            NAVDate_ = child_.text
            NAVDate_ = self.gds_validate_string(NAVDate_, node, 'NAVDate')
            self.NAVDate = NAVDate_
        elif nodeName_ == 'Position_AsAtDate':
            Position_AsAtDate_ = child_.text
            Position_AsAtDate_ = self.gds_validate_string(Position_AsAtDate_, node, 'Position_AsAtDate')
            self.Position_AsAtDate = Position_AsAtDate_
        elif nodeName_ == 'Position_Bloomberg':
            Position_Bloomberg_ = child_.text
            Position_Bloomberg_ = self.gds_validate_string(Position_Bloomberg_, node, 'Position_Bloomberg')
            self.Position_Bloomberg = Position_Bloomberg_
        elif nodeName_ == 'Position_CUSIP':
            Position_CUSIP_ = child_.text
            Position_CUSIP_ = self.gds_validate_string(Position_CUSIP_, node, 'Position_CUSIP')
            self.Position_CUSIP = Position_CUSIP_
        elif nodeName_ == 'Position_ExchangeTicker':
            Position_ExchangeTicker_ = child_.text
            Position_ExchangeTicker_ = self.gds_validate_string(Position_ExchangeTicker_, node, 'Position_ExchangeTicker')
            self.Position_ExchangeTicker = Position_ExchangeTicker_
        elif nodeName_ == 'Position_FxDate':
            Position_FxDate_ = child_.text
            Position_FxDate_ = self.gds_validate_string(Position_FxDate_, node, 'Position_FxDate')
            self.Position_FxDate = Position_FxDate_
        elif nodeName_ == 'Position_ISIN':
            Position_ISIN_ = child_.text
            Position_ISIN_ = self.gds_validate_string(Position_ISIN_, node, 'Position_ISIN')
            self.Position_ISIN = Position_ISIN_
        elif nodeName_ == 'Position_ListingCurrency':
            Position_ListingCurrency_ = child_.text
            Position_ListingCurrency_ = self.gds_validate_string(Position_ListingCurrency_, node, 'Position_ListingCurrency')
            self.Position_ListingCurrency = Position_ListingCurrency_
        elif nodeName_ == 'Position_ListingID':
            Position_ListingID_ = child_.text
            Position_ListingID_ = self.gds_validate_string(Position_ListingID_, node, 'Position_ListingID')
            self.Position_ListingID = Position_ListingID_
        elif nodeName_ == 'Position_Mic':
            Position_Mic_ = child_.text
            Position_Mic_ = self.gds_validate_string(Position_Mic_, node, 'Position_Mic')
            self.Position_Mic = Position_Mic_
        elif nodeName_ == 'Position_Name':
            Position_Name_ = child_.text
            Position_Name_ = self.gds_validate_string(Position_Name_, node, 'Position_Name')
            self.Position_Name = Position_Name_
        elif nodeName_ == 'Position_Other':
            Position_Other_ = child_.text
            Position_Other_ = self.gds_validate_string(Position_Other_, node, 'Position_Other')
            self.Position_Other = Position_Other_
        elif nodeName_ == 'Position_Ric':
            Position_Ric_ = child_.text
            Position_Ric_ = self.gds_validate_string(Position_Ric_, node, 'Position_Ric')
            self.Position_Ric = Position_Ric_
        elif nodeName_ == 'Position_SecurityType':
            Position_SecurityType_ = child_.text
            Position_SecurityType_ = self.gds_validate_string(Position_SecurityType_, node, 'Position_SecurityType')
            self.Position_SecurityType = Position_SecurityType_
        elif nodeName_ == 'Position_Sedol':
            Position_Sedol_ = child_.text
            Position_Sedol_ = self.gds_validate_string(Position_Sedol_, node, 'Position_Sedol')
            self.Position_Sedol = Position_Sedol_
        elif nodeName_ == 'PositionCurrency':
            PositionCurrency_ = child_.text
            PositionCurrency_ = self.gds_validate_string(PositionCurrency_, node, 'PositionCurrency')
            self.PositionCurrency = PositionCurrency_
        elif nodeName_ == 'PositionCurrencyToUSD':
            PositionCurrencyToUSD_ = child_.text
            PositionCurrencyToUSD_ = self.gds_validate_string(PositionCurrencyToUSD_, node, 'PositionCurrencyToUSD')
            self.PositionCurrencyToUSD = PositionCurrencyToUSD_
        elif nodeName_ == 'PriceDate':
            PriceDate_ = child_.text
            PriceDate_ = self.gds_validate_string(PriceDate_, node, 'PriceDate')
            self.PriceDate = PriceDate_
        elif nodeName_ == 'SharesOutstanding' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SharesOutstanding')
            self.SharesOutstanding = fval_
        elif nodeName_ == 'Ter':
            Ter_ = child_.text
            Ter_ = self.gds_validate_string(Ter_, node, 'Ter')
            self.Ter = Ter_
# end class ETFPositionsType


class HeaderType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BatchID=None, DataProvider=None, FxRateSet=None, HasDividends=None, HasRebalance=None, HasTPlus=None, IsHeaderOnly=None, NextRebalanceDate=None, PrimaryListingID=None, RebalanceFrequency=None, RebalanceNotes=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.BatchID = BatchID
        self.DataProvider = DataProvider
        self.FxRateSet = FxRateSet
        self.HasDividends = HasDividends
        self.HasRebalance = HasRebalance
        self.HasTPlus = HasTPlus
        self.IsHeaderOnly = IsHeaderOnly
        self.NextRebalanceDate = NextRebalanceDate
        self.PrimaryListingID = PrimaryListingID
        self.RebalanceFrequency = RebalanceFrequency
        self.RebalanceNotes = RebalanceNotes
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType.subclass:
            return HeaderType.subclass(*args_, **kwargs_)
        else:
            return HeaderType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BatchID(self):
        return self.BatchID
    def set_BatchID(self, BatchID):
        self.BatchID = BatchID
    def get_DataProvider(self):
        return self.DataProvider
    def set_DataProvider(self, DataProvider):
        self.DataProvider = DataProvider
    def get_FxRateSet(self):
        return self.FxRateSet
    def set_FxRateSet(self, FxRateSet):
        self.FxRateSet = FxRateSet
    def get_HasDividends(self):
        return self.HasDividends
    def set_HasDividends(self, HasDividends):
        self.HasDividends = HasDividends
    def get_HasRebalance(self):
        return self.HasRebalance
    def set_HasRebalance(self, HasRebalance):
        self.HasRebalance = HasRebalance
    def get_HasTPlus(self):
        return self.HasTPlus
    def set_HasTPlus(self, HasTPlus):
        self.HasTPlus = HasTPlus
    def get_IsHeaderOnly(self):
        return self.IsHeaderOnly
    def set_IsHeaderOnly(self, IsHeaderOnly):
        self.IsHeaderOnly = IsHeaderOnly
    def get_NextRebalanceDate(self):
        return self.NextRebalanceDate
    def set_NextRebalanceDate(self, NextRebalanceDate):
        self.NextRebalanceDate = NextRebalanceDate
    def get_PrimaryListingID(self):
        return self.PrimaryListingID
    def set_PrimaryListingID(self, PrimaryListingID):
        self.PrimaryListingID = PrimaryListingID
    def get_RebalanceFrequency(self):
        return self.RebalanceFrequency
    def set_RebalanceFrequency(self, RebalanceFrequency):
        self.RebalanceFrequency = RebalanceFrequency
    def get_RebalanceNotes(self):
        return self.RebalanceNotes
    def set_RebalanceNotes(self, RebalanceNotes):
        self.RebalanceNotes = RebalanceNotes
    def hasContent_(self):
        if (
            self.BatchID is not None or
            self.DataProvider is not None or
            self.FxRateSet is not None or
            self.HasDividends is not None or
            self.HasRebalance is not None or
            self.HasTPlus is not None or
            self.IsHeaderOnly is not None or
            self.NextRebalanceDate is not None or
            self.PrimaryListingID is not None or
            self.RebalanceFrequency is not None or
            self.RebalanceNotes is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HeaderType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HeaderType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BatchID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBatchID>%s</%sBatchID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BatchID), input_name='BatchID')), namespaceprefix_ , eol_))
        if self.DataProvider is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataProvider>%s</%sDataProvider>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DataProvider), input_name='DataProvider')), namespaceprefix_ , eol_))
        if self.FxRateSet is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFxRateSet>%s</%sFxRateSet>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FxRateSet), input_name='FxRateSet')), namespaceprefix_ , eol_))
        if self.HasDividends is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHasDividends>%s</%sHasDividends>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HasDividends), input_name='HasDividends')), namespaceprefix_ , eol_))
        if self.HasRebalance is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHasRebalance>%s</%sHasRebalance>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HasRebalance), input_name='HasRebalance')), namespaceprefix_ , eol_))
        if self.HasTPlus is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHasTPlus>%s</%sHasTPlus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HasTPlus), input_name='HasTPlus')), namespaceprefix_ , eol_))
        if self.IsHeaderOnly is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsHeaderOnly>%s</%sIsHeaderOnly>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsHeaderOnly), input_name='IsHeaderOnly')), namespaceprefix_ , eol_))
        if self.NextRebalanceDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNextRebalanceDate>%s</%sNextRebalanceDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NextRebalanceDate), input_name='NextRebalanceDate')), namespaceprefix_ , eol_))
        if self.PrimaryListingID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrimaryListingID>%s</%sPrimaryListingID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrimaryListingID), input_name='PrimaryListingID')), namespaceprefix_ , eol_))
        if self.RebalanceFrequency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRebalanceFrequency>%s</%sRebalanceFrequency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RebalanceFrequency), input_name='RebalanceFrequency')), namespaceprefix_ , eol_))
        if self.RebalanceNotes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRebalanceNotes>%s</%sRebalanceNotes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RebalanceNotes), input_name='RebalanceNotes')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BatchID':
            BatchID_ = child_.text
            BatchID_ = self.gds_validate_string(BatchID_, node, 'BatchID')
            self.BatchID = BatchID_
        elif nodeName_ == 'DataProvider':
            DataProvider_ = child_.text
            DataProvider_ = self.gds_validate_string(DataProvider_, node, 'DataProvider')
            self.DataProvider = DataProvider_
        elif nodeName_ == 'FxRateSet':
            FxRateSet_ = child_.text
            FxRateSet_ = self.gds_validate_string(FxRateSet_, node, 'FxRateSet')
            self.FxRateSet = FxRateSet_
        elif nodeName_ == 'HasDividends':
            HasDividends_ = child_.text
            HasDividends_ = self.gds_validate_string(HasDividends_, node, 'HasDividends')
            self.HasDividends = HasDividends_
        elif nodeName_ == 'HasRebalance':
            HasRebalance_ = child_.text
            HasRebalance_ = self.gds_validate_string(HasRebalance_, node, 'HasRebalance')
            self.HasRebalance = HasRebalance_
        elif nodeName_ == 'HasTPlus':
            HasTPlus_ = child_.text
            HasTPlus_ = self.gds_validate_string(HasTPlus_, node, 'HasTPlus')
            self.HasTPlus = HasTPlus_
        elif nodeName_ == 'IsHeaderOnly':
            IsHeaderOnly_ = child_.text
            IsHeaderOnly_ = self.gds_validate_string(IsHeaderOnly_, node, 'IsHeaderOnly')
            self.IsHeaderOnly = IsHeaderOnly_
        elif nodeName_ == 'NextRebalanceDate':
            NextRebalanceDate_ = child_.text
            NextRebalanceDate_ = self.gds_validate_string(NextRebalanceDate_, node, 'NextRebalanceDate')
            self.NextRebalanceDate = NextRebalanceDate_
        elif nodeName_ == 'PrimaryListingID':
            PrimaryListingID_ = child_.text
            PrimaryListingID_ = self.gds_validate_string(PrimaryListingID_, node, 'PrimaryListingID')
            self.PrimaryListingID = PrimaryListingID_
        elif nodeName_ == 'RebalanceFrequency':
            RebalanceFrequency_ = child_.text
            RebalanceFrequency_ = self.gds_validate_string(RebalanceFrequency_, node, 'RebalanceFrequency')
            self.RebalanceFrequency = RebalanceFrequency_
        elif nodeName_ == 'RebalanceNotes':
            RebalanceNotes_ = child_.text
            RebalanceNotes_ = self.gds_validate_string(RebalanceNotes_, node, 'RebalanceNotes')
            self.RebalanceNotes = RebalanceNotes_
# end class HeaderType


class IndexType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DATATYPE=None, RANK=None, RANKTYPE=None, SECURITYID=None, SOLALISTINGID=None, SOLAISOPEN=None, DataDate=None, Dividends=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DATATYPE = _cast(None, DATATYPE)
        self.RANK = _cast(None, RANK)
        self.RANKTYPE = _cast(None, RANKTYPE)
        self.SECURITYID = _cast(None, SECURITYID)
        self.SOLALISTINGID = _cast(None, SOLALISTINGID)
        self.SOLAISOPEN = _cast(None, SOLAISOPEN)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
        self.Dividends = Dividends
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IndexType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IndexType.subclass:
            return IndexType.subclass(*args_, **kwargs_)
        else:
            return IndexType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_Dividends(self):
        return self.Dividends
    def set_Dividends(self, Dividends):
        self.Dividends = Dividends
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_RANKTYPE(self):
        return self.RANKTYPE
    def set_RANKTYPE(self, RANKTYPE):
        self.RANKTYPE = RANKTYPE
    def get_SECURITYID(self):
        return self.SECURITYID
    def set_SECURITYID(self, SECURITYID):
        self.SECURITYID = SECURITYID
    def get_SOLALISTINGID(self):
        return self.SOLALISTINGID
    def set_SOLALISTINGID(self, SOLALISTINGID):
        self.SOLALISTINGID = SOLALISTINGID
    def get_SOLAISOPEN(self):
        return self.SOLAISOPEN
    def set_SOLAISOPEN(self, SOLAISOPEN):
        self.SOLAISOPEN = SOLAISOPEN
    def hasContent_(self):
        if (
            self.DataDate or
            self.Dividends is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='IndexType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IndexType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IndexType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IndexType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='IndexType'):
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.RANKTYPE is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            outfile.write(' RANKTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANKTYPE), input_name='RANKTYPE')), ))
        if self.SECURITYID is not None and 'SECURITYID' not in already_processed:
            already_processed.add('SECURITYID')
            outfile.write(' SECURITYID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SECURITYID), input_name='SECURITYID')), ))
        if self.SOLALISTINGID is not None and 'SOLALISTINGID' not in already_processed:
            already_processed.add('SOLALISTINGID')
            outfile.write(' SOLALISTINGID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SOLALISTINGID), input_name='SOLALISTINGID')), ))
        if self.SOLAISOPEN is not None and 'SOLAISOPEN' not in already_processed:
            already_processed.add('SOLAISOPEN')
            outfile.write(' SOLAISOPEN=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SOLAISOPEN), input_name='SOLAISOPEN')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='IndexType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
        if self.Dividends is not None:
            self.Dividends.export(outfile, level, namespaceprefix_, name_='Dividends', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('RANKTYPE', node)
        if value is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            self.RANKTYPE = value
        value = find_attr_value_('SECURITYID', node)
        if value is not None and 'SECURITYID' not in already_processed:
            already_processed.add('SECURITYID')
            self.SECURITYID = value
        value = find_attr_value_('SOLALISTINGID', node)
        if value is not None and 'SOLALISTINGID' not in already_processed:
            already_processed.add('SOLALISTINGID')
            self.SOLALISTINGID = value
        value = find_attr_value_('SOLAISOPEN', node)
        if value is not None and 'SOLAISOPEN' not in already_processed:
            already_processed.add('SOLAISOPEN')
            self.SOLAISOPEN = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType8.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
        elif nodeName_ == 'Dividends':
            obj_ = DividendsType12.factory(parent_object_=self)
            obj_.build(child_)
            self.Dividends = obj_
            obj_.original_tagname_ = 'Dividends'
# end class IndexType


class DataDateType8(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, ConstituentChanges=None, Constituents=None, Dividends=None, Header=None, Positions=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.ConstituentChanges = ConstituentChanges
        self.Constituents = Constituents
        self.Dividends = Dividends
        self.Header = Header
        self.Positions = Positions
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType8)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType8.subclass:
            return DataDateType8.subclass(*args_, **kwargs_)
        else:
            return DataDateType8(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ConstituentChanges(self):
        return self.ConstituentChanges
    def set_ConstituentChanges(self, ConstituentChanges):
        self.ConstituentChanges = ConstituentChanges
    def get_Constituents(self):
        return self.Constituents
    def set_Constituents(self, Constituents):
        self.Constituents = Constituents
    def get_Dividends(self):
        return self.Dividends
    def set_Dividends(self, Dividends):
        self.Dividends = Dividends
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Positions(self):
        return self.Positions
    def set_Positions(self, Positions):
        self.Positions = Positions
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.ConstituentChanges is not None or
            self.Constituents is not None or
            self.Dividends is not None or
            self.Header is not None or
            self.Positions is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType8', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType8')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType8')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType8', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType8'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType8', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ConstituentChanges is not None:
            self.ConstituentChanges.export(outfile, level, namespaceprefix_, name_='ConstituentChanges', pretty_print=pretty_print)
        if self.Constituents is not None:
            self.Constituents.export(outfile, level, namespaceprefix_, name_='Constituents', pretty_print=pretty_print)
        if self.Dividends is not None:
            self.Dividends.export(outfile, level, namespaceprefix_, name_='Dividends', pretty_print=pretty_print)
        if self.Header is not None:
            self.Header.export(outfile, level, namespaceprefix_, name_='Header', pretty_print=pretty_print)
        if self.Positions is not None:
            self.Positions.export(outfile, level, namespaceprefix_, name_='Positions', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ConstituentChanges':
            obj_ = ConstituentChangesType.factory(parent_object_=self)
            obj_.build(child_)
            self.ConstituentChanges = obj_
            obj_.original_tagname_ = 'ConstituentChanges'
        elif nodeName_ == 'Constituents':
            obj_ = ConstituentsType9.factory(parent_object_=self)
            obj_.build(child_)
            self.Constituents = obj_
            obj_.original_tagname_ = 'Constituents'
        elif nodeName_ == 'Dividends':
            obj_ = DividendsType10.factory(parent_object_=self)
            obj_.build(child_)
            self.Dividends = obj_
            obj_.original_tagname_ = 'Dividends'
        elif nodeName_ == 'Header':
            obj_ = HeaderType11.factory(parent_object_=self)
            obj_.build(child_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Positions':
            obj_ = PositionsType.factory(parent_object_=self)
            obj_.build(child_)
            self.Positions = obj_
            obj_.original_tagname_ = 'Positions'
# end class DataDateType8


class ConstituentChangesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Change=None, Change_Bloomberg=None, Change_Count=None, Change_CUSIP=None, Change_EffectiveDate=None, Change_ExchangeTicker=None, Change_ISIN=None, Change_ListingCurrency=None, Change_ListingID=None, Change_Mic=None, Change_Name=None, Change_Other=None, Change_Ric=None, Change_SecurityType=None, Change_Sedol=None, LatestClosePrice=None, NewFactor1=None, NewFactor2=None, NewFactor3=None, NewFactor4=None, NewFactor5=None, NewFactor6=None, NewFactor7=None, NewFactor8=None, NewFactor9=None, NewNumberOfUnits=None, NewPriceAdjustmentFactor=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Change = Change
        self.Change_Bloomberg = Change_Bloomberg
        self.Change_Count = Change_Count
        self.Change_CUSIP = Change_CUSIP
        self.Change_EffectiveDate = Change_EffectiveDate
        self.Change_ExchangeTicker = Change_ExchangeTicker
        self.Change_ISIN = Change_ISIN
        self.Change_ListingCurrency = Change_ListingCurrency
        self.Change_ListingID = Change_ListingID
        self.Change_Mic = Change_Mic
        self.Change_Name = Change_Name
        self.Change_Other = Change_Other
        self.Change_Ric = Change_Ric
        self.Change_SecurityType = Change_SecurityType
        self.Change_Sedol = Change_Sedol
        self.LatestClosePrice = LatestClosePrice
        self.NewFactor1 = NewFactor1
        self.NewFactor2 = NewFactor2
        self.NewFactor3 = NewFactor3
        self.NewFactor4 = NewFactor4
        self.NewFactor5 = NewFactor5
        self.NewFactor6 = NewFactor6
        self.NewFactor7 = NewFactor7
        self.NewFactor8 = NewFactor8
        self.NewFactor9 = NewFactor9
        self.NewNumberOfUnits = NewNumberOfUnits
        self.NewPriceAdjustmentFactor = NewPriceAdjustmentFactor
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ConstituentChangesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ConstituentChangesType.subclass:
            return ConstituentChangesType.subclass(*args_, **kwargs_)
        else:
            return ConstituentChangesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Change(self):
        return self.Change
    def set_Change(self, Change):
        self.Change = Change
    def get_Change_Bloomberg(self):
        return self.Change_Bloomberg
    def set_Change_Bloomberg(self, Change_Bloomberg):
        self.Change_Bloomberg = Change_Bloomberg
    def get_Change_Count(self):
        return self.Change_Count
    def set_Change_Count(self, Change_Count):
        self.Change_Count = Change_Count
    def get_Change_CUSIP(self):
        return self.Change_CUSIP
    def set_Change_CUSIP(self, Change_CUSIP):
        self.Change_CUSIP = Change_CUSIP
    def get_Change_EffectiveDate(self):
        return self.Change_EffectiveDate
    def set_Change_EffectiveDate(self, Change_EffectiveDate):
        self.Change_EffectiveDate = Change_EffectiveDate
    def get_Change_ExchangeTicker(self):
        return self.Change_ExchangeTicker
    def set_Change_ExchangeTicker(self, Change_ExchangeTicker):
        self.Change_ExchangeTicker = Change_ExchangeTicker
    def get_Change_ISIN(self):
        return self.Change_ISIN
    def set_Change_ISIN(self, Change_ISIN):
        self.Change_ISIN = Change_ISIN
    def get_Change_ListingCurrency(self):
        return self.Change_ListingCurrency
    def set_Change_ListingCurrency(self, Change_ListingCurrency):
        self.Change_ListingCurrency = Change_ListingCurrency
    def get_Change_ListingID(self):
        return self.Change_ListingID
    def set_Change_ListingID(self, Change_ListingID):
        self.Change_ListingID = Change_ListingID
    def get_Change_Mic(self):
        return self.Change_Mic
    def set_Change_Mic(self, Change_Mic):
        self.Change_Mic = Change_Mic
    def get_Change_Name(self):
        return self.Change_Name
    def set_Change_Name(self, Change_Name):
        self.Change_Name = Change_Name
    def get_Change_Other(self):
        return self.Change_Other
    def set_Change_Other(self, Change_Other):
        self.Change_Other = Change_Other
    def get_Change_Ric(self):
        return self.Change_Ric
    def set_Change_Ric(self, Change_Ric):
        self.Change_Ric = Change_Ric
    def get_Change_SecurityType(self):
        return self.Change_SecurityType
    def set_Change_SecurityType(self, Change_SecurityType):
        self.Change_SecurityType = Change_SecurityType
    def get_Change_Sedol(self):
        return self.Change_Sedol
    def set_Change_Sedol(self, Change_Sedol):
        self.Change_Sedol = Change_Sedol
    def get_LatestClosePrice(self):
        return self.LatestClosePrice
    def set_LatestClosePrice(self, LatestClosePrice):
        self.LatestClosePrice = LatestClosePrice
    def get_NewFactor1(self):
        return self.NewFactor1
    def set_NewFactor1(self, NewFactor1):
        self.NewFactor1 = NewFactor1
    def get_NewFactor2(self):
        return self.NewFactor2
    def set_NewFactor2(self, NewFactor2):
        self.NewFactor2 = NewFactor2
    def get_NewFactor3(self):
        return self.NewFactor3
    def set_NewFactor3(self, NewFactor3):
        self.NewFactor3 = NewFactor3
    def get_NewFactor4(self):
        return self.NewFactor4
    def set_NewFactor4(self, NewFactor4):
        self.NewFactor4 = NewFactor4
    def get_NewFactor5(self):
        return self.NewFactor5
    def set_NewFactor5(self, NewFactor5):
        self.NewFactor5 = NewFactor5
    def get_NewFactor6(self):
        return self.NewFactor6
    def set_NewFactor6(self, NewFactor6):
        self.NewFactor6 = NewFactor6
    def get_NewFactor7(self):
        return self.NewFactor7
    def set_NewFactor7(self, NewFactor7):
        self.NewFactor7 = NewFactor7
    def get_NewFactor8(self):
        return self.NewFactor8
    def set_NewFactor8(self, NewFactor8):
        self.NewFactor8 = NewFactor8
    def get_NewFactor9(self):
        return self.NewFactor9
    def set_NewFactor9(self, NewFactor9):
        self.NewFactor9 = NewFactor9
    def get_NewNumberOfUnits(self):
        return self.NewNumberOfUnits
    def set_NewNumberOfUnits(self, NewNumberOfUnits):
        self.NewNumberOfUnits = NewNumberOfUnits
    def get_NewPriceAdjustmentFactor(self):
        return self.NewPriceAdjustmentFactor
    def set_NewPriceAdjustmentFactor(self, NewPriceAdjustmentFactor):
        self.NewPriceAdjustmentFactor = NewPriceAdjustmentFactor
    def hasContent_(self):
        if (
            self.Change is not None or
            self.Change_Bloomberg is not None or
            self.Change_Count is not None or
            self.Change_CUSIP is not None or
            self.Change_EffectiveDate is not None or
            self.Change_ExchangeTicker is not None or
            self.Change_ISIN is not None or
            self.Change_ListingCurrency is not None or
            self.Change_ListingID is not None or
            self.Change_Mic is not None or
            self.Change_Name is not None or
            self.Change_Other is not None or
            self.Change_Ric is not None or
            self.Change_SecurityType is not None or
            self.Change_Sedol is not None or
            self.LatestClosePrice is not None or
            self.NewFactor1 is not None or
            self.NewFactor2 is not None or
            self.NewFactor3 is not None or
            self.NewFactor4 is not None or
            self.NewFactor5 is not None or
            self.NewFactor6 is not None or
            self.NewFactor7 is not None or
            self.NewFactor8 is not None or
            self.NewFactor9 is not None or
            self.NewNumberOfUnits is not None or
            self.NewPriceAdjustmentFactor is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConstituentChangesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ConstituentChangesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ConstituentChangesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ConstituentChangesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ConstituentChangesType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConstituentChangesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Change is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChange>%s</%sChange>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Change), input_name='Change')), namespaceprefix_ , eol_))
        if self.Change_Bloomberg is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChange_Bloomberg>%s</%sChange_Bloomberg>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Change_Bloomberg), input_name='Change_Bloomberg')), namespaceprefix_ , eol_))
        if self.Change_Count is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChange_Count>%s</%sChange_Count>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Change_Count), input_name='Change_Count')), namespaceprefix_ , eol_))
        if self.Change_CUSIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChange_CUSIP>%s</%sChange_CUSIP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Change_CUSIP), input_name='Change_CUSIP')), namespaceprefix_ , eol_))
        if self.Change_EffectiveDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChange_EffectiveDate>%s</%sChange_EffectiveDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Change_EffectiveDate), input_name='Change_EffectiveDate')), namespaceprefix_ , eol_))
        if self.Change_ExchangeTicker is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChange_ExchangeTicker>%s</%sChange_ExchangeTicker>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Change_ExchangeTicker), input_name='Change_ExchangeTicker')), namespaceprefix_ , eol_))
        if self.Change_ISIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChange_ISIN>%s</%sChange_ISIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Change_ISIN), input_name='Change_ISIN')), namespaceprefix_ , eol_))
        if self.Change_ListingCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChange_ListingCurrency>%s</%sChange_ListingCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Change_ListingCurrency), input_name='Change_ListingCurrency')), namespaceprefix_ , eol_))
        if self.Change_ListingID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChange_ListingID>%s</%sChange_ListingID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Change_ListingID), input_name='Change_ListingID')), namespaceprefix_ , eol_))
        if self.Change_Mic is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChange_Mic>%s</%sChange_Mic>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Change_Mic), input_name='Change_Mic')), namespaceprefix_ , eol_))
        if self.Change_Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChange_Name>%s</%sChange_Name>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Change_Name), input_name='Change_Name')), namespaceprefix_ , eol_))
        if self.Change_Other is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChange_Other>%s</%sChange_Other>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Change_Other), input_name='Change_Other')), namespaceprefix_ , eol_))
        if self.Change_Ric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChange_Ric>%s</%sChange_Ric>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Change_Ric), input_name='Change_Ric')), namespaceprefix_ , eol_))
        if self.Change_SecurityType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChange_SecurityType>%s</%sChange_SecurityType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Change_SecurityType), input_name='Change_SecurityType')), namespaceprefix_ , eol_))
        if self.Change_Sedol is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChange_Sedol>%s</%sChange_Sedol>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Change_Sedol), input_name='Change_Sedol')), namespaceprefix_ , eol_))
        if self.LatestClosePrice is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLatestClosePrice>%s</%sLatestClosePrice>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LatestClosePrice), input_name='LatestClosePrice')), namespaceprefix_ , eol_))
        if self.NewFactor1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNewFactor1>%s</%sNewFactor1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NewFactor1), input_name='NewFactor1')), namespaceprefix_ , eol_))
        if self.NewFactor2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNewFactor2>%s</%sNewFactor2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NewFactor2), input_name='NewFactor2')), namespaceprefix_ , eol_))
        if self.NewFactor3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNewFactor3>%s</%sNewFactor3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NewFactor3), input_name='NewFactor3')), namespaceprefix_ , eol_))
        if self.NewFactor4 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNewFactor4>%s</%sNewFactor4>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NewFactor4), input_name='NewFactor4')), namespaceprefix_ , eol_))
        if self.NewFactor5 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNewFactor5>%s</%sNewFactor5>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NewFactor5), input_name='NewFactor5')), namespaceprefix_ , eol_))
        if self.NewFactor6 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNewFactor6>%s</%sNewFactor6>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NewFactor6), input_name='NewFactor6')), namespaceprefix_ , eol_))
        if self.NewFactor7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNewFactor7>%s</%sNewFactor7>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NewFactor7), input_name='NewFactor7')), namespaceprefix_ , eol_))
        if self.NewFactor8 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNewFactor8>%s</%sNewFactor8>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NewFactor8), input_name='NewFactor8')), namespaceprefix_ , eol_))
        if self.NewFactor9 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNewFactor9>%s</%sNewFactor9>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NewFactor9), input_name='NewFactor9')), namespaceprefix_ , eol_))
        if self.NewNumberOfUnits is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNewNumberOfUnits>%s</%sNewNumberOfUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NewNumberOfUnits), input_name='NewNumberOfUnits')), namespaceprefix_ , eol_))
        if self.NewPriceAdjustmentFactor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNewPriceAdjustmentFactor>%s</%sNewPriceAdjustmentFactor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NewPriceAdjustmentFactor), input_name='NewPriceAdjustmentFactor')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Change':
            Change_ = child_.text
            Change_ = self.gds_validate_string(Change_, node, 'Change')
            self.Change = Change_
        elif nodeName_ == 'Change_Bloomberg':
            Change_Bloomberg_ = child_.text
            Change_Bloomberg_ = self.gds_validate_string(Change_Bloomberg_, node, 'Change_Bloomberg')
            self.Change_Bloomberg = Change_Bloomberg_
        elif nodeName_ == 'Change_Count':
            Change_Count_ = child_.text
            Change_Count_ = self.gds_validate_string(Change_Count_, node, 'Change_Count')
            self.Change_Count = Change_Count_
        elif nodeName_ == 'Change_CUSIP':
            Change_CUSIP_ = child_.text
            Change_CUSIP_ = self.gds_validate_string(Change_CUSIP_, node, 'Change_CUSIP')
            self.Change_CUSIP = Change_CUSIP_
        elif nodeName_ == 'Change_EffectiveDate':
            Change_EffectiveDate_ = child_.text
            Change_EffectiveDate_ = self.gds_validate_string(Change_EffectiveDate_, node, 'Change_EffectiveDate')
            self.Change_EffectiveDate = Change_EffectiveDate_
        elif nodeName_ == 'Change_ExchangeTicker':
            Change_ExchangeTicker_ = child_.text
            Change_ExchangeTicker_ = self.gds_validate_string(Change_ExchangeTicker_, node, 'Change_ExchangeTicker')
            self.Change_ExchangeTicker = Change_ExchangeTicker_
        elif nodeName_ == 'Change_ISIN':
            Change_ISIN_ = child_.text
            Change_ISIN_ = self.gds_validate_string(Change_ISIN_, node, 'Change_ISIN')
            self.Change_ISIN = Change_ISIN_
        elif nodeName_ == 'Change_ListingCurrency':
            Change_ListingCurrency_ = child_.text
            Change_ListingCurrency_ = self.gds_validate_string(Change_ListingCurrency_, node, 'Change_ListingCurrency')
            self.Change_ListingCurrency = Change_ListingCurrency_
        elif nodeName_ == 'Change_ListingID':
            Change_ListingID_ = child_.text
            Change_ListingID_ = self.gds_validate_string(Change_ListingID_, node, 'Change_ListingID')
            self.Change_ListingID = Change_ListingID_
        elif nodeName_ == 'Change_Mic':
            Change_Mic_ = child_.text
            Change_Mic_ = self.gds_validate_string(Change_Mic_, node, 'Change_Mic')
            self.Change_Mic = Change_Mic_
        elif nodeName_ == 'Change_Name':
            Change_Name_ = child_.text
            Change_Name_ = self.gds_validate_string(Change_Name_, node, 'Change_Name')
            self.Change_Name = Change_Name_
        elif nodeName_ == 'Change_Other':
            Change_Other_ = child_.text
            Change_Other_ = self.gds_validate_string(Change_Other_, node, 'Change_Other')
            self.Change_Other = Change_Other_
        elif nodeName_ == 'Change_Ric':
            Change_Ric_ = child_.text
            Change_Ric_ = self.gds_validate_string(Change_Ric_, node, 'Change_Ric')
            self.Change_Ric = Change_Ric_
        elif nodeName_ == 'Change_SecurityType':
            Change_SecurityType_ = child_.text
            Change_SecurityType_ = self.gds_validate_string(Change_SecurityType_, node, 'Change_SecurityType')
            self.Change_SecurityType = Change_SecurityType_
        elif nodeName_ == 'Change_Sedol':
            Change_Sedol_ = child_.text
            Change_Sedol_ = self.gds_validate_string(Change_Sedol_, node, 'Change_Sedol')
            self.Change_Sedol = Change_Sedol_
        elif nodeName_ == 'LatestClosePrice':
            LatestClosePrice_ = child_.text
            LatestClosePrice_ = self.gds_validate_string(LatestClosePrice_, node, 'LatestClosePrice')
            self.LatestClosePrice = LatestClosePrice_
        elif nodeName_ == 'NewFactor1':
            NewFactor1_ = child_.text
            NewFactor1_ = self.gds_validate_string(NewFactor1_, node, 'NewFactor1')
            self.NewFactor1 = NewFactor1_
        elif nodeName_ == 'NewFactor2':
            NewFactor2_ = child_.text
            NewFactor2_ = self.gds_validate_string(NewFactor2_, node, 'NewFactor2')
            self.NewFactor2 = NewFactor2_
        elif nodeName_ == 'NewFactor3':
            NewFactor3_ = child_.text
            NewFactor3_ = self.gds_validate_string(NewFactor3_, node, 'NewFactor3')
            self.NewFactor3 = NewFactor3_
        elif nodeName_ == 'NewFactor4':
            NewFactor4_ = child_.text
            NewFactor4_ = self.gds_validate_string(NewFactor4_, node, 'NewFactor4')
            self.NewFactor4 = NewFactor4_
        elif nodeName_ == 'NewFactor5':
            NewFactor5_ = child_.text
            NewFactor5_ = self.gds_validate_string(NewFactor5_, node, 'NewFactor5')
            self.NewFactor5 = NewFactor5_
        elif nodeName_ == 'NewFactor6':
            NewFactor6_ = child_.text
            NewFactor6_ = self.gds_validate_string(NewFactor6_, node, 'NewFactor6')
            self.NewFactor6 = NewFactor6_
        elif nodeName_ == 'NewFactor7':
            NewFactor7_ = child_.text
            NewFactor7_ = self.gds_validate_string(NewFactor7_, node, 'NewFactor7')
            self.NewFactor7 = NewFactor7_
        elif nodeName_ == 'NewFactor8':
            NewFactor8_ = child_.text
            NewFactor8_ = self.gds_validate_string(NewFactor8_, node, 'NewFactor8')
            self.NewFactor8 = NewFactor8_
        elif nodeName_ == 'NewFactor9':
            NewFactor9_ = child_.text
            NewFactor9_ = self.gds_validate_string(NewFactor9_, node, 'NewFactor9')
            self.NewFactor9 = NewFactor9_
        elif nodeName_ == 'NewNumberOfUnits':
            NewNumberOfUnits_ = child_.text
            NewNumberOfUnits_ = self.gds_validate_string(NewNumberOfUnits_, node, 'NewNumberOfUnits')
            self.NewNumberOfUnits = NewNumberOfUnits_
        elif nodeName_ == 'NewPriceAdjustmentFactor':
            NewPriceAdjustmentFactor_ = child_.text
            NewPriceAdjustmentFactor_ = self.gds_validate_string(NewPriceAdjustmentFactor_, node, 'NewPriceAdjustmentFactor')
            self.NewPriceAdjustmentFactor = NewPriceAdjustmentFactor_
# end class ConstituentChangesType


class ConstituentsType9(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Constituent_BasketType=None, Constituent_Bloomberg=None, Constituent_Count=None, Constituent_CUSIP=None, Constituent_ExchangeTicker=None, Constituent_FxRate=None, Constituent_ISIN=None, Constituent_ListingCurrency=None, Constituent_ListingID=None, Constituent_Mic=None, Constituent_Name=None, Constituent_Other=None, Constituent_Ric=None, Constituent_SecurityType=None, Constituent_Sedol=None, ConstituentType=None, Factor1=None, Factor2=None, Factor3=None, Factor4=None, Factor5=None, Factor6=None, Factor7=None, Factor8=None, Factor9=None, IndexQuantity=None, NumberOfUnits=None, Price=None, PriceAdjustmentFactor=None, PriceCurrency=None, UnadjustedPrice=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Constituent_BasketType = Constituent_BasketType
        self.Constituent_Bloomberg = Constituent_Bloomberg
        self.Constituent_Count = Constituent_Count
        self.Constituent_CUSIP = Constituent_CUSIP
        self.Constituent_ExchangeTicker = Constituent_ExchangeTicker
        self.Constituent_FxRate = Constituent_FxRate
        self.Constituent_ISIN = Constituent_ISIN
        self.Constituent_ListingCurrency = Constituent_ListingCurrency
        self.Constituent_ListingID = Constituent_ListingID
        self.Constituent_Mic = Constituent_Mic
        self.Constituent_Name = Constituent_Name
        self.Constituent_Other = Constituent_Other
        self.Constituent_Ric = Constituent_Ric
        self.Constituent_SecurityType = Constituent_SecurityType
        self.Constituent_Sedol = Constituent_Sedol
        self.ConstituentType = ConstituentType
        self.Factor1 = Factor1
        self.Factor2 = Factor2
        self.Factor3 = Factor3
        self.Factor4 = Factor4
        self.Factor5 = Factor5
        self.Factor6 = Factor6
        self.Factor7 = Factor7
        self.Factor8 = Factor8
        self.Factor9 = Factor9
        self.IndexQuantity = IndexQuantity
        self.NumberOfUnits = NumberOfUnits
        self.Price = Price
        self.PriceAdjustmentFactor = PriceAdjustmentFactor
        self.PriceCurrency = PriceCurrency
        self.UnadjustedPrice = UnadjustedPrice
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ConstituentsType9)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ConstituentsType9.subclass:
            return ConstituentsType9.subclass(*args_, **kwargs_)
        else:
            return ConstituentsType9(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Constituent_BasketType(self):
        return self.Constituent_BasketType
    def set_Constituent_BasketType(self, Constituent_BasketType):
        self.Constituent_BasketType = Constituent_BasketType
    def get_Constituent_Bloomberg(self):
        return self.Constituent_Bloomberg
    def set_Constituent_Bloomberg(self, Constituent_Bloomberg):
        self.Constituent_Bloomberg = Constituent_Bloomberg
    def get_Constituent_Count(self):
        return self.Constituent_Count
    def set_Constituent_Count(self, Constituent_Count):
        self.Constituent_Count = Constituent_Count
    def get_Constituent_CUSIP(self):
        return self.Constituent_CUSIP
    def set_Constituent_CUSIP(self, Constituent_CUSIP):
        self.Constituent_CUSIP = Constituent_CUSIP
    def get_Constituent_ExchangeTicker(self):
        return self.Constituent_ExchangeTicker
    def set_Constituent_ExchangeTicker(self, Constituent_ExchangeTicker):
        self.Constituent_ExchangeTicker = Constituent_ExchangeTicker
    def get_Constituent_FxRate(self):
        return self.Constituent_FxRate
    def set_Constituent_FxRate(self, Constituent_FxRate):
        self.Constituent_FxRate = Constituent_FxRate
    def get_Constituent_ISIN(self):
        return self.Constituent_ISIN
    def set_Constituent_ISIN(self, Constituent_ISIN):
        self.Constituent_ISIN = Constituent_ISIN
    def get_Constituent_ListingCurrency(self):
        return self.Constituent_ListingCurrency
    def set_Constituent_ListingCurrency(self, Constituent_ListingCurrency):
        self.Constituent_ListingCurrency = Constituent_ListingCurrency
    def get_Constituent_ListingID(self):
        return self.Constituent_ListingID
    def set_Constituent_ListingID(self, Constituent_ListingID):
        self.Constituent_ListingID = Constituent_ListingID
    def get_Constituent_Mic(self):
        return self.Constituent_Mic
    def set_Constituent_Mic(self, Constituent_Mic):
        self.Constituent_Mic = Constituent_Mic
    def get_Constituent_Name(self):
        return self.Constituent_Name
    def set_Constituent_Name(self, Constituent_Name):
        self.Constituent_Name = Constituent_Name
    def get_Constituent_Other(self):
        return self.Constituent_Other
    def set_Constituent_Other(self, Constituent_Other):
        self.Constituent_Other = Constituent_Other
    def get_Constituent_Ric(self):
        return self.Constituent_Ric
    def set_Constituent_Ric(self, Constituent_Ric):
        self.Constituent_Ric = Constituent_Ric
    def get_Constituent_SecurityType(self):
        return self.Constituent_SecurityType
    def set_Constituent_SecurityType(self, Constituent_SecurityType):
        self.Constituent_SecurityType = Constituent_SecurityType
    def get_Constituent_Sedol(self):
        return self.Constituent_Sedol
    def set_Constituent_Sedol(self, Constituent_Sedol):
        self.Constituent_Sedol = Constituent_Sedol
    def get_ConstituentType(self):
        return self.ConstituentType
    def set_ConstituentType(self, ConstituentType):
        self.ConstituentType = ConstituentType
    def get_Factor1(self):
        return self.Factor1
    def set_Factor1(self, Factor1):
        self.Factor1 = Factor1
    def get_Factor2(self):
        return self.Factor2
    def set_Factor2(self, Factor2):
        self.Factor2 = Factor2
    def get_Factor3(self):
        return self.Factor3
    def set_Factor3(self, Factor3):
        self.Factor3 = Factor3
    def get_Factor4(self):
        return self.Factor4
    def set_Factor4(self, Factor4):
        self.Factor4 = Factor4
    def get_Factor5(self):
        return self.Factor5
    def set_Factor5(self, Factor5):
        self.Factor5 = Factor5
    def get_Factor6(self):
        return self.Factor6
    def set_Factor6(self, Factor6):
        self.Factor6 = Factor6
    def get_Factor7(self):
        return self.Factor7
    def set_Factor7(self, Factor7):
        self.Factor7 = Factor7
    def get_Factor8(self):
        return self.Factor8
    def set_Factor8(self, Factor8):
        self.Factor8 = Factor8
    def get_Factor9(self):
        return self.Factor9
    def set_Factor9(self, Factor9):
        self.Factor9 = Factor9
    def get_IndexQuantity(self):
        return self.IndexQuantity
    def set_IndexQuantity(self, IndexQuantity):
        self.IndexQuantity = IndexQuantity
    def get_NumberOfUnits(self):
        return self.NumberOfUnits
    def set_NumberOfUnits(self, NumberOfUnits):
        self.NumberOfUnits = NumberOfUnits
    def get_Price(self):
        return self.Price
    def set_Price(self, Price):
        self.Price = Price
    def get_PriceAdjustmentFactor(self):
        return self.PriceAdjustmentFactor
    def set_PriceAdjustmentFactor(self, PriceAdjustmentFactor):
        self.PriceAdjustmentFactor = PriceAdjustmentFactor
    def get_PriceCurrency(self):
        return self.PriceCurrency
    def set_PriceCurrency(self, PriceCurrency):
        self.PriceCurrency = PriceCurrency
    def get_UnadjustedPrice(self):
        return self.UnadjustedPrice
    def set_UnadjustedPrice(self, UnadjustedPrice):
        self.UnadjustedPrice = UnadjustedPrice
    def hasContent_(self):
        if (
            self.Constituent_BasketType is not None or
            self.Constituent_Bloomberg is not None or
            self.Constituent_Count is not None or
            self.Constituent_CUSIP is not None or
            self.Constituent_ExchangeTicker is not None or
            self.Constituent_FxRate is not None or
            self.Constituent_ISIN is not None or
            self.Constituent_ListingCurrency is not None or
            self.Constituent_ListingID is not None or
            self.Constituent_Mic is not None or
            self.Constituent_Name is not None or
            self.Constituent_Other is not None or
            self.Constituent_Ric is not None or
            self.Constituent_SecurityType is not None or
            self.Constituent_Sedol is not None or
            self.ConstituentType is not None or
            self.Factor1 is not None or
            self.Factor2 is not None or
            self.Factor3 is not None or
            self.Factor4 is not None or
            self.Factor5 is not None or
            self.Factor6 is not None or
            self.Factor7 is not None or
            self.Factor8 is not None or
            self.Factor9 is not None or
            self.IndexQuantity is not None or
            self.NumberOfUnits is not None or
            self.Price is not None or
            self.PriceAdjustmentFactor is not None or
            self.PriceCurrency is not None or
            self.UnadjustedPrice is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConstituentsType9', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ConstituentsType9')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ConstituentsType9')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ConstituentsType9', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ConstituentsType9'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConstituentsType9', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Constituent_BasketType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_BasketType>%s</%sConstituent_BasketType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_BasketType), input_name='Constituent_BasketType')), namespaceprefix_ , eol_))
        if self.Constituent_Bloomberg is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_Bloomberg>%s</%sConstituent_Bloomberg>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_Bloomberg), input_name='Constituent_Bloomberg')), namespaceprefix_ , eol_))
        if self.Constituent_Count is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_Count>%s</%sConstituent_Count>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_Count), input_name='Constituent_Count')), namespaceprefix_ , eol_))
        if self.Constituent_CUSIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_CUSIP>%s</%sConstituent_CUSIP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_CUSIP), input_name='Constituent_CUSIP')), namespaceprefix_ , eol_))
        if self.Constituent_ExchangeTicker is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_ExchangeTicker>%s</%sConstituent_ExchangeTicker>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_ExchangeTicker), input_name='Constituent_ExchangeTicker')), namespaceprefix_ , eol_))
        if self.Constituent_FxRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_FxRate>%s</%sConstituent_FxRate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_FxRate), input_name='Constituent_FxRate')), namespaceprefix_ , eol_))
        if self.Constituent_ISIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_ISIN>%s</%sConstituent_ISIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_ISIN), input_name='Constituent_ISIN')), namespaceprefix_ , eol_))
        if self.Constituent_ListingCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_ListingCurrency>%s</%sConstituent_ListingCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_ListingCurrency), input_name='Constituent_ListingCurrency')), namespaceprefix_ , eol_))
        if self.Constituent_ListingID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_ListingID>%s</%sConstituent_ListingID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_ListingID), input_name='Constituent_ListingID')), namespaceprefix_ , eol_))
        if self.Constituent_Mic is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_Mic>%s</%sConstituent_Mic>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_Mic), input_name='Constituent_Mic')), namespaceprefix_ , eol_))
        if self.Constituent_Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_Name>%s</%sConstituent_Name>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_Name), input_name='Constituent_Name')), namespaceprefix_ , eol_))
        if self.Constituent_Other is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_Other>%s</%sConstituent_Other>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_Other), input_name='Constituent_Other')), namespaceprefix_ , eol_))
        if self.Constituent_Ric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_Ric>%s</%sConstituent_Ric>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_Ric), input_name='Constituent_Ric')), namespaceprefix_ , eol_))
        if self.Constituent_SecurityType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_SecurityType>%s</%sConstituent_SecurityType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_SecurityType), input_name='Constituent_SecurityType')), namespaceprefix_ , eol_))
        if self.Constituent_Sedol is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituent_Sedol>%s</%sConstituent_Sedol>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituent_Sedol), input_name='Constituent_Sedol')), namespaceprefix_ , eol_))
        if self.ConstituentType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituentType>%s</%sConstituentType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ConstituentType), input_name='ConstituentType')), namespaceprefix_ , eol_))
        if self.Factor1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFactor1>%s</%sFactor1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Factor1), input_name='Factor1')), namespaceprefix_ , eol_))
        if self.Factor2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFactor2>%s</%sFactor2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Factor2), input_name='Factor2')), namespaceprefix_ , eol_))
        if self.Factor3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFactor3>%s</%sFactor3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Factor3), input_name='Factor3')), namespaceprefix_ , eol_))
        if self.Factor4 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFactor4>%s</%sFactor4>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Factor4), input_name='Factor4')), namespaceprefix_ , eol_))
        if self.Factor5 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFactor5>%s</%sFactor5>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Factor5), input_name='Factor5')), namespaceprefix_ , eol_))
        if self.Factor6 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFactor6>%s</%sFactor6>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Factor6), input_name='Factor6')), namespaceprefix_ , eol_))
        if self.Factor7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFactor7>%s</%sFactor7>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Factor7), input_name='Factor7')), namespaceprefix_ , eol_))
        if self.Factor8 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFactor8>%s</%sFactor8>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Factor8), input_name='Factor8')), namespaceprefix_ , eol_))
        if self.Factor9 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFactor9>%s</%sFactor9>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Factor9), input_name='Factor9')), namespaceprefix_ , eol_))
        if self.IndexQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndexQuantity>%s</%sIndexQuantity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IndexQuantity), input_name='IndexQuantity')), namespaceprefix_ , eol_))
        if self.NumberOfUnits is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfUnits>%s</%sNumberOfUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NumberOfUnits), input_name='NumberOfUnits')), namespaceprefix_ , eol_))
        if self.Price is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrice>%s</%sPrice>%s' % (namespaceprefix_ , self.gds_format_float(self.Price, input_name='Price'), namespaceprefix_ , eol_))
        if self.PriceAdjustmentFactor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceAdjustmentFactor>%s</%sPriceAdjustmentFactor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PriceAdjustmentFactor), input_name='PriceAdjustmentFactor')), namespaceprefix_ , eol_))
        if self.PriceCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceCurrency>%s</%sPriceCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PriceCurrency), input_name='PriceCurrency')), namespaceprefix_ , eol_))
        if self.UnadjustedPrice is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnadjustedPrice>%s</%sUnadjustedPrice>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UnadjustedPrice), input_name='UnadjustedPrice')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Constituent_BasketType':
            Constituent_BasketType_ = child_.text
            Constituent_BasketType_ = self.gds_validate_string(Constituent_BasketType_, node, 'Constituent_BasketType')
            self.Constituent_BasketType = Constituent_BasketType_
        elif nodeName_ == 'Constituent_Bloomberg':
            Constituent_Bloomberg_ = child_.text
            Constituent_Bloomberg_ = self.gds_validate_string(Constituent_Bloomberg_, node, 'Constituent_Bloomberg')
            self.Constituent_Bloomberg = Constituent_Bloomberg_
        elif nodeName_ == 'Constituent_Count':
            Constituent_Count_ = child_.text
            Constituent_Count_ = self.gds_validate_string(Constituent_Count_, node, 'Constituent_Count')
            self.Constituent_Count = Constituent_Count_
        elif nodeName_ == 'Constituent_CUSIP':
            Constituent_CUSIP_ = child_.text
            Constituent_CUSIP_ = self.gds_validate_string(Constituent_CUSIP_, node, 'Constituent_CUSIP')
            self.Constituent_CUSIP = Constituent_CUSIP_
        elif nodeName_ == 'Constituent_ExchangeTicker':
            Constituent_ExchangeTicker_ = child_.text
            Constituent_ExchangeTicker_ = self.gds_validate_string(Constituent_ExchangeTicker_, node, 'Constituent_ExchangeTicker')
            self.Constituent_ExchangeTicker = Constituent_ExchangeTicker_
        elif nodeName_ == 'Constituent_FxRate':
            Constituent_FxRate_ = child_.text
            Constituent_FxRate_ = self.gds_validate_string(Constituent_FxRate_, node, 'Constituent_FxRate')
            self.Constituent_FxRate = Constituent_FxRate_
        elif nodeName_ == 'Constituent_ISIN':
            Constituent_ISIN_ = child_.text
            Constituent_ISIN_ = self.gds_validate_string(Constituent_ISIN_, node, 'Constituent_ISIN')
            self.Constituent_ISIN = Constituent_ISIN_
        elif nodeName_ == 'Constituent_ListingCurrency':
            Constituent_ListingCurrency_ = child_.text
            Constituent_ListingCurrency_ = self.gds_validate_string(Constituent_ListingCurrency_, node, 'Constituent_ListingCurrency')
            self.Constituent_ListingCurrency = Constituent_ListingCurrency_
        elif nodeName_ == 'Constituent_ListingID':
            Constituent_ListingID_ = child_.text
            Constituent_ListingID_ = self.gds_validate_string(Constituent_ListingID_, node, 'Constituent_ListingID')
            self.Constituent_ListingID = Constituent_ListingID_
        elif nodeName_ == 'Constituent_Mic':
            Constituent_Mic_ = child_.text
            Constituent_Mic_ = self.gds_validate_string(Constituent_Mic_, node, 'Constituent_Mic')
            self.Constituent_Mic = Constituent_Mic_
        elif nodeName_ == 'Constituent_Name':
            Constituent_Name_ = child_.text
            Constituent_Name_ = self.gds_validate_string(Constituent_Name_, node, 'Constituent_Name')
            self.Constituent_Name = Constituent_Name_
        elif nodeName_ == 'Constituent_Other':
            Constituent_Other_ = child_.text
            Constituent_Other_ = self.gds_validate_string(Constituent_Other_, node, 'Constituent_Other')
            self.Constituent_Other = Constituent_Other_
        elif nodeName_ == 'Constituent_Ric':
            Constituent_Ric_ = child_.text
            Constituent_Ric_ = self.gds_validate_string(Constituent_Ric_, node, 'Constituent_Ric')
            self.Constituent_Ric = Constituent_Ric_
        elif nodeName_ == 'Constituent_SecurityType':
            Constituent_SecurityType_ = child_.text
            Constituent_SecurityType_ = self.gds_validate_string(Constituent_SecurityType_, node, 'Constituent_SecurityType')
            self.Constituent_SecurityType = Constituent_SecurityType_
        elif nodeName_ == 'Constituent_Sedol':
            Constituent_Sedol_ = child_.text
            Constituent_Sedol_ = self.gds_validate_string(Constituent_Sedol_, node, 'Constituent_Sedol')
            self.Constituent_Sedol = Constituent_Sedol_
        elif nodeName_ == 'ConstituentType':
            ConstituentType_ = child_.text
            ConstituentType_ = self.gds_validate_string(ConstituentType_, node, 'ConstituentType')
            self.ConstituentType = ConstituentType_
        elif nodeName_ == 'Factor1':
            Factor1_ = child_.text
            Factor1_ = self.gds_validate_string(Factor1_, node, 'Factor1')
            self.Factor1 = Factor1_
        elif nodeName_ == 'Factor2':
            Factor2_ = child_.text
            Factor2_ = self.gds_validate_string(Factor2_, node, 'Factor2')
            self.Factor2 = Factor2_
        elif nodeName_ == 'Factor3':
            Factor3_ = child_.text
            Factor3_ = self.gds_validate_string(Factor3_, node, 'Factor3')
            self.Factor3 = Factor3_
        elif nodeName_ == 'Factor4':
            Factor4_ = child_.text
            Factor4_ = self.gds_validate_string(Factor4_, node, 'Factor4')
            self.Factor4 = Factor4_
        elif nodeName_ == 'Factor5':
            Factor5_ = child_.text
            Factor5_ = self.gds_validate_string(Factor5_, node, 'Factor5')
            self.Factor5 = Factor5_
        elif nodeName_ == 'Factor6':
            Factor6_ = child_.text
            Factor6_ = self.gds_validate_string(Factor6_, node, 'Factor6')
            self.Factor6 = Factor6_
        elif nodeName_ == 'Factor7':
            Factor7_ = child_.text
            Factor7_ = self.gds_validate_string(Factor7_, node, 'Factor7')
            self.Factor7 = Factor7_
        elif nodeName_ == 'Factor8':
            Factor8_ = child_.text
            Factor8_ = self.gds_validate_string(Factor8_, node, 'Factor8')
            self.Factor8 = Factor8_
        elif nodeName_ == 'Factor9':
            Factor9_ = child_.text
            Factor9_ = self.gds_validate_string(Factor9_, node, 'Factor9')
            self.Factor9 = Factor9_
        elif nodeName_ == 'IndexQuantity':
            IndexQuantity_ = child_.text
            IndexQuantity_ = self.gds_validate_string(IndexQuantity_, node, 'IndexQuantity')
            self.IndexQuantity = IndexQuantity_
        elif nodeName_ == 'NumberOfUnits':
            NumberOfUnits_ = child_.text
            NumberOfUnits_ = self.gds_validate_string(NumberOfUnits_, node, 'NumberOfUnits')
            self.NumberOfUnits = NumberOfUnits_
        elif nodeName_ == 'Price' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Price')
            self.Price = fval_
        elif nodeName_ == 'PriceAdjustmentFactor':
            PriceAdjustmentFactor_ = child_.text
            PriceAdjustmentFactor_ = self.gds_validate_string(PriceAdjustmentFactor_, node, 'PriceAdjustmentFactor')
            self.PriceAdjustmentFactor = PriceAdjustmentFactor_
        elif nodeName_ == 'PriceCurrency':
            PriceCurrency_ = child_.text
            PriceCurrency_ = self.gds_validate_string(PriceCurrency_, node, 'PriceCurrency')
            self.PriceCurrency = PriceCurrency_
        elif nodeName_ == 'UnadjustedPrice':
            UnadjustedPrice_ = child_.text
            UnadjustedPrice_ = self.gds_validate_string(UnadjustedPrice_, node, 'UnadjustedPrice')
            self.UnadjustedPrice = UnadjustedPrice_
# end class ConstituentsType9


class DividendsType10(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Bloomberg=None, Count=None, CountryCode=None, CurrencyCode=None, DividendType=None, ExchangeTicker=None, ForecastMask=None, GrossAmount=None, ListingCurrency=None, ListingID=None, Mic=None, Name=None, NetAmount=None, Other=None, ReinvestmentDate=None, Ric=None, SecurityType=None, TaxRate=None, XdDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Bloomberg = Bloomberg
        self.Count = Count
        self.CountryCode = CountryCode
        self.CurrencyCode = CurrencyCode
        self.DividendType = DividendType
        self.ExchangeTicker = ExchangeTicker
        self.ForecastMask = ForecastMask
        self.GrossAmount = GrossAmount
        self.ListingCurrency = ListingCurrency
        self.ListingID = ListingID
        self.Mic = Mic
        self.Name = Name
        self.NetAmount = NetAmount
        self.Other = Other
        self.ReinvestmentDate = ReinvestmentDate
        self.Ric = Ric
        self.SecurityType = SecurityType
        self.TaxRate = TaxRate
        self.XdDate = XdDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DividendsType10)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DividendsType10.subclass:
            return DividendsType10.subclass(*args_, **kwargs_)
        else:
            return DividendsType10(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Bloomberg(self):
        return self.Bloomberg
    def set_Bloomberg(self, Bloomberg):
        self.Bloomberg = Bloomberg
    def get_Count(self):
        return self.Count
    def set_Count(self, Count):
        self.Count = Count
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def get_CurrencyCode(self):
        return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode):
        self.CurrencyCode = CurrencyCode
    def get_DividendType(self):
        return self.DividendType
    def set_DividendType(self, DividendType):
        self.DividendType = DividendType
    def get_ExchangeTicker(self):
        return self.ExchangeTicker
    def set_ExchangeTicker(self, ExchangeTicker):
        self.ExchangeTicker = ExchangeTicker
    def get_ForecastMask(self):
        return self.ForecastMask
    def set_ForecastMask(self, ForecastMask):
        self.ForecastMask = ForecastMask
    def get_GrossAmount(self):
        return self.GrossAmount
    def set_GrossAmount(self, GrossAmount):
        self.GrossAmount = GrossAmount
    def get_ListingCurrency(self):
        return self.ListingCurrency
    def set_ListingCurrency(self, ListingCurrency):
        self.ListingCurrency = ListingCurrency
    def get_ListingID(self):
        return self.ListingID
    def set_ListingID(self, ListingID):
        self.ListingID = ListingID
    def get_Mic(self):
        return self.Mic
    def set_Mic(self, Mic):
        self.Mic = Mic
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_NetAmount(self):
        return self.NetAmount
    def set_NetAmount(self, NetAmount):
        self.NetAmount = NetAmount
    def get_Other(self):
        return self.Other
    def set_Other(self, Other):
        self.Other = Other
    def get_ReinvestmentDate(self):
        return self.ReinvestmentDate
    def set_ReinvestmentDate(self, ReinvestmentDate):
        self.ReinvestmentDate = ReinvestmentDate
    def get_Ric(self):
        return self.Ric
    def set_Ric(self, Ric):
        self.Ric = Ric
    def get_SecurityType(self):
        return self.SecurityType
    def set_SecurityType(self, SecurityType):
        self.SecurityType = SecurityType
    def get_TaxRate(self):
        return self.TaxRate
    def set_TaxRate(self, TaxRate):
        self.TaxRate = TaxRate
    def get_XdDate(self):
        return self.XdDate
    def set_XdDate(self, XdDate):
        self.XdDate = XdDate
    def hasContent_(self):
        if (
            self.Bloomberg is not None or
            self.Count is not None or
            self.CountryCode is not None or
            self.CurrencyCode is not None or
            self.DividendType is not None or
            self.ExchangeTicker is not None or
            self.ForecastMask is not None or
            self.GrossAmount is not None or
            self.ListingCurrency is not None or
            self.ListingID is not None or
            self.Mic is not None or
            self.Name is not None or
            self.NetAmount is not None or
            self.Other is not None or
            self.ReinvestmentDate is not None or
            self.Ric is not None or
            self.SecurityType is not None or
            self.TaxRate is not None or
            self.XdDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DividendsType10', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DividendsType10')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DividendsType10')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DividendsType10', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DividendsType10'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DividendsType10', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Bloomberg is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBloomberg>%s</%sBloomberg>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Bloomberg), input_name='Bloomberg')), namespaceprefix_ , eol_))
        if self.Count is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCount>%s</%sCount>%s' % (namespaceprefix_ , self.gds_format_float(self.Count, input_name='Count'), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyCode>%s</%sCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), namespaceprefix_ , eol_))
        if self.DividendType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividendType>%s</%sDividendType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DividendType), input_name='DividendType')), namespaceprefix_ , eol_))
        if self.ExchangeTicker is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExchangeTicker>%s</%sExchangeTicker>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExchangeTicker), input_name='ExchangeTicker')), namespaceprefix_ , eol_))
        if self.ForecastMask is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sForecastMask>%s</%sForecastMask>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ForecastMask), input_name='ForecastMask')), namespaceprefix_ , eol_))
        if self.GrossAmount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGrossAmount>%s</%sGrossAmount>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GrossAmount), input_name='GrossAmount')), namespaceprefix_ , eol_))
        if self.ListingCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListingCurrency>%s</%sListingCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ListingCurrency), input_name='ListingCurrency')), namespaceprefix_ , eol_))
        if self.ListingID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListingID>%s</%sListingID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ListingID), input_name='ListingID')), namespaceprefix_ , eol_))
        if self.Mic is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMic>%s</%sMic>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Mic), input_name='Mic')), namespaceprefix_ , eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.NetAmount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNetAmount>%s</%sNetAmount>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NetAmount), input_name='NetAmount')), namespaceprefix_ , eol_))
        if self.Other is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOther>%s</%sOther>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Other), input_name='Other')), namespaceprefix_ , eol_))
        if self.ReinvestmentDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReinvestmentDate>%s</%sReinvestmentDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReinvestmentDate), input_name='ReinvestmentDate')), namespaceprefix_ , eol_))
        if self.Ric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRic>%s</%sRic>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Ric), input_name='Ric')), namespaceprefix_ , eol_))
        if self.SecurityType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSecurityType>%s</%sSecurityType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SecurityType), input_name='SecurityType')), namespaceprefix_ , eol_))
        if self.TaxRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxRate>%s</%sTaxRate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TaxRate), input_name='TaxRate')), namespaceprefix_ , eol_))
        if self.XdDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sXdDate>%s</%sXdDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.XdDate), input_name='XdDate')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Bloomberg':
            Bloomberg_ = child_.text
            Bloomberg_ = self.gds_validate_string(Bloomberg_, node, 'Bloomberg')
            self.Bloomberg = Bloomberg_
        elif nodeName_ == 'Count' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Count')
            self.Count = fval_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
        elif nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'DividendType':
            DividendType_ = child_.text
            DividendType_ = self.gds_validate_string(DividendType_, node, 'DividendType')
            self.DividendType = DividendType_
        elif nodeName_ == 'ExchangeTicker':
            ExchangeTicker_ = child_.text
            ExchangeTicker_ = self.gds_validate_string(ExchangeTicker_, node, 'ExchangeTicker')
            self.ExchangeTicker = ExchangeTicker_
        elif nodeName_ == 'ForecastMask':
            ForecastMask_ = child_.text
            ForecastMask_ = self.gds_validate_string(ForecastMask_, node, 'ForecastMask')
            self.ForecastMask = ForecastMask_
        elif nodeName_ == 'GrossAmount':
            GrossAmount_ = child_.text
            GrossAmount_ = self.gds_validate_string(GrossAmount_, node, 'GrossAmount')
            self.GrossAmount = GrossAmount_
        elif nodeName_ == 'ListingCurrency':
            ListingCurrency_ = child_.text
            ListingCurrency_ = self.gds_validate_string(ListingCurrency_, node, 'ListingCurrency')
            self.ListingCurrency = ListingCurrency_
        elif nodeName_ == 'ListingID':
            ListingID_ = child_.text
            ListingID_ = self.gds_validate_string(ListingID_, node, 'ListingID')
            self.ListingID = ListingID_
        elif nodeName_ == 'Mic':
            Mic_ = child_.text
            Mic_ = self.gds_validate_string(Mic_, node, 'Mic')
            self.Mic = Mic_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'NetAmount':
            NetAmount_ = child_.text
            NetAmount_ = self.gds_validate_string(NetAmount_, node, 'NetAmount')
            self.NetAmount = NetAmount_
        elif nodeName_ == 'Other':
            Other_ = child_.text
            Other_ = self.gds_validate_string(Other_, node, 'Other')
            self.Other = Other_
        elif nodeName_ == 'ReinvestmentDate':
            ReinvestmentDate_ = child_.text
            ReinvestmentDate_ = self.gds_validate_string(ReinvestmentDate_, node, 'ReinvestmentDate')
            self.ReinvestmentDate = ReinvestmentDate_
        elif nodeName_ == 'Ric':
            Ric_ = child_.text
            Ric_ = self.gds_validate_string(Ric_, node, 'Ric')
            self.Ric = Ric_
        elif nodeName_ == 'SecurityType':
            SecurityType_ = child_.text
            SecurityType_ = self.gds_validate_string(SecurityType_, node, 'SecurityType')
            self.SecurityType = SecurityType_
        elif nodeName_ == 'TaxRate':
            TaxRate_ = child_.text
            TaxRate_ = self.gds_validate_string(TaxRate_, node, 'TaxRate')
            self.TaxRate = TaxRate_
        elif nodeName_ == 'XdDate':
            XdDate_ = child_.text
            XdDate_ = self.gds_validate_string(XdDate_, node, 'XdDate')
            self.XdDate = XdDate_
# end class DividendsType10


class HeaderType11(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BatchID=None, DataProvider=None, FxRateSet=None, HasDividends=None, HasRebalance=None, HasTPlus=None, IsHeaderOnly=None, NextRebalanceDate=None, PrimaryListingID=None, RebalanceFrequency=None, RebalanceNotes=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.BatchID = BatchID
        self.DataProvider = DataProvider
        self.FxRateSet = FxRateSet
        self.HasDividends = HasDividends
        self.HasRebalance = HasRebalance
        self.HasTPlus = HasTPlus
        self.IsHeaderOnly = IsHeaderOnly
        self.NextRebalanceDate = NextRebalanceDate
        self.PrimaryListingID = PrimaryListingID
        self.RebalanceFrequency = RebalanceFrequency
        self.RebalanceNotes = RebalanceNotes
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType11)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType11.subclass:
            return HeaderType11.subclass(*args_, **kwargs_)
        else:
            return HeaderType11(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BatchID(self):
        return self.BatchID
    def set_BatchID(self, BatchID):
        self.BatchID = BatchID
    def get_DataProvider(self):
        return self.DataProvider
    def set_DataProvider(self, DataProvider):
        self.DataProvider = DataProvider
    def get_FxRateSet(self):
        return self.FxRateSet
    def set_FxRateSet(self, FxRateSet):
        self.FxRateSet = FxRateSet
    def get_HasDividends(self):
        return self.HasDividends
    def set_HasDividends(self, HasDividends):
        self.HasDividends = HasDividends
    def get_HasRebalance(self):
        return self.HasRebalance
    def set_HasRebalance(self, HasRebalance):
        self.HasRebalance = HasRebalance
    def get_HasTPlus(self):
        return self.HasTPlus
    def set_HasTPlus(self, HasTPlus):
        self.HasTPlus = HasTPlus
    def get_IsHeaderOnly(self):
        return self.IsHeaderOnly
    def set_IsHeaderOnly(self, IsHeaderOnly):
        self.IsHeaderOnly = IsHeaderOnly
    def get_NextRebalanceDate(self):
        return self.NextRebalanceDate
    def set_NextRebalanceDate(self, NextRebalanceDate):
        self.NextRebalanceDate = NextRebalanceDate
    def get_PrimaryListingID(self):
        return self.PrimaryListingID
    def set_PrimaryListingID(self, PrimaryListingID):
        self.PrimaryListingID = PrimaryListingID
    def get_RebalanceFrequency(self):
        return self.RebalanceFrequency
    def set_RebalanceFrequency(self, RebalanceFrequency):
        self.RebalanceFrequency = RebalanceFrequency
    def get_RebalanceNotes(self):
        return self.RebalanceNotes
    def set_RebalanceNotes(self, RebalanceNotes):
        self.RebalanceNotes = RebalanceNotes
    def hasContent_(self):
        if (
            self.BatchID is not None or
            self.DataProvider is not None or
            self.FxRateSet is not None or
            self.HasDividends is not None or
            self.HasRebalance is not None or
            self.HasTPlus is not None or
            self.IsHeaderOnly is not None or
            self.NextRebalanceDate is not None or
            self.PrimaryListingID is not None or
            self.RebalanceFrequency is not None or
            self.RebalanceNotes is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HeaderType11', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType11')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType11')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType11', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType11'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HeaderType11', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BatchID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBatchID>%s</%sBatchID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BatchID), input_name='BatchID')), namespaceprefix_ , eol_))
        if self.DataProvider is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataProvider>%s</%sDataProvider>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DataProvider), input_name='DataProvider')), namespaceprefix_ , eol_))
        if self.FxRateSet is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFxRateSet>%s</%sFxRateSet>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FxRateSet), input_name='FxRateSet')), namespaceprefix_ , eol_))
        if self.HasDividends is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHasDividends>%s</%sHasDividends>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HasDividends), input_name='HasDividends')), namespaceprefix_ , eol_))
        if self.HasRebalance is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHasRebalance>%s</%sHasRebalance>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HasRebalance), input_name='HasRebalance')), namespaceprefix_ , eol_))
        if self.HasTPlus is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHasTPlus>%s</%sHasTPlus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HasTPlus), input_name='HasTPlus')), namespaceprefix_ , eol_))
        if self.IsHeaderOnly is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsHeaderOnly>%s</%sIsHeaderOnly>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsHeaderOnly), input_name='IsHeaderOnly')), namespaceprefix_ , eol_))
        if self.NextRebalanceDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNextRebalanceDate>%s</%sNextRebalanceDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NextRebalanceDate), input_name='NextRebalanceDate')), namespaceprefix_ , eol_))
        if self.PrimaryListingID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrimaryListingID>%s</%sPrimaryListingID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrimaryListingID), input_name='PrimaryListingID')), namespaceprefix_ , eol_))
        if self.RebalanceFrequency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRebalanceFrequency>%s</%sRebalanceFrequency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RebalanceFrequency), input_name='RebalanceFrequency')), namespaceprefix_ , eol_))
        if self.RebalanceNotes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRebalanceNotes>%s</%sRebalanceNotes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RebalanceNotes), input_name='RebalanceNotes')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BatchID':
            BatchID_ = child_.text
            BatchID_ = self.gds_validate_string(BatchID_, node, 'BatchID')
            self.BatchID = BatchID_
        elif nodeName_ == 'DataProvider':
            DataProvider_ = child_.text
            DataProvider_ = self.gds_validate_string(DataProvider_, node, 'DataProvider')
            self.DataProvider = DataProvider_
        elif nodeName_ == 'FxRateSet':
            FxRateSet_ = child_.text
            FxRateSet_ = self.gds_validate_string(FxRateSet_, node, 'FxRateSet')
            self.FxRateSet = FxRateSet_
        elif nodeName_ == 'HasDividends':
            HasDividends_ = child_.text
            HasDividends_ = self.gds_validate_string(HasDividends_, node, 'HasDividends')
            self.HasDividends = HasDividends_
        elif nodeName_ == 'HasRebalance':
            HasRebalance_ = child_.text
            HasRebalance_ = self.gds_validate_string(HasRebalance_, node, 'HasRebalance')
            self.HasRebalance = HasRebalance_
        elif nodeName_ == 'HasTPlus':
            HasTPlus_ = child_.text
            HasTPlus_ = self.gds_validate_string(HasTPlus_, node, 'HasTPlus')
            self.HasTPlus = HasTPlus_
        elif nodeName_ == 'IsHeaderOnly':
            IsHeaderOnly_ = child_.text
            IsHeaderOnly_ = self.gds_validate_string(IsHeaderOnly_, node, 'IsHeaderOnly')
            self.IsHeaderOnly = IsHeaderOnly_
        elif nodeName_ == 'NextRebalanceDate':
            NextRebalanceDate_ = child_.text
            NextRebalanceDate_ = self.gds_validate_string(NextRebalanceDate_, node, 'NextRebalanceDate')
            self.NextRebalanceDate = NextRebalanceDate_
        elif nodeName_ == 'PrimaryListingID':
            PrimaryListingID_ = child_.text
            PrimaryListingID_ = self.gds_validate_string(PrimaryListingID_, node, 'PrimaryListingID')
            self.PrimaryListingID = PrimaryListingID_
        elif nodeName_ == 'RebalanceFrequency':
            RebalanceFrequency_ = child_.text
            RebalanceFrequency_ = self.gds_validate_string(RebalanceFrequency_, node, 'RebalanceFrequency')
            self.RebalanceFrequency = RebalanceFrequency_
        elif nodeName_ == 'RebalanceNotes':
            RebalanceNotes_ = child_.text
            RebalanceNotes_ = self.gds_validate_string(RebalanceNotes_, node, 'RebalanceNotes')
            self.RebalanceNotes = RebalanceNotes_
# end class HeaderType11


class PositionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AsAtDate=None, Cash=None, ConstituentCount=None, DataStatusMask=None, Divisor=None, FXDate=None, FxRate=None, IsOpen=None, MarketCap=None, Points=None, Position_Bloomberg=None, Position_Count=None, Position_CUSIP=None, Position_ExchangeTicker=None, Position_ISIN=None, Position_ListingCurrency=None, Position_ListingID=None, Position_Mic=None, Position_Name=None, Position_Other=None, Position_Ric=None, Position_SecurityType=None, Position_Sedol=None, Value=None, Variant=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.AsAtDate = AsAtDate
        self.Cash = Cash
        self.ConstituentCount = ConstituentCount
        self.DataStatusMask = DataStatusMask
        self.Divisor = Divisor
        self.FXDate = FXDate
        self.FxRate = FxRate
        self.IsOpen = IsOpen
        self.MarketCap = MarketCap
        self.Points = Points
        self.Position_Bloomberg = Position_Bloomberg
        self.Position_Count = Position_Count
        self.Position_CUSIP = Position_CUSIP
        self.Position_ExchangeTicker = Position_ExchangeTicker
        self.Position_ISIN = Position_ISIN
        self.Position_ListingCurrency = Position_ListingCurrency
        self.Position_ListingID = Position_ListingID
        self.Position_Mic = Position_Mic
        self.Position_Name = Position_Name
        self.Position_Other = Position_Other
        self.Position_Ric = Position_Ric
        self.Position_SecurityType = Position_SecurityType
        self.Position_Sedol = Position_Sedol
        self.Value = Value
        self.Variant = Variant
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PositionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PositionsType.subclass:
            return PositionsType.subclass(*args_, **kwargs_)
        else:
            return PositionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AsAtDate(self):
        return self.AsAtDate
    def set_AsAtDate(self, AsAtDate):
        self.AsAtDate = AsAtDate
    def get_Cash(self):
        return self.Cash
    def set_Cash(self, Cash):
        self.Cash = Cash
    def get_ConstituentCount(self):
        return self.ConstituentCount
    def set_ConstituentCount(self, ConstituentCount):
        self.ConstituentCount = ConstituentCount
    def get_DataStatusMask(self):
        return self.DataStatusMask
    def set_DataStatusMask(self, DataStatusMask):
        self.DataStatusMask = DataStatusMask
    def get_Divisor(self):
        return self.Divisor
    def set_Divisor(self, Divisor):
        self.Divisor = Divisor
    def get_FXDate(self):
        return self.FXDate
    def set_FXDate(self, FXDate):
        self.FXDate = FXDate
    def get_FxRate(self):
        return self.FxRate
    def set_FxRate(self, FxRate):
        self.FxRate = FxRate
    def get_IsOpen(self):
        return self.IsOpen
    def set_IsOpen(self, IsOpen):
        self.IsOpen = IsOpen
    def get_MarketCap(self):
        return self.MarketCap
    def set_MarketCap(self, MarketCap):
        self.MarketCap = MarketCap
    def get_Points(self):
        return self.Points
    def set_Points(self, Points):
        self.Points = Points
    def get_Position_Bloomberg(self):
        return self.Position_Bloomberg
    def set_Position_Bloomberg(self, Position_Bloomberg):
        self.Position_Bloomberg = Position_Bloomberg
    def get_Position_Count(self):
        return self.Position_Count
    def set_Position_Count(self, Position_Count):
        self.Position_Count = Position_Count
    def get_Position_CUSIP(self):
        return self.Position_CUSIP
    def set_Position_CUSIP(self, Position_CUSIP):
        self.Position_CUSIP = Position_CUSIP
    def get_Position_ExchangeTicker(self):
        return self.Position_ExchangeTicker
    def set_Position_ExchangeTicker(self, Position_ExchangeTicker):
        self.Position_ExchangeTicker = Position_ExchangeTicker
    def get_Position_ISIN(self):
        return self.Position_ISIN
    def set_Position_ISIN(self, Position_ISIN):
        self.Position_ISIN = Position_ISIN
    def get_Position_ListingCurrency(self):
        return self.Position_ListingCurrency
    def set_Position_ListingCurrency(self, Position_ListingCurrency):
        self.Position_ListingCurrency = Position_ListingCurrency
    def get_Position_ListingID(self):
        return self.Position_ListingID
    def set_Position_ListingID(self, Position_ListingID):
        self.Position_ListingID = Position_ListingID
    def get_Position_Mic(self):
        return self.Position_Mic
    def set_Position_Mic(self, Position_Mic):
        self.Position_Mic = Position_Mic
    def get_Position_Name(self):
        return self.Position_Name
    def set_Position_Name(self, Position_Name):
        self.Position_Name = Position_Name
    def get_Position_Other(self):
        return self.Position_Other
    def set_Position_Other(self, Position_Other):
        self.Position_Other = Position_Other
    def get_Position_Ric(self):
        return self.Position_Ric
    def set_Position_Ric(self, Position_Ric):
        self.Position_Ric = Position_Ric
    def get_Position_SecurityType(self):
        return self.Position_SecurityType
    def set_Position_SecurityType(self, Position_SecurityType):
        self.Position_SecurityType = Position_SecurityType
    def get_Position_Sedol(self):
        return self.Position_Sedol
    def set_Position_Sedol(self, Position_Sedol):
        self.Position_Sedol = Position_Sedol
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def get_Variant(self):
        return self.Variant
    def set_Variant(self, Variant):
        self.Variant = Variant
    def hasContent_(self):
        if (
            self.AsAtDate is not None or
            self.Cash is not None or
            self.ConstituentCount is not None or
            self.DataStatusMask is not None or
            self.Divisor is not None or
            self.FXDate is not None or
            self.FxRate is not None or
            self.IsOpen is not None or
            self.MarketCap is not None or
            self.Points is not None or
            self.Position_Bloomberg is not None or
            self.Position_Count is not None or
            self.Position_CUSIP is not None or
            self.Position_ExchangeTicker is not None or
            self.Position_ISIN is not None or
            self.Position_ListingCurrency is not None or
            self.Position_ListingID is not None or
            self.Position_Mic is not None or
            self.Position_Name is not None or
            self.Position_Other is not None or
            self.Position_Ric is not None or
            self.Position_SecurityType is not None or
            self.Position_Sedol is not None or
            self.Value is not None or
            self.Variant is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PositionsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PositionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PositionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PositionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PositionsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PositionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AsAtDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAsAtDate>%s</%sAsAtDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AsAtDate), input_name='AsAtDate')), namespaceprefix_ , eol_))
        if self.Cash is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCash>%s</%sCash>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Cash), input_name='Cash')), namespaceprefix_ , eol_))
        if self.ConstituentCount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituentCount>%s</%sConstituentCount>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ConstituentCount), input_name='ConstituentCount')), namespaceprefix_ , eol_))
        if self.DataStatusMask is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataStatusMask>%s</%sDataStatusMask>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DataStatusMask), input_name='DataStatusMask')), namespaceprefix_ , eol_))
        if self.Divisor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDivisor>%s</%sDivisor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Divisor), input_name='Divisor')), namespaceprefix_ , eol_))
        if self.FXDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFXDate>%s</%sFXDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FXDate), input_name='FXDate')), namespaceprefix_ , eol_))
        if self.FxRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFxRate>%s</%sFxRate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FxRate), input_name='FxRate')), namespaceprefix_ , eol_))
        if self.IsOpen is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsOpen>%s</%sIsOpen>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsOpen), input_name='IsOpen')), namespaceprefix_ , eol_))
        if self.MarketCap is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarketCap>%s</%sMarketCap>%s' % (namespaceprefix_ , self.gds_format_float(self.MarketCap, input_name='MarketCap'), namespaceprefix_ , eol_))
        if self.Points is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPoints>%s</%sPoints>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Points), input_name='Points')), namespaceprefix_ , eol_))
        if self.Position_Bloomberg is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosition_Bloomberg>%s</%sPosition_Bloomberg>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Position_Bloomberg), input_name='Position_Bloomberg')), namespaceprefix_ , eol_))
        if self.Position_Count is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosition_Count>%s</%sPosition_Count>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Position_Count), input_name='Position_Count')), namespaceprefix_ , eol_))
        if self.Position_CUSIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosition_CUSIP>%s</%sPosition_CUSIP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Position_CUSIP), input_name='Position_CUSIP')), namespaceprefix_ , eol_))
        if self.Position_ExchangeTicker is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosition_ExchangeTicker>%s</%sPosition_ExchangeTicker>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Position_ExchangeTicker), input_name='Position_ExchangeTicker')), namespaceprefix_ , eol_))
        if self.Position_ISIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosition_ISIN>%s</%sPosition_ISIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Position_ISIN), input_name='Position_ISIN')), namespaceprefix_ , eol_))
        if self.Position_ListingCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosition_ListingCurrency>%s</%sPosition_ListingCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Position_ListingCurrency), input_name='Position_ListingCurrency')), namespaceprefix_ , eol_))
        if self.Position_ListingID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosition_ListingID>%s</%sPosition_ListingID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Position_ListingID), input_name='Position_ListingID')), namespaceprefix_ , eol_))
        if self.Position_Mic is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosition_Mic>%s</%sPosition_Mic>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Position_Mic), input_name='Position_Mic')), namespaceprefix_ , eol_))
        if self.Position_Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosition_Name>%s</%sPosition_Name>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Position_Name), input_name='Position_Name')), namespaceprefix_ , eol_))
        if self.Position_Other is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosition_Other>%s</%sPosition_Other>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Position_Other), input_name='Position_Other')), namespaceprefix_ , eol_))
        if self.Position_Ric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosition_Ric>%s</%sPosition_Ric>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Position_Ric), input_name='Position_Ric')), namespaceprefix_ , eol_))
        if self.Position_SecurityType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosition_SecurityType>%s</%sPosition_SecurityType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Position_SecurityType), input_name='Position_SecurityType')), namespaceprefix_ , eol_))
        if self.Position_Sedol is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosition_Sedol>%s</%sPosition_Sedol>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Position_Sedol), input_name='Position_Sedol')), namespaceprefix_ , eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_format_float(self.Value, input_name='Value'), namespaceprefix_ , eol_))
        if self.Variant is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVariant>%s</%sVariant>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Variant), input_name='Variant')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AsAtDate':
            AsAtDate_ = child_.text
            AsAtDate_ = self.gds_validate_string(AsAtDate_, node, 'AsAtDate')
            self.AsAtDate = AsAtDate_
        elif nodeName_ == 'Cash':
            Cash_ = child_.text
            Cash_ = self.gds_validate_string(Cash_, node, 'Cash')
            self.Cash = Cash_
        elif nodeName_ == 'ConstituentCount':
            ConstituentCount_ = child_.text
            ConstituentCount_ = self.gds_validate_string(ConstituentCount_, node, 'ConstituentCount')
            self.ConstituentCount = ConstituentCount_
        elif nodeName_ == 'DataStatusMask':
            DataStatusMask_ = child_.text
            DataStatusMask_ = self.gds_validate_string(DataStatusMask_, node, 'DataStatusMask')
            self.DataStatusMask = DataStatusMask_
        elif nodeName_ == 'Divisor':
            Divisor_ = child_.text
            Divisor_ = self.gds_validate_string(Divisor_, node, 'Divisor')
            self.Divisor = Divisor_
        elif nodeName_ == 'FXDate':
            FXDate_ = child_.text
            FXDate_ = self.gds_validate_string(FXDate_, node, 'FXDate')
            self.FXDate = FXDate_
        elif nodeName_ == 'FxRate':
            FxRate_ = child_.text
            FxRate_ = self.gds_validate_string(FxRate_, node, 'FxRate')
            self.FxRate = FxRate_
        elif nodeName_ == 'IsOpen':
            IsOpen_ = child_.text
            IsOpen_ = self.gds_validate_string(IsOpen_, node, 'IsOpen')
            self.IsOpen = IsOpen_
        elif nodeName_ == 'MarketCap' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'MarketCap')
            self.MarketCap = fval_
        elif nodeName_ == 'Points':
            Points_ = child_.text
            Points_ = self.gds_validate_string(Points_, node, 'Points')
            self.Points = Points_
        elif nodeName_ == 'Position_Bloomberg':
            Position_Bloomberg_ = child_.text
            Position_Bloomberg_ = self.gds_validate_string(Position_Bloomberg_, node, 'Position_Bloomberg')
            self.Position_Bloomberg = Position_Bloomberg_
        elif nodeName_ == 'Position_Count':
            Position_Count_ = child_.text
            Position_Count_ = self.gds_validate_string(Position_Count_, node, 'Position_Count')
            self.Position_Count = Position_Count_
        elif nodeName_ == 'Position_CUSIP':
            Position_CUSIP_ = child_.text
            Position_CUSIP_ = self.gds_validate_string(Position_CUSIP_, node, 'Position_CUSIP')
            self.Position_CUSIP = Position_CUSIP_
        elif nodeName_ == 'Position_ExchangeTicker':
            Position_ExchangeTicker_ = child_.text
            Position_ExchangeTicker_ = self.gds_validate_string(Position_ExchangeTicker_, node, 'Position_ExchangeTicker')
            self.Position_ExchangeTicker = Position_ExchangeTicker_
        elif nodeName_ == 'Position_ISIN':
            Position_ISIN_ = child_.text
            Position_ISIN_ = self.gds_validate_string(Position_ISIN_, node, 'Position_ISIN')
            self.Position_ISIN = Position_ISIN_
        elif nodeName_ == 'Position_ListingCurrency':
            Position_ListingCurrency_ = child_.text
            Position_ListingCurrency_ = self.gds_validate_string(Position_ListingCurrency_, node, 'Position_ListingCurrency')
            self.Position_ListingCurrency = Position_ListingCurrency_
        elif nodeName_ == 'Position_ListingID':
            Position_ListingID_ = child_.text
            Position_ListingID_ = self.gds_validate_string(Position_ListingID_, node, 'Position_ListingID')
            self.Position_ListingID = Position_ListingID_
        elif nodeName_ == 'Position_Mic':
            Position_Mic_ = child_.text
            Position_Mic_ = self.gds_validate_string(Position_Mic_, node, 'Position_Mic')
            self.Position_Mic = Position_Mic_
        elif nodeName_ == 'Position_Name':
            Position_Name_ = child_.text
            Position_Name_ = self.gds_validate_string(Position_Name_, node, 'Position_Name')
            self.Position_Name = Position_Name_
        elif nodeName_ == 'Position_Other':
            Position_Other_ = child_.text
            Position_Other_ = self.gds_validate_string(Position_Other_, node, 'Position_Other')
            self.Position_Other = Position_Other_
        elif nodeName_ == 'Position_Ric':
            Position_Ric_ = child_.text
            Position_Ric_ = self.gds_validate_string(Position_Ric_, node, 'Position_Ric')
            self.Position_Ric = Position_Ric_
        elif nodeName_ == 'Position_SecurityType':
            Position_SecurityType_ = child_.text
            Position_SecurityType_ = self.gds_validate_string(Position_SecurityType_, node, 'Position_SecurityType')
            self.Position_SecurityType = Position_SecurityType_
        elif nodeName_ == 'Position_Sedol':
            Position_Sedol_ = child_.text
            Position_Sedol_ = self.gds_validate_string(Position_Sedol_, node, 'Position_Sedol')
            self.Position_Sedol = Position_Sedol_
        elif nodeName_ == 'Value' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Value')
            self.Value = fval_
        elif nodeName_ == 'Variant':
            Variant_ = child_.text
            Variant_ = self.gds_validate_string(Variant_, node, 'Variant')
            self.Variant = Variant_
# end class PositionsType


class DividendsType12(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CUSIP=None, ISIN=None, SEDOL=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.CUSIP = CUSIP
        self.ISIN = ISIN
        self.SEDOL = SEDOL
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DividendsType12)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DividendsType12.subclass:
            return DividendsType12.subclass(*args_, **kwargs_)
        else:
            return DividendsType12(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def hasContent_(self):
        if (
            self.CUSIP is not None or
            self.ISIN is not None or
            self.SEDOL is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DividendsType12', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DividendsType12')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DividendsType12')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DividendsType12', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DividendsType12'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DividendsType12', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CUSIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUSIP>%s</%sCUSIP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CUSIP), input_name='CUSIP')), namespaceprefix_ , eol_))
        if self.ISIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sISIN>%s</%sISIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ISIN), input_name='ISIN')), namespaceprefix_ , eol_))
        if self.SEDOL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSEDOL>%s</%sSEDOL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SEDOL), input_name='SEDOL')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CUSIP':
            CUSIP_ = child_.text
            CUSIP_ = self.gds_validate_string(CUSIP_, node, 'CUSIP')
            self.CUSIP = CUSIP_
        elif nodeName_ == 'ISIN':
            ISIN_ = child_.text
            ISIN_ = self.gds_validate_string(ISIN_, node, 'ISIN')
            self.ISIN = ISIN_
        elif nodeName_ == 'SEDOL':
            SEDOL_ = child_.text
            SEDOL_ = self.gds_validate_string(SEDOL_, node, 'SEDOL')
            self.SEDOL = SEDOL_
# end class DividendsType12


class DividendPointsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DATATYPE=None, RANK=None, RANKTYPE=None, SECURITYID=None, SOLALISTINGID=None, SOLADIVSOURCE=None, DataDate=None, Points=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DATATYPE = _cast(None, DATATYPE)
        self.RANK = _cast(None, RANK)
        self.RANKTYPE = _cast(None, RANKTYPE)
        self.SECURITYID = _cast(None, SECURITYID)
        self.SOLALISTINGID = _cast(None, SOLALISTINGID)
        self.SOLADIVSOURCE = _cast(None, SOLADIVSOURCE)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
        self.Points = Points
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DividendPointsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DividendPointsType.subclass:
            return DividendPointsType.subclass(*args_, **kwargs_)
        else:
            return DividendPointsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_Points(self):
        return self.Points
    def set_Points(self, Points):
        self.Points = Points
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_RANKTYPE(self):
        return self.RANKTYPE
    def set_RANKTYPE(self, RANKTYPE):
        self.RANKTYPE = RANKTYPE
    def get_SECURITYID(self):
        return self.SECURITYID
    def set_SECURITYID(self, SECURITYID):
        self.SECURITYID = SECURITYID
    def get_SOLALISTINGID(self):
        return self.SOLALISTINGID
    def set_SOLALISTINGID(self, SOLALISTINGID):
        self.SOLALISTINGID = SOLALISTINGID
    def get_SOLADIVSOURCE(self):
        return self.SOLADIVSOURCE
    def set_SOLADIVSOURCE(self, SOLADIVSOURCE):
        self.SOLADIVSOURCE = SOLADIVSOURCE
    def hasContent_(self):
        if (
            self.DataDate or
            self.Points is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DividendPointsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DividendPointsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DividendPointsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DividendPointsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DividendPointsType'):
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.RANKTYPE is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            outfile.write(' RANKTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANKTYPE), input_name='RANKTYPE')), ))
        if self.SECURITYID is not None and 'SECURITYID' not in already_processed:
            already_processed.add('SECURITYID')
            outfile.write(' SECURITYID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SECURITYID), input_name='SECURITYID')), ))
        if self.SOLALISTINGID is not None and 'SOLALISTINGID' not in already_processed:
            already_processed.add('SOLALISTINGID')
            outfile.write(' SOLALISTINGID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SOLALISTINGID), input_name='SOLALISTINGID')), ))
        if self.SOLADIVSOURCE is not None and 'SOLADIVSOURCE' not in already_processed:
            already_processed.add('SOLADIVSOURCE')
            outfile.write(' SOLADIVSOURCE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SOLADIVSOURCE), input_name='SOLADIVSOURCE')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DividendPointsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
        if self.Points is not None:
            self.Points.export(outfile, level, namespaceprefix_, name_='Points', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('RANKTYPE', node)
        if value is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            self.RANKTYPE = value
        value = find_attr_value_('SECURITYID', node)
        if value is not None and 'SECURITYID' not in already_processed:
            already_processed.add('SECURITYID')
            self.SECURITYID = value
        value = find_attr_value_('SOLALISTINGID', node)
        if value is not None and 'SOLALISTINGID' not in already_processed:
            already_processed.add('SOLALISTINGID')
            self.SOLALISTINGID = value
        value = find_attr_value_('SOLADIVSOURCE', node)
        if value is not None and 'SOLADIVSOURCE' not in already_processed:
            already_processed.add('SOLADIVSOURCE')
            self.SOLADIVSOURCE = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType13.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
        elif nodeName_ == 'Points':
            obj_ = PointsType14.factory(parent_object_=self)
            obj_.build(child_)
            self.Points = obj_
            obj_.original_tagname_ = 'Points'
# end class DividendPointsType


class DataDateType13(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, Points=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.Points = Points
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType13)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType13.subclass:
            return DataDateType13.subclass(*args_, **kwargs_)
        else:
            return DataDateType13(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Points(self):
        return self.Points
    def set_Points(self, Points):
        self.Points = Points
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.Points is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType13', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType13')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType13')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType13', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType13'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType13', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Points is not None:
            self.Points.export(outfile, level, namespaceprefix_, name_='Points', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Points':
            obj_ = PointsType.factory(parent_object_=self)
            obj_.build(child_)
            self.Points = obj_
            obj_.original_tagname_ = 'Points'
# end class DataDateType13


class PointsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Bloomberg=None, CountryCode=None, DividendCurrency=None, DividendType=None, Divisor=None, ExchangeTicker=None, FxRate=None, GrossAmount=None, IndexQuantity=None, ListingCurrency=None, ListingID=None, Mic=None, Name=None, NetAmount=None, NetPoints=None, Other=None, Points=None, ProportionIncluded=None, ProviderDividendID=None, Ric=None, SecurityID=None, SecurityType=None, TaxRate=None, XdDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Bloomberg = Bloomberg
        self.CountryCode = CountryCode
        self.DividendCurrency = DividendCurrency
        self.DividendType = DividendType
        self.Divisor = Divisor
        self.ExchangeTicker = ExchangeTicker
        self.FxRate = FxRate
        self.GrossAmount = GrossAmount
        self.IndexQuantity = IndexQuantity
        self.ListingCurrency = ListingCurrency
        self.ListingID = ListingID
        self.Mic = Mic
        self.Name = Name
        self.NetAmount = NetAmount
        self.NetPoints = NetPoints
        self.Other = Other
        self.Points = Points
        self.ProportionIncluded = ProportionIncluded
        self.ProviderDividendID = ProviderDividendID
        self.Ric = Ric
        self.SecurityID = SecurityID
        self.SecurityType = SecurityType
        self.TaxRate = TaxRate
        self.XdDate = XdDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PointsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PointsType.subclass:
            return PointsType.subclass(*args_, **kwargs_)
        else:
            return PointsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Bloomberg(self):
        return self.Bloomberg
    def set_Bloomberg(self, Bloomberg):
        self.Bloomberg = Bloomberg
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def get_DividendCurrency(self):
        return self.DividendCurrency
    def set_DividendCurrency(self, DividendCurrency):
        self.DividendCurrency = DividendCurrency
    def get_DividendType(self):
        return self.DividendType
    def set_DividendType(self, DividendType):
        self.DividendType = DividendType
    def get_Divisor(self):
        return self.Divisor
    def set_Divisor(self, Divisor):
        self.Divisor = Divisor
    def get_ExchangeTicker(self):
        return self.ExchangeTicker
    def set_ExchangeTicker(self, ExchangeTicker):
        self.ExchangeTicker = ExchangeTicker
    def get_FxRate(self):
        return self.FxRate
    def set_FxRate(self, FxRate):
        self.FxRate = FxRate
    def get_GrossAmount(self):
        return self.GrossAmount
    def set_GrossAmount(self, GrossAmount):
        self.GrossAmount = GrossAmount
    def get_IndexQuantity(self):
        return self.IndexQuantity
    def set_IndexQuantity(self, IndexQuantity):
        self.IndexQuantity = IndexQuantity
    def get_ListingCurrency(self):
        return self.ListingCurrency
    def set_ListingCurrency(self, ListingCurrency):
        self.ListingCurrency = ListingCurrency
    def get_ListingID(self):
        return self.ListingID
    def set_ListingID(self, ListingID):
        self.ListingID = ListingID
    def get_Mic(self):
        return self.Mic
    def set_Mic(self, Mic):
        self.Mic = Mic
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_NetAmount(self):
        return self.NetAmount
    def set_NetAmount(self, NetAmount):
        self.NetAmount = NetAmount
    def get_NetPoints(self):
        return self.NetPoints
    def set_NetPoints(self, NetPoints):
        self.NetPoints = NetPoints
    def get_Other(self):
        return self.Other
    def set_Other(self, Other):
        self.Other = Other
    def get_Points(self):
        return self.Points
    def set_Points(self, Points):
        self.Points = Points
    def get_ProportionIncluded(self):
        return self.ProportionIncluded
    def set_ProportionIncluded(self, ProportionIncluded):
        self.ProportionIncluded = ProportionIncluded
    def get_ProviderDividendID(self):
        return self.ProviderDividendID
    def set_ProviderDividendID(self, ProviderDividendID):
        self.ProviderDividendID = ProviderDividendID
    def get_Ric(self):
        return self.Ric
    def set_Ric(self, Ric):
        self.Ric = Ric
    def get_SecurityID(self):
        return self.SecurityID
    def set_SecurityID(self, SecurityID):
        self.SecurityID = SecurityID
    def get_SecurityType(self):
        return self.SecurityType
    def set_SecurityType(self, SecurityType):
        self.SecurityType = SecurityType
    def get_TaxRate(self):
        return self.TaxRate
    def set_TaxRate(self, TaxRate):
        self.TaxRate = TaxRate
    def get_XdDate(self):
        return self.XdDate
    def set_XdDate(self, XdDate):
        self.XdDate = XdDate
    def hasContent_(self):
        if (
            self.Bloomberg is not None or
            self.CountryCode is not None or
            self.DividendCurrency is not None or
            self.DividendType is not None or
            self.Divisor is not None or
            self.ExchangeTicker is not None or
            self.FxRate is not None or
            self.GrossAmount is not None or
            self.IndexQuantity is not None or
            self.ListingCurrency is not None or
            self.ListingID is not None or
            self.Mic is not None or
            self.Name is not None or
            self.NetAmount is not None or
            self.NetPoints is not None or
            self.Other is not None or
            self.Points is not None or
            self.ProportionIncluded is not None or
            self.ProviderDividendID is not None or
            self.Ric is not None or
            self.SecurityID is not None or
            self.SecurityType is not None or
            self.TaxRate is not None or
            self.XdDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PointsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PointsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PointsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PointsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PointsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PointsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Bloomberg is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBloomberg>%s</%sBloomberg>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Bloomberg), input_name='Bloomberg')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
        if self.DividendCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividendCurrency>%s</%sDividendCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DividendCurrency), input_name='DividendCurrency')), namespaceprefix_ , eol_))
        if self.DividendType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividendType>%s</%sDividendType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DividendType), input_name='DividendType')), namespaceprefix_ , eol_))
        if self.Divisor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDivisor>%s</%sDivisor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Divisor), input_name='Divisor')), namespaceprefix_ , eol_))
        if self.ExchangeTicker is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExchangeTicker>%s</%sExchangeTicker>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExchangeTicker), input_name='ExchangeTicker')), namespaceprefix_ , eol_))
        if self.FxRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFxRate>%s</%sFxRate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FxRate), input_name='FxRate')), namespaceprefix_ , eol_))
        if self.GrossAmount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGrossAmount>%s</%sGrossAmount>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GrossAmount), input_name='GrossAmount')), namespaceprefix_ , eol_))
        if self.IndexQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndexQuantity>%s</%sIndexQuantity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IndexQuantity), input_name='IndexQuantity')), namespaceprefix_ , eol_))
        if self.ListingCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListingCurrency>%s</%sListingCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ListingCurrency), input_name='ListingCurrency')), namespaceprefix_ , eol_))
        if self.ListingID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListingID>%s</%sListingID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ListingID), input_name='ListingID')), namespaceprefix_ , eol_))
        if self.Mic is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMic>%s</%sMic>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Mic), input_name='Mic')), namespaceprefix_ , eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.NetAmount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNetAmount>%s</%sNetAmount>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NetAmount), input_name='NetAmount')), namespaceprefix_ , eol_))
        if self.NetPoints is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNetPoints>%s</%sNetPoints>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NetPoints), input_name='NetPoints')), namespaceprefix_ , eol_))
        if self.Other is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOther>%s</%sOther>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Other), input_name='Other')), namespaceprefix_ , eol_))
        if self.Points is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPoints>%s</%sPoints>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Points), input_name='Points')), namespaceprefix_ , eol_))
        if self.ProportionIncluded is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProportionIncluded>%s</%sProportionIncluded>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProportionIncluded), input_name='ProportionIncluded')), namespaceprefix_ , eol_))
        if self.ProviderDividendID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProviderDividendID>%s</%sProviderDividendID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProviderDividendID), input_name='ProviderDividendID')), namespaceprefix_ , eol_))
        if self.Ric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRic>%s</%sRic>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Ric), input_name='Ric')), namespaceprefix_ , eol_))
        if self.SecurityID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSecurityID>%s</%sSecurityID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SecurityID), input_name='SecurityID')), namespaceprefix_ , eol_))
        if self.SecurityType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSecurityType>%s</%sSecurityType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SecurityType), input_name='SecurityType')), namespaceprefix_ , eol_))
        if self.TaxRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxRate>%s</%sTaxRate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TaxRate), input_name='TaxRate')), namespaceprefix_ , eol_))
        if self.XdDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sXdDate>%s</%sXdDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.XdDate), input_name='XdDate')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Bloomberg':
            Bloomberg_ = child_.text
            Bloomberg_ = self.gds_validate_string(Bloomberg_, node, 'Bloomberg')
            self.Bloomberg = Bloomberg_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
        elif nodeName_ == 'DividendCurrency':
            DividendCurrency_ = child_.text
            DividendCurrency_ = self.gds_validate_string(DividendCurrency_, node, 'DividendCurrency')
            self.DividendCurrency = DividendCurrency_
        elif nodeName_ == 'DividendType':
            DividendType_ = child_.text
            DividendType_ = self.gds_validate_string(DividendType_, node, 'DividendType')
            self.DividendType = DividendType_
        elif nodeName_ == 'Divisor':
            Divisor_ = child_.text
            Divisor_ = self.gds_validate_string(Divisor_, node, 'Divisor')
            self.Divisor = Divisor_
        elif nodeName_ == 'ExchangeTicker':
            ExchangeTicker_ = child_.text
            ExchangeTicker_ = self.gds_validate_string(ExchangeTicker_, node, 'ExchangeTicker')
            self.ExchangeTicker = ExchangeTicker_
        elif nodeName_ == 'FxRate':
            FxRate_ = child_.text
            FxRate_ = self.gds_validate_string(FxRate_, node, 'FxRate')
            self.FxRate = FxRate_
        elif nodeName_ == 'GrossAmount':
            GrossAmount_ = child_.text
            GrossAmount_ = self.gds_validate_string(GrossAmount_, node, 'GrossAmount')
            self.GrossAmount = GrossAmount_
        elif nodeName_ == 'IndexQuantity':
            IndexQuantity_ = child_.text
            IndexQuantity_ = self.gds_validate_string(IndexQuantity_, node, 'IndexQuantity')
            self.IndexQuantity = IndexQuantity_
        elif nodeName_ == 'ListingCurrency':
            ListingCurrency_ = child_.text
            ListingCurrency_ = self.gds_validate_string(ListingCurrency_, node, 'ListingCurrency')
            self.ListingCurrency = ListingCurrency_
        elif nodeName_ == 'ListingID':
            ListingID_ = child_.text
            ListingID_ = self.gds_validate_string(ListingID_, node, 'ListingID')
            self.ListingID = ListingID_
        elif nodeName_ == 'Mic':
            Mic_ = child_.text
            Mic_ = self.gds_validate_string(Mic_, node, 'Mic')
            self.Mic = Mic_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'NetAmount':
            NetAmount_ = child_.text
            NetAmount_ = self.gds_validate_string(NetAmount_, node, 'NetAmount')
            self.NetAmount = NetAmount_
        elif nodeName_ == 'NetPoints':
            NetPoints_ = child_.text
            NetPoints_ = self.gds_validate_string(NetPoints_, node, 'NetPoints')
            self.NetPoints = NetPoints_
        elif nodeName_ == 'Other':
            Other_ = child_.text
            Other_ = self.gds_validate_string(Other_, node, 'Other')
            self.Other = Other_
        elif nodeName_ == 'Points':
            Points_ = child_.text
            Points_ = self.gds_validate_string(Points_, node, 'Points')
            self.Points = Points_
        elif nodeName_ == 'ProportionIncluded':
            ProportionIncluded_ = child_.text
            ProportionIncluded_ = self.gds_validate_string(ProportionIncluded_, node, 'ProportionIncluded')
            self.ProportionIncluded = ProportionIncluded_
        elif nodeName_ == 'ProviderDividendID':
            ProviderDividendID_ = child_.text
            ProviderDividendID_ = self.gds_validate_string(ProviderDividendID_, node, 'ProviderDividendID')
            self.ProviderDividendID = ProviderDividendID_
        elif nodeName_ == 'Ric':
            Ric_ = child_.text
            Ric_ = self.gds_validate_string(Ric_, node, 'Ric')
            self.Ric = Ric_
        elif nodeName_ == 'SecurityID':
            SecurityID_ = child_.text
            SecurityID_ = self.gds_validate_string(SecurityID_, node, 'SecurityID')
            self.SecurityID = SecurityID_
        elif nodeName_ == 'SecurityType':
            SecurityType_ = child_.text
            SecurityType_ = self.gds_validate_string(SecurityType_, node, 'SecurityType')
            self.SecurityType = SecurityType_
        elif nodeName_ == 'TaxRate':
            TaxRate_ = child_.text
            TaxRate_ = self.gds_validate_string(TaxRate_, node, 'TaxRate')
            self.TaxRate = TaxRate_
        elif nodeName_ == 'XdDate':
            XdDate_ = child_.text
            XdDate_ = self.gds_validate_string(XdDate_, node, 'XdDate')
            self.XdDate = XdDate_
# end class PointsType


class PointsType14(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CUSIP=None, ISIN=None, SEDOL=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.CUSIP = CUSIP
        self.ISIN = ISIN
        self.SEDOL = SEDOL
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PointsType14)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PointsType14.subclass:
            return PointsType14.subclass(*args_, **kwargs_)
        else:
            return PointsType14(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def hasContent_(self):
        if (
            self.CUSIP is not None or
            self.ISIN is not None or
            self.SEDOL is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PointsType14', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PointsType14')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PointsType14')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PointsType14', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PointsType14'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PointsType14', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CUSIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUSIP>%s</%sCUSIP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CUSIP), input_name='CUSIP')), namespaceprefix_ , eol_))
        if self.ISIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sISIN>%s</%sISIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ISIN), input_name='ISIN')), namespaceprefix_ , eol_))
        if self.SEDOL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSEDOL>%s</%sSEDOL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SEDOL), input_name='SEDOL')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CUSIP':
            CUSIP_ = child_.text
            CUSIP_ = self.gds_validate_string(CUSIP_, node, 'CUSIP')
            self.CUSIP = CUSIP_
        elif nodeName_ == 'ISIN':
            ISIN_ = child_.text
            ISIN_ = self.gds_validate_string(ISIN_, node, 'ISIN')
            self.ISIN = ISIN_
        elif nodeName_ == 'SEDOL':
            SEDOL_ = child_.text
            SEDOL_ = self.gds_validate_string(SEDOL_, node, 'SEDOL')
            self.SEDOL = SEDOL_
# end class PointsType14


class LicenseType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DATATYPE=None, RANK=None, SOLALICENSETYPE=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DATATYPE = _cast(None, DATATYPE)
        self.RANK = _cast(None, RANK)
        self.SOLALICENSETYPE = _cast(None, SOLALICENSETYPE)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LicenseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LicenseType.subclass:
            return LicenseType.subclass(*args_, **kwargs_)
        else:
            return LicenseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_SOLALICENSETYPE(self):
        return self.SOLALICENSETYPE
    def set_SOLALICENSETYPE(self, SOLALICENSETYPE):
        self.SOLALICENSETYPE = SOLALICENSETYPE
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LicenseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LicenseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LicenseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LicenseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LicenseType'):
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.SOLALICENSETYPE is not None and 'SOLALICENSETYPE' not in already_processed:
            already_processed.add('SOLALICENSETYPE')
            outfile.write(' SOLALICENSETYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SOLALICENSETYPE), input_name='SOLALICENSETYPE')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LicenseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('SOLALICENSETYPE', node)
        if value is not None and 'SOLALICENSETYPE' not in already_processed:
            already_processed.add('SOLALICENSETYPE')
            self.SOLALICENSETYPE = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType15.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class LicenseType


class DataDateType15(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, ETFs=None, Indices=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.ETFs = ETFs
        self.Indices = Indices
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType15)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType15.subclass:
            return DataDateType15.subclass(*args_, **kwargs_)
        else:
            return DataDateType15(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ETFs(self):
        return self.ETFs
    def set_ETFs(self, ETFs):
        self.ETFs = ETFs
    def get_Indices(self):
        return self.Indices
    def set_Indices(self, Indices):
        self.Indices = Indices
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.ETFs is not None or
            self.Indices is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType15', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType15')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType15')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType15', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType15'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType15', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ETFs is not None:
            self.ETFs.export(outfile, level, namespaceprefix_, name_='ETFs', pretty_print=pretty_print)
        if self.Indices is not None:
            self.Indices.export(outfile, level, namespaceprefix_, name_='Indices', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ETFs':
            obj_ = ETFsType.factory(parent_object_=self)
            obj_.build(child_)
            self.ETFs = obj_
            obj_.original_tagname_ = 'ETFs'
        elif nodeName_ == 'Indices':
            obj_ = IndicesType.factory(parent_object_=self)
            obj_.build(child_)
            self.Indices = obj_
            obj_.original_tagname_ = 'Indices'
# end class DataDateType15


class ETFsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ETF_BasketName=None, ETF_Count=None, ETF_Name=None, ETF_SecurityID=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ETF_BasketName = ETF_BasketName
        self.ETF_Count = ETF_Count
        self.ETF_Name = ETF_Name
        self.ETF_SecurityID = ETF_SecurityID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ETFsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ETFsType.subclass:
            return ETFsType.subclass(*args_, **kwargs_)
        else:
            return ETFsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ETF_BasketName(self):
        return self.ETF_BasketName
    def set_ETF_BasketName(self, ETF_BasketName):
        self.ETF_BasketName = ETF_BasketName
    def get_ETF_Count(self):
        return self.ETF_Count
    def set_ETF_Count(self, ETF_Count):
        self.ETF_Count = ETF_Count
    def get_ETF_Name(self):
        return self.ETF_Name
    def set_ETF_Name(self, ETF_Name):
        self.ETF_Name = ETF_Name
    def get_ETF_SecurityID(self):
        return self.ETF_SecurityID
    def set_ETF_SecurityID(self, ETF_SecurityID):
        self.ETF_SecurityID = ETF_SecurityID
    def hasContent_(self):
        if (
            self.ETF_BasketName is not None or
            self.ETF_Count is not None or
            self.ETF_Name is not None or
            self.ETF_SecurityID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ETFsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ETFsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ETFsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ETFsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ETFsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ETFsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ETF_BasketName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sETF_BasketName>%s</%sETF_BasketName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ETF_BasketName), input_name='ETF_BasketName')), namespaceprefix_ , eol_))
        if self.ETF_Count is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sETF_Count>%s</%sETF_Count>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ETF_Count), input_name='ETF_Count')), namespaceprefix_ , eol_))
        if self.ETF_Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sETF_Name>%s</%sETF_Name>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ETF_Name), input_name='ETF_Name')), namespaceprefix_ , eol_))
        if self.ETF_SecurityID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sETF_SecurityID>%s</%sETF_SecurityID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ETF_SecurityID), input_name='ETF_SecurityID')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ETF_BasketName':
            ETF_BasketName_ = child_.text
            ETF_BasketName_ = self.gds_validate_string(ETF_BasketName_, node, 'ETF_BasketName')
            self.ETF_BasketName = ETF_BasketName_
        elif nodeName_ == 'ETF_Count':
            ETF_Count_ = child_.text
            ETF_Count_ = self.gds_validate_string(ETF_Count_, node, 'ETF_Count')
            self.ETF_Count = ETF_Count_
        elif nodeName_ == 'ETF_Name':
            ETF_Name_ = child_.text
            ETF_Name_ = self.gds_validate_string(ETF_Name_, node, 'ETF_Name')
            self.ETF_Name = ETF_Name_
        elif nodeName_ == 'ETF_SecurityID':
            ETF_SecurityID_ = child_.text
            ETF_SecurityID_ = self.gds_validate_string(ETF_SecurityID_, node, 'ETF_SecurityID')
            self.ETF_SecurityID = ETF_SecurityID_
# end class ETFsType


class IndicesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Index_Count=None, Index_Name=None, Index_SecurityID=None, LicensedForDividends=None, LicensedForPoints=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Index_Count = Index_Count
        self.Index_Name = Index_Name
        self.Index_SecurityID = Index_SecurityID
        self.LicensedForDividends = LicensedForDividends
        self.LicensedForPoints = LicensedForPoints
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IndicesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IndicesType.subclass:
            return IndicesType.subclass(*args_, **kwargs_)
        else:
            return IndicesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Index_Count(self):
        return self.Index_Count
    def set_Index_Count(self, Index_Count):
        self.Index_Count = Index_Count
    def get_Index_Name(self):
        return self.Index_Name
    def set_Index_Name(self, Index_Name):
        self.Index_Name = Index_Name
    def get_Index_SecurityID(self):
        return self.Index_SecurityID
    def set_Index_SecurityID(self, Index_SecurityID):
        self.Index_SecurityID = Index_SecurityID
    def get_LicensedForDividends(self):
        return self.LicensedForDividends
    def set_LicensedForDividends(self, LicensedForDividends):
        self.LicensedForDividends = LicensedForDividends
    def get_LicensedForPoints(self):
        return self.LicensedForPoints
    def set_LicensedForPoints(self, LicensedForPoints):
        self.LicensedForPoints = LicensedForPoints
    def hasContent_(self):
        if (
            self.Index_Count is not None or
            self.Index_Name is not None or
            self.Index_SecurityID is not None or
            self.LicensedForDividends is not None or
            self.LicensedForPoints is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='IndicesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IndicesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IndicesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IndicesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='IndicesType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='IndicesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Index_Count is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndex_Count>%s</%sIndex_Count>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Index_Count), input_name='Index_Count')), namespaceprefix_ , eol_))
        if self.Index_Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndex_Name>%s</%sIndex_Name>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Index_Name), input_name='Index_Name')), namespaceprefix_ , eol_))
        if self.Index_SecurityID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndex_SecurityID>%s</%sIndex_SecurityID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Index_SecurityID), input_name='Index_SecurityID')), namespaceprefix_ , eol_))
        if self.LicensedForDividends is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicensedForDividends>%s</%sLicensedForDividends>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LicensedForDividends), input_name='LicensedForDividends')), namespaceprefix_ , eol_))
        if self.LicensedForPoints is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicensedForPoints>%s</%sLicensedForPoints>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LicensedForPoints), input_name='LicensedForPoints')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Index_Count':
            Index_Count_ = child_.text
            Index_Count_ = self.gds_validate_string(Index_Count_, node, 'Index_Count')
            self.Index_Count = Index_Count_
        elif nodeName_ == 'Index_Name':
            Index_Name_ = child_.text
            Index_Name_ = self.gds_validate_string(Index_Name_, node, 'Index_Name')
            self.Index_Name = Index_Name_
        elif nodeName_ == 'Index_SecurityID':
            Index_SecurityID_ = child_.text
            Index_SecurityID_ = self.gds_validate_string(Index_SecurityID_, node, 'Index_SecurityID')
            self.Index_SecurityID = Index_SecurityID_
        elif nodeName_ == 'LicensedForDividends':
            LicensedForDividends_ = child_.text
            LicensedForDividends_ = self.gds_validate_string(LicensedForDividends_, node, 'LicensedForDividends')
            self.LicensedForDividends = LicensedForDividends_
        elif nodeName_ == 'LicensedForPoints':
            LicensedForPoints_ = child_.text
            LicensedForPoints_ = self.gds_validate_string(LicensedForPoints_, node, 'LicensedForPoints')
            self.LicensedForPoints = LicensedForPoints_
# end class IndicesType


class NotificationType16(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DATATYPE=None, RANK=None, RANKTYPE=None, SECURITYID=None, SOLALISTINGID=None, SOLASTATUS=None, DataDate=None, Notifications=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DATATYPE = _cast(None, DATATYPE)
        self.RANK = _cast(None, RANK)
        self.RANKTYPE = _cast(None, RANKTYPE)
        self.SECURITYID = _cast(None, SECURITYID)
        self.SOLALISTINGID = _cast(None, SOLALISTINGID)
        self.SOLASTATUS = _cast(None, SOLASTATUS)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
        self.Notifications = Notifications
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotificationType16)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotificationType16.subclass:
            return NotificationType16.subclass(*args_, **kwargs_)
        else:
            return NotificationType16(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_Notifications(self):
        return self.Notifications
    def set_Notifications(self, Notifications):
        self.Notifications = Notifications
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_RANKTYPE(self):
        return self.RANKTYPE
    def set_RANKTYPE(self, RANKTYPE):
        self.RANKTYPE = RANKTYPE
    def get_SECURITYID(self):
        return self.SECURITYID
    def set_SECURITYID(self, SECURITYID):
        self.SECURITYID = SECURITYID
    def get_SOLALISTINGID(self):
        return self.SOLALISTINGID
    def set_SOLALISTINGID(self, SOLALISTINGID):
        self.SOLALISTINGID = SOLALISTINGID
    def get_SOLASTATUS(self):
        return self.SOLASTATUS
    def set_SOLASTATUS(self, SOLASTATUS):
        self.SOLASTATUS = SOLASTATUS
    def hasContent_(self):
        if (
            self.DataDate or
            self.Notifications is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NotificationType16', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NotificationType16')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NotificationType16')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NotificationType16', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NotificationType16'):
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.RANKTYPE is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            outfile.write(' RANKTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANKTYPE), input_name='RANKTYPE')), ))
        if self.SECURITYID is not None and 'SECURITYID' not in already_processed:
            already_processed.add('SECURITYID')
            outfile.write(' SECURITYID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SECURITYID), input_name='SECURITYID')), ))
        if self.SOLALISTINGID is not None and 'SOLALISTINGID' not in already_processed:
            already_processed.add('SOLALISTINGID')
            outfile.write(' SOLALISTINGID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SOLALISTINGID), input_name='SOLALISTINGID')), ))
        if self.SOLASTATUS is not None and 'SOLASTATUS' not in already_processed:
            already_processed.add('SOLASTATUS')
            outfile.write(' SOLASTATUS=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SOLASTATUS), input_name='SOLASTATUS')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NotificationType16', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
        if self.Notifications is not None:
            self.Notifications.export(outfile, level, namespaceprefix_, name_='Notifications', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('RANKTYPE', node)
        if value is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            self.RANKTYPE = value
        value = find_attr_value_('SECURITYID', node)
        if value is not None and 'SECURITYID' not in already_processed:
            already_processed.add('SECURITYID')
            self.SECURITYID = value
        value = find_attr_value_('SOLALISTINGID', node)
        if value is not None and 'SOLALISTINGID' not in already_processed:
            already_processed.add('SOLALISTINGID')
            self.SOLALISTINGID = value
        value = find_attr_value_('SOLASTATUS', node)
        if value is not None and 'SOLASTATUS' not in already_processed:
            already_processed.add('SOLASTATUS')
            self.SOLASTATUS = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType17.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
        elif nodeName_ == 'Notifications':
            obj_ = NotificationsType18.factory(parent_object_=self)
            obj_.build(child_)
            self.Notifications = obj_
            obj_.original_tagname_ = 'Notifications'
# end class NotificationType16


class DataDateType17(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, Notifications=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.Notifications = Notifications
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType17)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType17.subclass:
            return DataDateType17.subclass(*args_, **kwargs_)
        else:
            return DataDateType17(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Notifications(self):
        return self.Notifications
    def set_Notifications(self, Notifications):
        self.Notifications = Notifications
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.Notifications is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType17', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType17')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType17')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType17', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType17'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType17', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Notifications is not None:
            self.Notifications.export(outfile, level, namespaceprefix_, name_='Notifications', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Notifications':
            obj_ = NotificationsType.factory(parent_object_=self)
            obj_.build(child_)
            self.Notifications = obj_
            obj_.original_tagname_ = 'Notifications'
# end class DataDateType17


class NotificationsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Bloomberg=None, DateSent=None, EndDate=None, ExchangeTicker=None, ListingCurrency=None, ListingID=None, Message=None, Mic=None, Name=None, NotificationType=None, Other=None, Ric=None, SecurityID=None, SecurityType=None, Source=None, StartDate=None, Status=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Bloomberg = Bloomberg
        self.DateSent = DateSent
        if isinstance(EndDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EndDate, '%Y-%m-%d').date()
        else:
            initvalue_ = EndDate
        self.EndDate = initvalue_
        self.ExchangeTicker = ExchangeTicker
        self.ListingCurrency = ListingCurrency
        self.ListingID = ListingID
        self.Message = Message
        self.Mic = Mic
        self.Name = Name
        self.NotificationType = NotificationType
        self.Other = Other
        self.Ric = Ric
        self.SecurityID = SecurityID
        self.SecurityType = SecurityType
        self.Source = Source
        if isinstance(StartDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(StartDate, '%Y-%m-%d').date()
        else:
            initvalue_ = StartDate
        self.StartDate = initvalue_
        self.Status = Status
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotificationsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotificationsType.subclass:
            return NotificationsType.subclass(*args_, **kwargs_)
        else:
            return NotificationsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Bloomberg(self):
        return self.Bloomberg
    def set_Bloomberg(self, Bloomberg):
        self.Bloomberg = Bloomberg
    def get_DateSent(self):
        return self.DateSent
    def set_DateSent(self, DateSent):
        self.DateSent = DateSent
    def get_EndDate(self):
        return self.EndDate
    def set_EndDate(self, EndDate):
        self.EndDate = EndDate
    def get_ExchangeTicker(self):
        return self.ExchangeTicker
    def set_ExchangeTicker(self, ExchangeTicker):
        self.ExchangeTicker = ExchangeTicker
    def get_ListingCurrency(self):
        return self.ListingCurrency
    def set_ListingCurrency(self, ListingCurrency):
        self.ListingCurrency = ListingCurrency
    def get_ListingID(self):
        return self.ListingID
    def set_ListingID(self, ListingID):
        self.ListingID = ListingID
    def get_Message(self):
        return self.Message
    def set_Message(self, Message):
        self.Message = Message
    def get_Mic(self):
        return self.Mic
    def set_Mic(self, Mic):
        self.Mic = Mic
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_NotificationType(self):
        return self.NotificationType
    def set_NotificationType(self, NotificationType):
        self.NotificationType = NotificationType
    def get_Other(self):
        return self.Other
    def set_Other(self, Other):
        self.Other = Other
    def get_Ric(self):
        return self.Ric
    def set_Ric(self, Ric):
        self.Ric = Ric
    def get_SecurityID(self):
        return self.SecurityID
    def set_SecurityID(self, SecurityID):
        self.SecurityID = SecurityID
    def get_SecurityType(self):
        return self.SecurityType
    def set_SecurityType(self, SecurityType):
        self.SecurityType = SecurityType
    def get_Source(self):
        return self.Source
    def set_Source(self, Source):
        self.Source = Source
    def get_StartDate(self):
        return self.StartDate
    def set_StartDate(self, StartDate):
        self.StartDate = StartDate
    def get_Status(self):
        return self.Status
    def set_Status(self, Status):
        self.Status = Status
    def hasContent_(self):
        if (
            self.Bloomberg is not None or
            self.DateSent is not None or
            self.EndDate is not None or
            self.ExchangeTicker is not None or
            self.ListingCurrency is not None or
            self.ListingID is not None or
            self.Message is not None or
            self.Mic is not None or
            self.Name is not None or
            self.NotificationType is not None or
            self.Other is not None or
            self.Ric is not None or
            self.SecurityID is not None or
            self.SecurityType is not None or
            self.Source is not None or
            self.StartDate is not None or
            self.Status is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NotificationsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NotificationsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NotificationsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NotificationsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NotificationsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NotificationsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Bloomberg is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBloomberg>%s</%sBloomberg>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Bloomberg), input_name='Bloomberg')), namespaceprefix_ , eol_))
        if self.DateSent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateSent>%s</%sDateSent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DateSent), input_name='DateSent')), namespaceprefix_ , eol_))
        if self.EndDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEndDate>%s</%sEndDate>%s' % (namespaceprefix_ , self.gds_format_date(self.EndDate, input_name='EndDate'), namespaceprefix_ , eol_))
        if self.ExchangeTicker is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExchangeTicker>%s</%sExchangeTicker>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExchangeTicker), input_name='ExchangeTicker')), namespaceprefix_ , eol_))
        if self.ListingCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListingCurrency>%s</%sListingCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ListingCurrency), input_name='ListingCurrency')), namespaceprefix_ , eol_))
        if self.ListingID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListingID>%s</%sListingID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ListingID), input_name='ListingID')), namespaceprefix_ , eol_))
        if self.Message is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMessage>%s</%sMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Message), input_name='Message')), namespaceprefix_ , eol_))
        if self.Mic is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMic>%s</%sMic>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Mic), input_name='Mic')), namespaceprefix_ , eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.NotificationType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNotificationType>%s</%sNotificationType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NotificationType), input_name='NotificationType')), namespaceprefix_ , eol_))
        if self.Other is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOther>%s</%sOther>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Other), input_name='Other')), namespaceprefix_ , eol_))
        if self.Ric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRic>%s</%sRic>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Ric), input_name='Ric')), namespaceprefix_ , eol_))
        if self.SecurityID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSecurityID>%s</%sSecurityID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SecurityID), input_name='SecurityID')), namespaceprefix_ , eol_))
        if self.SecurityType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSecurityType>%s</%sSecurityType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SecurityType), input_name='SecurityType')), namespaceprefix_ , eol_))
        if self.Source is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSource>%s</%sSource>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Source), input_name='Source')), namespaceprefix_ , eol_))
        if self.StartDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStartDate>%s</%sStartDate>%s' % (namespaceprefix_ , self.gds_format_date(self.StartDate, input_name='StartDate'), namespaceprefix_ , eol_))
        if self.Status is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatus>%s</%sStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Status), input_name='Status')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Bloomberg':
            Bloomberg_ = child_.text
            Bloomberg_ = self.gds_validate_string(Bloomberg_, node, 'Bloomberg')
            self.Bloomberg = Bloomberg_
        elif nodeName_ == 'DateSent':
            DateSent_ = child_.text
            DateSent_ = self.gds_validate_string(DateSent_, node, 'DateSent')
            self.DateSent = DateSent_
        elif nodeName_ == 'EndDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.EndDate = dval_
        elif nodeName_ == 'ExchangeTicker':
            ExchangeTicker_ = child_.text
            ExchangeTicker_ = self.gds_validate_string(ExchangeTicker_, node, 'ExchangeTicker')
            self.ExchangeTicker = ExchangeTicker_
        elif nodeName_ == 'ListingCurrency':
            ListingCurrency_ = child_.text
            ListingCurrency_ = self.gds_validate_string(ListingCurrency_, node, 'ListingCurrency')
            self.ListingCurrency = ListingCurrency_
        elif nodeName_ == 'ListingID':
            ListingID_ = child_.text
            ListingID_ = self.gds_validate_string(ListingID_, node, 'ListingID')
            self.ListingID = ListingID_
        elif nodeName_ == 'Message':
            Message_ = child_.text
            Message_ = self.gds_validate_string(Message_, node, 'Message')
            self.Message = Message_
        elif nodeName_ == 'Mic':
            Mic_ = child_.text
            Mic_ = self.gds_validate_string(Mic_, node, 'Mic')
            self.Mic = Mic_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'NotificationType':
            NotificationType_ = child_.text
            NotificationType_ = self.gds_validate_string(NotificationType_, node, 'NotificationType')
            self.NotificationType = NotificationType_
        elif nodeName_ == 'Other':
            Other_ = child_.text
            Other_ = self.gds_validate_string(Other_, node, 'Other')
            self.Other = Other_
        elif nodeName_ == 'Ric':
            Ric_ = child_.text
            Ric_ = self.gds_validate_string(Ric_, node, 'Ric')
            self.Ric = Ric_
        elif nodeName_ == 'SecurityID':
            SecurityID_ = child_.text
            SecurityID_ = self.gds_validate_string(SecurityID_, node, 'SecurityID')
            self.SecurityID = SecurityID_
        elif nodeName_ == 'SecurityType':
            SecurityType_ = child_.text
            SecurityType_ = self.gds_validate_string(SecurityType_, node, 'SecurityType')
            self.SecurityType = SecurityType_
        elif nodeName_ == 'Source':
            Source_ = child_.text
            Source_ = self.gds_validate_string(Source_, node, 'Source')
            self.Source = Source_
        elif nodeName_ == 'StartDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.StartDate = dval_
        elif nodeName_ == 'Status':
            Status_ = child_.text
            Status_ = self.gds_validate_string(Status_, node, 'Status')
            self.Status = Status_
# end class NotificationsType


class NotificationsType18(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CUSIP=None, ISIN=None, SEDOL=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.CUSIP = CUSIP
        self.ISIN = ISIN
        self.SEDOL = SEDOL
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotificationsType18)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotificationsType18.subclass:
            return NotificationsType18.subclass(*args_, **kwargs_)
        else:
            return NotificationsType18(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def hasContent_(self):
        if (
            self.CUSIP is not None or
            self.ISIN is not None or
            self.SEDOL is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NotificationsType18', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NotificationsType18')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NotificationsType18')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NotificationsType18', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NotificationsType18'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NotificationsType18', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CUSIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUSIP>%s</%sCUSIP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CUSIP), input_name='CUSIP')), namespaceprefix_ , eol_))
        if self.ISIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sISIN>%s</%sISIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ISIN), input_name='ISIN')), namespaceprefix_ , eol_))
        if self.SEDOL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSEDOL>%s</%sSEDOL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SEDOL), input_name='SEDOL')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CUSIP':
            CUSIP_ = child_.text
            CUSIP_ = self.gds_validate_string(CUSIP_, node, 'CUSIP')
            self.CUSIP = CUSIP_
        elif nodeName_ == 'ISIN':
            ISIN_ = child_.text
            ISIN_ = self.gds_validate_string(ISIN_, node, 'ISIN')
            self.ISIN = ISIN_
        elif nodeName_ == 'SEDOL':
            SEDOL_ = child_.text
            SEDOL_ = self.gds_validate_string(SEDOL_, node, 'SEDOL')
            self.SEDOL = SEDOL_
# end class NotificationsType18


class ProviderType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DATATYPE=None, SOLAPROVIDERID=None, RANK=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DATATYPE = _cast(None, DATATYPE)
        self.SOLAPROVIDERID = _cast(None, SOLAPROVIDERID)
        self.RANK = _cast(None, RANK)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProviderType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProviderType.subclass:
            return ProviderType.subclass(*args_, **kwargs_)
        else:
            return ProviderType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_SOLAPROVIDERID(self):
        return self.SOLAPROVIDERID
    def set_SOLAPROVIDERID(self, SOLAPROVIDERID):
        self.SOLAPROVIDERID = SOLAPROVIDERID
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ProviderType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProviderType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProviderType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProviderType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ProviderType'):
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.SOLAPROVIDERID is not None and 'SOLAPROVIDERID' not in already_processed:
            already_processed.add('SOLAPROVIDERID')
            outfile.write(' SOLAPROVIDERID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SOLAPROVIDERID), input_name='SOLAPROVIDERID')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ProviderType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('SOLAPROVIDERID', node)
        if value is not None and 'SOLAPROVIDERID' not in already_processed:
            already_processed.add('SOLAPROVIDERID')
            self.SOLAPROVIDERID = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType19.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class ProviderType


class DataDateType19(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType19)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType19.subclass:
            return DataDateType19.subclass(*args_, **kwargs_)
        else:
            return DataDateType19(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType19', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType19')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType19')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType19', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType19'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType19', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType19


class GeneralType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Count=None, Id=None, Name=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Count = Count
        self.Id = Id
        self.Name = Name
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType.subclass:
            return GeneralType.subclass(*args_, **kwargs_)
        else:
            return GeneralType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Count(self):
        return self.Count
    def set_Count(self, Count):
        self.Count = Count
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def hasContent_(self):
        if (
            self.Count is not None or
            self.Id is not None or
            self.Name is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Count is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCount>%s</%sCount>%s' % (namespaceprefix_ , self.gds_format_float(self.Count, input_name='Count'), namespaceprefix_ , eol_))
        if self.Id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sId>%s</%sId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), namespaceprefix_ , eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Count' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Count')
            self.Count = fval_
        elif nodeName_ == 'Id':
            Id_ = child_.text
            Id_ = self.gds_validate_string(Id_, node, 'Id')
            self.Id = Id_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
# end class GeneralType


class SearchType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DATATYPE=None, RANK=None, SOLASEARCHTERM=None, SOLAPROVIDERTERM=None, DataDate=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DATATYPE = _cast(None, DATATYPE)
        self.RANK = _cast(None, RANK)
        self.SOLASEARCHTERM = _cast(None, SOLASEARCHTERM)
        self.SOLAPROVIDERTERM = _cast(None, SOLAPROVIDERTERM)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SearchType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SearchType.subclass:
            return SearchType.subclass(*args_, **kwargs_)
        else:
            return SearchType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_SOLASEARCHTERM(self):
        return self.SOLASEARCHTERM
    def set_SOLASEARCHTERM(self, SOLASEARCHTERM):
        self.SOLASEARCHTERM = SOLASEARCHTERM
    def get_SOLAPROVIDERTERM(self):
        return self.SOLAPROVIDERTERM
    def set_SOLAPROVIDERTERM(self, SOLAPROVIDERTERM):
        self.SOLAPROVIDERTERM = SOLAPROVIDERTERM
    def hasContent_(self):
        if (
            self.DataDate or
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SearchType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SearchType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SearchType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SearchType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SearchType'):
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.SOLASEARCHTERM is not None and 'SOLASEARCHTERM' not in already_processed:
            already_processed.add('SOLASEARCHTERM')
            outfile.write(' SOLASEARCHTERM=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SOLASEARCHTERM), input_name='SOLASEARCHTERM')), ))
        if self.SOLAPROVIDERTERM is not None and 'SOLAPROVIDERTERM' not in already_processed:
            already_processed.add('SOLAPROVIDERTERM')
            outfile.write(' SOLAPROVIDERTERM=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SOLAPROVIDERTERM), input_name='SOLAPROVIDERTERM')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SearchType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('SOLASEARCHTERM', node)
        if value is not None and 'SOLASEARCHTERM' not in already_processed:
            already_processed.add('SOLASEARCHTERM')
            self.SOLASEARCHTERM = value
        value = find_attr_value_('SOLAPROVIDERTERM', node)
        if value is not None and 'SOLAPROVIDERTERM' not in already_processed:
            already_processed.add('SOLAPROVIDERTERM')
            self.SOLAPROVIDERTERM = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType20.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
        elif nodeName_ == 'General':
            obj_ = GeneralType22.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class SearchType


class DataDateType20(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType20)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType20.subclass:
            return DataDateType20.subclass(*args_, **kwargs_)
        else:
            return DataDateType20(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType20', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType20')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType20')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType20', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType20'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType20', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType21.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType20


class GeneralType21(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Bloomberg=None, CurrencyCode=None, ExchangeTicker=None, ListingID=None, Mic=None, Name=None, Other=None, PrimaryListingID=None, Provider=None, ProviderName=None, Ric=None, SecurityID=None, SecurityType=None, Variant=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Bloomberg = Bloomberg
        self.CurrencyCode = CurrencyCode
        self.ExchangeTicker = ExchangeTicker
        self.ListingID = ListingID
        self.Mic = Mic
        self.Name = Name
        self.Other = Other
        self.PrimaryListingID = PrimaryListingID
        self.Provider = Provider
        self.ProviderName = ProviderName
        self.Ric = Ric
        self.SecurityID = SecurityID
        self.SecurityType = SecurityType
        self.Variant = Variant
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType21)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType21.subclass:
            return GeneralType21.subclass(*args_, **kwargs_)
        else:
            return GeneralType21(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Bloomberg(self):
        return self.Bloomberg
    def set_Bloomberg(self, Bloomberg):
        self.Bloomberg = Bloomberg
    def get_CurrencyCode(self):
        return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode):
        self.CurrencyCode = CurrencyCode
    def get_ExchangeTicker(self):
        return self.ExchangeTicker
    def set_ExchangeTicker(self, ExchangeTicker):
        self.ExchangeTicker = ExchangeTicker
    def get_ListingID(self):
        return self.ListingID
    def set_ListingID(self, ListingID):
        self.ListingID = ListingID
    def get_Mic(self):
        return self.Mic
    def set_Mic(self, Mic):
        self.Mic = Mic
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_Other(self):
        return self.Other
    def set_Other(self, Other):
        self.Other = Other
    def get_PrimaryListingID(self):
        return self.PrimaryListingID
    def set_PrimaryListingID(self, PrimaryListingID):
        self.PrimaryListingID = PrimaryListingID
    def get_Provider(self):
        return self.Provider
    def set_Provider(self, Provider):
        self.Provider = Provider
    def get_ProviderName(self):
        return self.ProviderName
    def set_ProviderName(self, ProviderName):
        self.ProviderName = ProviderName
    def get_Ric(self):
        return self.Ric
    def set_Ric(self, Ric):
        self.Ric = Ric
    def get_SecurityID(self):
        return self.SecurityID
    def set_SecurityID(self, SecurityID):
        self.SecurityID = SecurityID
    def get_SecurityType(self):
        return self.SecurityType
    def set_SecurityType(self, SecurityType):
        self.SecurityType = SecurityType
    def get_Variant(self):
        return self.Variant
    def set_Variant(self, Variant):
        self.Variant = Variant
    def hasContent_(self):
        if (
            self.Bloomberg is not None or
            self.CurrencyCode is not None or
            self.ExchangeTicker is not None or
            self.ListingID is not None or
            self.Mic is not None or
            self.Name is not None or
            self.Other is not None or
            self.PrimaryListingID is not None or
            self.Provider is not None or
            self.ProviderName is not None or
            self.Ric is not None or
            self.SecurityID is not None or
            self.SecurityType is not None or
            self.Variant is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType21', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType21')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType21')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType21', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType21'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType21', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Bloomberg is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBloomberg>%s</%sBloomberg>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Bloomberg), input_name='Bloomberg')), namespaceprefix_ , eol_))
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyCode>%s</%sCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), namespaceprefix_ , eol_))
        if self.ExchangeTicker is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExchangeTicker>%s</%sExchangeTicker>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExchangeTicker), input_name='ExchangeTicker')), namespaceprefix_ , eol_))
        if self.ListingID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListingID>%s</%sListingID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ListingID), input_name='ListingID')), namespaceprefix_ , eol_))
        if self.Mic is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMic>%s</%sMic>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Mic), input_name='Mic')), namespaceprefix_ , eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.Other is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOther>%s</%sOther>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Other), input_name='Other')), namespaceprefix_ , eol_))
        if self.PrimaryListingID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrimaryListingID>%s</%sPrimaryListingID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrimaryListingID), input_name='PrimaryListingID')), namespaceprefix_ , eol_))
        if self.Provider is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProvider>%s</%sProvider>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Provider), input_name='Provider')), namespaceprefix_ , eol_))
        if self.ProviderName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProviderName>%s</%sProviderName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProviderName), input_name='ProviderName')), namespaceprefix_ , eol_))
        if self.Ric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRic>%s</%sRic>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Ric), input_name='Ric')), namespaceprefix_ , eol_))
        if self.SecurityID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSecurityID>%s</%sSecurityID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SecurityID), input_name='SecurityID')), namespaceprefix_ , eol_))
        if self.SecurityType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSecurityType>%s</%sSecurityType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SecurityType), input_name='SecurityType')), namespaceprefix_ , eol_))
        if self.Variant is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVariant>%s</%sVariant>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Variant), input_name='Variant')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Bloomberg':
            Bloomberg_ = child_.text
            Bloomberg_ = self.gds_validate_string(Bloomberg_, node, 'Bloomberg')
            self.Bloomberg = Bloomberg_
        elif nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'ExchangeTicker':
            ExchangeTicker_ = child_.text
            ExchangeTicker_ = self.gds_validate_string(ExchangeTicker_, node, 'ExchangeTicker')
            self.ExchangeTicker = ExchangeTicker_
        elif nodeName_ == 'ListingID':
            ListingID_ = child_.text
            ListingID_ = self.gds_validate_string(ListingID_, node, 'ListingID')
            self.ListingID = ListingID_
        elif nodeName_ == 'Mic':
            Mic_ = child_.text
            Mic_ = self.gds_validate_string(Mic_, node, 'Mic')
            self.Mic = Mic_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'Other':
            Other_ = child_.text
            Other_ = self.gds_validate_string(Other_, node, 'Other')
            self.Other = Other_
        elif nodeName_ == 'PrimaryListingID':
            PrimaryListingID_ = child_.text
            PrimaryListingID_ = self.gds_validate_string(PrimaryListingID_, node, 'PrimaryListingID')
            self.PrimaryListingID = PrimaryListingID_
        elif nodeName_ == 'Provider':
            Provider_ = child_.text
            Provider_ = self.gds_validate_string(Provider_, node, 'Provider')
            self.Provider = Provider_
        elif nodeName_ == 'ProviderName':
            ProviderName_ = child_.text
            ProviderName_ = self.gds_validate_string(ProviderName_, node, 'ProviderName')
            self.ProviderName = ProviderName_
        elif nodeName_ == 'Ric':
            Ric_ = child_.text
            Ric_ = self.gds_validate_string(Ric_, node, 'Ric')
            self.Ric = Ric_
        elif nodeName_ == 'SecurityID':
            SecurityID_ = child_.text
            SecurityID_ = self.gds_validate_string(SecurityID_, node, 'SecurityID')
            self.SecurityID = SecurityID_
        elif nodeName_ == 'SecurityType':
            SecurityType_ = child_.text
            SecurityType_ = self.gds_validate_string(SecurityType_, node, 'SecurityType')
            self.SecurityType = SecurityType_
        elif nodeName_ == 'Variant':
            Variant_ = child_.text
            Variant_ = self.gds_validate_string(Variant_, node, 'Variant')
            self.Variant = Variant_
# end class GeneralType21


class GeneralType22(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CUSIP=None, EXCHANGE=None, ISIN=None, SEDOL=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.CUSIP = CUSIP
        self.EXCHANGE = EXCHANGE
        self.ISIN = ISIN
        self.SEDOL = SEDOL
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType22)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType22.subclass:
            return GeneralType22.subclass(*args_, **kwargs_)
        else:
            return GeneralType22(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_EXCHANGE(self):
        return self.EXCHANGE
    def set_EXCHANGE(self, EXCHANGE):
        self.EXCHANGE = EXCHANGE
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def hasContent_(self):
        if (
            self.CUSIP is not None or
            self.EXCHANGE is not None or
            self.ISIN is not None or
            self.SEDOL is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType22', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType22')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType22')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType22', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType22'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType22', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CUSIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUSIP>%s</%sCUSIP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CUSIP), input_name='CUSIP')), namespaceprefix_ , eol_))
        if self.EXCHANGE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEXCHANGE>%s</%sEXCHANGE>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EXCHANGE), input_name='EXCHANGE')), namespaceprefix_ , eol_))
        if self.ISIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sISIN>%s</%sISIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ISIN), input_name='ISIN')), namespaceprefix_ , eol_))
        if self.SEDOL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSEDOL>%s</%sSEDOL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SEDOL), input_name='SEDOL')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CUSIP':
            CUSIP_ = child_.text
            CUSIP_ = self.gds_validate_string(CUSIP_, node, 'CUSIP')
            self.CUSIP = CUSIP_
        elif nodeName_ == 'EXCHANGE':
            EXCHANGE_ = child_.text
            EXCHANGE_ = self.gds_validate_string(EXCHANGE_, node, 'EXCHANGE')
            self.EXCHANGE = EXCHANGE_
        elif nodeName_ == 'ISIN':
            ISIN_ = child_.text
            ISIN_ = self.gds_validate_string(ISIN_, node, 'ISIN')
            self.ISIN = ISIN_
        elif nodeName_ == 'SEDOL':
            SEDOL_ = child_.text
            SEDOL_ = self.gds_validate_string(SEDOL_, node, 'SEDOL')
            self.SEDOL = SEDOL_
# end class GeneralType22


class ShortSqueezeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ANY=None, CUSIP=None, DATATYPE=None, DXLID=None, INSTRUMENTTYPE=None, ISIN=None, QUICK=None, SEDOL=None, TICKER=None, TICKER_CODE=None, INSTRUMENTID=None, FILTER=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ANY = _cast(None, ANY)
        self.CUSIP = _cast(None, CUSIP)
        self.DATATYPE = _cast(None, DATATYPE)
        self.DXLID = _cast(None, DXLID)
        self.INSTRUMENTTYPE = _cast(None, INSTRUMENTTYPE)
        self.ISIN = _cast(None, ISIN)
        self.QUICK = _cast(None, QUICK)
        self.SEDOL = _cast(None, SEDOL)
        self.TICKER = _cast(None, TICKER)
        self.TICKER_CODE = _cast(None, TICKER_CODE)
        self.INSTRUMENTID = _cast(None, INSTRUMENTID)
        self.FILTER = _cast(None, FILTER)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShortSqueezeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShortSqueezeType.subclass:
            return ShortSqueezeType.subclass(*args_, **kwargs_)
        else:
            return ShortSqueezeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_ANY(self):
        return self.ANY
    def set_ANY(self, ANY):
        self.ANY = ANY
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_INSTRUMENTTYPE(self):
        return self.INSTRUMENTTYPE
    def set_INSTRUMENTTYPE(self, INSTRUMENTTYPE):
        self.INSTRUMENTTYPE = INSTRUMENTTYPE
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def get_TICKER_CODE(self):
        return self.TICKER_CODE
    def set_TICKER_CODE(self, TICKER_CODE):
        self.TICKER_CODE = TICKER_CODE
    def get_INSTRUMENTID(self):
        return self.INSTRUMENTID
    def set_INSTRUMENTID(self, INSTRUMENTID):
        self.INSTRUMENTID = INSTRUMENTID
    def get_FILTER(self):
        return self.FILTER
    def set_FILTER(self, FILTER):
        self.FILTER = FILTER
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShortSqueezeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShortSqueezeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShortSqueezeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShortSqueezeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShortSqueezeType'):
        if self.ANY is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            outfile.write(' ANY=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ANY), input_name='ANY')), ))
        if self.CUSIP is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            outfile.write(' CUSIP=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.CUSIP), input_name='CUSIP')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.DXLID is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            outfile.write(' DXLID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DXLID), input_name='DXLID')), ))
        if self.INSTRUMENTTYPE is not None and 'INSTRUMENTTYPE' not in already_processed:
            already_processed.add('INSTRUMENTTYPE')
            outfile.write(' INSTRUMENTTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.INSTRUMENTTYPE), input_name='INSTRUMENTTYPE')), ))
        if self.ISIN is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            outfile.write(' ISIN=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ISIN), input_name='ISIN')), ))
        if self.QUICK is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            outfile.write(' QUICK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.QUICK), input_name='QUICK')), ))
        if self.SEDOL is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            outfile.write(' SEDOL=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SEDOL), input_name='SEDOL')), ))
        if self.TICKER is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            outfile.write(' TICKER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER), input_name='TICKER')), ))
        if self.TICKER_CODE is not None and 'TICKER_CODE' not in already_processed:
            already_processed.add('TICKER_CODE')
            outfile.write(' TICKER.CODE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER_CODE), input_name='TICKER.CODE')), ))
        if self.INSTRUMENTID is not None and 'INSTRUMENTID' not in already_processed:
            already_processed.add('INSTRUMENTID')
            outfile.write(' INSTRUMENTID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.INSTRUMENTID), input_name='INSTRUMENTID')), ))
        if self.FILTER is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            outfile.write(' FILTER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.FILTER), input_name='FILTER')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShortSqueezeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ANY', node)
        if value is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            self.ANY = value
        value = find_attr_value_('CUSIP', node)
        if value is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            self.CUSIP = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('DXLID', node)
        if value is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            self.DXLID = value
        value = find_attr_value_('INSTRUMENTTYPE', node)
        if value is not None and 'INSTRUMENTTYPE' not in already_processed:
            already_processed.add('INSTRUMENTTYPE')
            self.INSTRUMENTTYPE = value
        value = find_attr_value_('ISIN', node)
        if value is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            self.ISIN = value
        value = find_attr_value_('QUICK', node)
        if value is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            self.QUICK = value
        value = find_attr_value_('SEDOL', node)
        if value is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            self.SEDOL = value
        value = find_attr_value_('TICKER', node)
        if value is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            self.TICKER = value
        value = find_attr_value_('TICKER.CODE', node)
        if value is not None and 'TICKER.CODE' not in already_processed:
            already_processed.add('TICKER.CODE')
            self.TICKER_CODE = value
        value = find_attr_value_('INSTRUMENTID', node)
        if value is not None and 'INSTRUMENTID' not in already_processed:
            already_processed.add('INSTRUMENTID')
            self.INSTRUMENTID = value
        value = find_attr_value_('FILTER', node)
        if value is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            self.FILTER = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType23.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class ShortSqueezeType


class DataDateType23(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, Factors=None, General=None, Model=None, ProfitandLossBins=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.Factors = Factors
        self.General = General
        self.Model = Model
        self.ProfitandLossBins = ProfitandLossBins
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType23)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType23.subclass:
            return DataDateType23.subclass(*args_, **kwargs_)
        else:
            return DataDateType23(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Factors(self):
        return self.Factors
    def set_Factors(self, Factors):
        self.Factors = Factors
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_Model(self):
        return self.Model
    def set_Model(self, Model):
        self.Model = Model
    def get_ProfitandLossBins(self):
        return self.ProfitandLossBins
    def set_ProfitandLossBins(self, ProfitandLossBins):
        self.ProfitandLossBins = ProfitandLossBins
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.Factors is not None or
            self.General is not None or
            self.Model is not None or
            self.ProfitandLossBins is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType23', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType23')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType23')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType23', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType23'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType23', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Factors is not None:
            self.Factors.export(outfile, level, namespaceprefix_, name_='Factors', pretty_print=pretty_print)
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
        if self.Model is not None:
            self.Model.export(outfile, level, namespaceprefix_, name_='Model', pretty_print=pretty_print)
        if self.ProfitandLossBins is not None:
            self.ProfitandLossBins.export(outfile, level, namespaceprefix_, name_='ProfitandLossBins', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Factors':
            obj_ = FactorsType.factory(parent_object_=self)
            obj_.build(child_)
            self.Factors = obj_
            obj_.original_tagname_ = 'Factors'
        elif nodeName_ == 'General':
            obj_ = GeneralType24.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
        elif nodeName_ == 'Model':
            obj_ = ModelType.factory(parent_object_=self)
            obj_.build(child_)
            self.Model = obj_
            obj_.original_tagname_ = 'Model'
        elif nodeName_ == 'ProfitandLossBins':
            obj_ = ProfitandLossBinsType.factory(parent_object_=self)
            obj_.build(child_)
            self.ProfitandLossBins = obj_
            obj_.original_tagname_ = 'ProfitandLossBins'
# end class DataDateType23


class FactorsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BreakevenPrice=None, DailyHigh=None, DailyLow=None, Delta=None, NewPositions=None, OutOfMoneyDaysToCover=None, OutOfMoneyPct=None, ProfitandLoss=None, ProfitandLossImpact=None, RelativeShortSentiment=None, TransactionDuration=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.BreakevenPrice = BreakevenPrice
        self.DailyHigh = DailyHigh
        self.DailyLow = DailyLow
        if Delta is None:
            self.Delta = []
        else:
            self.Delta = Delta
        self.NewPositions = NewPositions
        self.OutOfMoneyDaysToCover = OutOfMoneyDaysToCover
        self.OutOfMoneyPct = OutOfMoneyPct
        self.ProfitandLoss = ProfitandLoss
        self.ProfitandLossImpact = ProfitandLossImpact
        self.RelativeShortSentiment = RelativeShortSentiment
        self.TransactionDuration = TransactionDuration
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FactorsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FactorsType.subclass:
            return FactorsType.subclass(*args_, **kwargs_)
        else:
            return FactorsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BreakevenPrice(self):
        return self.BreakevenPrice
    def set_BreakevenPrice(self, BreakevenPrice):
        self.BreakevenPrice = BreakevenPrice
    def get_DailyHigh(self):
        return self.DailyHigh
    def set_DailyHigh(self, DailyHigh):
        self.DailyHigh = DailyHigh
    def get_DailyLow(self):
        return self.DailyLow
    def set_DailyLow(self, DailyLow):
        self.DailyLow = DailyLow
    def get_Delta(self):
        return self.Delta
    def set_Delta(self, Delta):
        self.Delta = Delta
    def add_Delta(self, value):
        self.Delta.append(value)
    def add_Delta(self, value):
        self.Delta.append(value)
    def insert_Delta_at(self, index, value):
        self.Delta.insert(index, value)
    def replace_Delta_at(self, index, value):
        self.Delta[index] = value
    def get_NewPositions(self):
        return self.NewPositions
    def set_NewPositions(self, NewPositions):
        self.NewPositions = NewPositions
    def get_OutOfMoneyDaysToCover(self):
        return self.OutOfMoneyDaysToCover
    def set_OutOfMoneyDaysToCover(self, OutOfMoneyDaysToCover):
        self.OutOfMoneyDaysToCover = OutOfMoneyDaysToCover
    def get_OutOfMoneyPct(self):
        return self.OutOfMoneyPct
    def set_OutOfMoneyPct(self, OutOfMoneyPct):
        self.OutOfMoneyPct = OutOfMoneyPct
    def get_ProfitandLoss(self):
        return self.ProfitandLoss
    def set_ProfitandLoss(self, ProfitandLoss):
        self.ProfitandLoss = ProfitandLoss
    def get_ProfitandLossImpact(self):
        return self.ProfitandLossImpact
    def set_ProfitandLossImpact(self, ProfitandLossImpact):
        self.ProfitandLossImpact = ProfitandLossImpact
    def get_RelativeShortSentiment(self):
        return self.RelativeShortSentiment
    def set_RelativeShortSentiment(self, RelativeShortSentiment):
        self.RelativeShortSentiment = RelativeShortSentiment
    def get_TransactionDuration(self):
        return self.TransactionDuration
    def set_TransactionDuration(self, TransactionDuration):
        self.TransactionDuration = TransactionDuration
    def hasContent_(self):
        if (
            self.BreakevenPrice is not None or
            self.DailyHigh is not None or
            self.DailyLow is not None or
            self.Delta or
            self.NewPositions is not None or
            self.OutOfMoneyDaysToCover is not None or
            self.OutOfMoneyPct is not None or
            self.ProfitandLoss is not None or
            self.ProfitandLossImpact is not None or
            self.RelativeShortSentiment is not None or
            self.TransactionDuration is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FactorsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FactorsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FactorsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FactorsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FactorsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FactorsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BreakevenPrice is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBreakevenPrice>%s</%sBreakevenPrice>%s' % (namespaceprefix_ , self.gds_format_float(self.BreakevenPrice, input_name='BreakevenPrice'), namespaceprefix_ , eol_))
        if self.DailyHigh is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDailyHigh>%s</%sDailyHigh>%s' % (namespaceprefix_ , self.gds_format_float(self.DailyHigh, input_name='DailyHigh'), namespaceprefix_ , eol_))
        if self.DailyLow is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDailyLow>%s</%sDailyLow>%s' % (namespaceprefix_ , self.gds_format_float(self.DailyLow, input_name='DailyLow'), namespaceprefix_ , eol_))
        for Delta_ in self.Delta:
            Delta_.export(outfile, level, namespaceprefix_, name_='Delta', pretty_print=pretty_print)
        if self.NewPositions is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNewPositions>%s</%sNewPositions>%s' % (namespaceprefix_ , self.gds_format_float(self.NewPositions, input_name='NewPositions'), namespaceprefix_ , eol_))
        if self.OutOfMoneyDaysToCover is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOutOfMoneyDaysToCover>%s</%sOutOfMoneyDaysToCover>%s' % (namespaceprefix_ , self.gds_format_float(self.OutOfMoneyDaysToCover, input_name='OutOfMoneyDaysToCover'), namespaceprefix_ , eol_))
        if self.OutOfMoneyPct is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOutOfMoneyPct>%s</%sOutOfMoneyPct>%s' % (namespaceprefix_ , self.gds_format_float(self.OutOfMoneyPct, input_name='OutOfMoneyPct'), namespaceprefix_ , eol_))
        if self.ProfitandLoss is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProfitandLoss>%s</%sProfitandLoss>%s' % (namespaceprefix_ , self.gds_format_float(self.ProfitandLoss, input_name='ProfitandLoss'), namespaceprefix_ , eol_))
        if self.ProfitandLossImpact is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProfitandLossImpact>%s</%sProfitandLossImpact>%s' % (namespaceprefix_ , self.gds_format_float(self.ProfitandLossImpact, input_name='ProfitandLossImpact'), namespaceprefix_ , eol_))
        if self.RelativeShortSentiment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelativeShortSentiment>%s</%sRelativeShortSentiment>%s' % (namespaceprefix_ , self.gds_format_float(self.RelativeShortSentiment, input_name='RelativeShortSentiment'), namespaceprefix_ , eol_))
        if self.TransactionDuration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransactionDuration>%s</%sTransactionDuration>%s' % (namespaceprefix_ , self.gds_format_float(self.TransactionDuration, input_name='TransactionDuration'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BreakevenPrice' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'BreakevenPrice')
            self.BreakevenPrice = fval_
        elif nodeName_ == 'DailyHigh' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DailyHigh')
            self.DailyHigh = fval_
        elif nodeName_ == 'DailyLow' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DailyLow')
            self.DailyLow = fval_
        elif nodeName_ == 'Delta':
            obj_ = DeltaType.factory(parent_object_=self)
            obj_.build(child_)
            self.Delta.append(obj_)
            obj_.original_tagname_ = 'Delta'
        elif nodeName_ == 'NewPositions' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NewPositions')
            self.NewPositions = fval_
        elif nodeName_ == 'OutOfMoneyDaysToCover' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'OutOfMoneyDaysToCover')
            self.OutOfMoneyDaysToCover = fval_
        elif nodeName_ == 'OutOfMoneyPct' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'OutOfMoneyPct')
            self.OutOfMoneyPct = fval_
        elif nodeName_ == 'ProfitandLoss' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ProfitandLoss')
            self.ProfitandLoss = fval_
        elif nodeName_ == 'ProfitandLossImpact' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ProfitandLossImpact')
            self.ProfitandLossImpact = fval_
        elif nodeName_ == 'RelativeShortSentiment' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RelativeShortSentiment')
            self.RelativeShortSentiment = fval_
        elif nodeName_ == 'TransactionDuration' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TransactionDuration')
            self.TransactionDuration = fval_
# end class FactorsType


class DeltaType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, OTMDelta=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.value = _cast(None, value)
        self.OTMDelta = OTMDelta
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeltaType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeltaType.subclass:
            return DeltaType.subclass(*args_, **kwargs_)
        else:
            return DeltaType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OTMDelta(self):
        return self.OTMDelta
    def set_OTMDelta(self, OTMDelta):
        self.OTMDelta = OTMDelta
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.OTMDelta is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeltaType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeltaType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DeltaType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DeltaType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DeltaType'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeltaType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OTMDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOTMDelta>%s</%sOTMDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.OTMDelta, input_name='OTMDelta'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OTMDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'OTMDelta')
            self.OTMDelta = fval_
# end class DeltaType


class GeneralType24(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MarketRank=None, Price=None, TimeSeriesID=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.MarketRank = MarketRank
        self.Price = Price
        self.TimeSeriesID = TimeSeriesID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType24)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType24.subclass:
            return GeneralType24.subclass(*args_, **kwargs_)
        else:
            return GeneralType24(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MarketRank(self):
        return self.MarketRank
    def set_MarketRank(self, MarketRank):
        self.MarketRank = MarketRank
    def get_Price(self):
        return self.Price
    def set_Price(self, Price):
        self.Price = Price
    def get_TimeSeriesID(self):
        return self.TimeSeriesID
    def set_TimeSeriesID(self, TimeSeriesID):
        self.TimeSeriesID = TimeSeriesID
    def hasContent_(self):
        if (
            self.MarketRank is not None or
            self.Price is not None or
            self.TimeSeriesID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType24', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType24')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType24')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType24', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType24'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType24', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MarketRank is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarketRank>%s</%sMarketRank>%s' % (namespaceprefix_ , self.gds_format_float(self.MarketRank, input_name='MarketRank'), namespaceprefix_ , eol_))
        if self.Price is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrice>%s</%sPrice>%s' % (namespaceprefix_ , self.gds_format_float(self.Price, input_name='Price'), namespaceprefix_ , eol_))
        if self.TimeSeriesID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeSeriesID>%s</%sTimeSeriesID>%s' % (namespaceprefix_ , self.gds_format_float(self.TimeSeriesID, input_name='TimeSeriesID'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MarketRank' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'MarketRank')
            self.MarketRank = fval_
        elif nodeName_ == 'Price' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Price')
            self.Price = fval_
        elif nodeName_ == 'TimeSeriesID' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TimeSeriesID')
            self.TimeSeriesID = fval_
# end class GeneralType24


class ModelType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AbnormalTradingVolume=None, CapitalConstraintRank=None, CompanyNews=None, CompositeScore=None, Delta=None, EarningsAnnouncement=None, EarningsSentiment=None, MarketSentimentRank=None, MaxOTM_20D=None, Merger=None, OutOftheMoney=None, ShortLoanConcentration=None, TradingActivity=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.AbnormalTradingVolume = AbnormalTradingVolume
        self.CapitalConstraintRank = CapitalConstraintRank
        self.CompanyNews = CompanyNews
        self.CompositeScore = CompositeScore
        if Delta is None:
            self.Delta = []
        else:
            self.Delta = Delta
        self.EarningsAnnouncement = EarningsAnnouncement
        self.EarningsSentiment = EarningsSentiment
        self.MarketSentimentRank = MarketSentimentRank
        self.MaxOTM_20D = MaxOTM_20D
        self.Merger = Merger
        self.OutOftheMoney = OutOftheMoney
        self.ShortLoanConcentration = ShortLoanConcentration
        self.TradingActivity = TradingActivity
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ModelType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ModelType.subclass:
            return ModelType.subclass(*args_, **kwargs_)
        else:
            return ModelType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AbnormalTradingVolume(self):
        return self.AbnormalTradingVolume
    def set_AbnormalTradingVolume(self, AbnormalTradingVolume):
        self.AbnormalTradingVolume = AbnormalTradingVolume
    def get_CapitalConstraintRank(self):
        return self.CapitalConstraintRank
    def set_CapitalConstraintRank(self, CapitalConstraintRank):
        self.CapitalConstraintRank = CapitalConstraintRank
    def get_CompanyNews(self):
        return self.CompanyNews
    def set_CompanyNews(self, CompanyNews):
        self.CompanyNews = CompanyNews
    def get_CompositeScore(self):
        return self.CompositeScore
    def set_CompositeScore(self, CompositeScore):
        self.CompositeScore = CompositeScore
    def get_Delta(self):
        return self.Delta
    def set_Delta(self, Delta):
        self.Delta = Delta
    def add_Delta(self, value):
        self.Delta.append(value)
    def add_Delta(self, value):
        self.Delta.append(value)
    def insert_Delta_at(self, index, value):
        self.Delta.insert(index, value)
    def replace_Delta_at(self, index, value):
        self.Delta[index] = value
    def get_EarningsAnnouncement(self):
        return self.EarningsAnnouncement
    def set_EarningsAnnouncement(self, EarningsAnnouncement):
        self.EarningsAnnouncement = EarningsAnnouncement
    def get_EarningsSentiment(self):
        return self.EarningsSentiment
    def set_EarningsSentiment(self, EarningsSentiment):
        self.EarningsSentiment = EarningsSentiment
    def get_MarketSentimentRank(self):
        return self.MarketSentimentRank
    def set_MarketSentimentRank(self, MarketSentimentRank):
        self.MarketSentimentRank = MarketSentimentRank
    def get_MaxOTM_20D(self):
        return self.MaxOTM_20D
    def set_MaxOTM_20D(self, MaxOTM_20D):
        self.MaxOTM_20D = MaxOTM_20D
    def get_Merger(self):
        return self.Merger
    def set_Merger(self, Merger):
        self.Merger = Merger
    def get_OutOftheMoney(self):
        return self.OutOftheMoney
    def set_OutOftheMoney(self, OutOftheMoney):
        self.OutOftheMoney = OutOftheMoney
    def get_ShortLoanConcentration(self):
        return self.ShortLoanConcentration
    def set_ShortLoanConcentration(self, ShortLoanConcentration):
        self.ShortLoanConcentration = ShortLoanConcentration
    def get_TradingActivity(self):
        return self.TradingActivity
    def set_TradingActivity(self, TradingActivity):
        self.TradingActivity = TradingActivity
    def hasContent_(self):
        if (
            self.AbnormalTradingVolume is not None or
            self.CapitalConstraintRank is not None or
            self.CompanyNews is not None or
            self.CompositeScore is not None or
            self.Delta or
            self.EarningsAnnouncement is not None or
            self.EarningsSentiment is not None or
            self.MarketSentimentRank is not None or
            self.MaxOTM_20D is not None or
            self.Merger is not None or
            self.OutOftheMoney is not None or
            self.ShortLoanConcentration is not None or
            self.TradingActivity is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ModelType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ModelType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ModelType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ModelType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ModelType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ModelType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AbnormalTradingVolume is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAbnormalTradingVolume>%s</%sAbnormalTradingVolume>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AbnormalTradingVolume), input_name='AbnormalTradingVolume')), namespaceprefix_ , eol_))
        if self.CapitalConstraintRank is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCapitalConstraintRank>%s</%sCapitalConstraintRank>%s' % (namespaceprefix_ , self.gds_format_float(self.CapitalConstraintRank, input_name='CapitalConstraintRank'), namespaceprefix_ , eol_))
        if self.CompanyNews is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompanyNews>%s</%sCompanyNews>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CompanyNews), input_name='CompanyNews')), namespaceprefix_ , eol_))
        if self.CompositeScore is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompositeScore>%s</%sCompositeScore>%s' % (namespaceprefix_ , self.gds_format_float(self.CompositeScore, input_name='CompositeScore'), namespaceprefix_ , eol_))
        for Delta_ in self.Delta:
            Delta_.export(outfile, level, namespaceprefix_, name_='Delta', pretty_print=pretty_print)
        if self.EarningsAnnouncement is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEarningsAnnouncement>%s</%sEarningsAnnouncement>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EarningsAnnouncement), input_name='EarningsAnnouncement')), namespaceprefix_ , eol_))
        if self.EarningsSentiment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEarningsSentiment>%s</%sEarningsSentiment>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EarningsSentiment), input_name='EarningsSentiment')), namespaceprefix_ , eol_))
        if self.MarketSentimentRank is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarketSentimentRank>%s</%sMarketSentimentRank>%s' % (namespaceprefix_ , self.gds_format_float(self.MarketSentimentRank, input_name='MarketSentimentRank'), namespaceprefix_ , eol_))
        if self.MaxOTM_20D is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaxOTM_20D>%s</%sMaxOTM_20D>%s' % (namespaceprefix_ , self.gds_format_float(self.MaxOTM_20D, input_name='MaxOTM_20D'), namespaceprefix_ , eol_))
        if self.Merger is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMerger>%s</%sMerger>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Merger), input_name='Merger')), namespaceprefix_ , eol_))
        if self.OutOftheMoney is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOutOftheMoney>%s</%sOutOftheMoney>%s' % (namespaceprefix_ , self.gds_format_float(self.OutOftheMoney, input_name='OutOftheMoney'), namespaceprefix_ , eol_))
        if self.ShortLoanConcentration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortLoanConcentration>%s</%sShortLoanConcentration>%s' % (namespaceprefix_ , self.gds_format_float(self.ShortLoanConcentration, input_name='ShortLoanConcentration'), namespaceprefix_ , eol_))
        if self.TradingActivity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradingActivity>%s</%sTradingActivity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TradingActivity), input_name='TradingActivity')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AbnormalTradingVolume':
            AbnormalTradingVolume_ = child_.text
            AbnormalTradingVolume_ = self.gds_validate_string(AbnormalTradingVolume_, node, 'AbnormalTradingVolume')
            self.AbnormalTradingVolume = AbnormalTradingVolume_
        elif nodeName_ == 'CapitalConstraintRank' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'CapitalConstraintRank')
            self.CapitalConstraintRank = fval_
        elif nodeName_ == 'CompanyNews':
            CompanyNews_ = child_.text
            CompanyNews_ = self.gds_validate_string(CompanyNews_, node, 'CompanyNews')
            self.CompanyNews = CompanyNews_
        elif nodeName_ == 'CompositeScore' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'CompositeScore')
            self.CompositeScore = fval_
        elif nodeName_ == 'Delta':
            obj_ = DeltaType25.factory(parent_object_=self)
            obj_.build(child_)
            self.Delta.append(obj_)
            obj_.original_tagname_ = 'Delta'
        elif nodeName_ == 'EarningsAnnouncement':
            EarningsAnnouncement_ = child_.text
            EarningsAnnouncement_ = self.gds_validate_string(EarningsAnnouncement_, node, 'EarningsAnnouncement')
            self.EarningsAnnouncement = EarningsAnnouncement_
        elif nodeName_ == 'EarningsSentiment':
            EarningsSentiment_ = child_.text
            EarningsSentiment_ = self.gds_validate_string(EarningsSentiment_, node, 'EarningsSentiment')
            self.EarningsSentiment = EarningsSentiment_
        elif nodeName_ == 'MarketSentimentRank' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'MarketSentimentRank')
            self.MarketSentimentRank = fval_
        elif nodeName_ == 'MaxOTM_20D' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'MaxOTM_20D')
            self.MaxOTM_20D = fval_
        elif nodeName_ == 'Merger':
            Merger_ = child_.text
            Merger_ = self.gds_validate_string(Merger_, node, 'Merger')
            self.Merger = Merger_
        elif nodeName_ == 'OutOftheMoney' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'OutOftheMoney')
            self.OutOftheMoney = fval_
        elif nodeName_ == 'ShortLoanConcentration' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ShortLoanConcentration')
            self.ShortLoanConcentration = fval_
        elif nodeName_ == 'TradingActivity':
            TradingActivity_ = child_.text
            TradingActivity_ = self.gds_validate_string(TradingActivity_, node, 'TradingActivity')
            self.TradingActivity = TradingActivity_
# end class ModelType


class DeltaType25(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, ShortSqueezeModelRankDelta=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.value = _cast(None, value)
        self.ShortSqueezeModelRankDelta = ShortSqueezeModelRankDelta
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeltaType25)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeltaType25.subclass:
            return DeltaType25.subclass(*args_, **kwargs_)
        else:
            return DeltaType25(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ShortSqueezeModelRankDelta(self):
        return self.ShortSqueezeModelRankDelta
    def set_ShortSqueezeModelRankDelta(self, ShortSqueezeModelRankDelta):
        self.ShortSqueezeModelRankDelta = ShortSqueezeModelRankDelta
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.ShortSqueezeModelRankDelta is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeltaType25', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeltaType25')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DeltaType25')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DeltaType25', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DeltaType25'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeltaType25', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShortSqueezeModelRankDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortSqueezeModelRankDelta>%s</%sShortSqueezeModelRankDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.ShortSqueezeModelRankDelta, input_name='ShortSqueezeModelRankDelta'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ShortSqueezeModelRankDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ShortSqueezeModelRankDelta')
            self.ShortSqueezeModelRankDelta = fval_
# end class DeltaType25


class ProfitandLossBinsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PcSharesOnLoanLosses100To75Pc=None, PcSharesOnLoanLosses10To5Pc=None, PcSharesOnLoanLosses15To10Pc=None, PcSharesOnLoanLosses20To15Pc=None, PcSharesOnLoanLosses30To20Pc=None, PcSharesOnLoanLosses40To30Pc=None, PcSharesOnLoanLosses50To40Pc=None, PcSharesOnLoanLosses5To0Pc=None, PcSharesOnLoanLosses75To50Pc=None, PcSharesOnLoanLossesInfTo100Pc=None, PcSharesOnLoanProfits0To5Pc=None, PcSharesOnLoanProfits10To15Pc=None, PcSharesOnLoanProfits15To20Pc=None, PcSharesOnLoanProfits20To30Pc=None, PcSharesOnLoanProfits30To40Pc=None, PcSharesOnLoanProfits40To50Pc=None, PcSharesOnLoanProfits50To75Pc=None, PcSharesOnLoanProfits5To10Pc=None, PcSharesOnLoanProfits75To100Pc=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.PcSharesOnLoanLosses100To75Pc = PcSharesOnLoanLosses100To75Pc
        self.PcSharesOnLoanLosses10To5Pc = PcSharesOnLoanLosses10To5Pc
        self.PcSharesOnLoanLosses15To10Pc = PcSharesOnLoanLosses15To10Pc
        self.PcSharesOnLoanLosses20To15Pc = PcSharesOnLoanLosses20To15Pc
        self.PcSharesOnLoanLosses30To20Pc = PcSharesOnLoanLosses30To20Pc
        self.PcSharesOnLoanLosses40To30Pc = PcSharesOnLoanLosses40To30Pc
        self.PcSharesOnLoanLosses50To40Pc = PcSharesOnLoanLosses50To40Pc
        self.PcSharesOnLoanLosses5To0Pc = PcSharesOnLoanLosses5To0Pc
        self.PcSharesOnLoanLosses75To50Pc = PcSharesOnLoanLosses75To50Pc
        self.PcSharesOnLoanLossesInfTo100Pc = PcSharesOnLoanLossesInfTo100Pc
        self.PcSharesOnLoanProfits0To5Pc = PcSharesOnLoanProfits0To5Pc
        self.PcSharesOnLoanProfits10To15Pc = PcSharesOnLoanProfits10To15Pc
        self.PcSharesOnLoanProfits15To20Pc = PcSharesOnLoanProfits15To20Pc
        self.PcSharesOnLoanProfits20To30Pc = PcSharesOnLoanProfits20To30Pc
        self.PcSharesOnLoanProfits30To40Pc = PcSharesOnLoanProfits30To40Pc
        self.PcSharesOnLoanProfits40To50Pc = PcSharesOnLoanProfits40To50Pc
        self.PcSharesOnLoanProfits50To75Pc = PcSharesOnLoanProfits50To75Pc
        self.PcSharesOnLoanProfits5To10Pc = PcSharesOnLoanProfits5To10Pc
        self.PcSharesOnLoanProfits75To100Pc = PcSharesOnLoanProfits75To100Pc
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProfitandLossBinsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProfitandLossBinsType.subclass:
            return ProfitandLossBinsType.subclass(*args_, **kwargs_)
        else:
            return ProfitandLossBinsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PcSharesOnLoanLosses100To75Pc(self):
        return self.PcSharesOnLoanLosses100To75Pc
    def set_PcSharesOnLoanLosses100To75Pc(self, PcSharesOnLoanLosses100To75Pc):
        self.PcSharesOnLoanLosses100To75Pc = PcSharesOnLoanLosses100To75Pc
    def get_PcSharesOnLoanLosses10To5Pc(self):
        return self.PcSharesOnLoanLosses10To5Pc
    def set_PcSharesOnLoanLosses10To5Pc(self, PcSharesOnLoanLosses10To5Pc):
        self.PcSharesOnLoanLosses10To5Pc = PcSharesOnLoanLosses10To5Pc
    def get_PcSharesOnLoanLosses15To10Pc(self):
        return self.PcSharesOnLoanLosses15To10Pc
    def set_PcSharesOnLoanLosses15To10Pc(self, PcSharesOnLoanLosses15To10Pc):
        self.PcSharesOnLoanLosses15To10Pc = PcSharesOnLoanLosses15To10Pc
    def get_PcSharesOnLoanLosses20To15Pc(self):
        return self.PcSharesOnLoanLosses20To15Pc
    def set_PcSharesOnLoanLosses20To15Pc(self, PcSharesOnLoanLosses20To15Pc):
        self.PcSharesOnLoanLosses20To15Pc = PcSharesOnLoanLosses20To15Pc
    def get_PcSharesOnLoanLosses30To20Pc(self):
        return self.PcSharesOnLoanLosses30To20Pc
    def set_PcSharesOnLoanLosses30To20Pc(self, PcSharesOnLoanLosses30To20Pc):
        self.PcSharesOnLoanLosses30To20Pc = PcSharesOnLoanLosses30To20Pc
    def get_PcSharesOnLoanLosses40To30Pc(self):
        return self.PcSharesOnLoanLosses40To30Pc
    def set_PcSharesOnLoanLosses40To30Pc(self, PcSharesOnLoanLosses40To30Pc):
        self.PcSharesOnLoanLosses40To30Pc = PcSharesOnLoanLosses40To30Pc
    def get_PcSharesOnLoanLosses50To40Pc(self):
        return self.PcSharesOnLoanLosses50To40Pc
    def set_PcSharesOnLoanLosses50To40Pc(self, PcSharesOnLoanLosses50To40Pc):
        self.PcSharesOnLoanLosses50To40Pc = PcSharesOnLoanLosses50To40Pc
    def get_PcSharesOnLoanLosses5To0Pc(self):
        return self.PcSharesOnLoanLosses5To0Pc
    def set_PcSharesOnLoanLosses5To0Pc(self, PcSharesOnLoanLosses5To0Pc):
        self.PcSharesOnLoanLosses5To0Pc = PcSharesOnLoanLosses5To0Pc
    def get_PcSharesOnLoanLosses75To50Pc(self):
        return self.PcSharesOnLoanLosses75To50Pc
    def set_PcSharesOnLoanLosses75To50Pc(self, PcSharesOnLoanLosses75To50Pc):
        self.PcSharesOnLoanLosses75To50Pc = PcSharesOnLoanLosses75To50Pc
    def get_PcSharesOnLoanLossesInfTo100Pc(self):
        return self.PcSharesOnLoanLossesInfTo100Pc
    def set_PcSharesOnLoanLossesInfTo100Pc(self, PcSharesOnLoanLossesInfTo100Pc):
        self.PcSharesOnLoanLossesInfTo100Pc = PcSharesOnLoanLossesInfTo100Pc
    def get_PcSharesOnLoanProfits0To5Pc(self):
        return self.PcSharesOnLoanProfits0To5Pc
    def set_PcSharesOnLoanProfits0To5Pc(self, PcSharesOnLoanProfits0To5Pc):
        self.PcSharesOnLoanProfits0To5Pc = PcSharesOnLoanProfits0To5Pc
    def get_PcSharesOnLoanProfits10To15Pc(self):
        return self.PcSharesOnLoanProfits10To15Pc
    def set_PcSharesOnLoanProfits10To15Pc(self, PcSharesOnLoanProfits10To15Pc):
        self.PcSharesOnLoanProfits10To15Pc = PcSharesOnLoanProfits10To15Pc
    def get_PcSharesOnLoanProfits15To20Pc(self):
        return self.PcSharesOnLoanProfits15To20Pc
    def set_PcSharesOnLoanProfits15To20Pc(self, PcSharesOnLoanProfits15To20Pc):
        self.PcSharesOnLoanProfits15To20Pc = PcSharesOnLoanProfits15To20Pc
    def get_PcSharesOnLoanProfits20To30Pc(self):
        return self.PcSharesOnLoanProfits20To30Pc
    def set_PcSharesOnLoanProfits20To30Pc(self, PcSharesOnLoanProfits20To30Pc):
        self.PcSharesOnLoanProfits20To30Pc = PcSharesOnLoanProfits20To30Pc
    def get_PcSharesOnLoanProfits30To40Pc(self):
        return self.PcSharesOnLoanProfits30To40Pc
    def set_PcSharesOnLoanProfits30To40Pc(self, PcSharesOnLoanProfits30To40Pc):
        self.PcSharesOnLoanProfits30To40Pc = PcSharesOnLoanProfits30To40Pc
    def get_PcSharesOnLoanProfits40To50Pc(self):
        return self.PcSharesOnLoanProfits40To50Pc
    def set_PcSharesOnLoanProfits40To50Pc(self, PcSharesOnLoanProfits40To50Pc):
        self.PcSharesOnLoanProfits40To50Pc = PcSharesOnLoanProfits40To50Pc
    def get_PcSharesOnLoanProfits50To75Pc(self):
        return self.PcSharesOnLoanProfits50To75Pc
    def set_PcSharesOnLoanProfits50To75Pc(self, PcSharesOnLoanProfits50To75Pc):
        self.PcSharesOnLoanProfits50To75Pc = PcSharesOnLoanProfits50To75Pc
    def get_PcSharesOnLoanProfits5To10Pc(self):
        return self.PcSharesOnLoanProfits5To10Pc
    def set_PcSharesOnLoanProfits5To10Pc(self, PcSharesOnLoanProfits5To10Pc):
        self.PcSharesOnLoanProfits5To10Pc = PcSharesOnLoanProfits5To10Pc
    def get_PcSharesOnLoanProfits75To100Pc(self):
        return self.PcSharesOnLoanProfits75To100Pc
    def set_PcSharesOnLoanProfits75To100Pc(self, PcSharesOnLoanProfits75To100Pc):
        self.PcSharesOnLoanProfits75To100Pc = PcSharesOnLoanProfits75To100Pc
    def hasContent_(self):
        if (
            self.PcSharesOnLoanLosses100To75Pc is not None or
            self.PcSharesOnLoanLosses10To5Pc is not None or
            self.PcSharesOnLoanLosses15To10Pc is not None or
            self.PcSharesOnLoanLosses20To15Pc is not None or
            self.PcSharesOnLoanLosses30To20Pc is not None or
            self.PcSharesOnLoanLosses40To30Pc is not None or
            self.PcSharesOnLoanLosses50To40Pc is not None or
            self.PcSharesOnLoanLosses5To0Pc is not None or
            self.PcSharesOnLoanLosses75To50Pc is not None or
            self.PcSharesOnLoanLossesInfTo100Pc is not None or
            self.PcSharesOnLoanProfits0To5Pc is not None or
            self.PcSharesOnLoanProfits10To15Pc is not None or
            self.PcSharesOnLoanProfits15To20Pc is not None or
            self.PcSharesOnLoanProfits20To30Pc is not None or
            self.PcSharesOnLoanProfits30To40Pc is not None or
            self.PcSharesOnLoanProfits40To50Pc is not None or
            self.PcSharesOnLoanProfits50To75Pc is not None or
            self.PcSharesOnLoanProfits5To10Pc is not None or
            self.PcSharesOnLoanProfits75To100Pc is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ProfitandLossBinsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProfitandLossBinsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProfitandLossBinsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProfitandLossBinsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ProfitandLossBinsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ProfitandLossBinsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PcSharesOnLoanLosses100To75Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcSharesOnLoanLosses100To75Pc>%s</%sPcSharesOnLoanLosses100To75Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.PcSharesOnLoanLosses100To75Pc, input_name='PcSharesOnLoanLosses100To75Pc'), namespaceprefix_ , eol_))
        if self.PcSharesOnLoanLosses10To5Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcSharesOnLoanLosses10To5Pc>%s</%sPcSharesOnLoanLosses10To5Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.PcSharesOnLoanLosses10To5Pc, input_name='PcSharesOnLoanLosses10To5Pc'), namespaceprefix_ , eol_))
        if self.PcSharesOnLoanLosses15To10Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcSharesOnLoanLosses15To10Pc>%s</%sPcSharesOnLoanLosses15To10Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.PcSharesOnLoanLosses15To10Pc, input_name='PcSharesOnLoanLosses15To10Pc'), namespaceprefix_ , eol_))
        if self.PcSharesOnLoanLosses20To15Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcSharesOnLoanLosses20To15Pc>%s</%sPcSharesOnLoanLosses20To15Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.PcSharesOnLoanLosses20To15Pc, input_name='PcSharesOnLoanLosses20To15Pc'), namespaceprefix_ , eol_))
        if self.PcSharesOnLoanLosses30To20Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcSharesOnLoanLosses30To20Pc>%s</%sPcSharesOnLoanLosses30To20Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.PcSharesOnLoanLosses30To20Pc, input_name='PcSharesOnLoanLosses30To20Pc'), namespaceprefix_ , eol_))
        if self.PcSharesOnLoanLosses40To30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcSharesOnLoanLosses40To30Pc>%s</%sPcSharesOnLoanLosses40To30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.PcSharesOnLoanLosses40To30Pc, input_name='PcSharesOnLoanLosses40To30Pc'), namespaceprefix_ , eol_))
        if self.PcSharesOnLoanLosses50To40Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcSharesOnLoanLosses50To40Pc>%s</%sPcSharesOnLoanLosses50To40Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.PcSharesOnLoanLosses50To40Pc, input_name='PcSharesOnLoanLosses50To40Pc'), namespaceprefix_ , eol_))
        if self.PcSharesOnLoanLosses5To0Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcSharesOnLoanLosses5To0Pc>%s</%sPcSharesOnLoanLosses5To0Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.PcSharesOnLoanLosses5To0Pc, input_name='PcSharesOnLoanLosses5To0Pc'), namespaceprefix_ , eol_))
        if self.PcSharesOnLoanLosses75To50Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcSharesOnLoanLosses75To50Pc>%s</%sPcSharesOnLoanLosses75To50Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.PcSharesOnLoanLosses75To50Pc, input_name='PcSharesOnLoanLosses75To50Pc'), namespaceprefix_ , eol_))
        if self.PcSharesOnLoanLossesInfTo100Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcSharesOnLoanLossesInfTo100Pc>%s</%sPcSharesOnLoanLossesInfTo100Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.PcSharesOnLoanLossesInfTo100Pc, input_name='PcSharesOnLoanLossesInfTo100Pc'), namespaceprefix_ , eol_))
        if self.PcSharesOnLoanProfits0To5Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcSharesOnLoanProfits0To5Pc>%s</%sPcSharesOnLoanProfits0To5Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.PcSharesOnLoanProfits0To5Pc, input_name='PcSharesOnLoanProfits0To5Pc'), namespaceprefix_ , eol_))
        if self.PcSharesOnLoanProfits10To15Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcSharesOnLoanProfits10To15Pc>%s</%sPcSharesOnLoanProfits10To15Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.PcSharesOnLoanProfits10To15Pc, input_name='PcSharesOnLoanProfits10To15Pc'), namespaceprefix_ , eol_))
        if self.PcSharesOnLoanProfits15To20Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcSharesOnLoanProfits15To20Pc>%s</%sPcSharesOnLoanProfits15To20Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.PcSharesOnLoanProfits15To20Pc, input_name='PcSharesOnLoanProfits15To20Pc'), namespaceprefix_ , eol_))
        if self.PcSharesOnLoanProfits20To30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcSharesOnLoanProfits20To30Pc>%s</%sPcSharesOnLoanProfits20To30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.PcSharesOnLoanProfits20To30Pc, input_name='PcSharesOnLoanProfits20To30Pc'), namespaceprefix_ , eol_))
        if self.PcSharesOnLoanProfits30To40Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcSharesOnLoanProfits30To40Pc>%s</%sPcSharesOnLoanProfits30To40Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.PcSharesOnLoanProfits30To40Pc, input_name='PcSharesOnLoanProfits30To40Pc'), namespaceprefix_ , eol_))
        if self.PcSharesOnLoanProfits40To50Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcSharesOnLoanProfits40To50Pc>%s</%sPcSharesOnLoanProfits40To50Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.PcSharesOnLoanProfits40To50Pc, input_name='PcSharesOnLoanProfits40To50Pc'), namespaceprefix_ , eol_))
        if self.PcSharesOnLoanProfits50To75Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcSharesOnLoanProfits50To75Pc>%s</%sPcSharesOnLoanProfits50To75Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.PcSharesOnLoanProfits50To75Pc, input_name='PcSharesOnLoanProfits50To75Pc'), namespaceprefix_ , eol_))
        if self.PcSharesOnLoanProfits5To10Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcSharesOnLoanProfits5To10Pc>%s</%sPcSharesOnLoanProfits5To10Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.PcSharesOnLoanProfits5To10Pc, input_name='PcSharesOnLoanProfits5To10Pc'), namespaceprefix_ , eol_))
        if self.PcSharesOnLoanProfits75To100Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcSharesOnLoanProfits75To100Pc>%s</%sPcSharesOnLoanProfits75To100Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.PcSharesOnLoanProfits75To100Pc, input_name='PcSharesOnLoanProfits75To100Pc'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PcSharesOnLoanLosses100To75Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcSharesOnLoanLosses100To75Pc')
            self.PcSharesOnLoanLosses100To75Pc = fval_
        elif nodeName_ == 'PcSharesOnLoanLosses10To5Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcSharesOnLoanLosses10To5Pc')
            self.PcSharesOnLoanLosses10To5Pc = fval_
        elif nodeName_ == 'PcSharesOnLoanLosses15To10Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcSharesOnLoanLosses15To10Pc')
            self.PcSharesOnLoanLosses15To10Pc = fval_
        elif nodeName_ == 'PcSharesOnLoanLosses20To15Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcSharesOnLoanLosses20To15Pc')
            self.PcSharesOnLoanLosses20To15Pc = fval_
        elif nodeName_ == 'PcSharesOnLoanLosses30To20Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcSharesOnLoanLosses30To20Pc')
            self.PcSharesOnLoanLosses30To20Pc = fval_
        elif nodeName_ == 'PcSharesOnLoanLosses40To30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcSharesOnLoanLosses40To30Pc')
            self.PcSharesOnLoanLosses40To30Pc = fval_
        elif nodeName_ == 'PcSharesOnLoanLosses50To40Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcSharesOnLoanLosses50To40Pc')
            self.PcSharesOnLoanLosses50To40Pc = fval_
        elif nodeName_ == 'PcSharesOnLoanLosses5To0Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcSharesOnLoanLosses5To0Pc')
            self.PcSharesOnLoanLosses5To0Pc = fval_
        elif nodeName_ == 'PcSharesOnLoanLosses75To50Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcSharesOnLoanLosses75To50Pc')
            self.PcSharesOnLoanLosses75To50Pc = fval_
        elif nodeName_ == 'PcSharesOnLoanLossesInfTo100Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcSharesOnLoanLossesInfTo100Pc')
            self.PcSharesOnLoanLossesInfTo100Pc = fval_
        elif nodeName_ == 'PcSharesOnLoanProfits0To5Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcSharesOnLoanProfits0To5Pc')
            self.PcSharesOnLoanProfits0To5Pc = fval_
        elif nodeName_ == 'PcSharesOnLoanProfits10To15Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcSharesOnLoanProfits10To15Pc')
            self.PcSharesOnLoanProfits10To15Pc = fval_
        elif nodeName_ == 'PcSharesOnLoanProfits15To20Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcSharesOnLoanProfits15To20Pc')
            self.PcSharesOnLoanProfits15To20Pc = fval_
        elif nodeName_ == 'PcSharesOnLoanProfits20To30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcSharesOnLoanProfits20To30Pc')
            self.PcSharesOnLoanProfits20To30Pc = fval_
        elif nodeName_ == 'PcSharesOnLoanProfits30To40Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcSharesOnLoanProfits30To40Pc')
            self.PcSharesOnLoanProfits30To40Pc = fval_
        elif nodeName_ == 'PcSharesOnLoanProfits40To50Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcSharesOnLoanProfits40To50Pc')
            self.PcSharesOnLoanProfits40To50Pc = fval_
        elif nodeName_ == 'PcSharesOnLoanProfits50To75Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcSharesOnLoanProfits50To75Pc')
            self.PcSharesOnLoanProfits50To75Pc = fval_
        elif nodeName_ == 'PcSharesOnLoanProfits5To10Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcSharesOnLoanProfits5To10Pc')
            self.PcSharesOnLoanProfits5To10Pc = fval_
        elif nodeName_ == 'PcSharesOnLoanProfits75To100Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcSharesOnLoanProfits75To100Pc')
            self.PcSharesOnLoanProfits75To100Pc = fval_
# end class ProfitandLossBinsType


class InstrumentDetailType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ANY=None, DXLID=None, ISIN=None, CUSIP=None, QUICK=None, SEDOL=None, TICKER=None, TICKER_CODE=None, ACCOUNT=None, DATATYPE=None, DE_INHOUSE=None, INTERNAL_ID=None, DataDate=None, InstrumentData=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ANY = _cast(None, ANY)
        self.DXLID = _cast(None, DXLID)
        self.ISIN = _cast(None, ISIN)
        self.CUSIP = _cast(None, CUSIP)
        self.QUICK = _cast(None, QUICK)
        self.SEDOL = _cast(None, SEDOL)
        self.TICKER = _cast(None, TICKER)
        self.TICKER_CODE = _cast(None, TICKER_CODE)
        self.ACCOUNT = _cast(None, ACCOUNT)
        self.DATATYPE = _cast(None, DATATYPE)
        self.DE_INHOUSE = _cast(None, DE_INHOUSE)
        self.INTERNAL_ID = _cast(None, INTERNAL_ID)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
        self.InstrumentData = InstrumentData
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InstrumentDetailType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InstrumentDetailType.subclass:
            return InstrumentDetailType.subclass(*args_, **kwargs_)
        else:
            return InstrumentDetailType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_InstrumentData(self):
        return self.InstrumentData
    def set_InstrumentData(self, InstrumentData):
        self.InstrumentData = InstrumentData
    def get_ANY(self):
        return self.ANY
    def set_ANY(self, ANY):
        self.ANY = ANY
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def get_TICKER_CODE(self):
        return self.TICKER_CODE
    def set_TICKER_CODE(self, TICKER_CODE):
        self.TICKER_CODE = TICKER_CODE
    def get_ACCOUNT(self):
        return self.ACCOUNT
    def set_ACCOUNT(self, ACCOUNT):
        self.ACCOUNT = ACCOUNT
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_DE_INHOUSE(self):
        return self.DE_INHOUSE
    def set_DE_INHOUSE(self, DE_INHOUSE):
        self.DE_INHOUSE = DE_INHOUSE
    def get_INTERNAL_ID(self):
        return self.INTERNAL_ID
    def set_INTERNAL_ID(self, INTERNAL_ID):
        self.INTERNAL_ID = INTERNAL_ID
    def hasContent_(self):
        if (
            self.DataDate or
            self.InstrumentData is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentDetailType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InstrumentDetailType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InstrumentDetailType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InstrumentDetailType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InstrumentDetailType'):
        if self.ANY is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            outfile.write(' ANY=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ANY), input_name='ANY')), ))
        if self.DXLID is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            outfile.write(' DXLID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DXLID), input_name='DXLID')), ))
        if self.ISIN is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            outfile.write(' ISIN=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ISIN), input_name='ISIN')), ))
        if self.CUSIP is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            outfile.write(' CUSIP=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.CUSIP), input_name='CUSIP')), ))
        if self.QUICK is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            outfile.write(' QUICK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.QUICK), input_name='QUICK')), ))
        if self.SEDOL is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            outfile.write(' SEDOL=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SEDOL), input_name='SEDOL')), ))
        if self.TICKER is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            outfile.write(' TICKER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER), input_name='TICKER')), ))
        if self.TICKER_CODE is not None and 'TICKER_CODE' not in already_processed:
            already_processed.add('TICKER_CODE')
            outfile.write(' TICKER.CODE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER_CODE), input_name='TICKER.CODE')), ))
        if self.ACCOUNT is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            outfile.write(' ACCOUNT=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ACCOUNT), input_name='ACCOUNT')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.DE_INHOUSE is not None and 'DE_INHOUSE' not in already_processed:
            already_processed.add('DE_INHOUSE')
            outfile.write(' DE_INHOUSE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DE_INHOUSE), input_name='DE_INHOUSE')), ))
        if self.INTERNAL_ID is not None and 'INTERNAL_ID' not in already_processed:
            already_processed.add('INTERNAL_ID')
            outfile.write(' INTERNAL_ID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.INTERNAL_ID), input_name='INTERNAL_ID')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentDetailType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
        if self.InstrumentData is not None:
            self.InstrumentData.export(outfile, level, namespaceprefix_, name_='InstrumentData', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ANY', node)
        if value is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            self.ANY = value
        value = find_attr_value_('DXLID', node)
        if value is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            self.DXLID = value
        value = find_attr_value_('ISIN', node)
        if value is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            self.ISIN = value
        value = find_attr_value_('CUSIP', node)
        if value is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            self.CUSIP = value
        value = find_attr_value_('QUICK', node)
        if value is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            self.QUICK = value
        value = find_attr_value_('SEDOL', node)
        if value is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            self.SEDOL = value
        value = find_attr_value_('TICKER', node)
        if value is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            self.TICKER = value
        value = find_attr_value_('TICKER.CODE', node)
        if value is not None and 'TICKER.CODE' not in already_processed:
            already_processed.add('TICKER.CODE')
            self.TICKER_CODE = value
        value = find_attr_value_('ACCOUNT', node)
        if value is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            self.ACCOUNT = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('DE_INHOUSE', node)
        if value is not None and 'DE_INHOUSE' not in already_processed:
            already_processed.add('DE_INHOUSE')
            self.DE_INHOUSE = value
        value = find_attr_value_('INTERNAL_ID', node)
        if value is not None and 'INTERNAL_ID' not in already_processed:
            already_processed.add('INTERNAL_ID')
            self.INTERNAL_ID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType26.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
        elif nodeName_ == 'InstrumentData':
            obj_ = InstrumentDataType.factory(parent_object_=self)
            obj_.build(child_)
            self.InstrumentData = obj_
            obj_.original_tagname_ = 'InstrumentData'
# end class InstrumentDetailType


class DataDateType26(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType26)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType26.subclass:
            return DataDateType26.subclass(*args_, **kwargs_)
        else:
            return DataDateType26(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType26', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType26')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType26')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType26', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType26'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType26', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType27.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType26


class GeneralType27(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Date=None, Quantity=None, Value=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.Quantity = Quantity
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType27)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType27.subclass:
            return GeneralType27.subclass(*args_, **kwargs_)
        else:
            return GeneralType27(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def hasContent_(self):
        if (
            self.Date is not None or
            self.Quantity is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType27', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType27')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType27')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType27', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType27'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType27', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_format_float(self.Value, input_name='Value'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Quantity')
            self.Quantity = fval_
        elif nodeName_ == 'Value' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Value')
            self.Value = fval_
# end class GeneralType27


class InstrumentDataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BB_TICKER=None, BBGID=None, CUSIP=None, DE_INHOUSE=None, DXLID=None, InstrumentName=None, ISIN=None, MarketArea=None, QUICK=None, SEDOL=None, TICKER=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.BB_TICKER = BB_TICKER
        self.BBGID = BBGID
        self.CUSIP = CUSIP
        self.DE_INHOUSE = DE_INHOUSE
        self.DXLID = DXLID
        self.InstrumentName = InstrumentName
        self.ISIN = ISIN
        self.MarketArea = MarketArea
        self.QUICK = QUICK
        self.SEDOL = SEDOL
        self.TICKER = TICKER
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InstrumentDataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InstrumentDataType.subclass:
            return InstrumentDataType.subclass(*args_, **kwargs_)
        else:
            return InstrumentDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BB_TICKER(self):
        return self.BB_TICKER
    def set_BB_TICKER(self, BB_TICKER):
        self.BB_TICKER = BB_TICKER
    def get_BBGID(self):
        return self.BBGID
    def set_BBGID(self, BBGID):
        self.BBGID = BBGID
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_DE_INHOUSE(self):
        return self.DE_INHOUSE
    def set_DE_INHOUSE(self, DE_INHOUSE):
        self.DE_INHOUSE = DE_INHOUSE
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_InstrumentName(self):
        return self.InstrumentName
    def set_InstrumentName(self, InstrumentName):
        self.InstrumentName = InstrumentName
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_MarketArea(self):
        return self.MarketArea
    def set_MarketArea(self, MarketArea):
        self.MarketArea = MarketArea
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def hasContent_(self):
        if (
            self.BB_TICKER is not None or
            self.BBGID is not None or
            self.CUSIP is not None or
            self.DE_INHOUSE is not None or
            self.DXLID is not None or
            self.InstrumentName is not None or
            self.ISIN is not None or
            self.MarketArea is not None or
            self.QUICK is not None or
            self.SEDOL is not None or
            self.TICKER is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentDataType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InstrumentDataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InstrumentDataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InstrumentDataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InstrumentDataType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentDataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BB_TICKER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBB_TICKER>%s</%sBB_TICKER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BB_TICKER), input_name='BB_TICKER')), namespaceprefix_ , eol_))
        if self.BBGID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBBGID>%s</%sBBGID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BBGID), input_name='BBGID')), namespaceprefix_ , eol_))
        if self.CUSIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUSIP>%s</%sCUSIP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CUSIP), input_name='CUSIP')), namespaceprefix_ , eol_))
        if self.DE_INHOUSE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDE_INHOUSE>%s</%sDE_INHOUSE>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DE_INHOUSE), input_name='DE_INHOUSE')), namespaceprefix_ , eol_))
        if self.DXLID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDXLID>%s</%sDXLID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DXLID), input_name='DXLID')), namespaceprefix_ , eol_))
        if self.InstrumentName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstrumentName>%s</%sInstrumentName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InstrumentName), input_name='InstrumentName')), namespaceprefix_ , eol_))
        if self.ISIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sISIN>%s</%sISIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ISIN), input_name='ISIN')), namespaceprefix_ , eol_))
        if self.MarketArea is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarketArea>%s</%sMarketArea>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarketArea), input_name='MarketArea')), namespaceprefix_ , eol_))
        if self.QUICK is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQUICK>%s</%sQUICK>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QUICK), input_name='QUICK')), namespaceprefix_ , eol_))
        if self.SEDOL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSEDOL>%s</%sSEDOL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SEDOL), input_name='SEDOL')), namespaceprefix_ , eol_))
        if self.TICKER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTICKER>%s</%sTICKER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TICKER), input_name='TICKER')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BB_TICKER':
            BB_TICKER_ = child_.text
            BB_TICKER_ = self.gds_validate_string(BB_TICKER_, node, 'BB_TICKER')
            self.BB_TICKER = BB_TICKER_
        elif nodeName_ == 'BBGID':
            BBGID_ = child_.text
            BBGID_ = self.gds_validate_string(BBGID_, node, 'BBGID')
            self.BBGID = BBGID_
        elif nodeName_ == 'CUSIP':
            CUSIP_ = child_.text
            CUSIP_ = self.gds_validate_string(CUSIP_, node, 'CUSIP')
            self.CUSIP = CUSIP_
        elif nodeName_ == 'DE_INHOUSE':
            DE_INHOUSE_ = child_.text
            DE_INHOUSE_ = self.gds_validate_string(DE_INHOUSE_, node, 'DE_INHOUSE')
            self.DE_INHOUSE = DE_INHOUSE_
        elif nodeName_ == 'DXLID':
            DXLID_ = child_.text
            DXLID_ = self.gds_validate_string(DXLID_, node, 'DXLID')
            self.DXLID = DXLID_
        elif nodeName_ == 'InstrumentName':
            InstrumentName_ = child_.text
            InstrumentName_ = self.gds_validate_string(InstrumentName_, node, 'InstrumentName')
            self.InstrumentName = InstrumentName_
        elif nodeName_ == 'ISIN':
            ISIN_ = child_.text
            ISIN_ = self.gds_validate_string(ISIN_, node, 'ISIN')
            self.ISIN = ISIN_
        elif nodeName_ == 'MarketArea':
            MarketArea_ = child_.text
            MarketArea_ = self.gds_validate_string(MarketArea_, node, 'MarketArea')
            self.MarketArea = MarketArea_
        elif nodeName_ == 'QUICK':
            QUICK_ = child_.text
            QUICK_ = self.gds_validate_string(QUICK_, node, 'QUICK')
            self.QUICK = QUICK_
        elif nodeName_ == 'SEDOL':
            SEDOL_ = child_.text
            SEDOL_ = self.gds_validate_string(SEDOL_, node, 'SEDOL')
            self.SEDOL = SEDOL_
        elif nodeName_ == 'TICKER':
            TICKER_ = child_.text
            TICKER_ = self.gds_validate_string(TICKER_, node, 'TICKER')
            self.TICKER = TICKER_
# end class InstrumentDataType


class MarketDetailType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ACCOUNT=None, MARKET=None, DATATYPE=None, FILTER=None, DataDate=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ACCOUNT = _cast(None, ACCOUNT)
        self.MARKET = _cast(None, MARKET)
        self.DATATYPE = _cast(None, DATATYPE)
        self.FILTER = _cast(None, FILTER)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarketDetailType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarketDetailType.subclass:
            return MarketDetailType.subclass(*args_, **kwargs_)
        else:
            return MarketDetailType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_ACCOUNT(self):
        return self.ACCOUNT
    def set_ACCOUNT(self, ACCOUNT):
        self.ACCOUNT = ACCOUNT
    def get_MARKET(self):
        return self.MARKET
    def set_MARKET(self, MARKET):
        self.MARKET = MARKET
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_FILTER(self):
        return self.FILTER
    def set_FILTER(self, FILTER):
        self.FILTER = FILTER
    def hasContent_(self):
        if (
            self.DataDate or
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MarketDetailType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarketDetailType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarketDetailType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarketDetailType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarketDetailType'):
        if self.ACCOUNT is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            outfile.write(' ACCOUNT=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ACCOUNT), input_name='ACCOUNT')), ))
        if self.MARKET is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            outfile.write(' MARKET=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.MARKET), input_name='MARKET')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.FILTER is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            outfile.write(' FILTER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.FILTER), input_name='FILTER')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MarketDetailType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ACCOUNT', node)
        if value is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            self.ACCOUNT = value
        value = find_attr_value_('MARKET', node)
        if value is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            self.MARKET = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('FILTER', node)
        if value is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            self.FILTER = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType28.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
        elif nodeName_ == 'General':
            obj_ = GeneralType30.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class MarketDetailType


class DataDateType28(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType28)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType28.subclass:
            return DataDateType28.subclass(*args_, **kwargs_)
        else:
            return DataDateType28(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType28', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType28')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType28')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType28', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType28'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType28', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType29.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType28


class GeneralType29(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Date=None, Value=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType29)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType29.subclass:
            return GeneralType29.subclass(*args_, **kwargs_)
        else:
            return GeneralType29(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def hasContent_(self):
        if (
            self.Date is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType29', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType29')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType29')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType29', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType29'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType29', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_format_float(self.Value, input_name='Value'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
        elif nodeName_ == 'Value' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Value')
            self.Value = fval_
# end class GeneralType29


class GeneralType30(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MarketArea=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.MarketArea = MarketArea
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType30)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType30.subclass:
            return GeneralType30.subclass(*args_, **kwargs_)
        else:
            return GeneralType30(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MarketArea(self):
        return self.MarketArea
    def set_MarketArea(self, MarketArea):
        self.MarketArea = MarketArea
    def hasContent_(self):
        if (
            self.MarketArea is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType30', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType30')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType30')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType30', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType30'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType30', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MarketArea is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarketArea>%s</%sMarketArea>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarketArea), input_name='MarketArea')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MarketArea':
            MarketArea_ = child_.text
            MarketArea_ = self.gds_validate_string(MarketArea_, node, 'MarketArea')
            self.MarketArea = MarketArea_
# end class GeneralType30


class CounterpartDetailType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ACCOUNT=None, COUNTERPART=None, MARKET=None, DATATYPE=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ACCOUNT = _cast(None, ACCOUNT)
        self.COUNTERPART = _cast(None, COUNTERPART)
        self.MARKET = _cast(None, MARKET)
        self.DATATYPE = _cast(None, DATATYPE)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CounterpartDetailType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CounterpartDetailType.subclass:
            return CounterpartDetailType.subclass(*args_, **kwargs_)
        else:
            return CounterpartDetailType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_ACCOUNT(self):
        return self.ACCOUNT
    def set_ACCOUNT(self, ACCOUNT):
        self.ACCOUNT = ACCOUNT
    def get_COUNTERPART(self):
        return self.COUNTERPART
    def set_COUNTERPART(self, COUNTERPART):
        self.COUNTERPART = COUNTERPART
    def get_MARKET(self):
        return self.MARKET
    def set_MARKET(self, MARKET):
        self.MARKET = MARKET
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CounterpartDetailType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CounterpartDetailType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CounterpartDetailType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CounterpartDetailType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CounterpartDetailType'):
        if self.ACCOUNT is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            outfile.write(' ACCOUNT=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ACCOUNT), input_name='ACCOUNT')), ))
        if self.COUNTERPART is not None and 'COUNTERPART' not in already_processed:
            already_processed.add('COUNTERPART')
            outfile.write(' COUNTERPART=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.COUNTERPART), input_name='COUNTERPART')), ))
        if self.MARKET is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            outfile.write(' MARKET=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.MARKET), input_name='MARKET')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CounterpartDetailType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ACCOUNT', node)
        if value is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            self.ACCOUNT = value
        value = find_attr_value_('COUNTERPART', node)
        if value is not None and 'COUNTERPART' not in already_processed:
            already_processed.add('COUNTERPART')
            self.COUNTERPART = value
        value = find_attr_value_('MARKET', node)
        if value is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            self.MARKET = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType31.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class CounterpartDetailType


class DataDateType31(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType31)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType31.subclass:
            return DataDateType31.subclass(*args_, **kwargs_)
        else:
            return DataDateType31(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType31', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType31')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType31')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType31', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType31'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType31', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType32.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType31


class GeneralType32(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Counterpart=None, CounterpartName=None, Date=None, Value=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Counterpart = Counterpart
        self.CounterpartName = CounterpartName
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType32)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType32.subclass:
            return GeneralType32.subclass(*args_, **kwargs_)
        else:
            return GeneralType32(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Counterpart(self):
        return self.Counterpart
    def set_Counterpart(self, Counterpart):
        self.Counterpart = Counterpart
    def get_CounterpartName(self):
        return self.CounterpartName
    def set_CounterpartName(self, CounterpartName):
        self.CounterpartName = CounterpartName
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def hasContent_(self):
        if (
            self.Counterpart is not None or
            self.CounterpartName is not None or
            self.Date is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType32', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType32')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType32')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType32', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType32'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType32', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Counterpart is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCounterpart>%s</%sCounterpart>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Counterpart), input_name='Counterpart')), namespaceprefix_ , eol_))
        if self.CounterpartName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCounterpartName>%s</%sCounterpartName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CounterpartName), input_name='CounterpartName')), namespaceprefix_ , eol_))
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_format_float(self.Value, input_name='Value'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Counterpart':
            Counterpart_ = child_.text
            Counterpart_ = self.gds_validate_string(Counterpart_, node, 'Counterpart')
            self.Counterpart = Counterpart_
        elif nodeName_ == 'CounterpartName':
            CounterpartName_ = child_.text
            CounterpartName_ = self.gds_validate_string(CounterpartName_, node, 'CounterpartName')
            self.CounterpartName = CounterpartName_
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
        elif nodeName_ == 'Value' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Value')
            self.Value = fval_
# end class GeneralType32


class RankedInstrumentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ACCOUNT=None, MARKET=None, RANK=None, RANKTYPE=None, DATATYPE=None, DataDate=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ACCOUNT = _cast(None, ACCOUNT)
        self.MARKET = _cast(None, MARKET)
        self.RANK = _cast(None, RANK)
        self.RANKTYPE = _cast(None, RANKTYPE)
        self.DATATYPE = _cast(None, DATATYPE)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RankedInstrumentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RankedInstrumentType.subclass:
            return RankedInstrumentType.subclass(*args_, **kwargs_)
        else:
            return RankedInstrumentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_ACCOUNT(self):
        return self.ACCOUNT
    def set_ACCOUNT(self, ACCOUNT):
        self.ACCOUNT = ACCOUNT
    def get_MARKET(self):
        return self.MARKET
    def set_MARKET(self, MARKET):
        self.MARKET = MARKET
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_RANKTYPE(self):
        return self.RANKTYPE
    def set_RANKTYPE(self, RANKTYPE):
        self.RANKTYPE = RANKTYPE
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def hasContent_(self):
        if (
            self.DataDate or
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RankedInstrumentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RankedInstrumentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RankedInstrumentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RankedInstrumentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RankedInstrumentType'):
        if self.ACCOUNT is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            outfile.write(' ACCOUNT=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ACCOUNT), input_name='ACCOUNT')), ))
        if self.MARKET is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            outfile.write(' MARKET=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.MARKET), input_name='MARKET')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.RANKTYPE is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            outfile.write(' RANKTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANKTYPE), input_name='RANKTYPE')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RankedInstrumentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ACCOUNT', node)
        if value is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            self.ACCOUNT = value
        value = find_attr_value_('MARKET', node)
        if value is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            self.MARKET = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('RANKTYPE', node)
        if value is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            self.RANKTYPE = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType33.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
        elif nodeName_ == 'General':
            obj_ = GeneralType35.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class RankedInstrumentType


class DataDateType33(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType33)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType33.subclass:
            return DataDateType33.subclass(*args_, **kwargs_)
        else:
            return DataDateType33(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType33', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType33')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType33')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType33', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType33'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType33', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType34.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType33


class GeneralType34(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RankedValue=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.RankedValue = RankedValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType34)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType34.subclass:
            return GeneralType34.subclass(*args_, **kwargs_)
        else:
            return GeneralType34(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RankedValue(self):
        return self.RankedValue
    def set_RankedValue(self, RankedValue):
        self.RankedValue = RankedValue
    def hasContent_(self):
        if (
            self.RankedValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType34', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType34')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType34')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType34', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType34'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType34', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RankedValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRankedValue>%s</%sRankedValue>%s' % (namespaceprefix_ , self.gds_format_float(self.RankedValue, input_name='RankedValue'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RankedValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RankedValue')
            self.RankedValue = fval_
# end class GeneralType34


class GeneralType35(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BB_TICKER=None, BBGID=None, CUSIP=None, DE_INHOUSE=None, DXLID=None, InstrumentName=None, ISIN=None, QUICK=None, SEDOL=None, TICKER=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.BB_TICKER = BB_TICKER
        self.BBGID = BBGID
        self.CUSIP = CUSIP
        self.DE_INHOUSE = DE_INHOUSE
        self.DXLID = DXLID
        self.InstrumentName = InstrumentName
        self.ISIN = ISIN
        self.QUICK = QUICK
        self.SEDOL = SEDOL
        self.TICKER = TICKER
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType35)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType35.subclass:
            return GeneralType35.subclass(*args_, **kwargs_)
        else:
            return GeneralType35(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BB_TICKER(self):
        return self.BB_TICKER
    def set_BB_TICKER(self, BB_TICKER):
        self.BB_TICKER = BB_TICKER
    def get_BBGID(self):
        return self.BBGID
    def set_BBGID(self, BBGID):
        self.BBGID = BBGID
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_DE_INHOUSE(self):
        return self.DE_INHOUSE
    def set_DE_INHOUSE(self, DE_INHOUSE):
        self.DE_INHOUSE = DE_INHOUSE
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_InstrumentName(self):
        return self.InstrumentName
    def set_InstrumentName(self, InstrumentName):
        self.InstrumentName = InstrumentName
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def hasContent_(self):
        if (
            self.BB_TICKER is not None or
            self.BBGID is not None or
            self.CUSIP is not None or
            self.DE_INHOUSE is not None or
            self.DXLID is not None or
            self.InstrumentName is not None or
            self.ISIN is not None or
            self.QUICK is not None or
            self.SEDOL is not None or
            self.TICKER is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType35', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType35')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType35')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType35', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType35'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType35', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BB_TICKER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBB_TICKER>%s</%sBB_TICKER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BB_TICKER), input_name='BB_TICKER')), namespaceprefix_ , eol_))
        if self.BBGID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBBGID>%s</%sBBGID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BBGID), input_name='BBGID')), namespaceprefix_ , eol_))
        if self.CUSIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUSIP>%s</%sCUSIP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CUSIP), input_name='CUSIP')), namespaceprefix_ , eol_))
        if self.DE_INHOUSE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDE_INHOUSE>%s</%sDE_INHOUSE>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DE_INHOUSE), input_name='DE_INHOUSE')), namespaceprefix_ , eol_))
        if self.DXLID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDXLID>%s</%sDXLID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DXLID), input_name='DXLID')), namespaceprefix_ , eol_))
        if self.InstrumentName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstrumentName>%s</%sInstrumentName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InstrumentName), input_name='InstrumentName')), namespaceprefix_ , eol_))
        if self.ISIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sISIN>%s</%sISIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ISIN), input_name='ISIN')), namespaceprefix_ , eol_))
        if self.QUICK is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQUICK>%s</%sQUICK>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QUICK), input_name='QUICK')), namespaceprefix_ , eol_))
        if self.SEDOL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSEDOL>%s</%sSEDOL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SEDOL), input_name='SEDOL')), namespaceprefix_ , eol_))
        if self.TICKER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTICKER>%s</%sTICKER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TICKER), input_name='TICKER')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BB_TICKER':
            BB_TICKER_ = child_.text
            BB_TICKER_ = self.gds_validate_string(BB_TICKER_, node, 'BB_TICKER')
            self.BB_TICKER = BB_TICKER_
        elif nodeName_ == 'BBGID':
            BBGID_ = child_.text
            BBGID_ = self.gds_validate_string(BBGID_, node, 'BBGID')
            self.BBGID = BBGID_
        elif nodeName_ == 'CUSIP':
            CUSIP_ = child_.text
            CUSIP_ = self.gds_validate_string(CUSIP_, node, 'CUSIP')
            self.CUSIP = CUSIP_
        elif nodeName_ == 'DE_INHOUSE':
            DE_INHOUSE_ = child_.text
            DE_INHOUSE_ = self.gds_validate_string(DE_INHOUSE_, node, 'DE_INHOUSE')
            self.DE_INHOUSE = DE_INHOUSE_
        elif nodeName_ == 'DXLID':
            DXLID_ = child_.text
            DXLID_ = self.gds_validate_string(DXLID_, node, 'DXLID')
            self.DXLID = DXLID_
        elif nodeName_ == 'InstrumentName':
            InstrumentName_ = child_.text
            InstrumentName_ = self.gds_validate_string(InstrumentName_, node, 'InstrumentName')
            self.InstrumentName = InstrumentName_
        elif nodeName_ == 'ISIN':
            ISIN_ = child_.text
            ISIN_ = self.gds_validate_string(ISIN_, node, 'ISIN')
            self.ISIN = ISIN_
        elif nodeName_ == 'QUICK':
            QUICK_ = child_.text
            QUICK_ = self.gds_validate_string(QUICK_, node, 'QUICK')
            self.QUICK = QUICK_
        elif nodeName_ == 'SEDOL':
            SEDOL_ = child_.text
            SEDOL_ = self.gds_validate_string(SEDOL_, node, 'SEDOL')
            self.SEDOL = SEDOL_
        elif nodeName_ == 'TICKER':
            TICKER_ = child_.text
            TICKER_ = self.gds_validate_string(TICKER_, node, 'TICKER')
            self.TICKER = TICKER_
# end class GeneralType35


class RankedCounterpartType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ACCOUNT=None, MARKET=None, RANK=None, RANKTYPE=None, DATATYPE=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ACCOUNT = _cast(None, ACCOUNT)
        self.MARKET = _cast(None, MARKET)
        self.RANK = _cast(None, RANK)
        self.RANKTYPE = _cast(None, RANKTYPE)
        self.DATATYPE = _cast(None, DATATYPE)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RankedCounterpartType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RankedCounterpartType.subclass:
            return RankedCounterpartType.subclass(*args_, **kwargs_)
        else:
            return RankedCounterpartType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_ACCOUNT(self):
        return self.ACCOUNT
    def set_ACCOUNT(self, ACCOUNT):
        self.ACCOUNT = ACCOUNT
    def get_MARKET(self):
        return self.MARKET
    def set_MARKET(self, MARKET):
        self.MARKET = MARKET
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_RANKTYPE(self):
        return self.RANKTYPE
    def set_RANKTYPE(self, RANKTYPE):
        self.RANKTYPE = RANKTYPE
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RankedCounterpartType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RankedCounterpartType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RankedCounterpartType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RankedCounterpartType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RankedCounterpartType'):
        if self.ACCOUNT is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            outfile.write(' ACCOUNT=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ACCOUNT), input_name='ACCOUNT')), ))
        if self.MARKET is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            outfile.write(' MARKET=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.MARKET), input_name='MARKET')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.RANKTYPE is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            outfile.write(' RANKTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANKTYPE), input_name='RANKTYPE')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RankedCounterpartType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ACCOUNT', node)
        if value is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            self.ACCOUNT = value
        value = find_attr_value_('MARKET', node)
        if value is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            self.MARKET = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('RANKTYPE', node)
        if value is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            self.RANKTYPE = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType36.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class RankedCounterpartType


class DataDateType36(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType36)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType36.subclass:
            return DataDateType36.subclass(*args_, **kwargs_)
        else:
            return DataDateType36(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType36', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType36')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType36')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType36', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType36'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType36', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType37.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType36


class GeneralType37(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Counterpart=None, CounterpartName=None, Date=None, RankedValue=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Counterpart = Counterpart
        self.CounterpartName = CounterpartName
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.RankedValue = RankedValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType37)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType37.subclass:
            return GeneralType37.subclass(*args_, **kwargs_)
        else:
            return GeneralType37(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Counterpart(self):
        return self.Counterpart
    def set_Counterpart(self, Counterpart):
        self.Counterpart = Counterpart
    def get_CounterpartName(self):
        return self.CounterpartName
    def set_CounterpartName(self, CounterpartName):
        self.CounterpartName = CounterpartName
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_RankedValue(self):
        return self.RankedValue
    def set_RankedValue(self, RankedValue):
        self.RankedValue = RankedValue
    def hasContent_(self):
        if (
            self.Counterpart is not None or
            self.CounterpartName is not None or
            self.Date is not None or
            self.RankedValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType37', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType37')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType37')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType37', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType37'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType37', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Counterpart is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCounterpart>%s</%sCounterpart>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Counterpart), input_name='Counterpart')), namespaceprefix_ , eol_))
        if self.CounterpartName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCounterpartName>%s</%sCounterpartName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CounterpartName), input_name='CounterpartName')), namespaceprefix_ , eol_))
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.RankedValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRankedValue>%s</%sRankedValue>%s' % (namespaceprefix_ , self.gds_format_float(self.RankedValue, input_name='RankedValue'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Counterpart':
            Counterpart_ = child_.text
            Counterpart_ = self.gds_validate_string(Counterpart_, node, 'Counterpart')
            self.Counterpart = Counterpart_
        elif nodeName_ == 'CounterpartName':
            CounterpartName_ = child_.text
            CounterpartName_ = self.gds_validate_string(CounterpartName_, node, 'CounterpartName')
            self.CounterpartName = CounterpartName_
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
        elif nodeName_ == 'RankedValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RankedValue')
            self.RankedValue = fval_
# end class GeneralType37


class TransactionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ANY=None, DXLID=None, ISIN=None, CUSIP=None, QUICK=None, SEDOL=None, TICKER=None, TICKER_CODE=None, DE_INHOUSE=None, INTERNAL_ID=None, ACCOUNT=None, RANK=None, RANKTYPE=None, DATATYPE=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ANY = _cast(None, ANY)
        self.DXLID = _cast(None, DXLID)
        self.ISIN = _cast(None, ISIN)
        self.CUSIP = _cast(None, CUSIP)
        self.QUICK = _cast(None, QUICK)
        self.SEDOL = _cast(None, SEDOL)
        self.TICKER = _cast(None, TICKER)
        self.TICKER_CODE = _cast(None, TICKER_CODE)
        self.DE_INHOUSE = _cast(None, DE_INHOUSE)
        self.INTERNAL_ID = _cast(None, INTERNAL_ID)
        self.ACCOUNT = _cast(None, ACCOUNT)
        self.RANK = _cast(None, RANK)
        self.RANKTYPE = _cast(None, RANKTYPE)
        self.DATATYPE = _cast(None, DATATYPE)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransactionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransactionType.subclass:
            return TransactionType.subclass(*args_, **kwargs_)
        else:
            return TransactionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_ANY(self):
        return self.ANY
    def set_ANY(self, ANY):
        self.ANY = ANY
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def get_TICKER_CODE(self):
        return self.TICKER_CODE
    def set_TICKER_CODE(self, TICKER_CODE):
        self.TICKER_CODE = TICKER_CODE
    def get_DE_INHOUSE(self):
        return self.DE_INHOUSE
    def set_DE_INHOUSE(self, DE_INHOUSE):
        self.DE_INHOUSE = DE_INHOUSE
    def get_INTERNAL_ID(self):
        return self.INTERNAL_ID
    def set_INTERNAL_ID(self, INTERNAL_ID):
        self.INTERNAL_ID = INTERNAL_ID
    def get_ACCOUNT(self):
        return self.ACCOUNT
    def set_ACCOUNT(self, ACCOUNT):
        self.ACCOUNT = ACCOUNT
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_RANKTYPE(self):
        return self.RANKTYPE
    def set_RANKTYPE(self, RANKTYPE):
        self.RANKTYPE = RANKTYPE
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TransactionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransactionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransactionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransactionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TransactionType'):
        if self.ANY is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            outfile.write(' ANY=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ANY), input_name='ANY')), ))
        if self.DXLID is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            outfile.write(' DXLID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DXLID), input_name='DXLID')), ))
        if self.ISIN is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            outfile.write(' ISIN=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ISIN), input_name='ISIN')), ))
        if self.CUSIP is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            outfile.write(' CUSIP=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.CUSIP), input_name='CUSIP')), ))
        if self.QUICK is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            outfile.write(' QUICK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.QUICK), input_name='QUICK')), ))
        if self.SEDOL is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            outfile.write(' SEDOL=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SEDOL), input_name='SEDOL')), ))
        if self.TICKER is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            outfile.write(' TICKER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER), input_name='TICKER')), ))
        if self.TICKER_CODE is not None and 'TICKER_CODE' not in already_processed:
            already_processed.add('TICKER_CODE')
            outfile.write(' TICKER.CODE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER_CODE), input_name='TICKER.CODE')), ))
        if self.DE_INHOUSE is not None and 'DE_INHOUSE' not in already_processed:
            already_processed.add('DE_INHOUSE')
            outfile.write(' DE_INHOUSE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DE_INHOUSE), input_name='DE_INHOUSE')), ))
        if self.INTERNAL_ID is not None and 'INTERNAL_ID' not in already_processed:
            already_processed.add('INTERNAL_ID')
            outfile.write(' INTERNAL_ID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.INTERNAL_ID), input_name='INTERNAL_ID')), ))
        if self.ACCOUNT is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            outfile.write(' ACCOUNT=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ACCOUNT), input_name='ACCOUNT')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.RANKTYPE is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            outfile.write(' RANKTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANKTYPE), input_name='RANKTYPE')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TransactionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ANY', node)
        if value is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            self.ANY = value
        value = find_attr_value_('DXLID', node)
        if value is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            self.DXLID = value
        value = find_attr_value_('ISIN', node)
        if value is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            self.ISIN = value
        value = find_attr_value_('CUSIP', node)
        if value is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            self.CUSIP = value
        value = find_attr_value_('QUICK', node)
        if value is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            self.QUICK = value
        value = find_attr_value_('SEDOL', node)
        if value is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            self.SEDOL = value
        value = find_attr_value_('TICKER', node)
        if value is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            self.TICKER = value
        value = find_attr_value_('TICKER.CODE', node)
        if value is not None and 'TICKER.CODE' not in already_processed:
            already_processed.add('TICKER.CODE')
            self.TICKER_CODE = value
        value = find_attr_value_('DE_INHOUSE', node)
        if value is not None and 'DE_INHOUSE' not in already_processed:
            already_processed.add('DE_INHOUSE')
            self.DE_INHOUSE = value
        value = find_attr_value_('INTERNAL_ID', node)
        if value is not None and 'INTERNAL_ID' not in already_processed:
            already_processed.add('INTERNAL_ID')
            self.INTERNAL_ID = value
        value = find_attr_value_('ACCOUNT', node)
        if value is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            self.ACCOUNT = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('RANKTYPE', node)
        if value is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            self.RANKTYPE = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType38.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class TransactionType


class DataDateType38(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType38)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType38.subclass:
            return DataDateType38.subclass(*args_, **kwargs_)
        else:
            return DataDateType38(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType38', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType38')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType38')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType38', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType38'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType38', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType39.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType38


class GeneralType39(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CollateralTradeFlow=None, CounterpartName=None, FundName=None, FundPath=None, Quantity=None, SettlementDate=None, TransactionRef=None, Value=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.CollateralTradeFlow = CollateralTradeFlow
        self.CounterpartName = CounterpartName
        self.FundName = FundName
        self.FundPath = FundPath
        self.Quantity = Quantity
        if isinstance(SettlementDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(SettlementDate, '%Y-%m-%d').date()
        else:
            initvalue_ = SettlementDate
        self.SettlementDate = initvalue_
        self.TransactionRef = TransactionRef
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType39)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType39.subclass:
            return GeneralType39.subclass(*args_, **kwargs_)
        else:
            return GeneralType39(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CollateralTradeFlow(self):
        return self.CollateralTradeFlow
    def set_CollateralTradeFlow(self, CollateralTradeFlow):
        self.CollateralTradeFlow = CollateralTradeFlow
    def get_CounterpartName(self):
        return self.CounterpartName
    def set_CounterpartName(self, CounterpartName):
        self.CounterpartName = CounterpartName
    def get_FundName(self):
        return self.FundName
    def set_FundName(self, FundName):
        self.FundName = FundName
    def get_FundPath(self):
        return self.FundPath
    def set_FundPath(self, FundPath):
        self.FundPath = FundPath
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_SettlementDate(self):
        return self.SettlementDate
    def set_SettlementDate(self, SettlementDate):
        self.SettlementDate = SettlementDate
    def get_TransactionRef(self):
        return self.TransactionRef
    def set_TransactionRef(self, TransactionRef):
        self.TransactionRef = TransactionRef
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def hasContent_(self):
        if (
            self.CollateralTradeFlow is not None or
            self.CounterpartName is not None or
            self.FundName is not None or
            self.FundPath is not None or
            self.Quantity is not None or
            self.SettlementDate is not None or
            self.TransactionRef is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType39', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType39')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType39')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType39', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType39'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType39', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CollateralTradeFlow is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCollateralTradeFlow>%s</%sCollateralTradeFlow>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CollateralTradeFlow), input_name='CollateralTradeFlow')), namespaceprefix_ , eol_))
        if self.CounterpartName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCounterpartName>%s</%sCounterpartName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CounterpartName), input_name='CounterpartName')), namespaceprefix_ , eol_))
        if self.FundName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFundName>%s</%sFundName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FundName), input_name='FundName')), namespaceprefix_ , eol_))
        if self.FundPath is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFundPath>%s</%sFundPath>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FundPath), input_name='FundPath')), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.SettlementDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSettlementDate>%s</%sSettlementDate>%s' % (namespaceprefix_ , self.gds_format_date(self.SettlementDate, input_name='SettlementDate'), namespaceprefix_ , eol_))
        if self.TransactionRef is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransactionRef>%s</%sTransactionRef>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransactionRef), input_name='TransactionRef')), namespaceprefix_ , eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_format_float(self.Value, input_name='Value'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CollateralTradeFlow':
            CollateralTradeFlow_ = child_.text
            CollateralTradeFlow_ = self.gds_validate_string(CollateralTradeFlow_, node, 'CollateralTradeFlow')
            self.CollateralTradeFlow = CollateralTradeFlow_
        elif nodeName_ == 'CounterpartName':
            CounterpartName_ = child_.text
            CounterpartName_ = self.gds_validate_string(CounterpartName_, node, 'CounterpartName')
            self.CounterpartName = CounterpartName_
        elif nodeName_ == 'FundName':
            FundName_ = child_.text
            FundName_ = self.gds_validate_string(FundName_, node, 'FundName')
            self.FundName = FundName_
        elif nodeName_ == 'FundPath':
            FundPath_ = child_.text
            FundPath_ = self.gds_validate_string(FundPath_, node, 'FundPath')
            self.FundPath = FundPath_
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Quantity')
            self.Quantity = fval_
        elif nodeName_ == 'SettlementDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.SettlementDate = dval_
        elif nodeName_ == 'TransactionRef':
            TransactionRef_ = child_.text
            TransactionRef_ = self.gds_validate_string(TransactionRef_, node, 'TransactionRef')
            self.TransactionRef = TransactionRef_
        elif nodeName_ == 'Value' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Value')
            self.Value = fval_
# end class GeneralType39


class DataSourceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DATASOURCETYPE=None, RANK=None, RANKTYPE=None, DATATYPE=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DATASOURCETYPE = _cast(None, DATASOURCETYPE)
        self.RANK = _cast(None, RANK)
        self.RANKTYPE = _cast(None, RANKTYPE)
        self.DATATYPE = _cast(None, DATATYPE)
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataSourceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataSourceType.subclass:
            return DataSourceType.subclass(*args_, **kwargs_)
        else:
            return DataSourceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_DATASOURCETYPE(self):
        return self.DATASOURCETYPE
    def set_DATASOURCETYPE(self, DATASOURCETYPE):
        self.DATASOURCETYPE = DATASOURCETYPE
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_RANKTYPE(self):
        return self.RANKTYPE
    def set_RANKTYPE(self, RANKTYPE):
        self.RANKTYPE = RANKTYPE
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataSourceType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataSourceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataSourceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataSourceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataSourceType'):
        if self.DATASOURCETYPE is not None and 'DATASOURCETYPE' not in already_processed:
            already_processed.add('DATASOURCETYPE')
            outfile.write(' DATASOURCETYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATASOURCETYPE), input_name='DATASOURCETYPE')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.RANKTYPE is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            outfile.write(' RANKTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANKTYPE), input_name='RANKTYPE')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataSourceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DATASOURCETYPE', node)
        if value is not None and 'DATASOURCETYPE' not in already_processed:
            already_processed.add('DATASOURCETYPE')
            self.DATASOURCETYPE = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('RANKTYPE', node)
        if value is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            self.RANKTYPE = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType40.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataSourceType


class GeneralType40(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DataSourceCount=None, DefaultPriority=None, Namespace=None, SourceId=None, SourceName=None, SourceType=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DataSourceCount = DataSourceCount
        self.DefaultPriority = DefaultPriority
        self.Namespace = Namespace
        self.SourceId = SourceId
        self.SourceName = SourceName
        self.SourceType = SourceType
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType40)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType40.subclass:
            return GeneralType40.subclass(*args_, **kwargs_)
        else:
            return GeneralType40(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataSourceCount(self):
        return self.DataSourceCount
    def set_DataSourceCount(self, DataSourceCount):
        self.DataSourceCount = DataSourceCount
    def get_DefaultPriority(self):
        return self.DefaultPriority
    def set_DefaultPriority(self, DefaultPriority):
        self.DefaultPriority = DefaultPriority
    def get_Namespace(self):
        return self.Namespace
    def set_Namespace(self, Namespace):
        self.Namespace = Namespace
    def get_SourceId(self):
        return self.SourceId
    def set_SourceId(self, SourceId):
        self.SourceId = SourceId
    def get_SourceName(self):
        return self.SourceName
    def set_SourceName(self, SourceName):
        self.SourceName = SourceName
    def get_SourceType(self):
        return self.SourceType
    def set_SourceType(self, SourceType):
        self.SourceType = SourceType
    def hasContent_(self):
        if (
            self.DataSourceCount is not None or
            self.DefaultPriority is not None or
            self.Namespace is not None or
            self.SourceId is not None or
            self.SourceName is not None or
            self.SourceType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType40', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType40')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType40')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType40', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType40'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType40', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DataSourceCount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataSourceCount>%s</%sDataSourceCount>%s' % (namespaceprefix_ , self.gds_format_float(self.DataSourceCount, input_name='DataSourceCount'), namespaceprefix_ , eol_))
        if self.DefaultPriority is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDefaultPriority>%s</%sDefaultPriority>%s' % (namespaceprefix_ , self.gds_format_float(self.DefaultPriority, input_name='DefaultPriority'), namespaceprefix_ , eol_))
        if self.Namespace is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNamespace>%s</%sNamespace>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Namespace), input_name='Namespace')), namespaceprefix_ , eol_))
        if self.SourceId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSourceId>%s</%sSourceId>%s' % (namespaceprefix_ , self.gds_format_float(self.SourceId, input_name='SourceId'), namespaceprefix_ , eol_))
        if self.SourceName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSourceName>%s</%sSourceName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SourceName), input_name='SourceName')), namespaceprefix_ , eol_))
        if self.SourceType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSourceType>%s</%sSourceType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SourceType), input_name='SourceType')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataSourceCount' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DataSourceCount')
            self.DataSourceCount = fval_
        elif nodeName_ == 'DefaultPriority' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DefaultPriority')
            self.DefaultPriority = fval_
        elif nodeName_ == 'Namespace':
            Namespace_ = child_.text
            Namespace_ = self.gds_validate_string(Namespace_, node, 'Namespace')
            self.Namespace = Namespace_
        elif nodeName_ == 'SourceId' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SourceId')
            self.SourceId = fval_
        elif nodeName_ == 'SourceName':
            SourceName_ = child_.text
            SourceName_ = self.gds_validate_string(SourceName_, node, 'SourceName')
            self.SourceName = SourceName_
        elif nodeName_ == 'SourceType':
            SourceType_ = child_.text
            SourceType_ = self.gds_validate_string(SourceType_, node, 'SourceType')
            self.SourceType = SourceType_
# end class GeneralType40


class DataFeedStatusType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DATASOURCEID=None, DATASOURCETYPE=None, DATASOURCENAME=None, RANK=None, RANKTYPE=None, DATATYPE=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DATASOURCEID = _cast(None, DATASOURCEID)
        self.DATASOURCETYPE = _cast(None, DATASOURCETYPE)
        self.DATASOURCENAME = _cast(None, DATASOURCENAME)
        self.RANK = _cast(None, RANK)
        self.RANKTYPE = _cast(None, RANKTYPE)
        self.DATATYPE = _cast(None, DATATYPE)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataFeedStatusType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataFeedStatusType.subclass:
            return DataFeedStatusType.subclass(*args_, **kwargs_)
        else:
            return DataFeedStatusType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_DATASOURCEID(self):
        return self.DATASOURCEID
    def set_DATASOURCEID(self, DATASOURCEID):
        self.DATASOURCEID = DATASOURCEID
    def get_DATASOURCETYPE(self):
        return self.DATASOURCETYPE
    def set_DATASOURCETYPE(self, DATASOURCETYPE):
        self.DATASOURCETYPE = DATASOURCETYPE
    def get_DATASOURCENAME(self):
        return self.DATASOURCENAME
    def set_DATASOURCENAME(self, DATASOURCENAME):
        self.DATASOURCENAME = DATASOURCENAME
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_RANKTYPE(self):
        return self.RANKTYPE
    def set_RANKTYPE(self, RANKTYPE):
        self.RANKTYPE = RANKTYPE
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataFeedStatusType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataFeedStatusType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataFeedStatusType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataFeedStatusType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataFeedStatusType'):
        if self.DATASOURCEID is not None and 'DATASOURCEID' not in already_processed:
            already_processed.add('DATASOURCEID')
            outfile.write(' DATASOURCEID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATASOURCEID), input_name='DATASOURCEID')), ))
        if self.DATASOURCETYPE is not None and 'DATASOURCETYPE' not in already_processed:
            already_processed.add('DATASOURCETYPE')
            outfile.write(' DATASOURCETYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATASOURCETYPE), input_name='DATASOURCETYPE')), ))
        if self.DATASOURCENAME is not None and 'DATASOURCENAME' not in already_processed:
            already_processed.add('DATASOURCENAME')
            outfile.write(' DATASOURCENAME=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATASOURCENAME), input_name='DATASOURCENAME')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.RANKTYPE is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            outfile.write(' RANKTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANKTYPE), input_name='RANKTYPE')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataFeedStatusType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DATASOURCEID', node)
        if value is not None and 'DATASOURCEID' not in already_processed:
            already_processed.add('DATASOURCEID')
            self.DATASOURCEID = value
        value = find_attr_value_('DATASOURCETYPE', node)
        if value is not None and 'DATASOURCETYPE' not in already_processed:
            already_processed.add('DATASOURCETYPE')
            self.DATASOURCETYPE = value
        value = find_attr_value_('DATASOURCENAME', node)
        if value is not None and 'DATASOURCENAME' not in already_processed:
            already_processed.add('DATASOURCENAME')
            self.DATASOURCENAME = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('RANKTYPE', node)
        if value is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            self.RANKTYPE = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType41.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class DataFeedStatusType


class DataDateType41(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, DataStatus=None, FTP=None, InputData=None, IntradayInputData=None, OverUtilisation=None, PublishedInformation=None, PxPeerGroup=None, ReportRunner=None, Reports=None, Results=None, RowExclusionDetail=None, SignOff=None, Variance=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.DataStatus = DataStatus
        self.FTP = FTP
        self.InputData = InputData
        self.IntradayInputData = IntradayInputData
        self.OverUtilisation = OverUtilisation
        self.PublishedInformation = PublishedInformation
        self.PxPeerGroup = PxPeerGroup
        self.ReportRunner = ReportRunner
        self.Reports = Reports
        self.Results = Results
        self.RowExclusionDetail = RowExclusionDetail
        self.SignOff = SignOff
        self.Variance = Variance
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType41)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType41.subclass:
            return DataDateType41.subclass(*args_, **kwargs_)
        else:
            return DataDateType41(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataStatus(self):
        return self.DataStatus
    def set_DataStatus(self, DataStatus):
        self.DataStatus = DataStatus
    def get_FTP(self):
        return self.FTP
    def set_FTP(self, FTP):
        self.FTP = FTP
    def get_InputData(self):
        return self.InputData
    def set_InputData(self, InputData):
        self.InputData = InputData
    def get_IntradayInputData(self):
        return self.IntradayInputData
    def set_IntradayInputData(self, IntradayInputData):
        self.IntradayInputData = IntradayInputData
    def get_OverUtilisation(self):
        return self.OverUtilisation
    def set_OverUtilisation(self, OverUtilisation):
        self.OverUtilisation = OverUtilisation
    def get_PublishedInformation(self):
        return self.PublishedInformation
    def set_PublishedInformation(self, PublishedInformation):
        self.PublishedInformation = PublishedInformation
    def get_PxPeerGroup(self):
        return self.PxPeerGroup
    def set_PxPeerGroup(self, PxPeerGroup):
        self.PxPeerGroup = PxPeerGroup
    def get_ReportRunner(self):
        return self.ReportRunner
    def set_ReportRunner(self, ReportRunner):
        self.ReportRunner = ReportRunner
    def get_Reports(self):
        return self.Reports
    def set_Reports(self, Reports):
        self.Reports = Reports
    def get_Results(self):
        return self.Results
    def set_Results(self, Results):
        self.Results = Results
    def get_RowExclusionDetail(self):
        return self.RowExclusionDetail
    def set_RowExclusionDetail(self, RowExclusionDetail):
        self.RowExclusionDetail = RowExclusionDetail
    def get_SignOff(self):
        return self.SignOff
    def set_SignOff(self, SignOff):
        self.SignOff = SignOff
    def get_Variance(self):
        return self.Variance
    def set_Variance(self, Variance):
        self.Variance = Variance
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.DataStatus is not None or
            self.FTP is not None or
            self.InputData is not None or
            self.IntradayInputData is not None or
            self.OverUtilisation is not None or
            self.PublishedInformation is not None or
            self.PxPeerGroup is not None or
            self.ReportRunner is not None or
            self.Reports is not None or
            self.Results is not None or
            self.RowExclusionDetail is not None or
            self.SignOff is not None or
            self.Variance is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType41', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType41')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType41')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType41', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType41'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType41', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DataStatus is not None:
            self.DataStatus.export(outfile, level, namespaceprefix_, name_='DataStatus', pretty_print=pretty_print)
        if self.FTP is not None:
            self.FTP.export(outfile, level, namespaceprefix_, name_='FTP', pretty_print=pretty_print)
        if self.InputData is not None:
            self.InputData.export(outfile, level, namespaceprefix_, name_='InputData', pretty_print=pretty_print)
        if self.IntradayInputData is not None:
            self.IntradayInputData.export(outfile, level, namespaceprefix_, name_='IntradayInputData', pretty_print=pretty_print)
        if self.OverUtilisation is not None:
            self.OverUtilisation.export(outfile, level, namespaceprefix_, name_='OverUtilisation', pretty_print=pretty_print)
        if self.PublishedInformation is not None:
            self.PublishedInformation.export(outfile, level, namespaceprefix_, name_='PublishedInformation', pretty_print=pretty_print)
        if self.PxPeerGroup is not None:
            self.PxPeerGroup.export(outfile, level, namespaceprefix_, name_='PxPeerGroup', pretty_print=pretty_print)
        if self.ReportRunner is not None:
            self.ReportRunner.export(outfile, level, namespaceprefix_, name_='ReportRunner', pretty_print=pretty_print)
        if self.Reports is not None:
            self.Reports.export(outfile, level, namespaceprefix_, name_='Reports', pretty_print=pretty_print)
        if self.Results is not None:
            self.Results.export(outfile, level, namespaceprefix_, name_='Results', pretty_print=pretty_print)
        if self.RowExclusionDetail is not None:
            self.RowExclusionDetail.export(outfile, level, namespaceprefix_, name_='RowExclusionDetail', pretty_print=pretty_print)
        if self.SignOff is not None:
            self.SignOff.export(outfile, level, namespaceprefix_, name_='SignOff', pretty_print=pretty_print)
        if self.Variance is not None:
            self.Variance.export(outfile, level, namespaceprefix_, name_='Variance', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataStatus':
            obj_ = DataStatusType.factory(parent_object_=self)
            obj_.build(child_)
            self.DataStatus = obj_
            obj_.original_tagname_ = 'DataStatus'
        elif nodeName_ == 'FTP':
            obj_ = FTPType.factory(parent_object_=self)
            obj_.build(child_)
            self.FTP = obj_
            obj_.original_tagname_ = 'FTP'
        elif nodeName_ == 'InputData':
            obj_ = InputDataType.factory(parent_object_=self)
            obj_.build(child_)
            self.InputData = obj_
            obj_.original_tagname_ = 'InputData'
        elif nodeName_ == 'IntradayInputData':
            obj_ = IntradayInputDataType.factory(parent_object_=self)
            obj_.build(child_)
            self.IntradayInputData = obj_
            obj_.original_tagname_ = 'IntradayInputData'
        elif nodeName_ == 'OverUtilisation':
            obj_ = OverUtilisationType.factory(parent_object_=self)
            obj_.build(child_)
            self.OverUtilisation = obj_
            obj_.original_tagname_ = 'OverUtilisation'
        elif nodeName_ == 'PublishedInformation':
            obj_ = PublishedInformationType.factory(parent_object_=self)
            obj_.build(child_)
            self.PublishedInformation = obj_
            obj_.original_tagname_ = 'PublishedInformation'
        elif nodeName_ == 'PxPeerGroup':
            obj_ = PxPeerGroupType.factory(parent_object_=self)
            obj_.build(child_)
            self.PxPeerGroup = obj_
            obj_.original_tagname_ = 'PxPeerGroup'
        elif nodeName_ == 'ReportRunner':
            obj_ = ReportRunnerType.factory(parent_object_=self)
            obj_.build(child_)
            self.ReportRunner = obj_
            obj_.original_tagname_ = 'ReportRunner'
        elif nodeName_ == 'Reports':
            obj_ = ReportsType.factory(parent_object_=self)
            obj_.build(child_)
            self.Reports = obj_
            obj_.original_tagname_ = 'Reports'
        elif nodeName_ == 'Results':
            obj_ = ResultsType.factory(parent_object_=self)
            obj_.build(child_)
            self.Results = obj_
            obj_.original_tagname_ = 'Results'
        elif nodeName_ == 'RowExclusionDetail':
            obj_ = RowExclusionDetailType.factory(parent_object_=self)
            obj_.build(child_)
            self.RowExclusionDetail = obj_
            obj_.original_tagname_ = 'RowExclusionDetail'
        elif nodeName_ == 'SignOff':
            obj_ = SignOffType.factory(parent_object_=self)
            obj_.build(child_)
            self.SignOff = obj_
            obj_.original_tagname_ = 'SignOff'
        elif nodeName_ == 'Variance':
            obj_ = VarianceType.factory(parent_object_=self)
            obj_.build(child_)
            self.Variance = obj_
            obj_.original_tagname_ = 'Variance'
# end class DataDateType41


class DataStatusType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DataFeedDate=None, DataStatusCount=None, HasDataInStore=None, HasWarning=None, IsInError=None, IsLocked=None, IsPending=None, Priority=None, Status=None, UpdateTime=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(DataFeedDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DataFeedDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DataFeedDate
        self.DataFeedDate = initvalue_
        self.DataStatusCount = DataStatusCount
        self.HasDataInStore = HasDataInStore
        self.HasWarning = HasWarning
        self.IsInError = IsInError
        self.IsLocked = IsLocked
        self.IsPending = IsPending
        self.Priority = Priority
        self.Status = Status
        if isinstance(UpdateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(UpdateTime, '%Y-%m-%d').date()
        else:
            initvalue_ = UpdateTime
        self.UpdateTime = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataStatusType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataStatusType.subclass:
            return DataStatusType.subclass(*args_, **kwargs_)
        else:
            return DataStatusType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataFeedDate(self):
        return self.DataFeedDate
    def set_DataFeedDate(self, DataFeedDate):
        self.DataFeedDate = DataFeedDate
    def get_DataStatusCount(self):
        return self.DataStatusCount
    def set_DataStatusCount(self, DataStatusCount):
        self.DataStatusCount = DataStatusCount
    def get_HasDataInStore(self):
        return self.HasDataInStore
    def set_HasDataInStore(self, HasDataInStore):
        self.HasDataInStore = HasDataInStore
    def get_HasWarning(self):
        return self.HasWarning
    def set_HasWarning(self, HasWarning):
        self.HasWarning = HasWarning
    def get_IsInError(self):
        return self.IsInError
    def set_IsInError(self, IsInError):
        self.IsInError = IsInError
    def get_IsLocked(self):
        return self.IsLocked
    def set_IsLocked(self, IsLocked):
        self.IsLocked = IsLocked
    def get_IsPending(self):
        return self.IsPending
    def set_IsPending(self, IsPending):
        self.IsPending = IsPending
    def get_Priority(self):
        return self.Priority
    def set_Priority(self, Priority):
        self.Priority = Priority
    def get_Status(self):
        return self.Status
    def set_Status(self, Status):
        self.Status = Status
    def get_UpdateTime(self):
        return self.UpdateTime
    def set_UpdateTime(self, UpdateTime):
        self.UpdateTime = UpdateTime
    def hasContent_(self):
        if (
            self.DataFeedDate is not None or
            self.DataStatusCount is not None or
            self.HasDataInStore is not None or
            self.HasWarning is not None or
            self.IsInError is not None or
            self.IsLocked is not None or
            self.IsPending is not None or
            self.Priority is not None or
            self.Status is not None or
            self.UpdateTime is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataStatusType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataStatusType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataStatusType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataStatusType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataStatusType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataStatusType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DataFeedDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataFeedDate>%s</%sDataFeedDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DataFeedDate, input_name='DataFeedDate'), namespaceprefix_ , eol_))
        if self.DataStatusCount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataStatusCount>%s</%sDataStatusCount>%s' % (namespaceprefix_ , self.gds_format_float(self.DataStatusCount, input_name='DataStatusCount'), namespaceprefix_ , eol_))
        if self.HasDataInStore is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHasDataInStore>%s</%sHasDataInStore>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HasDataInStore), input_name='HasDataInStore')), namespaceprefix_ , eol_))
        if self.HasWarning is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHasWarning>%s</%sHasWarning>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HasWarning), input_name='HasWarning')), namespaceprefix_ , eol_))
        if self.IsInError is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsInError>%s</%sIsInError>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsInError), input_name='IsInError')), namespaceprefix_ , eol_))
        if self.IsLocked is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsLocked>%s</%sIsLocked>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsLocked), input_name='IsLocked')), namespaceprefix_ , eol_))
        if self.IsPending is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsPending>%s</%sIsPending>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsPending), input_name='IsPending')), namespaceprefix_ , eol_))
        if self.Priority is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriority>%s</%sPriority>%s' % (namespaceprefix_ , self.gds_format_float(self.Priority, input_name='Priority'), namespaceprefix_ , eol_))
        if self.Status is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatus>%s</%sStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Status), input_name='Status')), namespaceprefix_ , eol_))
        if self.UpdateTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUpdateTime>%s</%sUpdateTime>%s' % (namespaceprefix_ , self.gds_format_date(self.UpdateTime, input_name='UpdateTime'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataFeedDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DataFeedDate = dval_
        elif nodeName_ == 'DataStatusCount' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DataStatusCount')
            self.DataStatusCount = fval_
        elif nodeName_ == 'HasDataInStore':
            HasDataInStore_ = child_.text
            HasDataInStore_ = self.gds_validate_string(HasDataInStore_, node, 'HasDataInStore')
            self.HasDataInStore = HasDataInStore_
        elif nodeName_ == 'HasWarning':
            HasWarning_ = child_.text
            HasWarning_ = self.gds_validate_string(HasWarning_, node, 'HasWarning')
            self.HasWarning = HasWarning_
        elif nodeName_ == 'IsInError':
            IsInError_ = child_.text
            IsInError_ = self.gds_validate_string(IsInError_, node, 'IsInError')
            self.IsInError = IsInError_
        elif nodeName_ == 'IsLocked':
            IsLocked_ = child_.text
            IsLocked_ = self.gds_validate_string(IsLocked_, node, 'IsLocked')
            self.IsLocked = IsLocked_
        elif nodeName_ == 'IsPending':
            IsPending_ = child_.text
            IsPending_ = self.gds_validate_string(IsPending_, node, 'IsPending')
            self.IsPending = IsPending_
        elif nodeName_ == 'Priority' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Priority')
            self.Priority = fval_
        elif nodeName_ == 'Status':
            Status_ = child_.text
            Status_ = self.gds_validate_string(Status_, node, 'Status')
            self.Status = Status_
        elif nodeName_ == 'UpdateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.UpdateTime = dval_
# end class DataStatusType


class FTPType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LastTimestamp=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(LastTimestamp, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LastTimestamp, '%Y-%m-%d').date()
        else:
            initvalue_ = LastTimestamp
        self.LastTimestamp = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FTPType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FTPType.subclass:
            return FTPType.subclass(*args_, **kwargs_)
        else:
            return FTPType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LastTimestamp(self):
        return self.LastTimestamp
    def set_LastTimestamp(self, LastTimestamp):
        self.LastTimestamp = LastTimestamp
    def hasContent_(self):
        if (
            self.LastTimestamp is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FTPType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FTPType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FTPType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FTPType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FTPType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FTPType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LastTimestamp is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLastTimestamp>%s</%sLastTimestamp>%s' % (namespaceprefix_ , self.gds_format_date(self.LastTimestamp, input_name='LastTimestamp'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LastTimestamp':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.LastTimestamp = dval_
# end class FTPType


class InputDataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrenciesForRiskFreeRates=None, CurrenciesForValues=None, NumberOfFailRows=None, NumberOfIgnoredRows=None, NumberOfRepoRows=None, NumberOfRows=None, NumberOfRowsAutoEdited=None, NumberOfRowsManuallyEdited=None, NumberOfRowsOutsideOfHoldingsTolerance=None, NumberOfRowsWithLowQuantity=None, NumberOfRowsWithNoUniqueHistory=None, NumberOfRowsWithOriginalCounterparts=None, NumberOfSuccessRows=None, PercentOfFailRows=None, PercentValueOfFailRows=None, ValueOfInput=None, ValueOfOutput=None, ValueOfRepoRows=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.CurrenciesForRiskFreeRates = CurrenciesForRiskFreeRates
        self.CurrenciesForValues = CurrenciesForValues
        self.NumberOfFailRows = NumberOfFailRows
        self.NumberOfIgnoredRows = NumberOfIgnoredRows
        self.NumberOfRepoRows = NumberOfRepoRows
        self.NumberOfRows = NumberOfRows
        self.NumberOfRowsAutoEdited = NumberOfRowsAutoEdited
        self.NumberOfRowsManuallyEdited = NumberOfRowsManuallyEdited
        self.NumberOfRowsOutsideOfHoldingsTolerance = NumberOfRowsOutsideOfHoldingsTolerance
        self.NumberOfRowsWithLowQuantity = NumberOfRowsWithLowQuantity
        self.NumberOfRowsWithNoUniqueHistory = NumberOfRowsWithNoUniqueHistory
        self.NumberOfRowsWithOriginalCounterparts = NumberOfRowsWithOriginalCounterparts
        self.NumberOfSuccessRows = NumberOfSuccessRows
        self.PercentOfFailRows = PercentOfFailRows
        self.PercentValueOfFailRows = PercentValueOfFailRows
        self.ValueOfInput = ValueOfInput
        self.ValueOfOutput = ValueOfOutput
        self.ValueOfRepoRows = ValueOfRepoRows
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InputDataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InputDataType.subclass:
            return InputDataType.subclass(*args_, **kwargs_)
        else:
            return InputDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrenciesForRiskFreeRates(self):
        return self.CurrenciesForRiskFreeRates
    def set_CurrenciesForRiskFreeRates(self, CurrenciesForRiskFreeRates):
        self.CurrenciesForRiskFreeRates = CurrenciesForRiskFreeRates
    def get_CurrenciesForValues(self):
        return self.CurrenciesForValues
    def set_CurrenciesForValues(self, CurrenciesForValues):
        self.CurrenciesForValues = CurrenciesForValues
    def get_NumberOfFailRows(self):
        return self.NumberOfFailRows
    def set_NumberOfFailRows(self, NumberOfFailRows):
        self.NumberOfFailRows = NumberOfFailRows
    def get_NumberOfIgnoredRows(self):
        return self.NumberOfIgnoredRows
    def set_NumberOfIgnoredRows(self, NumberOfIgnoredRows):
        self.NumberOfIgnoredRows = NumberOfIgnoredRows
    def get_NumberOfRepoRows(self):
        return self.NumberOfRepoRows
    def set_NumberOfRepoRows(self, NumberOfRepoRows):
        self.NumberOfRepoRows = NumberOfRepoRows
    def get_NumberOfRows(self):
        return self.NumberOfRows
    def set_NumberOfRows(self, NumberOfRows):
        self.NumberOfRows = NumberOfRows
    def get_NumberOfRowsAutoEdited(self):
        return self.NumberOfRowsAutoEdited
    def set_NumberOfRowsAutoEdited(self, NumberOfRowsAutoEdited):
        self.NumberOfRowsAutoEdited = NumberOfRowsAutoEdited
    def get_NumberOfRowsManuallyEdited(self):
        return self.NumberOfRowsManuallyEdited
    def set_NumberOfRowsManuallyEdited(self, NumberOfRowsManuallyEdited):
        self.NumberOfRowsManuallyEdited = NumberOfRowsManuallyEdited
    def get_NumberOfRowsOutsideOfHoldingsTolerance(self):
        return self.NumberOfRowsOutsideOfHoldingsTolerance
    def set_NumberOfRowsOutsideOfHoldingsTolerance(self, NumberOfRowsOutsideOfHoldingsTolerance):
        self.NumberOfRowsOutsideOfHoldingsTolerance = NumberOfRowsOutsideOfHoldingsTolerance
    def get_NumberOfRowsWithLowQuantity(self):
        return self.NumberOfRowsWithLowQuantity
    def set_NumberOfRowsWithLowQuantity(self, NumberOfRowsWithLowQuantity):
        self.NumberOfRowsWithLowQuantity = NumberOfRowsWithLowQuantity
    def get_NumberOfRowsWithNoUniqueHistory(self):
        return self.NumberOfRowsWithNoUniqueHistory
    def set_NumberOfRowsWithNoUniqueHistory(self, NumberOfRowsWithNoUniqueHistory):
        self.NumberOfRowsWithNoUniqueHistory = NumberOfRowsWithNoUniqueHistory
    def get_NumberOfRowsWithOriginalCounterparts(self):
        return self.NumberOfRowsWithOriginalCounterparts
    def set_NumberOfRowsWithOriginalCounterparts(self, NumberOfRowsWithOriginalCounterparts):
        self.NumberOfRowsWithOriginalCounterparts = NumberOfRowsWithOriginalCounterparts
    def get_NumberOfSuccessRows(self):
        return self.NumberOfSuccessRows
    def set_NumberOfSuccessRows(self, NumberOfSuccessRows):
        self.NumberOfSuccessRows = NumberOfSuccessRows
    def get_PercentOfFailRows(self):
        return self.PercentOfFailRows
    def set_PercentOfFailRows(self, PercentOfFailRows):
        self.PercentOfFailRows = PercentOfFailRows
    def get_PercentValueOfFailRows(self):
        return self.PercentValueOfFailRows
    def set_PercentValueOfFailRows(self, PercentValueOfFailRows):
        self.PercentValueOfFailRows = PercentValueOfFailRows
    def get_ValueOfInput(self):
        return self.ValueOfInput
    def set_ValueOfInput(self, ValueOfInput):
        self.ValueOfInput = ValueOfInput
    def get_ValueOfOutput(self):
        return self.ValueOfOutput
    def set_ValueOfOutput(self, ValueOfOutput):
        self.ValueOfOutput = ValueOfOutput
    def get_ValueOfRepoRows(self):
        return self.ValueOfRepoRows
    def set_ValueOfRepoRows(self, ValueOfRepoRows):
        self.ValueOfRepoRows = ValueOfRepoRows
    def hasContent_(self):
        if (
            self.CurrenciesForRiskFreeRates is not None or
            self.CurrenciesForValues is not None or
            self.NumberOfFailRows is not None or
            self.NumberOfIgnoredRows is not None or
            self.NumberOfRepoRows is not None or
            self.NumberOfRows is not None or
            self.NumberOfRowsAutoEdited is not None or
            self.NumberOfRowsManuallyEdited is not None or
            self.NumberOfRowsOutsideOfHoldingsTolerance is not None or
            self.NumberOfRowsWithLowQuantity is not None or
            self.NumberOfRowsWithNoUniqueHistory is not None or
            self.NumberOfRowsWithOriginalCounterparts is not None or
            self.NumberOfSuccessRows is not None or
            self.PercentOfFailRows is not None or
            self.PercentValueOfFailRows is not None or
            self.ValueOfInput is not None or
            self.ValueOfOutput is not None or
            self.ValueOfRepoRows is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InputDataType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InputDataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InputDataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InputDataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InputDataType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InputDataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrenciesForRiskFreeRates is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrenciesForRiskFreeRates>%s</%sCurrenciesForRiskFreeRates>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CurrenciesForRiskFreeRates), input_name='CurrenciesForRiskFreeRates')), namespaceprefix_ , eol_))
        if self.CurrenciesForValues is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrenciesForValues>%s</%sCurrenciesForValues>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CurrenciesForValues), input_name='CurrenciesForValues')), namespaceprefix_ , eol_))
        if self.NumberOfFailRows is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfFailRows>%s</%sNumberOfFailRows>%s' % (namespaceprefix_ , self.gds_format_float(self.NumberOfFailRows, input_name='NumberOfFailRows'), namespaceprefix_ , eol_))
        if self.NumberOfIgnoredRows is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfIgnoredRows>%s</%sNumberOfIgnoredRows>%s' % (namespaceprefix_ , self.gds_format_float(self.NumberOfIgnoredRows, input_name='NumberOfIgnoredRows'), namespaceprefix_ , eol_))
        if self.NumberOfRepoRows is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfRepoRows>%s</%sNumberOfRepoRows>%s' % (namespaceprefix_ , self.gds_format_float(self.NumberOfRepoRows, input_name='NumberOfRepoRows'), namespaceprefix_ , eol_))
        if self.NumberOfRows is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfRows>%s</%sNumberOfRows>%s' % (namespaceprefix_ , self.gds_format_float(self.NumberOfRows, input_name='NumberOfRows'), namespaceprefix_ , eol_))
        if self.NumberOfRowsAutoEdited is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfRowsAutoEdited>%s</%sNumberOfRowsAutoEdited>%s' % (namespaceprefix_ , self.gds_format_float(self.NumberOfRowsAutoEdited, input_name='NumberOfRowsAutoEdited'), namespaceprefix_ , eol_))
        if self.NumberOfRowsManuallyEdited is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfRowsManuallyEdited>%s</%sNumberOfRowsManuallyEdited>%s' % (namespaceprefix_ , self.gds_format_float(self.NumberOfRowsManuallyEdited, input_name='NumberOfRowsManuallyEdited'), namespaceprefix_ , eol_))
        if self.NumberOfRowsOutsideOfHoldingsTolerance is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfRowsOutsideOfHoldingsTolerance>%s</%sNumberOfRowsOutsideOfHoldingsTolerance>%s' % (namespaceprefix_ , self.gds_format_float(self.NumberOfRowsOutsideOfHoldingsTolerance, input_name='NumberOfRowsOutsideOfHoldingsTolerance'), namespaceprefix_ , eol_))
        if self.NumberOfRowsWithLowQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfRowsWithLowQuantity>%s</%sNumberOfRowsWithLowQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.NumberOfRowsWithLowQuantity, input_name='NumberOfRowsWithLowQuantity'), namespaceprefix_ , eol_))
        if self.NumberOfRowsWithNoUniqueHistory is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfRowsWithNoUniqueHistory>%s</%sNumberOfRowsWithNoUniqueHistory>%s' % (namespaceprefix_ , self.gds_format_float(self.NumberOfRowsWithNoUniqueHistory, input_name='NumberOfRowsWithNoUniqueHistory'), namespaceprefix_ , eol_))
        if self.NumberOfRowsWithOriginalCounterparts is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfRowsWithOriginalCounterparts>%s</%sNumberOfRowsWithOriginalCounterparts>%s' % (namespaceprefix_ , self.gds_format_float(self.NumberOfRowsWithOriginalCounterparts, input_name='NumberOfRowsWithOriginalCounterparts'), namespaceprefix_ , eol_))
        if self.NumberOfSuccessRows is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfSuccessRows>%s</%sNumberOfSuccessRows>%s' % (namespaceprefix_ , self.gds_format_float(self.NumberOfSuccessRows, input_name='NumberOfSuccessRows'), namespaceprefix_ , eol_))
        if self.PercentOfFailRows is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPercentOfFailRows>%s</%sPercentOfFailRows>%s' % (namespaceprefix_ , self.gds_format_float(self.PercentOfFailRows, input_name='PercentOfFailRows'), namespaceprefix_ , eol_))
        if self.PercentValueOfFailRows is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPercentValueOfFailRows>%s</%sPercentValueOfFailRows>%s' % (namespaceprefix_ , self.gds_format_float(self.PercentValueOfFailRows, input_name='PercentValueOfFailRows'), namespaceprefix_ , eol_))
        if self.ValueOfInput is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOfInput>%s</%sValueOfInput>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOfInput, input_name='ValueOfInput'), namespaceprefix_ , eol_))
        if self.ValueOfOutput is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOfOutput>%s</%sValueOfOutput>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOfOutput, input_name='ValueOfOutput'), namespaceprefix_ , eol_))
        if self.ValueOfRepoRows is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOfRepoRows>%s</%sValueOfRepoRows>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOfRepoRows, input_name='ValueOfRepoRows'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrenciesForRiskFreeRates':
            CurrenciesForRiskFreeRates_ = child_.text
            CurrenciesForRiskFreeRates_ = self.gds_validate_string(CurrenciesForRiskFreeRates_, node, 'CurrenciesForRiskFreeRates')
            self.CurrenciesForRiskFreeRates = CurrenciesForRiskFreeRates_
        elif nodeName_ == 'CurrenciesForValues':
            CurrenciesForValues_ = child_.text
            CurrenciesForValues_ = self.gds_validate_string(CurrenciesForValues_, node, 'CurrenciesForValues')
            self.CurrenciesForValues = CurrenciesForValues_
        elif nodeName_ == 'NumberOfFailRows' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NumberOfFailRows')
            self.NumberOfFailRows = fval_
        elif nodeName_ == 'NumberOfIgnoredRows' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NumberOfIgnoredRows')
            self.NumberOfIgnoredRows = fval_
        elif nodeName_ == 'NumberOfRepoRows' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NumberOfRepoRows')
            self.NumberOfRepoRows = fval_
        elif nodeName_ == 'NumberOfRows' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NumberOfRows')
            self.NumberOfRows = fval_
        elif nodeName_ == 'NumberOfRowsAutoEdited' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NumberOfRowsAutoEdited')
            self.NumberOfRowsAutoEdited = fval_
        elif nodeName_ == 'NumberOfRowsManuallyEdited' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NumberOfRowsManuallyEdited')
            self.NumberOfRowsManuallyEdited = fval_
        elif nodeName_ == 'NumberOfRowsOutsideOfHoldingsTolerance' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NumberOfRowsOutsideOfHoldingsTolerance')
            self.NumberOfRowsOutsideOfHoldingsTolerance = fval_
        elif nodeName_ == 'NumberOfRowsWithLowQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NumberOfRowsWithLowQuantity')
            self.NumberOfRowsWithLowQuantity = fval_
        elif nodeName_ == 'NumberOfRowsWithNoUniqueHistory' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NumberOfRowsWithNoUniqueHistory')
            self.NumberOfRowsWithNoUniqueHistory = fval_
        elif nodeName_ == 'NumberOfRowsWithOriginalCounterparts' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NumberOfRowsWithOriginalCounterparts')
            self.NumberOfRowsWithOriginalCounterparts = fval_
        elif nodeName_ == 'NumberOfSuccessRows' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NumberOfSuccessRows')
            self.NumberOfSuccessRows = fval_
        elif nodeName_ == 'PercentOfFailRows' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PercentOfFailRows')
            self.PercentOfFailRows = fval_
        elif nodeName_ == 'PercentValueOfFailRows' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PercentValueOfFailRows')
            self.PercentValueOfFailRows = fval_
        elif nodeName_ == 'ValueOfInput' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOfInput')
            self.ValueOfInput = fval_
        elif nodeName_ == 'ValueOfOutput' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOfOutput')
            self.ValueOfOutput = fval_
        elif nodeName_ == 'ValueOfRepoRows' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOfRepoRows')
            self.ValueOfRepoRows = fval_
# end class InputDataType


class IntradayInputDataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NumberOfFailRows=None, NumberOfPendingReturnFailRows=None, NumberOfPendingReturnRows=None, NumberOfPendingReturnSuccessRows=None, NumberOfPendingTradeFailRows=None, NumberOfPendingTradeRows=None, NumberOfPendingTradeSuccessRows=None, NumberOfRows=None, NumberOfSettledRows=None, NumberOfSuccessRows=None, ValueOfPendingReturnSuccessRows=None, ValueOfPendingTradeSuccessRows=None, ValueOfSettledRows=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.NumberOfFailRows = NumberOfFailRows
        self.NumberOfPendingReturnFailRows = NumberOfPendingReturnFailRows
        self.NumberOfPendingReturnRows = NumberOfPendingReturnRows
        self.NumberOfPendingReturnSuccessRows = NumberOfPendingReturnSuccessRows
        self.NumberOfPendingTradeFailRows = NumberOfPendingTradeFailRows
        self.NumberOfPendingTradeRows = NumberOfPendingTradeRows
        self.NumberOfPendingTradeSuccessRows = NumberOfPendingTradeSuccessRows
        self.NumberOfRows = NumberOfRows
        self.NumberOfSettledRows = NumberOfSettledRows
        self.NumberOfSuccessRows = NumberOfSuccessRows
        self.ValueOfPendingReturnSuccessRows = ValueOfPendingReturnSuccessRows
        self.ValueOfPendingTradeSuccessRows = ValueOfPendingTradeSuccessRows
        self.ValueOfSettledRows = ValueOfSettledRows
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IntradayInputDataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IntradayInputDataType.subclass:
            return IntradayInputDataType.subclass(*args_, **kwargs_)
        else:
            return IntradayInputDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NumberOfFailRows(self):
        return self.NumberOfFailRows
    def set_NumberOfFailRows(self, NumberOfFailRows):
        self.NumberOfFailRows = NumberOfFailRows
    def get_NumberOfPendingReturnFailRows(self):
        return self.NumberOfPendingReturnFailRows
    def set_NumberOfPendingReturnFailRows(self, NumberOfPendingReturnFailRows):
        self.NumberOfPendingReturnFailRows = NumberOfPendingReturnFailRows
    def get_NumberOfPendingReturnRows(self):
        return self.NumberOfPendingReturnRows
    def set_NumberOfPendingReturnRows(self, NumberOfPendingReturnRows):
        self.NumberOfPendingReturnRows = NumberOfPendingReturnRows
    def get_NumberOfPendingReturnSuccessRows(self):
        return self.NumberOfPendingReturnSuccessRows
    def set_NumberOfPendingReturnSuccessRows(self, NumberOfPendingReturnSuccessRows):
        self.NumberOfPendingReturnSuccessRows = NumberOfPendingReturnSuccessRows
    def get_NumberOfPendingTradeFailRows(self):
        return self.NumberOfPendingTradeFailRows
    def set_NumberOfPendingTradeFailRows(self, NumberOfPendingTradeFailRows):
        self.NumberOfPendingTradeFailRows = NumberOfPendingTradeFailRows
    def get_NumberOfPendingTradeRows(self):
        return self.NumberOfPendingTradeRows
    def set_NumberOfPendingTradeRows(self, NumberOfPendingTradeRows):
        self.NumberOfPendingTradeRows = NumberOfPendingTradeRows
    def get_NumberOfPendingTradeSuccessRows(self):
        return self.NumberOfPendingTradeSuccessRows
    def set_NumberOfPendingTradeSuccessRows(self, NumberOfPendingTradeSuccessRows):
        self.NumberOfPendingTradeSuccessRows = NumberOfPendingTradeSuccessRows
    def get_NumberOfRows(self):
        return self.NumberOfRows
    def set_NumberOfRows(self, NumberOfRows):
        self.NumberOfRows = NumberOfRows
    def get_NumberOfSettledRows(self):
        return self.NumberOfSettledRows
    def set_NumberOfSettledRows(self, NumberOfSettledRows):
        self.NumberOfSettledRows = NumberOfSettledRows
    def get_NumberOfSuccessRows(self):
        return self.NumberOfSuccessRows
    def set_NumberOfSuccessRows(self, NumberOfSuccessRows):
        self.NumberOfSuccessRows = NumberOfSuccessRows
    def get_ValueOfPendingReturnSuccessRows(self):
        return self.ValueOfPendingReturnSuccessRows
    def set_ValueOfPendingReturnSuccessRows(self, ValueOfPendingReturnSuccessRows):
        self.ValueOfPendingReturnSuccessRows = ValueOfPendingReturnSuccessRows
    def get_ValueOfPendingTradeSuccessRows(self):
        return self.ValueOfPendingTradeSuccessRows
    def set_ValueOfPendingTradeSuccessRows(self, ValueOfPendingTradeSuccessRows):
        self.ValueOfPendingTradeSuccessRows = ValueOfPendingTradeSuccessRows
    def get_ValueOfSettledRows(self):
        return self.ValueOfSettledRows
    def set_ValueOfSettledRows(self, ValueOfSettledRows):
        self.ValueOfSettledRows = ValueOfSettledRows
    def hasContent_(self):
        if (
            self.NumberOfFailRows is not None or
            self.NumberOfPendingReturnFailRows is not None or
            self.NumberOfPendingReturnRows is not None or
            self.NumberOfPendingReturnSuccessRows is not None or
            self.NumberOfPendingTradeFailRows is not None or
            self.NumberOfPendingTradeRows is not None or
            self.NumberOfPendingTradeSuccessRows is not None or
            self.NumberOfRows is not None or
            self.NumberOfSettledRows is not None or
            self.NumberOfSuccessRows is not None or
            self.ValueOfPendingReturnSuccessRows is not None or
            self.ValueOfPendingTradeSuccessRows is not None or
            self.ValueOfSettledRows is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='IntradayInputDataType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IntradayInputDataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IntradayInputDataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IntradayInputDataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='IntradayInputDataType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='IntradayInputDataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NumberOfFailRows is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfFailRows>%s</%sNumberOfFailRows>%s' % (namespaceprefix_ , self.gds_format_float(self.NumberOfFailRows, input_name='NumberOfFailRows'), namespaceprefix_ , eol_))
        if self.NumberOfPendingReturnFailRows is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfPendingReturnFailRows>%s</%sNumberOfPendingReturnFailRows>%s' % (namespaceprefix_ , self.gds_format_float(self.NumberOfPendingReturnFailRows, input_name='NumberOfPendingReturnFailRows'), namespaceprefix_ , eol_))
        if self.NumberOfPendingReturnRows is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfPendingReturnRows>%s</%sNumberOfPendingReturnRows>%s' % (namespaceprefix_ , self.gds_format_float(self.NumberOfPendingReturnRows, input_name='NumberOfPendingReturnRows'), namespaceprefix_ , eol_))
        if self.NumberOfPendingReturnSuccessRows is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfPendingReturnSuccessRows>%s</%sNumberOfPendingReturnSuccessRows>%s' % (namespaceprefix_ , self.gds_format_float(self.NumberOfPendingReturnSuccessRows, input_name='NumberOfPendingReturnSuccessRows'), namespaceprefix_ , eol_))
        if self.NumberOfPendingTradeFailRows is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfPendingTradeFailRows>%s</%sNumberOfPendingTradeFailRows>%s' % (namespaceprefix_ , self.gds_format_float(self.NumberOfPendingTradeFailRows, input_name='NumberOfPendingTradeFailRows'), namespaceprefix_ , eol_))
        if self.NumberOfPendingTradeRows is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfPendingTradeRows>%s</%sNumberOfPendingTradeRows>%s' % (namespaceprefix_ , self.gds_format_float(self.NumberOfPendingTradeRows, input_name='NumberOfPendingTradeRows'), namespaceprefix_ , eol_))
        if self.NumberOfPendingTradeSuccessRows is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfPendingTradeSuccessRows>%s</%sNumberOfPendingTradeSuccessRows>%s' % (namespaceprefix_ , self.gds_format_float(self.NumberOfPendingTradeSuccessRows, input_name='NumberOfPendingTradeSuccessRows'), namespaceprefix_ , eol_))
        if self.NumberOfRows is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfRows>%s</%sNumberOfRows>%s' % (namespaceprefix_ , self.gds_format_float(self.NumberOfRows, input_name='NumberOfRows'), namespaceprefix_ , eol_))
        if self.NumberOfSettledRows is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfSettledRows>%s</%sNumberOfSettledRows>%s' % (namespaceprefix_ , self.gds_format_float(self.NumberOfSettledRows, input_name='NumberOfSettledRows'), namespaceprefix_ , eol_))
        if self.NumberOfSuccessRows is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfSuccessRows>%s</%sNumberOfSuccessRows>%s' % (namespaceprefix_ , self.gds_format_float(self.NumberOfSuccessRows, input_name='NumberOfSuccessRows'), namespaceprefix_ , eol_))
        if self.ValueOfPendingReturnSuccessRows is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOfPendingReturnSuccessRows>%s</%sValueOfPendingReturnSuccessRows>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOfPendingReturnSuccessRows, input_name='ValueOfPendingReturnSuccessRows'), namespaceprefix_ , eol_))
        if self.ValueOfPendingTradeSuccessRows is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOfPendingTradeSuccessRows>%s</%sValueOfPendingTradeSuccessRows>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOfPendingTradeSuccessRows, input_name='ValueOfPendingTradeSuccessRows'), namespaceprefix_ , eol_))
        if self.ValueOfSettledRows is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOfSettledRows>%s</%sValueOfSettledRows>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOfSettledRows, input_name='ValueOfSettledRows'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NumberOfFailRows' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NumberOfFailRows')
            self.NumberOfFailRows = fval_
        elif nodeName_ == 'NumberOfPendingReturnFailRows' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NumberOfPendingReturnFailRows')
            self.NumberOfPendingReturnFailRows = fval_
        elif nodeName_ == 'NumberOfPendingReturnRows' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NumberOfPendingReturnRows')
            self.NumberOfPendingReturnRows = fval_
        elif nodeName_ == 'NumberOfPendingReturnSuccessRows' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NumberOfPendingReturnSuccessRows')
            self.NumberOfPendingReturnSuccessRows = fval_
        elif nodeName_ == 'NumberOfPendingTradeFailRows' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NumberOfPendingTradeFailRows')
            self.NumberOfPendingTradeFailRows = fval_
        elif nodeName_ == 'NumberOfPendingTradeRows' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NumberOfPendingTradeRows')
            self.NumberOfPendingTradeRows = fval_
        elif nodeName_ == 'NumberOfPendingTradeSuccessRows' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NumberOfPendingTradeSuccessRows')
            self.NumberOfPendingTradeSuccessRows = fval_
        elif nodeName_ == 'NumberOfRows' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NumberOfRows')
            self.NumberOfRows = fval_
        elif nodeName_ == 'NumberOfSettledRows' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NumberOfSettledRows')
            self.NumberOfSettledRows = fval_
        elif nodeName_ == 'NumberOfSuccessRows' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NumberOfSuccessRows')
            self.NumberOfSuccessRows = fval_
        elif nodeName_ == 'ValueOfPendingReturnSuccessRows' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOfPendingReturnSuccessRows')
            self.ValueOfPendingReturnSuccessRows = fval_
        elif nodeName_ == 'ValueOfPendingTradeSuccessRows' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOfPendingTradeSuccessRows')
            self.ValueOfPendingTradeSuccessRows = fval_
        elif nodeName_ == 'ValueOfSettledRows' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOfSettledRows')
            self.ValueOfSettledRows = fval_
# end class IntradayInputDataType


class OverUtilisationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NumNewInventoryRecords=None, NumRemovedPrincipalRecords=None, ValueNewInventoryRecords=None, ValueRemovedPrincipalRecords=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.NumNewInventoryRecords = NumNewInventoryRecords
        self.NumRemovedPrincipalRecords = NumRemovedPrincipalRecords
        self.ValueNewInventoryRecords = ValueNewInventoryRecords
        self.ValueRemovedPrincipalRecords = ValueRemovedPrincipalRecords
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OverUtilisationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OverUtilisationType.subclass:
            return OverUtilisationType.subclass(*args_, **kwargs_)
        else:
            return OverUtilisationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NumNewInventoryRecords(self):
        return self.NumNewInventoryRecords
    def set_NumNewInventoryRecords(self, NumNewInventoryRecords):
        self.NumNewInventoryRecords = NumNewInventoryRecords
    def get_NumRemovedPrincipalRecords(self):
        return self.NumRemovedPrincipalRecords
    def set_NumRemovedPrincipalRecords(self, NumRemovedPrincipalRecords):
        self.NumRemovedPrincipalRecords = NumRemovedPrincipalRecords
    def get_ValueNewInventoryRecords(self):
        return self.ValueNewInventoryRecords
    def set_ValueNewInventoryRecords(self, ValueNewInventoryRecords):
        self.ValueNewInventoryRecords = ValueNewInventoryRecords
    def get_ValueRemovedPrincipalRecords(self):
        return self.ValueRemovedPrincipalRecords
    def set_ValueRemovedPrincipalRecords(self, ValueRemovedPrincipalRecords):
        self.ValueRemovedPrincipalRecords = ValueRemovedPrincipalRecords
    def hasContent_(self):
        if (
            self.NumNewInventoryRecords is not None or
            self.NumRemovedPrincipalRecords is not None or
            self.ValueNewInventoryRecords is not None or
            self.ValueRemovedPrincipalRecords is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='OverUtilisationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OverUtilisationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OverUtilisationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OverUtilisationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='OverUtilisationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='OverUtilisationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NumNewInventoryRecords is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumNewInventoryRecords>%s</%sNumNewInventoryRecords>%s' % (namespaceprefix_ , self.gds_format_float(self.NumNewInventoryRecords, input_name='NumNewInventoryRecords'), namespaceprefix_ , eol_))
        if self.NumRemovedPrincipalRecords is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumRemovedPrincipalRecords>%s</%sNumRemovedPrincipalRecords>%s' % (namespaceprefix_ , self.gds_format_float(self.NumRemovedPrincipalRecords, input_name='NumRemovedPrincipalRecords'), namespaceprefix_ , eol_))
        if self.ValueNewInventoryRecords is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueNewInventoryRecords>%s</%sValueNewInventoryRecords>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueNewInventoryRecords, input_name='ValueNewInventoryRecords'), namespaceprefix_ , eol_))
        if self.ValueRemovedPrincipalRecords is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueRemovedPrincipalRecords>%s</%sValueRemovedPrincipalRecords>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueRemovedPrincipalRecords, input_name='ValueRemovedPrincipalRecords'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NumNewInventoryRecords' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NumNewInventoryRecords')
            self.NumNewInventoryRecords = fval_
        elif nodeName_ == 'NumRemovedPrincipalRecords' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NumRemovedPrincipalRecords')
            self.NumRemovedPrincipalRecords = fval_
        elif nodeName_ == 'ValueNewInventoryRecords' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueNewInventoryRecords')
            self.ValueNewInventoryRecords = fval_
        elif nodeName_ == 'ValueRemovedPrincipalRecords' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueRemovedPrincipalRecords')
            self.ValueRemovedPrincipalRecords = fval_
# end class OverUtilisationType


class PublishedInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BusinessDataVersion=None, PeerGroupVersion=None, UsedBusinessDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.BusinessDataVersion = BusinessDataVersion
        self.PeerGroupVersion = PeerGroupVersion
        self.UsedBusinessDate = UsedBusinessDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PublishedInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PublishedInformationType.subclass:
            return PublishedInformationType.subclass(*args_, **kwargs_)
        else:
            return PublishedInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BusinessDataVersion(self):
        return self.BusinessDataVersion
    def set_BusinessDataVersion(self, BusinessDataVersion):
        self.BusinessDataVersion = BusinessDataVersion
    def get_PeerGroupVersion(self):
        return self.PeerGroupVersion
    def set_PeerGroupVersion(self, PeerGroupVersion):
        self.PeerGroupVersion = PeerGroupVersion
    def get_UsedBusinessDate(self):
        return self.UsedBusinessDate
    def set_UsedBusinessDate(self, UsedBusinessDate):
        self.UsedBusinessDate = UsedBusinessDate
    def hasContent_(self):
        if (
            self.BusinessDataVersion is not None or
            self.PeerGroupVersion is not None or
            self.UsedBusinessDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PublishedInformationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PublishedInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PublishedInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PublishedInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PublishedInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PublishedInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BusinessDataVersion is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBusinessDataVersion>%s</%sBusinessDataVersion>%s' % (namespaceprefix_ , self.gds_format_float(self.BusinessDataVersion, input_name='BusinessDataVersion'), namespaceprefix_ , eol_))
        if self.PeerGroupVersion is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPeerGroupVersion>%s</%sPeerGroupVersion>%s' % (namespaceprefix_ , self.gds_format_float(self.PeerGroupVersion, input_name='PeerGroupVersion'), namespaceprefix_ , eol_))
        if self.UsedBusinessDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUsedBusinessDate>%s</%sUsedBusinessDate>%s' % (namespaceprefix_ , self.gds_format_float(self.UsedBusinessDate, input_name='UsedBusinessDate'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BusinessDataVersion' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'BusinessDataVersion')
            self.BusinessDataVersion = fval_
        elif nodeName_ == 'PeerGroupVersion' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PeerGroupVersion')
            self.PeerGroupVersion = fval_
        elif nodeName_ == 'UsedBusinessDate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'UsedBusinessDate')
            self.UsedBusinessDate = fval_
# end class PublishedInformationType


class PxPeerGroupType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NumPassedClients=None, NumTotalClients=None, PeerGroupVersion=None, PercentOfSuccessClients=None, ReplicationMode=None, ReplicationVersion=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.NumPassedClients = NumPassedClients
        self.NumTotalClients = NumTotalClients
        self.PeerGroupVersion = PeerGroupVersion
        self.PercentOfSuccessClients = PercentOfSuccessClients
        self.ReplicationMode = ReplicationMode
        self.ReplicationVersion = ReplicationVersion
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PxPeerGroupType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PxPeerGroupType.subclass:
            return PxPeerGroupType.subclass(*args_, **kwargs_)
        else:
            return PxPeerGroupType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NumPassedClients(self):
        return self.NumPassedClients
    def set_NumPassedClients(self, NumPassedClients):
        self.NumPassedClients = NumPassedClients
    def get_NumTotalClients(self):
        return self.NumTotalClients
    def set_NumTotalClients(self, NumTotalClients):
        self.NumTotalClients = NumTotalClients
    def get_PeerGroupVersion(self):
        return self.PeerGroupVersion
    def set_PeerGroupVersion(self, PeerGroupVersion):
        self.PeerGroupVersion = PeerGroupVersion
    def get_PercentOfSuccessClients(self):
        return self.PercentOfSuccessClients
    def set_PercentOfSuccessClients(self, PercentOfSuccessClients):
        self.PercentOfSuccessClients = PercentOfSuccessClients
    def get_ReplicationMode(self):
        return self.ReplicationMode
    def set_ReplicationMode(self, ReplicationMode):
        self.ReplicationMode = ReplicationMode
    def get_ReplicationVersion(self):
        return self.ReplicationVersion
    def set_ReplicationVersion(self, ReplicationVersion):
        self.ReplicationVersion = ReplicationVersion
    def hasContent_(self):
        if (
            self.NumPassedClients is not None or
            self.NumTotalClients is not None or
            self.PeerGroupVersion is not None or
            self.PercentOfSuccessClients is not None or
            self.ReplicationMode is not None or
            self.ReplicationVersion is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PxPeerGroupType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PxPeerGroupType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PxPeerGroupType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PxPeerGroupType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PxPeerGroupType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PxPeerGroupType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NumPassedClients is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumPassedClients>%s</%sNumPassedClients>%s' % (namespaceprefix_ , self.gds_format_float(self.NumPassedClients, input_name='NumPassedClients'), namespaceprefix_ , eol_))
        if self.NumTotalClients is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumTotalClients>%s</%sNumTotalClients>%s' % (namespaceprefix_ , self.gds_format_float(self.NumTotalClients, input_name='NumTotalClients'), namespaceprefix_ , eol_))
        if self.PeerGroupVersion is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPeerGroupVersion>%s</%sPeerGroupVersion>%s' % (namespaceprefix_ , self.gds_format_float(self.PeerGroupVersion, input_name='PeerGroupVersion'), namespaceprefix_ , eol_))
        if self.PercentOfSuccessClients is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPercentOfSuccessClients>%s</%sPercentOfSuccessClients>%s' % (namespaceprefix_ , self.gds_format_float(self.PercentOfSuccessClients, input_name='PercentOfSuccessClients'), namespaceprefix_ , eol_))
        if self.ReplicationMode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReplicationMode>%s</%sReplicationMode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReplicationMode), input_name='ReplicationMode')), namespaceprefix_ , eol_))
        if self.ReplicationVersion is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReplicationVersion>%s</%sReplicationVersion>%s' % (namespaceprefix_ , self.gds_format_float(self.ReplicationVersion, input_name='ReplicationVersion'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NumPassedClients' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NumPassedClients')
            self.NumPassedClients = fval_
        elif nodeName_ == 'NumTotalClients' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NumTotalClients')
            self.NumTotalClients = fval_
        elif nodeName_ == 'PeerGroupVersion' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PeerGroupVersion')
            self.PeerGroupVersion = fval_
        elif nodeName_ == 'PercentOfSuccessClients' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PercentOfSuccessClients')
            self.PercentOfSuccessClients = fval_
        elif nodeName_ == 'ReplicationMode':
            ReplicationMode_ = child_.text
            ReplicationMode_ = self.gds_validate_string(ReplicationMode_, node, 'ReplicationMode')
            self.ReplicationMode = ReplicationMode_
        elif nodeName_ == 'ReplicationVersion' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ReplicationVersion')
            self.ReplicationVersion = fval_
# end class PxPeerGroupType


class ReportRunnerType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReportRunnerEndTime=None, ReportRunnerStartTime=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(ReportRunnerEndTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ReportRunnerEndTime, '%Y-%m-%d').date()
        else:
            initvalue_ = ReportRunnerEndTime
        self.ReportRunnerEndTime = initvalue_
        if isinstance(ReportRunnerStartTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ReportRunnerStartTime, '%Y-%m-%d').date()
        else:
            initvalue_ = ReportRunnerStartTime
        self.ReportRunnerStartTime = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReportRunnerType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReportRunnerType.subclass:
            return ReportRunnerType.subclass(*args_, **kwargs_)
        else:
            return ReportRunnerType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReportRunnerEndTime(self):
        return self.ReportRunnerEndTime
    def set_ReportRunnerEndTime(self, ReportRunnerEndTime):
        self.ReportRunnerEndTime = ReportRunnerEndTime
    def get_ReportRunnerStartTime(self):
        return self.ReportRunnerStartTime
    def set_ReportRunnerStartTime(self, ReportRunnerStartTime):
        self.ReportRunnerStartTime = ReportRunnerStartTime
    def hasContent_(self):
        if (
            self.ReportRunnerEndTime is not None or
            self.ReportRunnerStartTime is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReportRunnerType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReportRunnerType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReportRunnerType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReportRunnerType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReportRunnerType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReportRunnerType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReportRunnerEndTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReportRunnerEndTime>%s</%sReportRunnerEndTime>%s' % (namespaceprefix_ , self.gds_format_date(self.ReportRunnerEndTime, input_name='ReportRunnerEndTime'), namespaceprefix_ , eol_))
        if self.ReportRunnerStartTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReportRunnerStartTime>%s</%sReportRunnerStartTime>%s' % (namespaceprefix_ , self.gds_format_date(self.ReportRunnerStartTime, input_name='ReportRunnerStartTime'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReportRunnerEndTime':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ReportRunnerEndTime = dval_
        elif nodeName_ == 'ReportRunnerStartTime':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ReportRunnerStartTime = dval_
# end class ReportRunnerType


class ReportsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NumberFilesGenerated=None, NumberRowsGenerated=None, UncompressedSize=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.NumberFilesGenerated = NumberFilesGenerated
        self.NumberRowsGenerated = NumberRowsGenerated
        self.UncompressedSize = UncompressedSize
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReportsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReportsType.subclass:
            return ReportsType.subclass(*args_, **kwargs_)
        else:
            return ReportsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NumberFilesGenerated(self):
        return self.NumberFilesGenerated
    def set_NumberFilesGenerated(self, NumberFilesGenerated):
        self.NumberFilesGenerated = NumberFilesGenerated
    def get_NumberRowsGenerated(self):
        return self.NumberRowsGenerated
    def set_NumberRowsGenerated(self, NumberRowsGenerated):
        self.NumberRowsGenerated = NumberRowsGenerated
    def get_UncompressedSize(self):
        return self.UncompressedSize
    def set_UncompressedSize(self, UncompressedSize):
        self.UncompressedSize = UncompressedSize
    def hasContent_(self):
        if (
            self.NumberFilesGenerated is not None or
            self.NumberRowsGenerated is not None or
            self.UncompressedSize is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReportsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReportsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReportsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReportsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReportsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReportsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NumberFilesGenerated is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberFilesGenerated>%s</%sNumberFilesGenerated>%s' % (namespaceprefix_ , self.gds_format_float(self.NumberFilesGenerated, input_name='NumberFilesGenerated'), namespaceprefix_ , eol_))
        if self.NumberRowsGenerated is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberRowsGenerated>%s</%sNumberRowsGenerated>%s' % (namespaceprefix_ , self.gds_format_float(self.NumberRowsGenerated, input_name='NumberRowsGenerated'), namespaceprefix_ , eol_))
        if self.UncompressedSize is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUncompressedSize>%s</%sUncompressedSize>%s' % (namespaceprefix_ , self.gds_format_float(self.UncompressedSize, input_name='UncompressedSize'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NumberFilesGenerated' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NumberFilesGenerated')
            self.NumberFilesGenerated = fval_
        elif nodeName_ == 'NumberRowsGenerated' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NumberRowsGenerated')
            self.NumberRowsGenerated = fval_
        elif nodeName_ == 'UncompressedSize' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'UncompressedSize')
            self.UncompressedSize = fval_
# end class ReportsType


class ResultsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LendableAssets=None, MaxFee=None, MinFee=None, ReturnToLendableAssets=None, TotalOnLoan=None, Utilisation=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.LendableAssets = LendableAssets
        self.MaxFee = MaxFee
        self.MinFee = MinFee
        self.ReturnToLendableAssets = ReturnToLendableAssets
        self.TotalOnLoan = TotalOnLoan
        self.Utilisation = Utilisation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ResultsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ResultsType.subclass:
            return ResultsType.subclass(*args_, **kwargs_)
        else:
            return ResultsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LendableAssets(self):
        return self.LendableAssets
    def set_LendableAssets(self, LendableAssets):
        self.LendableAssets = LendableAssets
    def get_MaxFee(self):
        return self.MaxFee
    def set_MaxFee(self, MaxFee):
        self.MaxFee = MaxFee
    def get_MinFee(self):
        return self.MinFee
    def set_MinFee(self, MinFee):
        self.MinFee = MinFee
    def get_ReturnToLendableAssets(self):
        return self.ReturnToLendableAssets
    def set_ReturnToLendableAssets(self, ReturnToLendableAssets):
        self.ReturnToLendableAssets = ReturnToLendableAssets
    def get_TotalOnLoan(self):
        return self.TotalOnLoan
    def set_TotalOnLoan(self, TotalOnLoan):
        self.TotalOnLoan = TotalOnLoan
    def get_Utilisation(self):
        return self.Utilisation
    def set_Utilisation(self, Utilisation):
        self.Utilisation = Utilisation
    def hasContent_(self):
        if (
            self.LendableAssets is not None or
            self.MaxFee is not None or
            self.MinFee is not None or
            self.ReturnToLendableAssets is not None or
            self.TotalOnLoan is not None or
            self.Utilisation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ResultsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ResultsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ResultsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ResultsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ResultsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ResultsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LendableAssets is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableAssets>%s</%sLendableAssets>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableAssets, input_name='LendableAssets'), namespaceprefix_ , eol_))
        if self.MaxFee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaxFee>%s</%sMaxFee>%s' % (namespaceprefix_ , self.gds_format_float(self.MaxFee, input_name='MaxFee'), namespaceprefix_ , eol_))
        if self.MinFee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMinFee>%s</%sMinFee>%s' % (namespaceprefix_ , self.gds_format_float(self.MinFee, input_name='MinFee'), namespaceprefix_ , eol_))
        if self.ReturnToLendableAssets is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReturnToLendableAssets>%s</%sReturnToLendableAssets>%s' % (namespaceprefix_ , self.gds_format_float(self.ReturnToLendableAssets, input_name='ReturnToLendableAssets'), namespaceprefix_ , eol_))
        if self.TotalOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalOnLoan>%s</%sTotalOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.TotalOnLoan, input_name='TotalOnLoan'), namespaceprefix_ , eol_))
        if self.Utilisation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisation>%s</%sUtilisation>%s' % (namespaceprefix_ , self.gds_format_float(self.Utilisation, input_name='Utilisation'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LendableAssets' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableAssets')
            self.LendableAssets = fval_
        elif nodeName_ == 'MaxFee' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'MaxFee')
            self.MaxFee = fval_
        elif nodeName_ == 'MinFee' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'MinFee')
            self.MinFee = fval_
        elif nodeName_ == 'ReturnToLendableAssets' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ReturnToLendableAssets')
            self.ReturnToLendableAssets = fval_
        elif nodeName_ == 'TotalOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TotalOnLoan')
            self.TotalOnLoan = fval_
        elif nodeName_ == 'Utilisation' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Utilisation')
            self.Utilisation = fval_
# end class ResultsType


class RowExclusionDetailType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ExclusionGbpValueBusinessSet=None, ExclusionGbpValueDividend=None, ExclusionGbpValueInstrument=None, ExclusionGbpValueMappedCounterpart=None, ExclusionGbpValueMargin=None, ExclusionGbpValueQuantity=None, ExclusionGbpValueReinvestmentCheck=None, ExclusionGbpValueReinvestmentRate=None, ExclusionGbpValueTradeValue=None, ExclusionGbpValueZeroNegativeFee=None, ExclusionRowCountBusinessSet=None, ExclusionRowCountDividend=None, ExclusionRowCountInstrument=None, ExclusionRowCountMappedCounterpart=None, ExclusionRowCountMargin=None, ExclusionRowCountQuantity=None, ExclusionRowCountReinvestmentCheck=None, ExclusionRowCountReinvestmentRate=None, ExclusionRowCountTradeValue=None, ExclusionRowCountZeroNegativeFee=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ExclusionGbpValueBusinessSet = ExclusionGbpValueBusinessSet
        self.ExclusionGbpValueDividend = ExclusionGbpValueDividend
        self.ExclusionGbpValueInstrument = ExclusionGbpValueInstrument
        self.ExclusionGbpValueMappedCounterpart = ExclusionGbpValueMappedCounterpart
        self.ExclusionGbpValueMargin = ExclusionGbpValueMargin
        self.ExclusionGbpValueQuantity = ExclusionGbpValueQuantity
        self.ExclusionGbpValueReinvestmentCheck = ExclusionGbpValueReinvestmentCheck
        self.ExclusionGbpValueReinvestmentRate = ExclusionGbpValueReinvestmentRate
        self.ExclusionGbpValueTradeValue = ExclusionGbpValueTradeValue
        self.ExclusionGbpValueZeroNegativeFee = ExclusionGbpValueZeroNegativeFee
        self.ExclusionRowCountBusinessSet = ExclusionRowCountBusinessSet
        self.ExclusionRowCountDividend = ExclusionRowCountDividend
        self.ExclusionRowCountInstrument = ExclusionRowCountInstrument
        self.ExclusionRowCountMappedCounterpart = ExclusionRowCountMappedCounterpart
        self.ExclusionRowCountMargin = ExclusionRowCountMargin
        self.ExclusionRowCountQuantity = ExclusionRowCountQuantity
        self.ExclusionRowCountReinvestmentCheck = ExclusionRowCountReinvestmentCheck
        self.ExclusionRowCountReinvestmentRate = ExclusionRowCountReinvestmentRate
        self.ExclusionRowCountTradeValue = ExclusionRowCountTradeValue
        self.ExclusionRowCountZeroNegativeFee = ExclusionRowCountZeroNegativeFee
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RowExclusionDetailType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RowExclusionDetailType.subclass:
            return RowExclusionDetailType.subclass(*args_, **kwargs_)
        else:
            return RowExclusionDetailType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ExclusionGbpValueBusinessSet(self):
        return self.ExclusionGbpValueBusinessSet
    def set_ExclusionGbpValueBusinessSet(self, ExclusionGbpValueBusinessSet):
        self.ExclusionGbpValueBusinessSet = ExclusionGbpValueBusinessSet
    def get_ExclusionGbpValueDividend(self):
        return self.ExclusionGbpValueDividend
    def set_ExclusionGbpValueDividend(self, ExclusionGbpValueDividend):
        self.ExclusionGbpValueDividend = ExclusionGbpValueDividend
    def get_ExclusionGbpValueInstrument(self):
        return self.ExclusionGbpValueInstrument
    def set_ExclusionGbpValueInstrument(self, ExclusionGbpValueInstrument):
        self.ExclusionGbpValueInstrument = ExclusionGbpValueInstrument
    def get_ExclusionGbpValueMappedCounterpart(self):
        return self.ExclusionGbpValueMappedCounterpart
    def set_ExclusionGbpValueMappedCounterpart(self, ExclusionGbpValueMappedCounterpart):
        self.ExclusionGbpValueMappedCounterpart = ExclusionGbpValueMappedCounterpart
    def get_ExclusionGbpValueMargin(self):
        return self.ExclusionGbpValueMargin
    def set_ExclusionGbpValueMargin(self, ExclusionGbpValueMargin):
        self.ExclusionGbpValueMargin = ExclusionGbpValueMargin
    def get_ExclusionGbpValueQuantity(self):
        return self.ExclusionGbpValueQuantity
    def set_ExclusionGbpValueQuantity(self, ExclusionGbpValueQuantity):
        self.ExclusionGbpValueQuantity = ExclusionGbpValueQuantity
    def get_ExclusionGbpValueReinvestmentCheck(self):
        return self.ExclusionGbpValueReinvestmentCheck
    def set_ExclusionGbpValueReinvestmentCheck(self, ExclusionGbpValueReinvestmentCheck):
        self.ExclusionGbpValueReinvestmentCheck = ExclusionGbpValueReinvestmentCheck
    def get_ExclusionGbpValueReinvestmentRate(self):
        return self.ExclusionGbpValueReinvestmentRate
    def set_ExclusionGbpValueReinvestmentRate(self, ExclusionGbpValueReinvestmentRate):
        self.ExclusionGbpValueReinvestmentRate = ExclusionGbpValueReinvestmentRate
    def get_ExclusionGbpValueTradeValue(self):
        return self.ExclusionGbpValueTradeValue
    def set_ExclusionGbpValueTradeValue(self, ExclusionGbpValueTradeValue):
        self.ExclusionGbpValueTradeValue = ExclusionGbpValueTradeValue
    def get_ExclusionGbpValueZeroNegativeFee(self):
        return self.ExclusionGbpValueZeroNegativeFee
    def set_ExclusionGbpValueZeroNegativeFee(self, ExclusionGbpValueZeroNegativeFee):
        self.ExclusionGbpValueZeroNegativeFee = ExclusionGbpValueZeroNegativeFee
    def get_ExclusionRowCountBusinessSet(self):
        return self.ExclusionRowCountBusinessSet
    def set_ExclusionRowCountBusinessSet(self, ExclusionRowCountBusinessSet):
        self.ExclusionRowCountBusinessSet = ExclusionRowCountBusinessSet
    def get_ExclusionRowCountDividend(self):
        return self.ExclusionRowCountDividend
    def set_ExclusionRowCountDividend(self, ExclusionRowCountDividend):
        self.ExclusionRowCountDividend = ExclusionRowCountDividend
    def get_ExclusionRowCountInstrument(self):
        return self.ExclusionRowCountInstrument
    def set_ExclusionRowCountInstrument(self, ExclusionRowCountInstrument):
        self.ExclusionRowCountInstrument = ExclusionRowCountInstrument
    def get_ExclusionRowCountMappedCounterpart(self):
        return self.ExclusionRowCountMappedCounterpart
    def set_ExclusionRowCountMappedCounterpart(self, ExclusionRowCountMappedCounterpart):
        self.ExclusionRowCountMappedCounterpart = ExclusionRowCountMappedCounterpart
    def get_ExclusionRowCountMargin(self):
        return self.ExclusionRowCountMargin
    def set_ExclusionRowCountMargin(self, ExclusionRowCountMargin):
        self.ExclusionRowCountMargin = ExclusionRowCountMargin
    def get_ExclusionRowCountQuantity(self):
        return self.ExclusionRowCountQuantity
    def set_ExclusionRowCountQuantity(self, ExclusionRowCountQuantity):
        self.ExclusionRowCountQuantity = ExclusionRowCountQuantity
    def get_ExclusionRowCountReinvestmentCheck(self):
        return self.ExclusionRowCountReinvestmentCheck
    def set_ExclusionRowCountReinvestmentCheck(self, ExclusionRowCountReinvestmentCheck):
        self.ExclusionRowCountReinvestmentCheck = ExclusionRowCountReinvestmentCheck
    def get_ExclusionRowCountReinvestmentRate(self):
        return self.ExclusionRowCountReinvestmentRate
    def set_ExclusionRowCountReinvestmentRate(self, ExclusionRowCountReinvestmentRate):
        self.ExclusionRowCountReinvestmentRate = ExclusionRowCountReinvestmentRate
    def get_ExclusionRowCountTradeValue(self):
        return self.ExclusionRowCountTradeValue
    def set_ExclusionRowCountTradeValue(self, ExclusionRowCountTradeValue):
        self.ExclusionRowCountTradeValue = ExclusionRowCountTradeValue
    def get_ExclusionRowCountZeroNegativeFee(self):
        return self.ExclusionRowCountZeroNegativeFee
    def set_ExclusionRowCountZeroNegativeFee(self, ExclusionRowCountZeroNegativeFee):
        self.ExclusionRowCountZeroNegativeFee = ExclusionRowCountZeroNegativeFee
    def hasContent_(self):
        if (
            self.ExclusionGbpValueBusinessSet is not None or
            self.ExclusionGbpValueDividend is not None or
            self.ExclusionGbpValueInstrument is not None or
            self.ExclusionGbpValueMappedCounterpart is not None or
            self.ExclusionGbpValueMargin is not None or
            self.ExclusionGbpValueQuantity is not None or
            self.ExclusionGbpValueReinvestmentCheck is not None or
            self.ExclusionGbpValueReinvestmentRate is not None or
            self.ExclusionGbpValueTradeValue is not None or
            self.ExclusionGbpValueZeroNegativeFee is not None or
            self.ExclusionRowCountBusinessSet is not None or
            self.ExclusionRowCountDividend is not None or
            self.ExclusionRowCountInstrument is not None or
            self.ExclusionRowCountMappedCounterpart is not None or
            self.ExclusionRowCountMargin is not None or
            self.ExclusionRowCountQuantity is not None or
            self.ExclusionRowCountReinvestmentCheck is not None or
            self.ExclusionRowCountReinvestmentRate is not None or
            self.ExclusionRowCountTradeValue is not None or
            self.ExclusionRowCountZeroNegativeFee is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RowExclusionDetailType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RowExclusionDetailType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RowExclusionDetailType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RowExclusionDetailType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RowExclusionDetailType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RowExclusionDetailType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ExclusionGbpValueBusinessSet is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExclusionGbpValueBusinessSet>%s</%sExclusionGbpValueBusinessSet>%s' % (namespaceprefix_ , self.gds_format_float(self.ExclusionGbpValueBusinessSet, input_name='ExclusionGbpValueBusinessSet'), namespaceprefix_ , eol_))
        if self.ExclusionGbpValueDividend is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExclusionGbpValueDividend>%s</%sExclusionGbpValueDividend>%s' % (namespaceprefix_ , self.gds_format_float(self.ExclusionGbpValueDividend, input_name='ExclusionGbpValueDividend'), namespaceprefix_ , eol_))
        if self.ExclusionGbpValueInstrument is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExclusionGbpValueInstrument>%s</%sExclusionGbpValueInstrument>%s' % (namespaceprefix_ , self.gds_format_float(self.ExclusionGbpValueInstrument, input_name='ExclusionGbpValueInstrument'), namespaceprefix_ , eol_))
        if self.ExclusionGbpValueMappedCounterpart is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExclusionGbpValueMappedCounterpart>%s</%sExclusionGbpValueMappedCounterpart>%s' % (namespaceprefix_ , self.gds_format_float(self.ExclusionGbpValueMappedCounterpart, input_name='ExclusionGbpValueMappedCounterpart'), namespaceprefix_ , eol_))
        if self.ExclusionGbpValueMargin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExclusionGbpValueMargin>%s</%sExclusionGbpValueMargin>%s' % (namespaceprefix_ , self.gds_format_float(self.ExclusionGbpValueMargin, input_name='ExclusionGbpValueMargin'), namespaceprefix_ , eol_))
        if self.ExclusionGbpValueQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExclusionGbpValueQuantity>%s</%sExclusionGbpValueQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.ExclusionGbpValueQuantity, input_name='ExclusionGbpValueQuantity'), namespaceprefix_ , eol_))
        if self.ExclusionGbpValueReinvestmentCheck is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExclusionGbpValueReinvestmentCheck>%s</%sExclusionGbpValueReinvestmentCheck>%s' % (namespaceprefix_ , self.gds_format_float(self.ExclusionGbpValueReinvestmentCheck, input_name='ExclusionGbpValueReinvestmentCheck'), namespaceprefix_ , eol_))
        if self.ExclusionGbpValueReinvestmentRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExclusionGbpValueReinvestmentRate>%s</%sExclusionGbpValueReinvestmentRate>%s' % (namespaceprefix_ , self.gds_format_float(self.ExclusionGbpValueReinvestmentRate, input_name='ExclusionGbpValueReinvestmentRate'), namespaceprefix_ , eol_))
        if self.ExclusionGbpValueTradeValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExclusionGbpValueTradeValue>%s</%sExclusionGbpValueTradeValue>%s' % (namespaceprefix_ , self.gds_format_float(self.ExclusionGbpValueTradeValue, input_name='ExclusionGbpValueTradeValue'), namespaceprefix_ , eol_))
        if self.ExclusionGbpValueZeroNegativeFee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExclusionGbpValueZeroNegativeFee>%s</%sExclusionGbpValueZeroNegativeFee>%s' % (namespaceprefix_ , self.gds_format_float(self.ExclusionGbpValueZeroNegativeFee, input_name='ExclusionGbpValueZeroNegativeFee'), namespaceprefix_ , eol_))
        if self.ExclusionRowCountBusinessSet is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExclusionRowCountBusinessSet>%s</%sExclusionRowCountBusinessSet>%s' % (namespaceprefix_ , self.gds_format_float(self.ExclusionRowCountBusinessSet, input_name='ExclusionRowCountBusinessSet'), namespaceprefix_ , eol_))
        if self.ExclusionRowCountDividend is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExclusionRowCountDividend>%s</%sExclusionRowCountDividend>%s' % (namespaceprefix_ , self.gds_format_float(self.ExclusionRowCountDividend, input_name='ExclusionRowCountDividend'), namespaceprefix_ , eol_))
        if self.ExclusionRowCountInstrument is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExclusionRowCountInstrument>%s</%sExclusionRowCountInstrument>%s' % (namespaceprefix_ , self.gds_format_float(self.ExclusionRowCountInstrument, input_name='ExclusionRowCountInstrument'), namespaceprefix_ , eol_))
        if self.ExclusionRowCountMappedCounterpart is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExclusionRowCountMappedCounterpart>%s</%sExclusionRowCountMappedCounterpart>%s' % (namespaceprefix_ , self.gds_format_float(self.ExclusionRowCountMappedCounterpart, input_name='ExclusionRowCountMappedCounterpart'), namespaceprefix_ , eol_))
        if self.ExclusionRowCountMargin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExclusionRowCountMargin>%s</%sExclusionRowCountMargin>%s' % (namespaceprefix_ , self.gds_format_float(self.ExclusionRowCountMargin, input_name='ExclusionRowCountMargin'), namespaceprefix_ , eol_))
        if self.ExclusionRowCountQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExclusionRowCountQuantity>%s</%sExclusionRowCountQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.ExclusionRowCountQuantity, input_name='ExclusionRowCountQuantity'), namespaceprefix_ , eol_))
        if self.ExclusionRowCountReinvestmentCheck is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExclusionRowCountReinvestmentCheck>%s</%sExclusionRowCountReinvestmentCheck>%s' % (namespaceprefix_ , self.gds_format_float(self.ExclusionRowCountReinvestmentCheck, input_name='ExclusionRowCountReinvestmentCheck'), namespaceprefix_ , eol_))
        if self.ExclusionRowCountReinvestmentRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExclusionRowCountReinvestmentRate>%s</%sExclusionRowCountReinvestmentRate>%s' % (namespaceprefix_ , self.gds_format_float(self.ExclusionRowCountReinvestmentRate, input_name='ExclusionRowCountReinvestmentRate'), namespaceprefix_ , eol_))
        if self.ExclusionRowCountTradeValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExclusionRowCountTradeValue>%s</%sExclusionRowCountTradeValue>%s' % (namespaceprefix_ , self.gds_format_float(self.ExclusionRowCountTradeValue, input_name='ExclusionRowCountTradeValue'), namespaceprefix_ , eol_))
        if self.ExclusionRowCountZeroNegativeFee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExclusionRowCountZeroNegativeFee>%s</%sExclusionRowCountZeroNegativeFee>%s' % (namespaceprefix_ , self.gds_format_float(self.ExclusionRowCountZeroNegativeFee, input_name='ExclusionRowCountZeroNegativeFee'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ExclusionGbpValueBusinessSet' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ExclusionGbpValueBusinessSet')
            self.ExclusionGbpValueBusinessSet = fval_
        elif nodeName_ == 'ExclusionGbpValueDividend' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ExclusionGbpValueDividend')
            self.ExclusionGbpValueDividend = fval_
        elif nodeName_ == 'ExclusionGbpValueInstrument' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ExclusionGbpValueInstrument')
            self.ExclusionGbpValueInstrument = fval_
        elif nodeName_ == 'ExclusionGbpValueMappedCounterpart' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ExclusionGbpValueMappedCounterpart')
            self.ExclusionGbpValueMappedCounterpart = fval_
        elif nodeName_ == 'ExclusionGbpValueMargin' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ExclusionGbpValueMargin')
            self.ExclusionGbpValueMargin = fval_
        elif nodeName_ == 'ExclusionGbpValueQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ExclusionGbpValueQuantity')
            self.ExclusionGbpValueQuantity = fval_
        elif nodeName_ == 'ExclusionGbpValueReinvestmentCheck' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ExclusionGbpValueReinvestmentCheck')
            self.ExclusionGbpValueReinvestmentCheck = fval_
        elif nodeName_ == 'ExclusionGbpValueReinvestmentRate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ExclusionGbpValueReinvestmentRate')
            self.ExclusionGbpValueReinvestmentRate = fval_
        elif nodeName_ == 'ExclusionGbpValueTradeValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ExclusionGbpValueTradeValue')
            self.ExclusionGbpValueTradeValue = fval_
        elif nodeName_ == 'ExclusionGbpValueZeroNegativeFee' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ExclusionGbpValueZeroNegativeFee')
            self.ExclusionGbpValueZeroNegativeFee = fval_
        elif nodeName_ == 'ExclusionRowCountBusinessSet' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ExclusionRowCountBusinessSet')
            self.ExclusionRowCountBusinessSet = fval_
        elif nodeName_ == 'ExclusionRowCountDividend' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ExclusionRowCountDividend')
            self.ExclusionRowCountDividend = fval_
        elif nodeName_ == 'ExclusionRowCountInstrument' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ExclusionRowCountInstrument')
            self.ExclusionRowCountInstrument = fval_
        elif nodeName_ == 'ExclusionRowCountMappedCounterpart' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ExclusionRowCountMappedCounterpart')
            self.ExclusionRowCountMappedCounterpart = fval_
        elif nodeName_ == 'ExclusionRowCountMargin' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ExclusionRowCountMargin')
            self.ExclusionRowCountMargin = fval_
        elif nodeName_ == 'ExclusionRowCountQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ExclusionRowCountQuantity')
            self.ExclusionRowCountQuantity = fval_
        elif nodeName_ == 'ExclusionRowCountReinvestmentCheck' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ExclusionRowCountReinvestmentCheck')
            self.ExclusionRowCountReinvestmentCheck = fval_
        elif nodeName_ == 'ExclusionRowCountReinvestmentRate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ExclusionRowCountReinvestmentRate')
            self.ExclusionRowCountReinvestmentRate = fval_
        elif nodeName_ == 'ExclusionRowCountTradeValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ExclusionRowCountTradeValue')
            self.ExclusionRowCountTradeValue = fval_
        elif nodeName_ == 'ExclusionRowCountZeroNegativeFee' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ExclusionRowCountZeroNegativeFee')
            self.ExclusionRowCountZeroNegativeFee = fval_
# end class RowExclusionDetailType


class SignOffType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PublishComment=None, PublishReason=None, Signatures=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.PublishComment = PublishComment
        self.PublishReason = PublishReason
        self.Signatures = Signatures
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignOffType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignOffType.subclass:
            return SignOffType.subclass(*args_, **kwargs_)
        else:
            return SignOffType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PublishComment(self):
        return self.PublishComment
    def set_PublishComment(self, PublishComment):
        self.PublishComment = PublishComment
    def get_PublishReason(self):
        return self.PublishReason
    def set_PublishReason(self, PublishReason):
        self.PublishReason = PublishReason
    def get_Signatures(self):
        return self.Signatures
    def set_Signatures(self, Signatures):
        self.Signatures = Signatures
    def hasContent_(self):
        if (
            self.PublishComment is not None or
            self.PublishReason is not None or
            self.Signatures is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SignOffType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignOffType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignOffType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SignOffType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SignOffType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SignOffType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PublishComment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPublishComment>%s</%sPublishComment>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PublishComment), input_name='PublishComment')), namespaceprefix_ , eol_))
        if self.PublishReason is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPublishReason>%s</%sPublishReason>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PublishReason), input_name='PublishReason')), namespaceprefix_ , eol_))
        if self.Signatures is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSignatures>%s</%sSignatures>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Signatures), input_name='Signatures')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PublishComment':
            PublishComment_ = child_.text
            PublishComment_ = self.gds_validate_string(PublishComment_, node, 'PublishComment')
            self.PublishComment = PublishComment_
        elif nodeName_ == 'PublishReason':
            PublishReason_ = child_.text
            PublishReason_ = self.gds_validate_string(PublishReason_, node, 'PublishReason')
            self.PublishReason = PublishReason_
        elif nodeName_ == 'Signatures':
            Signatures_ = child_.text
            Signatures_ = self.gds_validate_string(Signatures_, node, 'Signatures')
            self.Signatures = Signatures_
# end class SignOffType


class VarianceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LendableAssets=None, MaxFee=None, MinFee=None, ReturnToLendableAssets=None, TotalOnLoan=None, Utilisation=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.LendableAssets = LendableAssets
        self.MaxFee = MaxFee
        self.MinFee = MinFee
        self.ReturnToLendableAssets = ReturnToLendableAssets
        self.TotalOnLoan = TotalOnLoan
        self.Utilisation = Utilisation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VarianceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VarianceType.subclass:
            return VarianceType.subclass(*args_, **kwargs_)
        else:
            return VarianceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LendableAssets(self):
        return self.LendableAssets
    def set_LendableAssets(self, LendableAssets):
        self.LendableAssets = LendableAssets
    def get_MaxFee(self):
        return self.MaxFee
    def set_MaxFee(self, MaxFee):
        self.MaxFee = MaxFee
    def get_MinFee(self):
        return self.MinFee
    def set_MinFee(self, MinFee):
        self.MinFee = MinFee
    def get_ReturnToLendableAssets(self):
        return self.ReturnToLendableAssets
    def set_ReturnToLendableAssets(self, ReturnToLendableAssets):
        self.ReturnToLendableAssets = ReturnToLendableAssets
    def get_TotalOnLoan(self):
        return self.TotalOnLoan
    def set_TotalOnLoan(self, TotalOnLoan):
        self.TotalOnLoan = TotalOnLoan
    def get_Utilisation(self):
        return self.Utilisation
    def set_Utilisation(self, Utilisation):
        self.Utilisation = Utilisation
    def hasContent_(self):
        if (
            self.LendableAssets is not None or
            self.MaxFee is not None or
            self.MinFee is not None or
            self.ReturnToLendableAssets is not None or
            self.TotalOnLoan is not None or
            self.Utilisation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='VarianceType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VarianceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='VarianceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='VarianceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='VarianceType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='VarianceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LendableAssets is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableAssets>%s</%sLendableAssets>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableAssets, input_name='LendableAssets'), namespaceprefix_ , eol_))
        if self.MaxFee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaxFee>%s</%sMaxFee>%s' % (namespaceprefix_ , self.gds_format_float(self.MaxFee, input_name='MaxFee'), namespaceprefix_ , eol_))
        if self.MinFee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMinFee>%s</%sMinFee>%s' % (namespaceprefix_ , self.gds_format_float(self.MinFee, input_name='MinFee'), namespaceprefix_ , eol_))
        if self.ReturnToLendableAssets is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReturnToLendableAssets>%s</%sReturnToLendableAssets>%s' % (namespaceprefix_ , self.gds_format_float(self.ReturnToLendableAssets, input_name='ReturnToLendableAssets'), namespaceprefix_ , eol_))
        if self.TotalOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalOnLoan>%s</%sTotalOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.TotalOnLoan, input_name='TotalOnLoan'), namespaceprefix_ , eol_))
        if self.Utilisation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisation>%s</%sUtilisation>%s' % (namespaceprefix_ , self.gds_format_float(self.Utilisation, input_name='Utilisation'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LendableAssets' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableAssets')
            self.LendableAssets = fval_
        elif nodeName_ == 'MaxFee' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'MaxFee')
            self.MaxFee = fval_
        elif nodeName_ == 'MinFee' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'MinFee')
            self.MinFee = fval_
        elif nodeName_ == 'ReturnToLendableAssets' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ReturnToLendableAssets')
            self.ReturnToLendableAssets = fval_
        elif nodeName_ == 'TotalOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TotalOnLoan')
            self.TotalOnLoan = fval_
        elif nodeName_ == 'Utilisation' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Utilisation')
            self.Utilisation = fval_
# end class VarianceType


class PeerGroupType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RANK=None, RANKTYPE=None, DATATYPE=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.RANK = _cast(None, RANK)
        self.RANKTYPE = _cast(None, RANKTYPE)
        self.DATATYPE = _cast(None, DATATYPE)
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PeerGroupType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PeerGroupType.subclass:
            return PeerGroupType.subclass(*args_, **kwargs_)
        else:
            return PeerGroupType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_RANKTYPE(self):
        return self.RANKTYPE
    def set_RANKTYPE(self, RANKTYPE):
        self.RANKTYPE = RANKTYPE
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PeerGroupType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PeerGroupType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PeerGroupType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PeerGroupType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PeerGroupType'):
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.RANKTYPE is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            outfile.write(' RANKTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANKTYPE), input_name='RANKTYPE')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PeerGroupType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('RANKTYPE', node)
        if value is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            self.RANKTYPE = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType42.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class PeerGroupType


class GeneralType42(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ClientType=None, DataSourceCount=None, SourceId=None, SourceName=None, SourceType=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ClientType = ClientType
        self.DataSourceCount = DataSourceCount
        self.SourceId = SourceId
        self.SourceName = SourceName
        self.SourceType = SourceType
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType42)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType42.subclass:
            return GeneralType42.subclass(*args_, **kwargs_)
        else:
            return GeneralType42(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ClientType(self):
        return self.ClientType
    def set_ClientType(self, ClientType):
        self.ClientType = ClientType
    def get_DataSourceCount(self):
        return self.DataSourceCount
    def set_DataSourceCount(self, DataSourceCount):
        self.DataSourceCount = DataSourceCount
    def get_SourceId(self):
        return self.SourceId
    def set_SourceId(self, SourceId):
        self.SourceId = SourceId
    def get_SourceName(self):
        return self.SourceName
    def set_SourceName(self, SourceName):
        self.SourceName = SourceName
    def get_SourceType(self):
        return self.SourceType
    def set_SourceType(self, SourceType):
        self.SourceType = SourceType
    def hasContent_(self):
        if (
            self.ClientType is not None or
            self.DataSourceCount is not None or
            self.SourceId is not None or
            self.SourceName is not None or
            self.SourceType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType42', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType42')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType42')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType42', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType42'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType42', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClientType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientType>%s</%sClientType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClientType), input_name='ClientType')), namespaceprefix_ , eol_))
        if self.DataSourceCount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataSourceCount>%s</%sDataSourceCount>%s' % (namespaceprefix_ , self.gds_format_float(self.DataSourceCount, input_name='DataSourceCount'), namespaceprefix_ , eol_))
        if self.SourceId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSourceId>%s</%sSourceId>%s' % (namespaceprefix_ , self.gds_format_float(self.SourceId, input_name='SourceId'), namespaceprefix_ , eol_))
        if self.SourceName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSourceName>%s</%sSourceName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SourceName), input_name='SourceName')), namespaceprefix_ , eol_))
        if self.SourceType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSourceType>%s</%sSourceType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SourceType), input_name='SourceType')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ClientType':
            ClientType_ = child_.text
            ClientType_ = self.gds_validate_string(ClientType_, node, 'ClientType')
            self.ClientType = ClientType_
        elif nodeName_ == 'DataSourceCount' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DataSourceCount')
            self.DataSourceCount = fval_
        elif nodeName_ == 'SourceId' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SourceId')
            self.SourceId = fval_
        elif nodeName_ == 'SourceName':
            SourceName_ = child_.text
            SourceName_ = self.gds_validate_string(SourceName_, node, 'SourceName')
            self.SourceName = SourceName_
        elif nodeName_ == 'SourceType':
            SourceType_ = child_.text
            SourceType_ = self.gds_validate_string(SourceType_, node, 'SourceType')
            self.SourceType = SourceType_
# end class GeneralType42


class DataRunType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RANK=None, RANKTYPE=None, DATATYPE=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.RANK = _cast(None, RANK)
        self.RANKTYPE = _cast(None, RANKTYPE)
        self.DATATYPE = _cast(None, DATATYPE)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataRunType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataRunType.subclass:
            return DataRunType.subclass(*args_, **kwargs_)
        else:
            return DataRunType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_RANKTYPE(self):
        return self.RANKTYPE
    def set_RANKTYPE(self, RANKTYPE):
        self.RANKTYPE = RANKTYPE
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataRunType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataRunType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataRunType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataRunType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataRunType'):
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.RANKTYPE is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            outfile.write(' RANKTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANKTYPE), input_name='RANKTYPE')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataRunType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('RANKTYPE', node)
        if value is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            self.RANKTYPE = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType43.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class DataRunType


class DataDateType43(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType43)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType43.subclass:
            return DataDateType43.subclass(*args_, **kwargs_)
        else:
            return DataDateType43(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType43', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType43')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType43')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType43', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType43'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType43', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType44.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType43


class GeneralType44(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ConfigFile=None, DataRunCount=None, EndTime=None, InstanceName=None, StartTime=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ConfigFile = ConfigFile
        self.DataRunCount = DataRunCount
        self.EndTime = EndTime
        self.InstanceName = InstanceName
        self.StartTime = StartTime
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType44)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType44.subclass:
            return GeneralType44.subclass(*args_, **kwargs_)
        else:
            return GeneralType44(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ConfigFile(self):
        return self.ConfigFile
    def set_ConfigFile(self, ConfigFile):
        self.ConfigFile = ConfigFile
    def get_DataRunCount(self):
        return self.DataRunCount
    def set_DataRunCount(self, DataRunCount):
        self.DataRunCount = DataRunCount
    def get_EndTime(self):
        return self.EndTime
    def set_EndTime(self, EndTime):
        self.EndTime = EndTime
    def get_InstanceName(self):
        return self.InstanceName
    def set_InstanceName(self, InstanceName):
        self.InstanceName = InstanceName
    def get_StartTime(self):
        return self.StartTime
    def set_StartTime(self, StartTime):
        self.StartTime = StartTime
    def hasContent_(self):
        if (
            self.ConfigFile is not None or
            self.DataRunCount is not None or
            self.EndTime is not None or
            self.InstanceName is not None or
            self.StartTime is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType44', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType44')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType44')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType44', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType44'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType44', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ConfigFile is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConfigFile>%s</%sConfigFile>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ConfigFile), input_name='ConfigFile')), namespaceprefix_ , eol_))
        if self.DataRunCount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataRunCount>%s</%sDataRunCount>%s' % (namespaceprefix_ , self.gds_format_float(self.DataRunCount, input_name='DataRunCount'), namespaceprefix_ , eol_))
        if self.EndTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEndTime>%s</%sEndTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EndTime), input_name='EndTime')), namespaceprefix_ , eol_))
        if self.InstanceName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstanceName>%s</%sInstanceName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InstanceName), input_name='InstanceName')), namespaceprefix_ , eol_))
        if self.StartTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStartTime>%s</%sStartTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StartTime), input_name='StartTime')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ConfigFile':
            ConfigFile_ = child_.text
            ConfigFile_ = self.gds_validate_string(ConfigFile_, node, 'ConfigFile')
            self.ConfigFile = ConfigFile_
        elif nodeName_ == 'DataRunCount' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DataRunCount')
            self.DataRunCount = fval_
        elif nodeName_ == 'EndTime':
            EndTime_ = child_.text
            EndTime_ = self.gds_validate_string(EndTime_, node, 'EndTime')
            self.EndTime = EndTime_
        elif nodeName_ == 'InstanceName':
            InstanceName_ = child_.text
            InstanceName_ = self.gds_validate_string(InstanceName_, node, 'InstanceName')
            self.InstanceName = InstanceName_
        elif nodeName_ == 'StartTime':
            StartTime_ = child_.text
            StartTime_ = self.gds_validate_string(StartTime_, node, 'StartTime')
            self.StartTime = StartTime_
# end class GeneralType44


class CounterpartDetailType45(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ACCOUNT=None, BENCHMARKFILTER1=None, COUNTERPART=None, MARKET=None, DATATYPE=None, FILTER=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ACCOUNT = _cast(None, ACCOUNT)
        self.BENCHMARKFILTER1 = _cast(None, BENCHMARKFILTER1)
        self.COUNTERPART = _cast(None, COUNTERPART)
        self.MARKET = _cast(None, MARKET)
        self.DATATYPE = _cast(None, DATATYPE)
        self.FILTER = _cast(None, FILTER)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CounterpartDetailType45)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CounterpartDetailType45.subclass:
            return CounterpartDetailType45.subclass(*args_, **kwargs_)
        else:
            return CounterpartDetailType45(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_ACCOUNT(self):
        return self.ACCOUNT
    def set_ACCOUNT(self, ACCOUNT):
        self.ACCOUNT = ACCOUNT
    def get_BENCHMARKFILTER1(self):
        return self.BENCHMARKFILTER1
    def set_BENCHMARKFILTER1(self, BENCHMARKFILTER1):
        self.BENCHMARKFILTER1 = BENCHMARKFILTER1
    def get_COUNTERPART(self):
        return self.COUNTERPART
    def set_COUNTERPART(self, COUNTERPART):
        self.COUNTERPART = COUNTERPART
    def get_MARKET(self):
        return self.MARKET
    def set_MARKET(self, MARKET):
        self.MARKET = MARKET
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_FILTER(self):
        return self.FILTER
    def set_FILTER(self, FILTER):
        self.FILTER = FILTER
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CounterpartDetailType45', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CounterpartDetailType45')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CounterpartDetailType45')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CounterpartDetailType45', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CounterpartDetailType45'):
        if self.ACCOUNT is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            outfile.write(' ACCOUNT=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ACCOUNT), input_name='ACCOUNT')), ))
        if self.BENCHMARKFILTER1 is not None and 'BENCHMARKFILTER1' not in already_processed:
            already_processed.add('BENCHMARKFILTER1')
            outfile.write(' BENCHMARKFILTER1=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.BENCHMARKFILTER1), input_name='BENCHMARKFILTER1')), ))
        if self.COUNTERPART is not None and 'COUNTERPART' not in already_processed:
            already_processed.add('COUNTERPART')
            outfile.write(' COUNTERPART=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.COUNTERPART), input_name='COUNTERPART')), ))
        if self.MARKET is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            outfile.write(' MARKET=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.MARKET), input_name='MARKET')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.FILTER is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            outfile.write(' FILTER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.FILTER), input_name='FILTER')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CounterpartDetailType45', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ACCOUNT', node)
        if value is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            self.ACCOUNT = value
        value = find_attr_value_('BENCHMARKFILTER1', node)
        if value is not None and 'BENCHMARKFILTER1' not in already_processed:
            already_processed.add('BENCHMARKFILTER1')
            self.BENCHMARKFILTER1 = value
        value = find_attr_value_('COUNTERPART', node)
        if value is not None and 'COUNTERPART' not in already_processed:
            already_processed.add('COUNTERPART')
            self.COUNTERPART = value
        value = find_attr_value_('MARKET', node)
        if value is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            self.MARKET = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('FILTER', node)
        if value is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            self.FILTER = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType46.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class CounterpartDetailType45


class DataDateType46(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, Metrics=None, Reinvestment=None, Trading=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
        self.Metrics = Metrics
        self.Reinvestment = Reinvestment
        self.Trading = Trading
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType46)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType46.subclass:
            return DataDateType46.subclass(*args_, **kwargs_)
        else:
            return DataDateType46(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_Metrics(self):
        return self.Metrics
    def set_Metrics(self, Metrics):
        self.Metrics = Metrics
    def get_Reinvestment(self):
        return self.Reinvestment
    def set_Reinvestment(self, Reinvestment):
        self.Reinvestment = Reinvestment
    def get_Trading(self):
        return self.Trading
    def set_Trading(self, Trading):
        self.Trading = Trading
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None or
            self.Metrics is not None or
            self.Reinvestment is not None or
            self.Trading is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType46', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType46')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType46')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType46', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType46'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType46', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
        if self.Metrics is not None:
            self.Metrics.export(outfile, level, namespaceprefix_, name_='Metrics', pretty_print=pretty_print)
        if self.Reinvestment is not None:
            self.Reinvestment.export(outfile, level, namespaceprefix_, name_='Reinvestment', pretty_print=pretty_print)
        if self.Trading is not None:
            self.Trading.export(outfile, level, namespaceprefix_, name_='Trading', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType47.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
        elif nodeName_ == 'Metrics':
            obj_ = MetricsType.factory(parent_object_=self)
            obj_.build(child_)
            self.Metrics = obj_
            obj_.original_tagname_ = 'Metrics'
        elif nodeName_ == 'Reinvestment':
            obj_ = ReinvestmentType.factory(parent_object_=self)
            obj_.build(child_)
            self.Reinvestment = obj_
            obj_.original_tagname_ = 'Reinvestment'
        elif nodeName_ == 'Trading':
            obj_ = TradingType.factory(parent_object_=self)
            obj_.build(child_)
            self.Trading = obj_
            obj_.original_tagname_ = 'Trading'
# end class DataDateType46


class GeneralType47(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Counterpart=None, CounterpartName=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Counterpart = Counterpart
        self.CounterpartName = CounterpartName
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType47)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType47.subclass:
            return GeneralType47.subclass(*args_, **kwargs_)
        else:
            return GeneralType47(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Counterpart(self):
        return self.Counterpart
    def set_Counterpart(self, Counterpart):
        self.Counterpart = Counterpart
    def get_CounterpartName(self):
        return self.CounterpartName
    def set_CounterpartName(self, CounterpartName):
        self.CounterpartName = CounterpartName
    def hasContent_(self):
        if (
            self.Counterpart is not None or
            self.CounterpartName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType47', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType47')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType47')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType47', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType47'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType47', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Counterpart is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCounterpart>%s</%sCounterpart>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Counterpart), input_name='Counterpart')), namespaceprefix_ , eol_))
        if self.CounterpartName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCounterpartName>%s</%sCounterpartName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CounterpartName), input_name='CounterpartName')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Counterpart':
            Counterpart_ = child_.text
            Counterpart_ = self.gds_validate_string(Counterpart_, node, 'Counterpart')
            self.Counterpart = Counterpart_
        elif nodeName_ == 'CounterpartName':
            CounterpartName_ = child_.text
            CounterpartName_ = self.gds_validate_string(CounterpartName_, node, 'CounterpartName')
            self.CounterpartName = CounterpartName_
# end class GeneralType47


class MetricsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Metric=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if Metric is None:
            self.Metric = []
        else:
            self.Metric = Metric
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MetricsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MetricsType.subclass:
            return MetricsType.subclass(*args_, **kwargs_)
        else:
            return MetricsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Metric(self):
        return self.Metric
    def set_Metric(self, Metric):
        self.Metric = Metric
    def add_Metric(self, value):
        self.Metric.append(value)
    def add_Metric(self, value):
        self.Metric.append(value)
    def insert_Metric_at(self, index, value):
        self.Metric.insert(index, value)
    def replace_Metric_at(self, index, value):
        self.Metric[index] = value
    def hasContent_(self):
        if (
            self.Metric
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MetricsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MetricsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MetricsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MetricsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MetricsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MetricsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Metric_ in self.Metric:
            Metric_.export(outfile, level, namespaceprefix_, name_='Metric', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Metric':
            obj_ = MetricType.factory(parent_object_=self)
            obj_.build(child_)
            self.Metric.append(obj_)
            obj_.original_tagname_ = 'Metric'
# end class MetricsType


class MetricType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, MarginMetric=None, MarginMetricDate=None, RiDailyReturnMetric=None, RiDailyReturnMetricDate=None, RiReturnMetric=None, RiReturnMetricDate=None, SlDailyReturnMetric=None, SlDailyReturnMetricDate=None, TotalDailyReturnMetric=None, TotalDailyReturnMetricDate=None, TotalReturnMetric=None, TotalReturnMetricDate=None, ValueOnLoanMetric=None, ValueOnLoanMetricDate=None, ValueOnLoanVsCashMetric=None, ValueOnLoanVsCashMetricDate=None, ValueOnLoanVsNonCashMetric=None, ValueOnLoanVsNonCashMetricDate=None, VWAFMetric=None, VWAFMetricDate=None, VWARMetric=None, VWARMetricDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.value = _cast(None, value)
        self.MarginMetric = MarginMetric
        if isinstance(MarginMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(MarginMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = MarginMetricDate
        self.MarginMetricDate = initvalue_
        self.RiDailyReturnMetric = RiDailyReturnMetric
        if isinstance(RiDailyReturnMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RiDailyReturnMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RiDailyReturnMetricDate
        self.RiDailyReturnMetricDate = initvalue_
        self.RiReturnMetric = RiReturnMetric
        if isinstance(RiReturnMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RiReturnMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RiReturnMetricDate
        self.RiReturnMetricDate = initvalue_
        self.SlDailyReturnMetric = SlDailyReturnMetric
        if isinstance(SlDailyReturnMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(SlDailyReturnMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = SlDailyReturnMetricDate
        self.SlDailyReturnMetricDate = initvalue_
        self.TotalDailyReturnMetric = TotalDailyReturnMetric
        if isinstance(TotalDailyReturnMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TotalDailyReturnMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = TotalDailyReturnMetricDate
        self.TotalDailyReturnMetricDate = initvalue_
        self.TotalReturnMetric = TotalReturnMetric
        if isinstance(TotalReturnMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TotalReturnMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = TotalReturnMetricDate
        self.TotalReturnMetricDate = initvalue_
        self.ValueOnLoanMetric = ValueOnLoanMetric
        if isinstance(ValueOnLoanMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ValueOnLoanMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ValueOnLoanMetricDate
        self.ValueOnLoanMetricDate = initvalue_
        self.ValueOnLoanVsCashMetric = ValueOnLoanVsCashMetric
        if isinstance(ValueOnLoanVsCashMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ValueOnLoanVsCashMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ValueOnLoanVsCashMetricDate
        self.ValueOnLoanVsCashMetricDate = initvalue_
        self.ValueOnLoanVsNonCashMetric = ValueOnLoanVsNonCashMetric
        if isinstance(ValueOnLoanVsNonCashMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ValueOnLoanVsNonCashMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ValueOnLoanVsNonCashMetricDate
        self.ValueOnLoanVsNonCashMetricDate = initvalue_
        self.VWAFMetric = VWAFMetric
        if isinstance(VWAFMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(VWAFMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = VWAFMetricDate
        self.VWAFMetricDate = initvalue_
        self.VWARMetric = VWARMetric
        if isinstance(VWARMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(VWARMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = VWARMetricDate
        self.VWARMetricDate = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MetricType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MetricType.subclass:
            return MetricType.subclass(*args_, **kwargs_)
        else:
            return MetricType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MarginMetric(self):
        return self.MarginMetric
    def set_MarginMetric(self, MarginMetric):
        self.MarginMetric = MarginMetric
    def get_MarginMetricDate(self):
        return self.MarginMetricDate
    def set_MarginMetricDate(self, MarginMetricDate):
        self.MarginMetricDate = MarginMetricDate
    def get_RiDailyReturnMetric(self):
        return self.RiDailyReturnMetric
    def set_RiDailyReturnMetric(self, RiDailyReturnMetric):
        self.RiDailyReturnMetric = RiDailyReturnMetric
    def get_RiDailyReturnMetricDate(self):
        return self.RiDailyReturnMetricDate
    def set_RiDailyReturnMetricDate(self, RiDailyReturnMetricDate):
        self.RiDailyReturnMetricDate = RiDailyReturnMetricDate
    def get_RiReturnMetric(self):
        return self.RiReturnMetric
    def set_RiReturnMetric(self, RiReturnMetric):
        self.RiReturnMetric = RiReturnMetric
    def get_RiReturnMetricDate(self):
        return self.RiReturnMetricDate
    def set_RiReturnMetricDate(self, RiReturnMetricDate):
        self.RiReturnMetricDate = RiReturnMetricDate
    def get_SlDailyReturnMetric(self):
        return self.SlDailyReturnMetric
    def set_SlDailyReturnMetric(self, SlDailyReturnMetric):
        self.SlDailyReturnMetric = SlDailyReturnMetric
    def get_SlDailyReturnMetricDate(self):
        return self.SlDailyReturnMetricDate
    def set_SlDailyReturnMetricDate(self, SlDailyReturnMetricDate):
        self.SlDailyReturnMetricDate = SlDailyReturnMetricDate
    def get_TotalDailyReturnMetric(self):
        return self.TotalDailyReturnMetric
    def set_TotalDailyReturnMetric(self, TotalDailyReturnMetric):
        self.TotalDailyReturnMetric = TotalDailyReturnMetric
    def get_TotalDailyReturnMetricDate(self):
        return self.TotalDailyReturnMetricDate
    def set_TotalDailyReturnMetricDate(self, TotalDailyReturnMetricDate):
        self.TotalDailyReturnMetricDate = TotalDailyReturnMetricDate
    def get_TotalReturnMetric(self):
        return self.TotalReturnMetric
    def set_TotalReturnMetric(self, TotalReturnMetric):
        self.TotalReturnMetric = TotalReturnMetric
    def get_TotalReturnMetricDate(self):
        return self.TotalReturnMetricDate
    def set_TotalReturnMetricDate(self, TotalReturnMetricDate):
        self.TotalReturnMetricDate = TotalReturnMetricDate
    def get_ValueOnLoanMetric(self):
        return self.ValueOnLoanMetric
    def set_ValueOnLoanMetric(self, ValueOnLoanMetric):
        self.ValueOnLoanMetric = ValueOnLoanMetric
    def get_ValueOnLoanMetricDate(self):
        return self.ValueOnLoanMetricDate
    def set_ValueOnLoanMetricDate(self, ValueOnLoanMetricDate):
        self.ValueOnLoanMetricDate = ValueOnLoanMetricDate
    def get_ValueOnLoanVsCashMetric(self):
        return self.ValueOnLoanVsCashMetric
    def set_ValueOnLoanVsCashMetric(self, ValueOnLoanVsCashMetric):
        self.ValueOnLoanVsCashMetric = ValueOnLoanVsCashMetric
    def get_ValueOnLoanVsCashMetricDate(self):
        return self.ValueOnLoanVsCashMetricDate
    def set_ValueOnLoanVsCashMetricDate(self, ValueOnLoanVsCashMetricDate):
        self.ValueOnLoanVsCashMetricDate = ValueOnLoanVsCashMetricDate
    def get_ValueOnLoanVsNonCashMetric(self):
        return self.ValueOnLoanVsNonCashMetric
    def set_ValueOnLoanVsNonCashMetric(self, ValueOnLoanVsNonCashMetric):
        self.ValueOnLoanVsNonCashMetric = ValueOnLoanVsNonCashMetric
    def get_ValueOnLoanVsNonCashMetricDate(self):
        return self.ValueOnLoanVsNonCashMetricDate
    def set_ValueOnLoanVsNonCashMetricDate(self, ValueOnLoanVsNonCashMetricDate):
        self.ValueOnLoanVsNonCashMetricDate = ValueOnLoanVsNonCashMetricDate
    def get_VWAFMetric(self):
        return self.VWAFMetric
    def set_VWAFMetric(self, VWAFMetric):
        self.VWAFMetric = VWAFMetric
    def get_VWAFMetricDate(self):
        return self.VWAFMetricDate
    def set_VWAFMetricDate(self, VWAFMetricDate):
        self.VWAFMetricDate = VWAFMetricDate
    def get_VWARMetric(self):
        return self.VWARMetric
    def set_VWARMetric(self, VWARMetric):
        self.VWARMetric = VWARMetric
    def get_VWARMetricDate(self):
        return self.VWARMetricDate
    def set_VWARMetricDate(self, VWARMetricDate):
        self.VWARMetricDate = VWARMetricDate
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.MarginMetric is not None or
            self.MarginMetricDate is not None or
            self.RiDailyReturnMetric is not None or
            self.RiDailyReturnMetricDate is not None or
            self.RiReturnMetric is not None or
            self.RiReturnMetricDate is not None or
            self.SlDailyReturnMetric is not None or
            self.SlDailyReturnMetricDate is not None or
            self.TotalDailyReturnMetric is not None or
            self.TotalDailyReturnMetricDate is not None or
            self.TotalReturnMetric is not None or
            self.TotalReturnMetricDate is not None or
            self.ValueOnLoanMetric is not None or
            self.ValueOnLoanMetricDate is not None or
            self.ValueOnLoanVsCashMetric is not None or
            self.ValueOnLoanVsCashMetricDate is not None or
            self.ValueOnLoanVsNonCashMetric is not None or
            self.ValueOnLoanVsNonCashMetricDate is not None or
            self.VWAFMetric is not None or
            self.VWAFMetricDate is not None or
            self.VWARMetric is not None or
            self.VWARMetricDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MetricType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MetricType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MetricType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MetricType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MetricType'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MetricType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MarginMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarginMetric>%s</%sMarginMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.MarginMetric, input_name='MarginMetric'), namespaceprefix_ , eol_))
        if self.MarginMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarginMetricDate>%s</%sMarginMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.MarginMetricDate, input_name='MarginMetricDate'), namespaceprefix_ , eol_))
        if self.RiDailyReturnMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiDailyReturnMetric>%s</%sRiDailyReturnMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.RiDailyReturnMetric, input_name='RiDailyReturnMetric'), namespaceprefix_ , eol_))
        if self.RiDailyReturnMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiDailyReturnMetricDate>%s</%sRiDailyReturnMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RiDailyReturnMetricDate, input_name='RiDailyReturnMetricDate'), namespaceprefix_ , eol_))
        if self.RiReturnMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiReturnMetric>%s</%sRiReturnMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.RiReturnMetric, input_name='RiReturnMetric'), namespaceprefix_ , eol_))
        if self.RiReturnMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiReturnMetricDate>%s</%sRiReturnMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RiReturnMetricDate, input_name='RiReturnMetricDate'), namespaceprefix_ , eol_))
        if self.SlDailyReturnMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSlDailyReturnMetric>%s</%sSlDailyReturnMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.SlDailyReturnMetric, input_name='SlDailyReturnMetric'), namespaceprefix_ , eol_))
        if self.SlDailyReturnMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSlDailyReturnMetricDate>%s</%sSlDailyReturnMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.SlDailyReturnMetricDate, input_name='SlDailyReturnMetricDate'), namespaceprefix_ , eol_))
        if self.TotalDailyReturnMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalDailyReturnMetric>%s</%sTotalDailyReturnMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.TotalDailyReturnMetric, input_name='TotalDailyReturnMetric'), namespaceprefix_ , eol_))
        if self.TotalDailyReturnMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalDailyReturnMetricDate>%s</%sTotalDailyReturnMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.TotalDailyReturnMetricDate, input_name='TotalDailyReturnMetricDate'), namespaceprefix_ , eol_))
        if self.TotalReturnMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalReturnMetric>%s</%sTotalReturnMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.TotalReturnMetric, input_name='TotalReturnMetric'), namespaceprefix_ , eol_))
        if self.TotalReturnMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalReturnMetricDate>%s</%sTotalReturnMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.TotalReturnMetricDate, input_name='TotalReturnMetricDate'), namespaceprefix_ , eol_))
        if self.ValueOnLoanMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanMetric>%s</%sValueOnLoanMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoanMetric, input_name='ValueOnLoanMetric'), namespaceprefix_ , eol_))
        if self.ValueOnLoanMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanMetricDate>%s</%sValueOnLoanMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ValueOnLoanMetricDate, input_name='ValueOnLoanMetricDate'), namespaceprefix_ , eol_))
        if self.ValueOnLoanVsCashMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanVsCashMetric>%s</%sValueOnLoanVsCashMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoanVsCashMetric, input_name='ValueOnLoanVsCashMetric'), namespaceprefix_ , eol_))
        if self.ValueOnLoanVsCashMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanVsCashMetricDate>%s</%sValueOnLoanVsCashMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ValueOnLoanVsCashMetricDate, input_name='ValueOnLoanVsCashMetricDate'), namespaceprefix_ , eol_))
        if self.ValueOnLoanVsNonCashMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanVsNonCashMetric>%s</%sValueOnLoanVsNonCashMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoanVsNonCashMetric, input_name='ValueOnLoanVsNonCashMetric'), namespaceprefix_ , eol_))
        if self.ValueOnLoanVsNonCashMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanVsNonCashMetricDate>%s</%sValueOnLoanVsNonCashMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ValueOnLoanVsNonCashMetricDate, input_name='ValueOnLoanVsNonCashMetricDate'), namespaceprefix_ , eol_))
        if self.VWAFMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAFMetric>%s</%sVWAFMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAFMetric, input_name='VWAFMetric'), namespaceprefix_ , eol_))
        if self.VWAFMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAFMetricDate>%s</%sVWAFMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.VWAFMetricDate, input_name='VWAFMetricDate'), namespaceprefix_ , eol_))
        if self.VWARMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWARMetric>%s</%sVWARMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.VWARMetric, input_name='VWARMetric'), namespaceprefix_ , eol_))
        if self.VWARMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWARMetricDate>%s</%sVWARMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.VWARMetricDate, input_name='VWARMetricDate'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MarginMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'MarginMetric')
            self.MarginMetric = fval_
        elif nodeName_ == 'MarginMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.MarginMetricDate = dval_
        elif nodeName_ == 'RiDailyReturnMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RiDailyReturnMetric')
            self.RiDailyReturnMetric = fval_
        elif nodeName_ == 'RiDailyReturnMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RiDailyReturnMetricDate = dval_
        elif nodeName_ == 'RiReturnMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RiReturnMetric')
            self.RiReturnMetric = fval_
        elif nodeName_ == 'RiReturnMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RiReturnMetricDate = dval_
        elif nodeName_ == 'SlDailyReturnMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SlDailyReturnMetric')
            self.SlDailyReturnMetric = fval_
        elif nodeName_ == 'SlDailyReturnMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.SlDailyReturnMetricDate = dval_
        elif nodeName_ == 'TotalDailyReturnMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TotalDailyReturnMetric')
            self.TotalDailyReturnMetric = fval_
        elif nodeName_ == 'TotalDailyReturnMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TotalDailyReturnMetricDate = dval_
        elif nodeName_ == 'TotalReturnMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TotalReturnMetric')
            self.TotalReturnMetric = fval_
        elif nodeName_ == 'TotalReturnMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TotalReturnMetricDate = dval_
        elif nodeName_ == 'ValueOnLoanMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoanMetric')
            self.ValueOnLoanMetric = fval_
        elif nodeName_ == 'ValueOnLoanMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ValueOnLoanMetricDate = dval_
        elif nodeName_ == 'ValueOnLoanVsCashMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoanVsCashMetric')
            self.ValueOnLoanVsCashMetric = fval_
        elif nodeName_ == 'ValueOnLoanVsCashMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ValueOnLoanVsCashMetricDate = dval_
        elif nodeName_ == 'ValueOnLoanVsNonCashMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoanVsNonCashMetric')
            self.ValueOnLoanVsNonCashMetric = fval_
        elif nodeName_ == 'ValueOnLoanVsNonCashMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ValueOnLoanVsNonCashMetricDate = dval_
        elif nodeName_ == 'VWAFMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAFMetric')
            self.VWAFMetric = fval_
        elif nodeName_ == 'VWAFMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.VWAFMetricDate = dval_
        elif nodeName_ == 'VWARMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWARMetric')
            self.VWARMetric = fval_
        elif nodeName_ == 'VWARMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.VWARMetricDate = dval_
# end class MetricType


class ReinvestmentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RiDailyReturn=None, RiReturn=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.RiDailyReturn = RiDailyReturn
        self.RiReturn = RiReturn
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReinvestmentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReinvestmentType.subclass:
            return ReinvestmentType.subclass(*args_, **kwargs_)
        else:
            return ReinvestmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RiDailyReturn(self):
        return self.RiDailyReturn
    def set_RiDailyReturn(self, RiDailyReturn):
        self.RiDailyReturn = RiDailyReturn
    def get_RiReturn(self):
        return self.RiReturn
    def set_RiReturn(self, RiReturn):
        self.RiReturn = RiReturn
    def hasContent_(self):
        if (
            self.RiDailyReturn is not None or
            self.RiReturn is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReinvestmentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReinvestmentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReinvestmentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReinvestmentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReinvestmentType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReinvestmentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RiDailyReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiDailyReturn>%s</%sRiDailyReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.RiDailyReturn, input_name='RiDailyReturn'), namespaceprefix_ , eol_))
        if self.RiReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiReturn>%s</%sRiReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.RiReturn, input_name='RiReturn'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RiDailyReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RiDailyReturn')
            self.RiDailyReturn = fval_
        elif nodeName_ == 'RiReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RiReturn')
            self.RiReturn = fval_
# end class ReinvestmentType


class TradingType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AverageTenure=None, Date=None, Margin=None, SlDailyReturn=None, TotalDailyReturn=None, TotalReturn=None, ValueOnLoan=None, ValueOnLoanVsCash=None, ValueOnLoanVsNonCash=None, VWAF=None, VWAR=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.AverageTenure = AverageTenure
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.Margin = Margin
        self.SlDailyReturn = SlDailyReturn
        self.TotalDailyReturn = TotalDailyReturn
        self.TotalReturn = TotalReturn
        self.ValueOnLoan = ValueOnLoan
        self.ValueOnLoanVsCash = ValueOnLoanVsCash
        self.ValueOnLoanVsNonCash = ValueOnLoanVsNonCash
        self.VWAF = VWAF
        self.VWAR = VWAR
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TradingType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TradingType.subclass:
            return TradingType.subclass(*args_, **kwargs_)
        else:
            return TradingType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AverageTenure(self):
        return self.AverageTenure
    def set_AverageTenure(self, AverageTenure):
        self.AverageTenure = AverageTenure
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_Margin(self):
        return self.Margin
    def set_Margin(self, Margin):
        self.Margin = Margin
    def get_SlDailyReturn(self):
        return self.SlDailyReturn
    def set_SlDailyReturn(self, SlDailyReturn):
        self.SlDailyReturn = SlDailyReturn
    def get_TotalDailyReturn(self):
        return self.TotalDailyReturn
    def set_TotalDailyReturn(self, TotalDailyReturn):
        self.TotalDailyReturn = TotalDailyReturn
    def get_TotalReturn(self):
        return self.TotalReturn
    def set_TotalReturn(self, TotalReturn):
        self.TotalReturn = TotalReturn
    def get_ValueOnLoan(self):
        return self.ValueOnLoan
    def set_ValueOnLoan(self, ValueOnLoan):
        self.ValueOnLoan = ValueOnLoan
    def get_ValueOnLoanVsCash(self):
        return self.ValueOnLoanVsCash
    def set_ValueOnLoanVsCash(self, ValueOnLoanVsCash):
        self.ValueOnLoanVsCash = ValueOnLoanVsCash
    def get_ValueOnLoanVsNonCash(self):
        return self.ValueOnLoanVsNonCash
    def set_ValueOnLoanVsNonCash(self, ValueOnLoanVsNonCash):
        self.ValueOnLoanVsNonCash = ValueOnLoanVsNonCash
    def get_VWAF(self):
        return self.VWAF
    def set_VWAF(self, VWAF):
        self.VWAF = VWAF
    def get_VWAR(self):
        return self.VWAR
    def set_VWAR(self, VWAR):
        self.VWAR = VWAR
    def hasContent_(self):
        if (
            self.AverageTenure is not None or
            self.Date is not None or
            self.Margin is not None or
            self.SlDailyReturn is not None or
            self.TotalDailyReturn is not None or
            self.TotalReturn is not None or
            self.ValueOnLoan is not None or
            self.ValueOnLoanVsCash is not None or
            self.ValueOnLoanVsNonCash is not None or
            self.VWAF is not None or
            self.VWAR is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TradingType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TradingType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TradingType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TradingType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TradingType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TradingType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AverageTenure is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAverageTenure>%s</%sAverageTenure>%s' % (namespaceprefix_ , self.gds_format_float(self.AverageTenure, input_name='AverageTenure'), namespaceprefix_ , eol_))
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.Margin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMargin>%s</%sMargin>%s' % (namespaceprefix_ , self.gds_format_float(self.Margin, input_name='Margin'), namespaceprefix_ , eol_))
        if self.SlDailyReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSlDailyReturn>%s</%sSlDailyReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.SlDailyReturn, input_name='SlDailyReturn'), namespaceprefix_ , eol_))
        if self.TotalDailyReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalDailyReturn>%s</%sTotalDailyReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.TotalDailyReturn, input_name='TotalDailyReturn'), namespaceprefix_ , eol_))
        if self.TotalReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalReturn>%s</%sTotalReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.TotalReturn, input_name='TotalReturn'), namespaceprefix_ , eol_))
        if self.ValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoan>%s</%sValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoan, input_name='ValueOnLoan'), namespaceprefix_ , eol_))
        if self.ValueOnLoanVsCash is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanVsCash>%s</%sValueOnLoanVsCash>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoanVsCash, input_name='ValueOnLoanVsCash'), namespaceprefix_ , eol_))
        if self.ValueOnLoanVsNonCash is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanVsNonCash>%s</%sValueOnLoanVsNonCash>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoanVsNonCash, input_name='ValueOnLoanVsNonCash'), namespaceprefix_ , eol_))
        if self.VWAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAF>%s</%sVWAF>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAF, input_name='VWAF'), namespaceprefix_ , eol_))
        if self.VWAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAR>%s</%sVWAR>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAR, input_name='VWAR'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AverageTenure' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AverageTenure')
            self.AverageTenure = fval_
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
        elif nodeName_ == 'Margin' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Margin')
            self.Margin = fval_
        elif nodeName_ == 'SlDailyReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SlDailyReturn')
            self.SlDailyReturn = fval_
        elif nodeName_ == 'TotalDailyReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TotalDailyReturn')
            self.TotalDailyReturn = fval_
        elif nodeName_ == 'TotalReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TotalReturn')
            self.TotalReturn = fval_
        elif nodeName_ == 'ValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoan')
            self.ValueOnLoan = fval_
        elif nodeName_ == 'ValueOnLoanVsCash' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoanVsCash')
            self.ValueOnLoanVsCash = fval_
        elif nodeName_ == 'ValueOnLoanVsNonCash' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoanVsNonCash')
            self.ValueOnLoanVsNonCash = fval_
        elif nodeName_ == 'VWAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAF')
            self.VWAF = fval_
        elif nodeName_ == 'VWAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAR')
            self.VWAR = fval_
# end class TradingType


class InstrumentDetailType48(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ANY=None, DXLID=None, INSTRUMENTID=None, ISIN=None, CUSIP=None, QUICK=None, SEDOL=None, TICKER=None, ACCOUNT=None, MARKET=None, BENCHMARKFILTER1=None, BENCHMARKFILTER2=None, DATATYPE=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ANY = _cast(None, ANY)
        self.DXLID = _cast(None, DXLID)
        self.INSTRUMENTID = _cast(None, INSTRUMENTID)
        self.ISIN = _cast(None, ISIN)
        self.CUSIP = _cast(None, CUSIP)
        self.QUICK = _cast(None, QUICK)
        self.SEDOL = _cast(None, SEDOL)
        self.TICKER = _cast(None, TICKER)
        self.ACCOUNT = _cast(None, ACCOUNT)
        self.MARKET = _cast(None, MARKET)
        self.BENCHMARKFILTER1 = _cast(None, BENCHMARKFILTER1)
        self.BENCHMARKFILTER2 = _cast(None, BENCHMARKFILTER2)
        self.DATATYPE = _cast(None, DATATYPE)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InstrumentDetailType48)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InstrumentDetailType48.subclass:
            return InstrumentDetailType48.subclass(*args_, **kwargs_)
        else:
            return InstrumentDetailType48(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_ANY(self):
        return self.ANY
    def set_ANY(self, ANY):
        self.ANY = ANY
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_INSTRUMENTID(self):
        return self.INSTRUMENTID
    def set_INSTRUMENTID(self, INSTRUMENTID):
        self.INSTRUMENTID = INSTRUMENTID
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def get_ACCOUNT(self):
        return self.ACCOUNT
    def set_ACCOUNT(self, ACCOUNT):
        self.ACCOUNT = ACCOUNT
    def get_MARKET(self):
        return self.MARKET
    def set_MARKET(self, MARKET):
        self.MARKET = MARKET
    def get_BENCHMARKFILTER1(self):
        return self.BENCHMARKFILTER1
    def set_BENCHMARKFILTER1(self, BENCHMARKFILTER1):
        self.BENCHMARKFILTER1 = BENCHMARKFILTER1
    def get_BENCHMARKFILTER2(self):
        return self.BENCHMARKFILTER2
    def set_BENCHMARKFILTER2(self, BENCHMARKFILTER2):
        self.BENCHMARKFILTER2 = BENCHMARKFILTER2
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentDetailType48', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InstrumentDetailType48')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InstrumentDetailType48')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InstrumentDetailType48', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InstrumentDetailType48'):
        if self.ANY is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            outfile.write(' ANY=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ANY), input_name='ANY')), ))
        if self.DXLID is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            outfile.write(' DXLID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DXLID), input_name='DXLID')), ))
        if self.INSTRUMENTID is not None and 'INSTRUMENTID' not in already_processed:
            already_processed.add('INSTRUMENTID')
            outfile.write(' INSTRUMENTID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.INSTRUMENTID), input_name='INSTRUMENTID')), ))
        if self.ISIN is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            outfile.write(' ISIN=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ISIN), input_name='ISIN')), ))
        if self.CUSIP is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            outfile.write(' CUSIP=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.CUSIP), input_name='CUSIP')), ))
        if self.QUICK is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            outfile.write(' QUICK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.QUICK), input_name='QUICK')), ))
        if self.SEDOL is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            outfile.write(' SEDOL=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SEDOL), input_name='SEDOL')), ))
        if self.TICKER is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            outfile.write(' TICKER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER), input_name='TICKER')), ))
        if self.ACCOUNT is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            outfile.write(' ACCOUNT=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ACCOUNT), input_name='ACCOUNT')), ))
        if self.MARKET is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            outfile.write(' MARKET=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.MARKET), input_name='MARKET')), ))
        if self.BENCHMARKFILTER1 is not None and 'BENCHMARKFILTER1' not in already_processed:
            already_processed.add('BENCHMARKFILTER1')
            outfile.write(' BENCHMARKFILTER1=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.BENCHMARKFILTER1), input_name='BENCHMARKFILTER1')), ))
        if self.BENCHMARKFILTER2 is not None and 'BENCHMARKFILTER2' not in already_processed:
            already_processed.add('BENCHMARKFILTER2')
            outfile.write(' BENCHMARKFILTER2=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.BENCHMARKFILTER2), input_name='BENCHMARKFILTER2')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentDetailType48', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ANY', node)
        if value is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            self.ANY = value
        value = find_attr_value_('DXLID', node)
        if value is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            self.DXLID = value
        value = find_attr_value_('INSTRUMENTID', node)
        if value is not None and 'INSTRUMENTID' not in already_processed:
            already_processed.add('INSTRUMENTID')
            self.INSTRUMENTID = value
        value = find_attr_value_('ISIN', node)
        if value is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            self.ISIN = value
        value = find_attr_value_('CUSIP', node)
        if value is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            self.CUSIP = value
        value = find_attr_value_('QUICK', node)
        if value is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            self.QUICK = value
        value = find_attr_value_('SEDOL', node)
        if value is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            self.SEDOL = value
        value = find_attr_value_('TICKER', node)
        if value is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            self.TICKER = value
        value = find_attr_value_('ACCOUNT', node)
        if value is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            self.ACCOUNT = value
        value = find_attr_value_('MARKET', node)
        if value is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            self.MARKET = value
        value = find_attr_value_('BENCHMARKFILTER1', node)
        if value is not None and 'BENCHMARKFILTER1' not in already_processed:
            already_processed.add('BENCHMARKFILTER1')
            self.BENCHMARKFILTER1 = value
        value = find_attr_value_('BENCHMARKFILTER2', node)
        if value is not None and 'BENCHMARKFILTER2' not in already_processed:
            already_processed.add('BENCHMARKFILTER2')
            self.BENCHMARKFILTER2 = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType49.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class InstrumentDetailType48


class DataDateType49(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, Inventory=None, Metrics=None, Reinvestment=None, Trading=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
        self.Inventory = Inventory
        self.Metrics = Metrics
        self.Reinvestment = Reinvestment
        self.Trading = Trading
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType49)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType49.subclass:
            return DataDateType49.subclass(*args_, **kwargs_)
        else:
            return DataDateType49(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_Inventory(self):
        return self.Inventory
    def set_Inventory(self, Inventory):
        self.Inventory = Inventory
    def get_Metrics(self):
        return self.Metrics
    def set_Metrics(self, Metrics):
        self.Metrics = Metrics
    def get_Reinvestment(self):
        return self.Reinvestment
    def set_Reinvestment(self, Reinvestment):
        self.Reinvestment = Reinvestment
    def get_Trading(self):
        return self.Trading
    def set_Trading(self, Trading):
        self.Trading = Trading
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None or
            self.Inventory is not None or
            self.Metrics is not None or
            self.Reinvestment is not None or
            self.Trading is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType49', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType49')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType49')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType49', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType49'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType49', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
        if self.Inventory is not None:
            self.Inventory.export(outfile, level, namespaceprefix_, name_='Inventory', pretty_print=pretty_print)
        if self.Metrics is not None:
            self.Metrics.export(outfile, level, namespaceprefix_, name_='Metrics', pretty_print=pretty_print)
        if self.Reinvestment is not None:
            self.Reinvestment.export(outfile, level, namespaceprefix_, name_='Reinvestment', pretty_print=pretty_print)
        if self.Trading is not None:
            self.Trading.export(outfile, level, namespaceprefix_, name_='Trading', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType50.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
        elif nodeName_ == 'Inventory':
            obj_ = InventoryType.factory(parent_object_=self)
            obj_.build(child_)
            self.Inventory = obj_
            obj_.original_tagname_ = 'Inventory'
        elif nodeName_ == 'Metrics':
            obj_ = MetricsType51.factory(parent_object_=self)
            obj_.build(child_)
            self.Metrics = obj_
            obj_.original_tagname_ = 'Metrics'
        elif nodeName_ == 'Reinvestment':
            obj_ = ReinvestmentType53.factory(parent_object_=self)
            obj_.build(child_)
            self.Reinvestment = obj_
            obj_.original_tagname_ = 'Reinvestment'
        elif nodeName_ == 'Trading':
            obj_ = TradingType54.factory(parent_object_=self)
            obj_.build(child_)
            self.Trading = obj_
            obj_.original_tagname_ = 'Trading'
# end class DataDateType49


class GeneralType50(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DXLID=None, EXCHANGE=None, InstrumentName=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DXLID = DXLID
        self.EXCHANGE = EXCHANGE
        self.InstrumentName = InstrumentName
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType50)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType50.subclass:
            return GeneralType50.subclass(*args_, **kwargs_)
        else:
            return GeneralType50(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_EXCHANGE(self):
        return self.EXCHANGE
    def set_EXCHANGE(self, EXCHANGE):
        self.EXCHANGE = EXCHANGE
    def get_InstrumentName(self):
        return self.InstrumentName
    def set_InstrumentName(self, InstrumentName):
        self.InstrumentName = InstrumentName
    def hasContent_(self):
        if (
            self.DXLID is not None or
            self.EXCHANGE is not None or
            self.InstrumentName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType50', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType50')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType50')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType50', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType50'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType50', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DXLID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDXLID>%s</%sDXLID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DXLID), input_name='DXLID')), namespaceprefix_ , eol_))
        if self.EXCHANGE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEXCHANGE>%s</%sEXCHANGE>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EXCHANGE), input_name='EXCHANGE')), namespaceprefix_ , eol_))
        if self.InstrumentName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstrumentName>%s</%sInstrumentName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InstrumentName), input_name='InstrumentName')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DXLID':
            DXLID_ = child_.text
            DXLID_ = self.gds_validate_string(DXLID_, node, 'DXLID')
            self.DXLID = DXLID_
        elif nodeName_ == 'EXCHANGE':
            EXCHANGE_ = child_.text
            EXCHANGE_ = self.gds_validate_string(EXCHANGE_, node, 'EXCHANGE')
            self.EXCHANGE = EXCHANGE_
        elif nodeName_ == 'InstrumentName':
            InstrumentName_ = child_.text
            InstrumentName_ = self.gds_validate_string(InstrumentName_, node, 'InstrumentName')
            self.InstrumentName = InstrumentName_
# end class GeneralType50


class InventoryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LendableQuantity=None, LendableValue=None, Utilisation=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.LendableQuantity = LendableQuantity
        self.LendableValue = LendableValue
        self.Utilisation = Utilisation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InventoryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InventoryType.subclass:
            return InventoryType.subclass(*args_, **kwargs_)
        else:
            return InventoryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LendableQuantity(self):
        return self.LendableQuantity
    def set_LendableQuantity(self, LendableQuantity):
        self.LendableQuantity = LendableQuantity
    def get_LendableValue(self):
        return self.LendableValue
    def set_LendableValue(self, LendableValue):
        self.LendableValue = LendableValue
    def get_Utilisation(self):
        return self.Utilisation
    def set_Utilisation(self, Utilisation):
        self.Utilisation = Utilisation
    def hasContent_(self):
        if (
            self.LendableQuantity is not None or
            self.LendableValue is not None or
            self.Utilisation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InventoryType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InventoryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InventoryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InventoryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InventoryType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InventoryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LendableQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableQuantity>%s</%sLendableQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableQuantity, input_name='LendableQuantity'), namespaceprefix_ , eol_))
        if self.LendableValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableValue>%s</%sLendableValue>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableValue, input_name='LendableValue'), namespaceprefix_ , eol_))
        if self.Utilisation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisation>%s</%sUtilisation>%s' % (namespaceprefix_ , self.gds_format_float(self.Utilisation, input_name='Utilisation'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LendableQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableQuantity')
            self.LendableQuantity = fval_
        elif nodeName_ == 'LendableValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableValue')
            self.LendableValue = fval_
        elif nodeName_ == 'Utilisation' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Utilisation')
            self.Utilisation = fval_
# end class InventoryType


class MetricsType51(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Metric=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if Metric is None:
            self.Metric = []
        else:
            self.Metric = Metric
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MetricsType51)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MetricsType51.subclass:
            return MetricsType51.subclass(*args_, **kwargs_)
        else:
            return MetricsType51(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Metric(self):
        return self.Metric
    def set_Metric(self, Metric):
        self.Metric = Metric
    def add_Metric(self, value):
        self.Metric.append(value)
    def add_Metric(self, value):
        self.Metric.append(value)
    def insert_Metric_at(self, index, value):
        self.Metric.insert(index, value)
    def replace_Metric_at(self, index, value):
        self.Metric[index] = value
    def hasContent_(self):
        if (
            self.Metric
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MetricsType51', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MetricsType51')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MetricsType51')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MetricsType51', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MetricsType51'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MetricsType51', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Metric_ in self.Metric:
            Metric_.export(outfile, level, namespaceprefix_, name_='Metric', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Metric':
            obj_ = MetricType52.factory(parent_object_=self)
            obj_.build(child_)
            self.Metric.append(obj_)
            obj_.original_tagname_ = 'Metric'
# end class MetricsType51


class MetricType52(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, AverageTenureMetric=None, AverageTenureMetricDate=None, LendableQuantityMetric=None, LendableQuantityMetricDate=None, LendableValueMetric=None, LendableValueMetricDate=None, MarginMetric=None, MarginMetricDate=None, QuantityOnLoanMetric=None, QuantityOnLoanMetricDate=None, RiDailyReturnMetric=None, RiDailyReturnMetricDate=None, RiReturnMetric=None, RiReturnMetricDate=None, RiReturnToLendableMetric=None, RiReturnToLendableMetricDate=None, SlDailyReturnMetric=None, SlDailyReturnMetricDate=None, SlReturnToLendableMetric=None, SlReturnToLendableMetricDate=None, TotalDailyReturnMetric=None, TotalDailyReturnMetricDate=None, TotalReturnMetric=None, TotalReturnMetricDate=None, TotalReturnToLendableMetric=None, TotalReturnToLendableMetricDate=None, UtilisationMetric=None, UtilisationMetricDate=None, ValueOnLoanMetric=None, ValueOnLoanMetricDate=None, ValueOnLoanVsCashMetric=None, ValueOnLoanVsCashMetricDate=None, ValueOnLoanVsNonCashMetric=None, ValueOnLoanVsNonCashMetricDate=None, VWAFMetric=None, VWAFMetricDate=None, VWARMetric=None, VWARMetricDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.value = _cast(None, value)
        self.AverageTenureMetric = AverageTenureMetric
        if isinstance(AverageTenureMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(AverageTenureMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = AverageTenureMetricDate
        self.AverageTenureMetricDate = initvalue_
        self.LendableQuantityMetric = LendableQuantityMetric
        if isinstance(LendableQuantityMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LendableQuantityMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = LendableQuantityMetricDate
        self.LendableQuantityMetricDate = initvalue_
        self.LendableValueMetric = LendableValueMetric
        if isinstance(LendableValueMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LendableValueMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = LendableValueMetricDate
        self.LendableValueMetricDate = initvalue_
        self.MarginMetric = MarginMetric
        if isinstance(MarginMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(MarginMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = MarginMetricDate
        self.MarginMetricDate = initvalue_
        self.QuantityOnLoanMetric = QuantityOnLoanMetric
        if isinstance(QuantityOnLoanMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(QuantityOnLoanMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = QuantityOnLoanMetricDate
        self.QuantityOnLoanMetricDate = initvalue_
        self.RiDailyReturnMetric = RiDailyReturnMetric
        if isinstance(RiDailyReturnMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RiDailyReturnMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RiDailyReturnMetricDate
        self.RiDailyReturnMetricDate = initvalue_
        self.RiReturnMetric = RiReturnMetric
        if isinstance(RiReturnMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RiReturnMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RiReturnMetricDate
        self.RiReturnMetricDate = initvalue_
        self.RiReturnToLendableMetric = RiReturnToLendableMetric
        if isinstance(RiReturnToLendableMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RiReturnToLendableMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RiReturnToLendableMetricDate
        self.RiReturnToLendableMetricDate = initvalue_
        self.SlDailyReturnMetric = SlDailyReturnMetric
        if isinstance(SlDailyReturnMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(SlDailyReturnMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = SlDailyReturnMetricDate
        self.SlDailyReturnMetricDate = initvalue_
        self.SlReturnToLendableMetric = SlReturnToLendableMetric
        if isinstance(SlReturnToLendableMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(SlReturnToLendableMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = SlReturnToLendableMetricDate
        self.SlReturnToLendableMetricDate = initvalue_
        self.TotalDailyReturnMetric = TotalDailyReturnMetric
        if isinstance(TotalDailyReturnMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TotalDailyReturnMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = TotalDailyReturnMetricDate
        self.TotalDailyReturnMetricDate = initvalue_
        self.TotalReturnMetric = TotalReturnMetric
        if isinstance(TotalReturnMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TotalReturnMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = TotalReturnMetricDate
        self.TotalReturnMetricDate = initvalue_
        self.TotalReturnToLendableMetric = TotalReturnToLendableMetric
        if isinstance(TotalReturnToLendableMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TotalReturnToLendableMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = TotalReturnToLendableMetricDate
        self.TotalReturnToLendableMetricDate = initvalue_
        self.UtilisationMetric = UtilisationMetric
        if isinstance(UtilisationMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(UtilisationMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = UtilisationMetricDate
        self.UtilisationMetricDate = initvalue_
        self.ValueOnLoanMetric = ValueOnLoanMetric
        if isinstance(ValueOnLoanMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ValueOnLoanMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ValueOnLoanMetricDate
        self.ValueOnLoanMetricDate = initvalue_
        self.ValueOnLoanVsCashMetric = ValueOnLoanVsCashMetric
        if isinstance(ValueOnLoanVsCashMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ValueOnLoanVsCashMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ValueOnLoanVsCashMetricDate
        self.ValueOnLoanVsCashMetricDate = initvalue_
        self.ValueOnLoanVsNonCashMetric = ValueOnLoanVsNonCashMetric
        if isinstance(ValueOnLoanVsNonCashMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ValueOnLoanVsNonCashMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ValueOnLoanVsNonCashMetricDate
        self.ValueOnLoanVsNonCashMetricDate = initvalue_
        self.VWAFMetric = VWAFMetric
        if isinstance(VWAFMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(VWAFMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = VWAFMetricDate
        self.VWAFMetricDate = initvalue_
        self.VWARMetric = VWARMetric
        if isinstance(VWARMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(VWARMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = VWARMetricDate
        self.VWARMetricDate = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MetricType52)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MetricType52.subclass:
            return MetricType52.subclass(*args_, **kwargs_)
        else:
            return MetricType52(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AverageTenureMetric(self):
        return self.AverageTenureMetric
    def set_AverageTenureMetric(self, AverageTenureMetric):
        self.AverageTenureMetric = AverageTenureMetric
    def get_AverageTenureMetricDate(self):
        return self.AverageTenureMetricDate
    def set_AverageTenureMetricDate(self, AverageTenureMetricDate):
        self.AverageTenureMetricDate = AverageTenureMetricDate
    def get_LendableQuantityMetric(self):
        return self.LendableQuantityMetric
    def set_LendableQuantityMetric(self, LendableQuantityMetric):
        self.LendableQuantityMetric = LendableQuantityMetric
    def get_LendableQuantityMetricDate(self):
        return self.LendableQuantityMetricDate
    def set_LendableQuantityMetricDate(self, LendableQuantityMetricDate):
        self.LendableQuantityMetricDate = LendableQuantityMetricDate
    def get_LendableValueMetric(self):
        return self.LendableValueMetric
    def set_LendableValueMetric(self, LendableValueMetric):
        self.LendableValueMetric = LendableValueMetric
    def get_LendableValueMetricDate(self):
        return self.LendableValueMetricDate
    def set_LendableValueMetricDate(self, LendableValueMetricDate):
        self.LendableValueMetricDate = LendableValueMetricDate
    def get_MarginMetric(self):
        return self.MarginMetric
    def set_MarginMetric(self, MarginMetric):
        self.MarginMetric = MarginMetric
    def get_MarginMetricDate(self):
        return self.MarginMetricDate
    def set_MarginMetricDate(self, MarginMetricDate):
        self.MarginMetricDate = MarginMetricDate
    def get_QuantityOnLoanMetric(self):
        return self.QuantityOnLoanMetric
    def set_QuantityOnLoanMetric(self, QuantityOnLoanMetric):
        self.QuantityOnLoanMetric = QuantityOnLoanMetric
    def get_QuantityOnLoanMetricDate(self):
        return self.QuantityOnLoanMetricDate
    def set_QuantityOnLoanMetricDate(self, QuantityOnLoanMetricDate):
        self.QuantityOnLoanMetricDate = QuantityOnLoanMetricDate
    def get_RiDailyReturnMetric(self):
        return self.RiDailyReturnMetric
    def set_RiDailyReturnMetric(self, RiDailyReturnMetric):
        self.RiDailyReturnMetric = RiDailyReturnMetric
    def get_RiDailyReturnMetricDate(self):
        return self.RiDailyReturnMetricDate
    def set_RiDailyReturnMetricDate(self, RiDailyReturnMetricDate):
        self.RiDailyReturnMetricDate = RiDailyReturnMetricDate
    def get_RiReturnMetric(self):
        return self.RiReturnMetric
    def set_RiReturnMetric(self, RiReturnMetric):
        self.RiReturnMetric = RiReturnMetric
    def get_RiReturnMetricDate(self):
        return self.RiReturnMetricDate
    def set_RiReturnMetricDate(self, RiReturnMetricDate):
        self.RiReturnMetricDate = RiReturnMetricDate
    def get_RiReturnToLendableMetric(self):
        return self.RiReturnToLendableMetric
    def set_RiReturnToLendableMetric(self, RiReturnToLendableMetric):
        self.RiReturnToLendableMetric = RiReturnToLendableMetric
    def get_RiReturnToLendableMetricDate(self):
        return self.RiReturnToLendableMetricDate
    def set_RiReturnToLendableMetricDate(self, RiReturnToLendableMetricDate):
        self.RiReturnToLendableMetricDate = RiReturnToLendableMetricDate
    def get_SlDailyReturnMetric(self):
        return self.SlDailyReturnMetric
    def set_SlDailyReturnMetric(self, SlDailyReturnMetric):
        self.SlDailyReturnMetric = SlDailyReturnMetric
    def get_SlDailyReturnMetricDate(self):
        return self.SlDailyReturnMetricDate
    def set_SlDailyReturnMetricDate(self, SlDailyReturnMetricDate):
        self.SlDailyReturnMetricDate = SlDailyReturnMetricDate
    def get_SlReturnToLendableMetric(self):
        return self.SlReturnToLendableMetric
    def set_SlReturnToLendableMetric(self, SlReturnToLendableMetric):
        self.SlReturnToLendableMetric = SlReturnToLendableMetric
    def get_SlReturnToLendableMetricDate(self):
        return self.SlReturnToLendableMetricDate
    def set_SlReturnToLendableMetricDate(self, SlReturnToLendableMetricDate):
        self.SlReturnToLendableMetricDate = SlReturnToLendableMetricDate
    def get_TotalDailyReturnMetric(self):
        return self.TotalDailyReturnMetric
    def set_TotalDailyReturnMetric(self, TotalDailyReturnMetric):
        self.TotalDailyReturnMetric = TotalDailyReturnMetric
    def get_TotalDailyReturnMetricDate(self):
        return self.TotalDailyReturnMetricDate
    def set_TotalDailyReturnMetricDate(self, TotalDailyReturnMetricDate):
        self.TotalDailyReturnMetricDate = TotalDailyReturnMetricDate
    def get_TotalReturnMetric(self):
        return self.TotalReturnMetric
    def set_TotalReturnMetric(self, TotalReturnMetric):
        self.TotalReturnMetric = TotalReturnMetric
    def get_TotalReturnMetricDate(self):
        return self.TotalReturnMetricDate
    def set_TotalReturnMetricDate(self, TotalReturnMetricDate):
        self.TotalReturnMetricDate = TotalReturnMetricDate
    def get_TotalReturnToLendableMetric(self):
        return self.TotalReturnToLendableMetric
    def set_TotalReturnToLendableMetric(self, TotalReturnToLendableMetric):
        self.TotalReturnToLendableMetric = TotalReturnToLendableMetric
    def get_TotalReturnToLendableMetricDate(self):
        return self.TotalReturnToLendableMetricDate
    def set_TotalReturnToLendableMetricDate(self, TotalReturnToLendableMetricDate):
        self.TotalReturnToLendableMetricDate = TotalReturnToLendableMetricDate
    def get_UtilisationMetric(self):
        return self.UtilisationMetric
    def set_UtilisationMetric(self, UtilisationMetric):
        self.UtilisationMetric = UtilisationMetric
    def get_UtilisationMetricDate(self):
        return self.UtilisationMetricDate
    def set_UtilisationMetricDate(self, UtilisationMetricDate):
        self.UtilisationMetricDate = UtilisationMetricDate
    def get_ValueOnLoanMetric(self):
        return self.ValueOnLoanMetric
    def set_ValueOnLoanMetric(self, ValueOnLoanMetric):
        self.ValueOnLoanMetric = ValueOnLoanMetric
    def get_ValueOnLoanMetricDate(self):
        return self.ValueOnLoanMetricDate
    def set_ValueOnLoanMetricDate(self, ValueOnLoanMetricDate):
        self.ValueOnLoanMetricDate = ValueOnLoanMetricDate
    def get_ValueOnLoanVsCashMetric(self):
        return self.ValueOnLoanVsCashMetric
    def set_ValueOnLoanVsCashMetric(self, ValueOnLoanVsCashMetric):
        self.ValueOnLoanVsCashMetric = ValueOnLoanVsCashMetric
    def get_ValueOnLoanVsCashMetricDate(self):
        return self.ValueOnLoanVsCashMetricDate
    def set_ValueOnLoanVsCashMetricDate(self, ValueOnLoanVsCashMetricDate):
        self.ValueOnLoanVsCashMetricDate = ValueOnLoanVsCashMetricDate
    def get_ValueOnLoanVsNonCashMetric(self):
        return self.ValueOnLoanVsNonCashMetric
    def set_ValueOnLoanVsNonCashMetric(self, ValueOnLoanVsNonCashMetric):
        self.ValueOnLoanVsNonCashMetric = ValueOnLoanVsNonCashMetric
    def get_ValueOnLoanVsNonCashMetricDate(self):
        return self.ValueOnLoanVsNonCashMetricDate
    def set_ValueOnLoanVsNonCashMetricDate(self, ValueOnLoanVsNonCashMetricDate):
        self.ValueOnLoanVsNonCashMetricDate = ValueOnLoanVsNonCashMetricDate
    def get_VWAFMetric(self):
        return self.VWAFMetric
    def set_VWAFMetric(self, VWAFMetric):
        self.VWAFMetric = VWAFMetric
    def get_VWAFMetricDate(self):
        return self.VWAFMetricDate
    def set_VWAFMetricDate(self, VWAFMetricDate):
        self.VWAFMetricDate = VWAFMetricDate
    def get_VWARMetric(self):
        return self.VWARMetric
    def set_VWARMetric(self, VWARMetric):
        self.VWARMetric = VWARMetric
    def get_VWARMetricDate(self):
        return self.VWARMetricDate
    def set_VWARMetricDate(self, VWARMetricDate):
        self.VWARMetricDate = VWARMetricDate
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.AverageTenureMetric is not None or
            self.AverageTenureMetricDate is not None or
            self.LendableQuantityMetric is not None or
            self.LendableQuantityMetricDate is not None or
            self.LendableValueMetric is not None or
            self.LendableValueMetricDate is not None or
            self.MarginMetric is not None or
            self.MarginMetricDate is not None or
            self.QuantityOnLoanMetric is not None or
            self.QuantityOnLoanMetricDate is not None or
            self.RiDailyReturnMetric is not None or
            self.RiDailyReturnMetricDate is not None or
            self.RiReturnMetric is not None or
            self.RiReturnMetricDate is not None or
            self.RiReturnToLendableMetric is not None or
            self.RiReturnToLendableMetricDate is not None or
            self.SlDailyReturnMetric is not None or
            self.SlDailyReturnMetricDate is not None or
            self.SlReturnToLendableMetric is not None or
            self.SlReturnToLendableMetricDate is not None or
            self.TotalDailyReturnMetric is not None or
            self.TotalDailyReturnMetricDate is not None or
            self.TotalReturnMetric is not None or
            self.TotalReturnMetricDate is not None or
            self.TotalReturnToLendableMetric is not None or
            self.TotalReturnToLendableMetricDate is not None or
            self.UtilisationMetric is not None or
            self.UtilisationMetricDate is not None or
            self.ValueOnLoanMetric is not None or
            self.ValueOnLoanMetricDate is not None or
            self.ValueOnLoanVsCashMetric is not None or
            self.ValueOnLoanVsCashMetricDate is not None or
            self.ValueOnLoanVsNonCashMetric is not None or
            self.ValueOnLoanVsNonCashMetricDate is not None or
            self.VWAFMetric is not None or
            self.VWAFMetricDate is not None or
            self.VWARMetric is not None or
            self.VWARMetricDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MetricType52', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MetricType52')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MetricType52')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MetricType52', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MetricType52'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MetricType52', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AverageTenureMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAverageTenureMetric>%s</%sAverageTenureMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.AverageTenureMetric, input_name='AverageTenureMetric'), namespaceprefix_ , eol_))
        if self.AverageTenureMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAverageTenureMetricDate>%s</%sAverageTenureMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.AverageTenureMetricDate, input_name='AverageTenureMetricDate'), namespaceprefix_ , eol_))
        if self.LendableQuantityMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableQuantityMetric>%s</%sLendableQuantityMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableQuantityMetric, input_name='LendableQuantityMetric'), namespaceprefix_ , eol_))
        if self.LendableQuantityMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableQuantityMetricDate>%s</%sLendableQuantityMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.LendableQuantityMetricDate, input_name='LendableQuantityMetricDate'), namespaceprefix_ , eol_))
        if self.LendableValueMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableValueMetric>%s</%sLendableValueMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableValueMetric, input_name='LendableValueMetric'), namespaceprefix_ , eol_))
        if self.LendableValueMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableValueMetricDate>%s</%sLendableValueMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.LendableValueMetricDate, input_name='LendableValueMetricDate'), namespaceprefix_ , eol_))
        if self.MarginMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarginMetric>%s</%sMarginMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.MarginMetric, input_name='MarginMetric'), namespaceprefix_ , eol_))
        if self.MarginMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarginMetricDate>%s</%sMarginMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.MarginMetricDate, input_name='MarginMetricDate'), namespaceprefix_ , eol_))
        if self.QuantityOnLoanMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityOnLoanMetric>%s</%sQuantityOnLoanMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.QuantityOnLoanMetric, input_name='QuantityOnLoanMetric'), namespaceprefix_ , eol_))
        if self.QuantityOnLoanMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityOnLoanMetricDate>%s</%sQuantityOnLoanMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.QuantityOnLoanMetricDate, input_name='QuantityOnLoanMetricDate'), namespaceprefix_ , eol_))
        if self.RiDailyReturnMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiDailyReturnMetric>%s</%sRiDailyReturnMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.RiDailyReturnMetric, input_name='RiDailyReturnMetric'), namespaceprefix_ , eol_))
        if self.RiDailyReturnMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiDailyReturnMetricDate>%s</%sRiDailyReturnMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RiDailyReturnMetricDate, input_name='RiDailyReturnMetricDate'), namespaceprefix_ , eol_))
        if self.RiReturnMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiReturnMetric>%s</%sRiReturnMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.RiReturnMetric, input_name='RiReturnMetric'), namespaceprefix_ , eol_))
        if self.RiReturnMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiReturnMetricDate>%s</%sRiReturnMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RiReturnMetricDate, input_name='RiReturnMetricDate'), namespaceprefix_ , eol_))
        if self.RiReturnToLendableMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiReturnToLendableMetric>%s</%sRiReturnToLendableMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.RiReturnToLendableMetric, input_name='RiReturnToLendableMetric'), namespaceprefix_ , eol_))
        if self.RiReturnToLendableMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiReturnToLendableMetricDate>%s</%sRiReturnToLendableMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RiReturnToLendableMetricDate, input_name='RiReturnToLendableMetricDate'), namespaceprefix_ , eol_))
        if self.SlDailyReturnMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSlDailyReturnMetric>%s</%sSlDailyReturnMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.SlDailyReturnMetric, input_name='SlDailyReturnMetric'), namespaceprefix_ , eol_))
        if self.SlDailyReturnMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSlDailyReturnMetricDate>%s</%sSlDailyReturnMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.SlDailyReturnMetricDate, input_name='SlDailyReturnMetricDate'), namespaceprefix_ , eol_))
        if self.SlReturnToLendableMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSlReturnToLendableMetric>%s</%sSlReturnToLendableMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.SlReturnToLendableMetric, input_name='SlReturnToLendableMetric'), namespaceprefix_ , eol_))
        if self.SlReturnToLendableMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSlReturnToLendableMetricDate>%s</%sSlReturnToLendableMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.SlReturnToLendableMetricDate, input_name='SlReturnToLendableMetricDate'), namespaceprefix_ , eol_))
        if self.TotalDailyReturnMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalDailyReturnMetric>%s</%sTotalDailyReturnMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.TotalDailyReturnMetric, input_name='TotalDailyReturnMetric'), namespaceprefix_ , eol_))
        if self.TotalDailyReturnMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalDailyReturnMetricDate>%s</%sTotalDailyReturnMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.TotalDailyReturnMetricDate, input_name='TotalDailyReturnMetricDate'), namespaceprefix_ , eol_))
        if self.TotalReturnMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalReturnMetric>%s</%sTotalReturnMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.TotalReturnMetric, input_name='TotalReturnMetric'), namespaceprefix_ , eol_))
        if self.TotalReturnMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalReturnMetricDate>%s</%sTotalReturnMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.TotalReturnMetricDate, input_name='TotalReturnMetricDate'), namespaceprefix_ , eol_))
        if self.TotalReturnToLendableMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalReturnToLendableMetric>%s</%sTotalReturnToLendableMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.TotalReturnToLendableMetric, input_name='TotalReturnToLendableMetric'), namespaceprefix_ , eol_))
        if self.TotalReturnToLendableMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalReturnToLendableMetricDate>%s</%sTotalReturnToLendableMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.TotalReturnToLendableMetricDate, input_name='TotalReturnToLendableMetricDate'), namespaceprefix_ , eol_))
        if self.UtilisationMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisationMetric>%s</%sUtilisationMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.UtilisationMetric, input_name='UtilisationMetric'), namespaceprefix_ , eol_))
        if self.UtilisationMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisationMetricDate>%s</%sUtilisationMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.UtilisationMetricDate, input_name='UtilisationMetricDate'), namespaceprefix_ , eol_))
        if self.ValueOnLoanMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanMetric>%s</%sValueOnLoanMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoanMetric, input_name='ValueOnLoanMetric'), namespaceprefix_ , eol_))
        if self.ValueOnLoanMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanMetricDate>%s</%sValueOnLoanMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ValueOnLoanMetricDate, input_name='ValueOnLoanMetricDate'), namespaceprefix_ , eol_))
        if self.ValueOnLoanVsCashMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanVsCashMetric>%s</%sValueOnLoanVsCashMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoanVsCashMetric, input_name='ValueOnLoanVsCashMetric'), namespaceprefix_ , eol_))
        if self.ValueOnLoanVsCashMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanVsCashMetricDate>%s</%sValueOnLoanVsCashMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ValueOnLoanVsCashMetricDate, input_name='ValueOnLoanVsCashMetricDate'), namespaceprefix_ , eol_))
        if self.ValueOnLoanVsNonCashMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanVsNonCashMetric>%s</%sValueOnLoanVsNonCashMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoanVsNonCashMetric, input_name='ValueOnLoanVsNonCashMetric'), namespaceprefix_ , eol_))
        if self.ValueOnLoanVsNonCashMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanVsNonCashMetricDate>%s</%sValueOnLoanVsNonCashMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ValueOnLoanVsNonCashMetricDate, input_name='ValueOnLoanVsNonCashMetricDate'), namespaceprefix_ , eol_))
        if self.VWAFMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAFMetric>%s</%sVWAFMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAFMetric, input_name='VWAFMetric'), namespaceprefix_ , eol_))
        if self.VWAFMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAFMetricDate>%s</%sVWAFMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.VWAFMetricDate, input_name='VWAFMetricDate'), namespaceprefix_ , eol_))
        if self.VWARMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWARMetric>%s</%sVWARMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.VWARMetric, input_name='VWARMetric'), namespaceprefix_ , eol_))
        if self.VWARMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWARMetricDate>%s</%sVWARMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.VWARMetricDate, input_name='VWARMetricDate'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AverageTenureMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AverageTenureMetric')
            self.AverageTenureMetric = fval_
        elif nodeName_ == 'AverageTenureMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.AverageTenureMetricDate = dval_
        elif nodeName_ == 'LendableQuantityMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableQuantityMetric')
            self.LendableQuantityMetric = fval_
        elif nodeName_ == 'LendableQuantityMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.LendableQuantityMetricDate = dval_
        elif nodeName_ == 'LendableValueMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableValueMetric')
            self.LendableValueMetric = fval_
        elif nodeName_ == 'LendableValueMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.LendableValueMetricDate = dval_
        elif nodeName_ == 'MarginMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'MarginMetric')
            self.MarginMetric = fval_
        elif nodeName_ == 'MarginMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.MarginMetricDate = dval_
        elif nodeName_ == 'QuantityOnLoanMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'QuantityOnLoanMetric')
            self.QuantityOnLoanMetric = fval_
        elif nodeName_ == 'QuantityOnLoanMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.QuantityOnLoanMetricDate = dval_
        elif nodeName_ == 'RiDailyReturnMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RiDailyReturnMetric')
            self.RiDailyReturnMetric = fval_
        elif nodeName_ == 'RiDailyReturnMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RiDailyReturnMetricDate = dval_
        elif nodeName_ == 'RiReturnMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RiReturnMetric')
            self.RiReturnMetric = fval_
        elif nodeName_ == 'RiReturnMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RiReturnMetricDate = dval_
        elif nodeName_ == 'RiReturnToLendableMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RiReturnToLendableMetric')
            self.RiReturnToLendableMetric = fval_
        elif nodeName_ == 'RiReturnToLendableMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RiReturnToLendableMetricDate = dval_
        elif nodeName_ == 'SlDailyReturnMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SlDailyReturnMetric')
            self.SlDailyReturnMetric = fval_
        elif nodeName_ == 'SlDailyReturnMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.SlDailyReturnMetricDate = dval_
        elif nodeName_ == 'SlReturnToLendableMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SlReturnToLendableMetric')
            self.SlReturnToLendableMetric = fval_
        elif nodeName_ == 'SlReturnToLendableMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.SlReturnToLendableMetricDate = dval_
        elif nodeName_ == 'TotalDailyReturnMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TotalDailyReturnMetric')
            self.TotalDailyReturnMetric = fval_
        elif nodeName_ == 'TotalDailyReturnMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TotalDailyReturnMetricDate = dval_
        elif nodeName_ == 'TotalReturnMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TotalReturnMetric')
            self.TotalReturnMetric = fval_
        elif nodeName_ == 'TotalReturnMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TotalReturnMetricDate = dval_
        elif nodeName_ == 'TotalReturnToLendableMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TotalReturnToLendableMetric')
            self.TotalReturnToLendableMetric = fval_
        elif nodeName_ == 'TotalReturnToLendableMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TotalReturnToLendableMetricDate = dval_
        elif nodeName_ == 'UtilisationMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'UtilisationMetric')
            self.UtilisationMetric = fval_
        elif nodeName_ == 'UtilisationMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.UtilisationMetricDate = dval_
        elif nodeName_ == 'ValueOnLoanMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoanMetric')
            self.ValueOnLoanMetric = fval_
        elif nodeName_ == 'ValueOnLoanMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ValueOnLoanMetricDate = dval_
        elif nodeName_ == 'ValueOnLoanVsCashMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoanVsCashMetric')
            self.ValueOnLoanVsCashMetric = fval_
        elif nodeName_ == 'ValueOnLoanVsCashMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ValueOnLoanVsCashMetricDate = dval_
        elif nodeName_ == 'ValueOnLoanVsNonCashMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoanVsNonCashMetric')
            self.ValueOnLoanVsNonCashMetric = fval_
        elif nodeName_ == 'ValueOnLoanVsNonCashMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ValueOnLoanVsNonCashMetricDate = dval_
        elif nodeName_ == 'VWAFMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAFMetric')
            self.VWAFMetric = fval_
        elif nodeName_ == 'VWAFMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.VWAFMetricDate = dval_
        elif nodeName_ == 'VWARMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWARMetric')
            self.VWARMetric = fval_
        elif nodeName_ == 'VWARMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.VWARMetricDate = dval_
# end class MetricType52


class ReinvestmentType53(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RiDailyReturn=None, RiReturn=None, RiReturnToLendable=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.RiDailyReturn = RiDailyReturn
        self.RiReturn = RiReturn
        self.RiReturnToLendable = RiReturnToLendable
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReinvestmentType53)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReinvestmentType53.subclass:
            return ReinvestmentType53.subclass(*args_, **kwargs_)
        else:
            return ReinvestmentType53(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RiDailyReturn(self):
        return self.RiDailyReturn
    def set_RiDailyReturn(self, RiDailyReturn):
        self.RiDailyReturn = RiDailyReturn
    def get_RiReturn(self):
        return self.RiReturn
    def set_RiReturn(self, RiReturn):
        self.RiReturn = RiReturn
    def get_RiReturnToLendable(self):
        return self.RiReturnToLendable
    def set_RiReturnToLendable(self, RiReturnToLendable):
        self.RiReturnToLendable = RiReturnToLendable
    def hasContent_(self):
        if (
            self.RiDailyReturn is not None or
            self.RiReturn is not None or
            self.RiReturnToLendable is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReinvestmentType53', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReinvestmentType53')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReinvestmentType53')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReinvestmentType53', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReinvestmentType53'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReinvestmentType53', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RiDailyReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiDailyReturn>%s</%sRiDailyReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.RiDailyReturn, input_name='RiDailyReturn'), namespaceprefix_ , eol_))
        if self.RiReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiReturn>%s</%sRiReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.RiReturn, input_name='RiReturn'), namespaceprefix_ , eol_))
        if self.RiReturnToLendable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiReturnToLendable>%s</%sRiReturnToLendable>%s' % (namespaceprefix_ , self.gds_format_float(self.RiReturnToLendable, input_name='RiReturnToLendable'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RiDailyReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RiDailyReturn')
            self.RiDailyReturn = fval_
        elif nodeName_ == 'RiReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RiReturn')
            self.RiReturn = fval_
        elif nodeName_ == 'RiReturnToLendable' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RiReturnToLendable')
            self.RiReturnToLendable = fval_
# end class ReinvestmentType53


class TradingType54(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AverageTenure=None, Date=None, Margin=None, QuantityOnLoan=None, SlDailyReturn=None, SlReturnToLendable=None, TotalDailyReturn=None, TotalReturn=None, TotalReturnToLendable=None, Utilisation=None, ValueOnLoan=None, ValueOnLoanVsCash=None, ValueOnLoanVsNonCash=None, VWAF=None, VWAR=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.AverageTenure = AverageTenure
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.Margin = Margin
        self.QuantityOnLoan = QuantityOnLoan
        self.SlDailyReturn = SlDailyReturn
        self.SlReturnToLendable = SlReturnToLendable
        self.TotalDailyReturn = TotalDailyReturn
        self.TotalReturn = TotalReturn
        self.TotalReturnToLendable = TotalReturnToLendable
        self.Utilisation = Utilisation
        self.ValueOnLoan = ValueOnLoan
        self.ValueOnLoanVsCash = ValueOnLoanVsCash
        self.ValueOnLoanVsNonCash = ValueOnLoanVsNonCash
        self.VWAF = VWAF
        self.VWAR = VWAR
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TradingType54)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TradingType54.subclass:
            return TradingType54.subclass(*args_, **kwargs_)
        else:
            return TradingType54(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AverageTenure(self):
        return self.AverageTenure
    def set_AverageTenure(self, AverageTenure):
        self.AverageTenure = AverageTenure
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_Margin(self):
        return self.Margin
    def set_Margin(self, Margin):
        self.Margin = Margin
    def get_QuantityOnLoan(self):
        return self.QuantityOnLoan
    def set_QuantityOnLoan(self, QuantityOnLoan):
        self.QuantityOnLoan = QuantityOnLoan
    def get_SlDailyReturn(self):
        return self.SlDailyReturn
    def set_SlDailyReturn(self, SlDailyReturn):
        self.SlDailyReturn = SlDailyReturn
    def get_SlReturnToLendable(self):
        return self.SlReturnToLendable
    def set_SlReturnToLendable(self, SlReturnToLendable):
        self.SlReturnToLendable = SlReturnToLendable
    def get_TotalDailyReturn(self):
        return self.TotalDailyReturn
    def set_TotalDailyReturn(self, TotalDailyReturn):
        self.TotalDailyReturn = TotalDailyReturn
    def get_TotalReturn(self):
        return self.TotalReturn
    def set_TotalReturn(self, TotalReturn):
        self.TotalReturn = TotalReturn
    def get_TotalReturnToLendable(self):
        return self.TotalReturnToLendable
    def set_TotalReturnToLendable(self, TotalReturnToLendable):
        self.TotalReturnToLendable = TotalReturnToLendable
    def get_Utilisation(self):
        return self.Utilisation
    def set_Utilisation(self, Utilisation):
        self.Utilisation = Utilisation
    def get_ValueOnLoan(self):
        return self.ValueOnLoan
    def set_ValueOnLoan(self, ValueOnLoan):
        self.ValueOnLoan = ValueOnLoan
    def get_ValueOnLoanVsCash(self):
        return self.ValueOnLoanVsCash
    def set_ValueOnLoanVsCash(self, ValueOnLoanVsCash):
        self.ValueOnLoanVsCash = ValueOnLoanVsCash
    def get_ValueOnLoanVsNonCash(self):
        return self.ValueOnLoanVsNonCash
    def set_ValueOnLoanVsNonCash(self, ValueOnLoanVsNonCash):
        self.ValueOnLoanVsNonCash = ValueOnLoanVsNonCash
    def get_VWAF(self):
        return self.VWAF
    def set_VWAF(self, VWAF):
        self.VWAF = VWAF
    def get_VWAR(self):
        return self.VWAR
    def set_VWAR(self, VWAR):
        self.VWAR = VWAR
    def hasContent_(self):
        if (
            self.AverageTenure is not None or
            self.Date is not None or
            self.Margin is not None or
            self.QuantityOnLoan is not None or
            self.SlDailyReturn is not None or
            self.SlReturnToLendable is not None or
            self.TotalDailyReturn is not None or
            self.TotalReturn is not None or
            self.TotalReturnToLendable is not None or
            self.Utilisation is not None or
            self.ValueOnLoan is not None or
            self.ValueOnLoanVsCash is not None or
            self.ValueOnLoanVsNonCash is not None or
            self.VWAF is not None or
            self.VWAR is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TradingType54', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TradingType54')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TradingType54')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TradingType54', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TradingType54'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TradingType54', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AverageTenure is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAverageTenure>%s</%sAverageTenure>%s' % (namespaceprefix_ , self.gds_format_float(self.AverageTenure, input_name='AverageTenure'), namespaceprefix_ , eol_))
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.Margin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMargin>%s</%sMargin>%s' % (namespaceprefix_ , self.gds_format_float(self.Margin, input_name='Margin'), namespaceprefix_ , eol_))
        if self.QuantityOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityOnLoan>%s</%sQuantityOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.QuantityOnLoan, input_name='QuantityOnLoan'), namespaceprefix_ , eol_))
        if self.SlDailyReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSlDailyReturn>%s</%sSlDailyReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.SlDailyReturn, input_name='SlDailyReturn'), namespaceprefix_ , eol_))
        if self.SlReturnToLendable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSlReturnToLendable>%s</%sSlReturnToLendable>%s' % (namespaceprefix_ , self.gds_format_float(self.SlReturnToLendable, input_name='SlReturnToLendable'), namespaceprefix_ , eol_))
        if self.TotalDailyReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalDailyReturn>%s</%sTotalDailyReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.TotalDailyReturn, input_name='TotalDailyReturn'), namespaceprefix_ , eol_))
        if self.TotalReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalReturn>%s</%sTotalReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.TotalReturn, input_name='TotalReturn'), namespaceprefix_ , eol_))
        if self.TotalReturnToLendable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalReturnToLendable>%s</%sTotalReturnToLendable>%s' % (namespaceprefix_ , self.gds_format_float(self.TotalReturnToLendable, input_name='TotalReturnToLendable'), namespaceprefix_ , eol_))
        if self.Utilisation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisation>%s</%sUtilisation>%s' % (namespaceprefix_ , self.gds_format_float(self.Utilisation, input_name='Utilisation'), namespaceprefix_ , eol_))
        if self.ValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoan>%s</%sValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoan, input_name='ValueOnLoan'), namespaceprefix_ , eol_))
        if self.ValueOnLoanVsCash is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanVsCash>%s</%sValueOnLoanVsCash>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoanVsCash, input_name='ValueOnLoanVsCash'), namespaceprefix_ , eol_))
        if self.ValueOnLoanVsNonCash is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanVsNonCash>%s</%sValueOnLoanVsNonCash>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoanVsNonCash, input_name='ValueOnLoanVsNonCash'), namespaceprefix_ , eol_))
        if self.VWAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAF>%s</%sVWAF>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAF, input_name='VWAF'), namespaceprefix_ , eol_))
        if self.VWAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAR>%s</%sVWAR>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAR, input_name='VWAR'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AverageTenure' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AverageTenure')
            self.AverageTenure = fval_
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
        elif nodeName_ == 'Margin' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Margin')
            self.Margin = fval_
        elif nodeName_ == 'QuantityOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'QuantityOnLoan')
            self.QuantityOnLoan = fval_
        elif nodeName_ == 'SlDailyReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SlDailyReturn')
            self.SlDailyReturn = fval_
        elif nodeName_ == 'SlReturnToLendable' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SlReturnToLendable')
            self.SlReturnToLendable = fval_
        elif nodeName_ == 'TotalDailyReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TotalDailyReturn')
            self.TotalDailyReturn = fval_
        elif nodeName_ == 'TotalReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TotalReturn')
            self.TotalReturn = fval_
        elif nodeName_ == 'TotalReturnToLendable' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TotalReturnToLendable')
            self.TotalReturnToLendable = fval_
        elif nodeName_ == 'Utilisation' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Utilisation')
            self.Utilisation = fval_
        elif nodeName_ == 'ValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoan')
            self.ValueOnLoan = fval_
        elif nodeName_ == 'ValueOnLoanVsCash' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoanVsCash')
            self.ValueOnLoanVsCash = fval_
        elif nodeName_ == 'ValueOnLoanVsNonCash' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoanVsNonCash')
            self.ValueOnLoanVsNonCash = fval_
        elif nodeName_ == 'VWAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAF')
            self.VWAF = fval_
        elif nodeName_ == 'VWAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAR')
            self.VWAR = fval_
# end class TradingType54


class MarketDetailType55(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ACCOUNT=None, BENCHMARKFILTER1=None, BENCHMARKFILTER2=None, MARKET=None, DATATYPE=None, FILTER=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ACCOUNT = _cast(None, ACCOUNT)
        self.BENCHMARKFILTER1 = _cast(None, BENCHMARKFILTER1)
        self.BENCHMARKFILTER2 = _cast(None, BENCHMARKFILTER2)
        self.MARKET = _cast(None, MARKET)
        self.DATATYPE = _cast(None, DATATYPE)
        self.FILTER = _cast(None, FILTER)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarketDetailType55)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarketDetailType55.subclass:
            return MarketDetailType55.subclass(*args_, **kwargs_)
        else:
            return MarketDetailType55(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_ACCOUNT(self):
        return self.ACCOUNT
    def set_ACCOUNT(self, ACCOUNT):
        self.ACCOUNT = ACCOUNT
    def get_BENCHMARKFILTER1(self):
        return self.BENCHMARKFILTER1
    def set_BENCHMARKFILTER1(self, BENCHMARKFILTER1):
        self.BENCHMARKFILTER1 = BENCHMARKFILTER1
    def get_BENCHMARKFILTER2(self):
        return self.BENCHMARKFILTER2
    def set_BENCHMARKFILTER2(self, BENCHMARKFILTER2):
        self.BENCHMARKFILTER2 = BENCHMARKFILTER2
    def get_MARKET(self):
        return self.MARKET
    def set_MARKET(self, MARKET):
        self.MARKET = MARKET
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_FILTER(self):
        return self.FILTER
    def set_FILTER(self, FILTER):
        self.FILTER = FILTER
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MarketDetailType55', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarketDetailType55')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarketDetailType55')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarketDetailType55', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarketDetailType55'):
        if self.ACCOUNT is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            outfile.write(' ACCOUNT=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ACCOUNT), input_name='ACCOUNT')), ))
        if self.BENCHMARKFILTER1 is not None and 'BENCHMARKFILTER1' not in already_processed:
            already_processed.add('BENCHMARKFILTER1')
            outfile.write(' BENCHMARKFILTER1=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.BENCHMARKFILTER1), input_name='BENCHMARKFILTER1')), ))
        if self.BENCHMARKFILTER2 is not None and 'BENCHMARKFILTER2' not in already_processed:
            already_processed.add('BENCHMARKFILTER2')
            outfile.write(' BENCHMARKFILTER2=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.BENCHMARKFILTER2), input_name='BENCHMARKFILTER2')), ))
        if self.MARKET is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            outfile.write(' MARKET=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.MARKET), input_name='MARKET')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.FILTER is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            outfile.write(' FILTER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.FILTER), input_name='FILTER')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MarketDetailType55', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ACCOUNT', node)
        if value is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            self.ACCOUNT = value
        value = find_attr_value_('BENCHMARKFILTER1', node)
        if value is not None and 'BENCHMARKFILTER1' not in already_processed:
            already_processed.add('BENCHMARKFILTER1')
            self.BENCHMARKFILTER1 = value
        value = find_attr_value_('BENCHMARKFILTER2', node)
        if value is not None and 'BENCHMARKFILTER2' not in already_processed:
            already_processed.add('BENCHMARKFILTER2')
            self.BENCHMARKFILTER2 = value
        value = find_attr_value_('MARKET', node)
        if value is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            self.MARKET = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('FILTER', node)
        if value is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            self.FILTER = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType56.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class MarketDetailType55


class DataDateType56(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, Inventory=None, Metrics=None, Reinvestment=None, Trading=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.Inventory = Inventory
        self.Metrics = Metrics
        self.Reinvestment = Reinvestment
        self.Trading = Trading
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType56)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType56.subclass:
            return DataDateType56.subclass(*args_, **kwargs_)
        else:
            return DataDateType56(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Inventory(self):
        return self.Inventory
    def set_Inventory(self, Inventory):
        self.Inventory = Inventory
    def get_Metrics(self):
        return self.Metrics
    def set_Metrics(self, Metrics):
        self.Metrics = Metrics
    def get_Reinvestment(self):
        return self.Reinvestment
    def set_Reinvestment(self, Reinvestment):
        self.Reinvestment = Reinvestment
    def get_Trading(self):
        return self.Trading
    def set_Trading(self, Trading):
        self.Trading = Trading
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.Inventory is not None or
            self.Metrics is not None or
            self.Reinvestment is not None or
            self.Trading is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType56', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType56')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType56')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType56', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType56'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType56', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Inventory is not None:
            self.Inventory.export(outfile, level, namespaceprefix_, name_='Inventory', pretty_print=pretty_print)
        if self.Metrics is not None:
            self.Metrics.export(outfile, level, namespaceprefix_, name_='Metrics', pretty_print=pretty_print)
        if self.Reinvestment is not None:
            self.Reinvestment.export(outfile, level, namespaceprefix_, name_='Reinvestment', pretty_print=pretty_print)
        if self.Trading is not None:
            self.Trading.export(outfile, level, namespaceprefix_, name_='Trading', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Inventory':
            obj_ = InventoryType57.factory(parent_object_=self)
            obj_.build(child_)
            self.Inventory = obj_
            obj_.original_tagname_ = 'Inventory'
        elif nodeName_ == 'Metrics':
            obj_ = MetricsType58.factory(parent_object_=self)
            obj_.build(child_)
            self.Metrics = obj_
            obj_.original_tagname_ = 'Metrics'
        elif nodeName_ == 'Reinvestment':
            obj_ = ReinvestmentType60.factory(parent_object_=self)
            obj_.build(child_)
            self.Reinvestment = obj_
            obj_.original_tagname_ = 'Reinvestment'
        elif nodeName_ == 'Trading':
            obj_ = TradingType61.factory(parent_object_=self)
            obj_.build(child_)
            self.Trading = obj_
            obj_.original_tagname_ = 'Trading'
# end class DataDateType56


class InventoryType57(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LendableValue=None, Utilisation=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.LendableValue = LendableValue
        self.Utilisation = Utilisation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InventoryType57)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InventoryType57.subclass:
            return InventoryType57.subclass(*args_, **kwargs_)
        else:
            return InventoryType57(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LendableValue(self):
        return self.LendableValue
    def set_LendableValue(self, LendableValue):
        self.LendableValue = LendableValue
    def get_Utilisation(self):
        return self.Utilisation
    def set_Utilisation(self, Utilisation):
        self.Utilisation = Utilisation
    def hasContent_(self):
        if (
            self.LendableValue is not None or
            self.Utilisation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InventoryType57', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InventoryType57')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InventoryType57')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InventoryType57', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InventoryType57'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InventoryType57', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LendableValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableValue>%s</%sLendableValue>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableValue, input_name='LendableValue'), namespaceprefix_ , eol_))
        if self.Utilisation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisation>%s</%sUtilisation>%s' % (namespaceprefix_ , self.gds_format_float(self.Utilisation, input_name='Utilisation'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LendableValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableValue')
            self.LendableValue = fval_
        elif nodeName_ == 'Utilisation' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Utilisation')
            self.Utilisation = fval_
# end class InventoryType57


class MetricsType58(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Metric=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if Metric is None:
            self.Metric = []
        else:
            self.Metric = Metric
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MetricsType58)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MetricsType58.subclass:
            return MetricsType58.subclass(*args_, **kwargs_)
        else:
            return MetricsType58(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Metric(self):
        return self.Metric
    def set_Metric(self, Metric):
        self.Metric = Metric
    def add_Metric(self, value):
        self.Metric.append(value)
    def add_Metric(self, value):
        self.Metric.append(value)
    def insert_Metric_at(self, index, value):
        self.Metric.insert(index, value)
    def replace_Metric_at(self, index, value):
        self.Metric[index] = value
    def hasContent_(self):
        if (
            self.Metric
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MetricsType58', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MetricsType58')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MetricsType58')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MetricsType58', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MetricsType58'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MetricsType58', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Metric_ in self.Metric:
            Metric_.export(outfile, level, namespaceprefix_, name_='Metric', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Metric':
            obj_ = MetricType59.factory(parent_object_=self)
            obj_.build(child_)
            self.Metric.append(obj_)
            obj_.original_tagname_ = 'Metric'
# end class MetricsType58


class MetricType59(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, LendableValueMetric=None, LendableValueMetricDate=None, MarginMetric=None, MarginMetricDate=None, RiDailyReturnMetric=None, RiDailyReturnMetricDate=None, RiReturnMetric=None, RiReturnMetricDate=None, RiReturnToLendableMetric=None, RiReturnToLendableMetricDate=None, SlDailyReturnMetric=None, SlDailyReturnMetricDate=None, SlReturnToLendableMetric=None, SlReturnToLendableMetricDate=None, TotalDailyReturnMetric=None, TotalDailyReturnMetricDate=None, TotalReturnMetric=None, TotalReturnMetricDate=None, TotalReturnToLendableMetric=None, TotalReturnToLendableMetricDate=None, UtilisationMetric=None, UtilisationMetricDate=None, ValueOnLoanMetric=None, ValueOnLoanMetricDate=None, ValueOnLoanVsCashMetric=None, ValueOnLoanVsCashMetricDate=None, ValueOnLoanVsNonCashMetric=None, ValueOnLoanVsNonCashMetricDate=None, VWAFMetric=None, VWAFMetricDate=None, VWARMetric=None, VWARMetricDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.value = _cast(None, value)
        self.LendableValueMetric = LendableValueMetric
        if isinstance(LendableValueMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LendableValueMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = LendableValueMetricDate
        self.LendableValueMetricDate = initvalue_
        self.MarginMetric = MarginMetric
        if isinstance(MarginMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(MarginMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = MarginMetricDate
        self.MarginMetricDate = initvalue_
        self.RiDailyReturnMetric = RiDailyReturnMetric
        if isinstance(RiDailyReturnMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RiDailyReturnMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RiDailyReturnMetricDate
        self.RiDailyReturnMetricDate = initvalue_
        self.RiReturnMetric = RiReturnMetric
        if isinstance(RiReturnMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RiReturnMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RiReturnMetricDate
        self.RiReturnMetricDate = initvalue_
        self.RiReturnToLendableMetric = RiReturnToLendableMetric
        if isinstance(RiReturnToLendableMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RiReturnToLendableMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RiReturnToLendableMetricDate
        self.RiReturnToLendableMetricDate = initvalue_
        self.SlDailyReturnMetric = SlDailyReturnMetric
        if isinstance(SlDailyReturnMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(SlDailyReturnMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = SlDailyReturnMetricDate
        self.SlDailyReturnMetricDate = initvalue_
        self.SlReturnToLendableMetric = SlReturnToLendableMetric
        if isinstance(SlReturnToLendableMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(SlReturnToLendableMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = SlReturnToLendableMetricDate
        self.SlReturnToLendableMetricDate = initvalue_
        self.TotalDailyReturnMetric = TotalDailyReturnMetric
        if isinstance(TotalDailyReturnMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TotalDailyReturnMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = TotalDailyReturnMetricDate
        self.TotalDailyReturnMetricDate = initvalue_
        self.TotalReturnMetric = TotalReturnMetric
        if isinstance(TotalReturnMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TotalReturnMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = TotalReturnMetricDate
        self.TotalReturnMetricDate = initvalue_
        self.TotalReturnToLendableMetric = TotalReturnToLendableMetric
        if isinstance(TotalReturnToLendableMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TotalReturnToLendableMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = TotalReturnToLendableMetricDate
        self.TotalReturnToLendableMetricDate = initvalue_
        self.UtilisationMetric = UtilisationMetric
        if isinstance(UtilisationMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(UtilisationMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = UtilisationMetricDate
        self.UtilisationMetricDate = initvalue_
        self.ValueOnLoanMetric = ValueOnLoanMetric
        if isinstance(ValueOnLoanMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ValueOnLoanMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ValueOnLoanMetricDate
        self.ValueOnLoanMetricDate = initvalue_
        self.ValueOnLoanVsCashMetric = ValueOnLoanVsCashMetric
        if isinstance(ValueOnLoanVsCashMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ValueOnLoanVsCashMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ValueOnLoanVsCashMetricDate
        self.ValueOnLoanVsCashMetricDate = initvalue_
        self.ValueOnLoanVsNonCashMetric = ValueOnLoanVsNonCashMetric
        if isinstance(ValueOnLoanVsNonCashMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ValueOnLoanVsNonCashMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ValueOnLoanVsNonCashMetricDate
        self.ValueOnLoanVsNonCashMetricDate = initvalue_
        self.VWAFMetric = VWAFMetric
        if isinstance(VWAFMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(VWAFMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = VWAFMetricDate
        self.VWAFMetricDate = initvalue_
        self.VWARMetric = VWARMetric
        if isinstance(VWARMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(VWARMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = VWARMetricDate
        self.VWARMetricDate = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MetricType59)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MetricType59.subclass:
            return MetricType59.subclass(*args_, **kwargs_)
        else:
            return MetricType59(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LendableValueMetric(self):
        return self.LendableValueMetric
    def set_LendableValueMetric(self, LendableValueMetric):
        self.LendableValueMetric = LendableValueMetric
    def get_LendableValueMetricDate(self):
        return self.LendableValueMetricDate
    def set_LendableValueMetricDate(self, LendableValueMetricDate):
        self.LendableValueMetricDate = LendableValueMetricDate
    def get_MarginMetric(self):
        return self.MarginMetric
    def set_MarginMetric(self, MarginMetric):
        self.MarginMetric = MarginMetric
    def get_MarginMetricDate(self):
        return self.MarginMetricDate
    def set_MarginMetricDate(self, MarginMetricDate):
        self.MarginMetricDate = MarginMetricDate
    def get_RiDailyReturnMetric(self):
        return self.RiDailyReturnMetric
    def set_RiDailyReturnMetric(self, RiDailyReturnMetric):
        self.RiDailyReturnMetric = RiDailyReturnMetric
    def get_RiDailyReturnMetricDate(self):
        return self.RiDailyReturnMetricDate
    def set_RiDailyReturnMetricDate(self, RiDailyReturnMetricDate):
        self.RiDailyReturnMetricDate = RiDailyReturnMetricDate
    def get_RiReturnMetric(self):
        return self.RiReturnMetric
    def set_RiReturnMetric(self, RiReturnMetric):
        self.RiReturnMetric = RiReturnMetric
    def get_RiReturnMetricDate(self):
        return self.RiReturnMetricDate
    def set_RiReturnMetricDate(self, RiReturnMetricDate):
        self.RiReturnMetricDate = RiReturnMetricDate
    def get_RiReturnToLendableMetric(self):
        return self.RiReturnToLendableMetric
    def set_RiReturnToLendableMetric(self, RiReturnToLendableMetric):
        self.RiReturnToLendableMetric = RiReturnToLendableMetric
    def get_RiReturnToLendableMetricDate(self):
        return self.RiReturnToLendableMetricDate
    def set_RiReturnToLendableMetricDate(self, RiReturnToLendableMetricDate):
        self.RiReturnToLendableMetricDate = RiReturnToLendableMetricDate
    def get_SlDailyReturnMetric(self):
        return self.SlDailyReturnMetric
    def set_SlDailyReturnMetric(self, SlDailyReturnMetric):
        self.SlDailyReturnMetric = SlDailyReturnMetric
    def get_SlDailyReturnMetricDate(self):
        return self.SlDailyReturnMetricDate
    def set_SlDailyReturnMetricDate(self, SlDailyReturnMetricDate):
        self.SlDailyReturnMetricDate = SlDailyReturnMetricDate
    def get_SlReturnToLendableMetric(self):
        return self.SlReturnToLendableMetric
    def set_SlReturnToLendableMetric(self, SlReturnToLendableMetric):
        self.SlReturnToLendableMetric = SlReturnToLendableMetric
    def get_SlReturnToLendableMetricDate(self):
        return self.SlReturnToLendableMetricDate
    def set_SlReturnToLendableMetricDate(self, SlReturnToLendableMetricDate):
        self.SlReturnToLendableMetricDate = SlReturnToLendableMetricDate
    def get_TotalDailyReturnMetric(self):
        return self.TotalDailyReturnMetric
    def set_TotalDailyReturnMetric(self, TotalDailyReturnMetric):
        self.TotalDailyReturnMetric = TotalDailyReturnMetric
    def get_TotalDailyReturnMetricDate(self):
        return self.TotalDailyReturnMetricDate
    def set_TotalDailyReturnMetricDate(self, TotalDailyReturnMetricDate):
        self.TotalDailyReturnMetricDate = TotalDailyReturnMetricDate
    def get_TotalReturnMetric(self):
        return self.TotalReturnMetric
    def set_TotalReturnMetric(self, TotalReturnMetric):
        self.TotalReturnMetric = TotalReturnMetric
    def get_TotalReturnMetricDate(self):
        return self.TotalReturnMetricDate
    def set_TotalReturnMetricDate(self, TotalReturnMetricDate):
        self.TotalReturnMetricDate = TotalReturnMetricDate
    def get_TotalReturnToLendableMetric(self):
        return self.TotalReturnToLendableMetric
    def set_TotalReturnToLendableMetric(self, TotalReturnToLendableMetric):
        self.TotalReturnToLendableMetric = TotalReturnToLendableMetric
    def get_TotalReturnToLendableMetricDate(self):
        return self.TotalReturnToLendableMetricDate
    def set_TotalReturnToLendableMetricDate(self, TotalReturnToLendableMetricDate):
        self.TotalReturnToLendableMetricDate = TotalReturnToLendableMetricDate
    def get_UtilisationMetric(self):
        return self.UtilisationMetric
    def set_UtilisationMetric(self, UtilisationMetric):
        self.UtilisationMetric = UtilisationMetric
    def get_UtilisationMetricDate(self):
        return self.UtilisationMetricDate
    def set_UtilisationMetricDate(self, UtilisationMetricDate):
        self.UtilisationMetricDate = UtilisationMetricDate
    def get_ValueOnLoanMetric(self):
        return self.ValueOnLoanMetric
    def set_ValueOnLoanMetric(self, ValueOnLoanMetric):
        self.ValueOnLoanMetric = ValueOnLoanMetric
    def get_ValueOnLoanMetricDate(self):
        return self.ValueOnLoanMetricDate
    def set_ValueOnLoanMetricDate(self, ValueOnLoanMetricDate):
        self.ValueOnLoanMetricDate = ValueOnLoanMetricDate
    def get_ValueOnLoanVsCashMetric(self):
        return self.ValueOnLoanVsCashMetric
    def set_ValueOnLoanVsCashMetric(self, ValueOnLoanVsCashMetric):
        self.ValueOnLoanVsCashMetric = ValueOnLoanVsCashMetric
    def get_ValueOnLoanVsCashMetricDate(self):
        return self.ValueOnLoanVsCashMetricDate
    def set_ValueOnLoanVsCashMetricDate(self, ValueOnLoanVsCashMetricDate):
        self.ValueOnLoanVsCashMetricDate = ValueOnLoanVsCashMetricDate
    def get_ValueOnLoanVsNonCashMetric(self):
        return self.ValueOnLoanVsNonCashMetric
    def set_ValueOnLoanVsNonCashMetric(self, ValueOnLoanVsNonCashMetric):
        self.ValueOnLoanVsNonCashMetric = ValueOnLoanVsNonCashMetric
    def get_ValueOnLoanVsNonCashMetricDate(self):
        return self.ValueOnLoanVsNonCashMetricDate
    def set_ValueOnLoanVsNonCashMetricDate(self, ValueOnLoanVsNonCashMetricDate):
        self.ValueOnLoanVsNonCashMetricDate = ValueOnLoanVsNonCashMetricDate
    def get_VWAFMetric(self):
        return self.VWAFMetric
    def set_VWAFMetric(self, VWAFMetric):
        self.VWAFMetric = VWAFMetric
    def get_VWAFMetricDate(self):
        return self.VWAFMetricDate
    def set_VWAFMetricDate(self, VWAFMetricDate):
        self.VWAFMetricDate = VWAFMetricDate
    def get_VWARMetric(self):
        return self.VWARMetric
    def set_VWARMetric(self, VWARMetric):
        self.VWARMetric = VWARMetric
    def get_VWARMetricDate(self):
        return self.VWARMetricDate
    def set_VWARMetricDate(self, VWARMetricDate):
        self.VWARMetricDate = VWARMetricDate
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.LendableValueMetric is not None or
            self.LendableValueMetricDate is not None or
            self.MarginMetric is not None or
            self.MarginMetricDate is not None or
            self.RiDailyReturnMetric is not None or
            self.RiDailyReturnMetricDate is not None or
            self.RiReturnMetric is not None or
            self.RiReturnMetricDate is not None or
            self.RiReturnToLendableMetric is not None or
            self.RiReturnToLendableMetricDate is not None or
            self.SlDailyReturnMetric is not None or
            self.SlDailyReturnMetricDate is not None or
            self.SlReturnToLendableMetric is not None or
            self.SlReturnToLendableMetricDate is not None or
            self.TotalDailyReturnMetric is not None or
            self.TotalDailyReturnMetricDate is not None or
            self.TotalReturnMetric is not None or
            self.TotalReturnMetricDate is not None or
            self.TotalReturnToLendableMetric is not None or
            self.TotalReturnToLendableMetricDate is not None or
            self.UtilisationMetric is not None or
            self.UtilisationMetricDate is not None or
            self.ValueOnLoanMetric is not None or
            self.ValueOnLoanMetricDate is not None or
            self.ValueOnLoanVsCashMetric is not None or
            self.ValueOnLoanVsCashMetricDate is not None or
            self.ValueOnLoanVsNonCashMetric is not None or
            self.ValueOnLoanVsNonCashMetricDate is not None or
            self.VWAFMetric is not None or
            self.VWAFMetricDate is not None or
            self.VWARMetric is not None or
            self.VWARMetricDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MetricType59', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MetricType59')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MetricType59')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MetricType59', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MetricType59'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MetricType59', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LendableValueMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableValueMetric>%s</%sLendableValueMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableValueMetric, input_name='LendableValueMetric'), namespaceprefix_ , eol_))
        if self.LendableValueMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableValueMetricDate>%s</%sLendableValueMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.LendableValueMetricDate, input_name='LendableValueMetricDate'), namespaceprefix_ , eol_))
        if self.MarginMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarginMetric>%s</%sMarginMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.MarginMetric, input_name='MarginMetric'), namespaceprefix_ , eol_))
        if self.MarginMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarginMetricDate>%s</%sMarginMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.MarginMetricDate, input_name='MarginMetricDate'), namespaceprefix_ , eol_))
        if self.RiDailyReturnMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiDailyReturnMetric>%s</%sRiDailyReturnMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.RiDailyReturnMetric, input_name='RiDailyReturnMetric'), namespaceprefix_ , eol_))
        if self.RiDailyReturnMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiDailyReturnMetricDate>%s</%sRiDailyReturnMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RiDailyReturnMetricDate, input_name='RiDailyReturnMetricDate'), namespaceprefix_ , eol_))
        if self.RiReturnMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiReturnMetric>%s</%sRiReturnMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.RiReturnMetric, input_name='RiReturnMetric'), namespaceprefix_ , eol_))
        if self.RiReturnMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiReturnMetricDate>%s</%sRiReturnMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RiReturnMetricDate, input_name='RiReturnMetricDate'), namespaceprefix_ , eol_))
        if self.RiReturnToLendableMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiReturnToLendableMetric>%s</%sRiReturnToLendableMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.RiReturnToLendableMetric, input_name='RiReturnToLendableMetric'), namespaceprefix_ , eol_))
        if self.RiReturnToLendableMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiReturnToLendableMetricDate>%s</%sRiReturnToLendableMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RiReturnToLendableMetricDate, input_name='RiReturnToLendableMetricDate'), namespaceprefix_ , eol_))
        if self.SlDailyReturnMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSlDailyReturnMetric>%s</%sSlDailyReturnMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.SlDailyReturnMetric, input_name='SlDailyReturnMetric'), namespaceprefix_ , eol_))
        if self.SlDailyReturnMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSlDailyReturnMetricDate>%s</%sSlDailyReturnMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.SlDailyReturnMetricDate, input_name='SlDailyReturnMetricDate'), namespaceprefix_ , eol_))
        if self.SlReturnToLendableMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSlReturnToLendableMetric>%s</%sSlReturnToLendableMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.SlReturnToLendableMetric, input_name='SlReturnToLendableMetric'), namespaceprefix_ , eol_))
        if self.SlReturnToLendableMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSlReturnToLendableMetricDate>%s</%sSlReturnToLendableMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.SlReturnToLendableMetricDate, input_name='SlReturnToLendableMetricDate'), namespaceprefix_ , eol_))
        if self.TotalDailyReturnMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalDailyReturnMetric>%s</%sTotalDailyReturnMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.TotalDailyReturnMetric, input_name='TotalDailyReturnMetric'), namespaceprefix_ , eol_))
        if self.TotalDailyReturnMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalDailyReturnMetricDate>%s</%sTotalDailyReturnMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.TotalDailyReturnMetricDate, input_name='TotalDailyReturnMetricDate'), namespaceprefix_ , eol_))
        if self.TotalReturnMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalReturnMetric>%s</%sTotalReturnMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.TotalReturnMetric, input_name='TotalReturnMetric'), namespaceprefix_ , eol_))
        if self.TotalReturnMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalReturnMetricDate>%s</%sTotalReturnMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.TotalReturnMetricDate, input_name='TotalReturnMetricDate'), namespaceprefix_ , eol_))
        if self.TotalReturnToLendableMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalReturnToLendableMetric>%s</%sTotalReturnToLendableMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.TotalReturnToLendableMetric, input_name='TotalReturnToLendableMetric'), namespaceprefix_ , eol_))
        if self.TotalReturnToLendableMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalReturnToLendableMetricDate>%s</%sTotalReturnToLendableMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.TotalReturnToLendableMetricDate, input_name='TotalReturnToLendableMetricDate'), namespaceprefix_ , eol_))
        if self.UtilisationMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisationMetric>%s</%sUtilisationMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.UtilisationMetric, input_name='UtilisationMetric'), namespaceprefix_ , eol_))
        if self.UtilisationMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisationMetricDate>%s</%sUtilisationMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.UtilisationMetricDate, input_name='UtilisationMetricDate'), namespaceprefix_ , eol_))
        if self.ValueOnLoanMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanMetric>%s</%sValueOnLoanMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoanMetric, input_name='ValueOnLoanMetric'), namespaceprefix_ , eol_))
        if self.ValueOnLoanMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanMetricDate>%s</%sValueOnLoanMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ValueOnLoanMetricDate, input_name='ValueOnLoanMetricDate'), namespaceprefix_ , eol_))
        if self.ValueOnLoanVsCashMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanVsCashMetric>%s</%sValueOnLoanVsCashMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoanVsCashMetric, input_name='ValueOnLoanVsCashMetric'), namespaceprefix_ , eol_))
        if self.ValueOnLoanVsCashMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanVsCashMetricDate>%s</%sValueOnLoanVsCashMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ValueOnLoanVsCashMetricDate, input_name='ValueOnLoanVsCashMetricDate'), namespaceprefix_ , eol_))
        if self.ValueOnLoanVsNonCashMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanVsNonCashMetric>%s</%sValueOnLoanVsNonCashMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoanVsNonCashMetric, input_name='ValueOnLoanVsNonCashMetric'), namespaceprefix_ , eol_))
        if self.ValueOnLoanVsNonCashMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanVsNonCashMetricDate>%s</%sValueOnLoanVsNonCashMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ValueOnLoanVsNonCashMetricDate, input_name='ValueOnLoanVsNonCashMetricDate'), namespaceprefix_ , eol_))
        if self.VWAFMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAFMetric>%s</%sVWAFMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAFMetric, input_name='VWAFMetric'), namespaceprefix_ , eol_))
        if self.VWAFMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAFMetricDate>%s</%sVWAFMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.VWAFMetricDate, input_name='VWAFMetricDate'), namespaceprefix_ , eol_))
        if self.VWARMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWARMetric>%s</%sVWARMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.VWARMetric, input_name='VWARMetric'), namespaceprefix_ , eol_))
        if self.VWARMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWARMetricDate>%s</%sVWARMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.VWARMetricDate, input_name='VWARMetricDate'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LendableValueMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableValueMetric')
            self.LendableValueMetric = fval_
        elif nodeName_ == 'LendableValueMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.LendableValueMetricDate = dval_
        elif nodeName_ == 'MarginMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'MarginMetric')
            self.MarginMetric = fval_
        elif nodeName_ == 'MarginMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.MarginMetricDate = dval_
        elif nodeName_ == 'RiDailyReturnMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RiDailyReturnMetric')
            self.RiDailyReturnMetric = fval_
        elif nodeName_ == 'RiDailyReturnMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RiDailyReturnMetricDate = dval_
        elif nodeName_ == 'RiReturnMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RiReturnMetric')
            self.RiReturnMetric = fval_
        elif nodeName_ == 'RiReturnMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RiReturnMetricDate = dval_
        elif nodeName_ == 'RiReturnToLendableMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RiReturnToLendableMetric')
            self.RiReturnToLendableMetric = fval_
        elif nodeName_ == 'RiReturnToLendableMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RiReturnToLendableMetricDate = dval_
        elif nodeName_ == 'SlDailyReturnMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SlDailyReturnMetric')
            self.SlDailyReturnMetric = fval_
        elif nodeName_ == 'SlDailyReturnMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.SlDailyReturnMetricDate = dval_
        elif nodeName_ == 'SlReturnToLendableMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SlReturnToLendableMetric')
            self.SlReturnToLendableMetric = fval_
        elif nodeName_ == 'SlReturnToLendableMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.SlReturnToLendableMetricDate = dval_
        elif nodeName_ == 'TotalDailyReturnMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TotalDailyReturnMetric')
            self.TotalDailyReturnMetric = fval_
        elif nodeName_ == 'TotalDailyReturnMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TotalDailyReturnMetricDate = dval_
        elif nodeName_ == 'TotalReturnMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TotalReturnMetric')
            self.TotalReturnMetric = fval_
        elif nodeName_ == 'TotalReturnMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TotalReturnMetricDate = dval_
        elif nodeName_ == 'TotalReturnToLendableMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TotalReturnToLendableMetric')
            self.TotalReturnToLendableMetric = fval_
        elif nodeName_ == 'TotalReturnToLendableMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TotalReturnToLendableMetricDate = dval_
        elif nodeName_ == 'UtilisationMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'UtilisationMetric')
            self.UtilisationMetric = fval_
        elif nodeName_ == 'UtilisationMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.UtilisationMetricDate = dval_
        elif nodeName_ == 'ValueOnLoanMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoanMetric')
            self.ValueOnLoanMetric = fval_
        elif nodeName_ == 'ValueOnLoanMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ValueOnLoanMetricDate = dval_
        elif nodeName_ == 'ValueOnLoanVsCashMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoanVsCashMetric')
            self.ValueOnLoanVsCashMetric = fval_
        elif nodeName_ == 'ValueOnLoanVsCashMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ValueOnLoanVsCashMetricDate = dval_
        elif nodeName_ == 'ValueOnLoanVsNonCashMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoanVsNonCashMetric')
            self.ValueOnLoanVsNonCashMetric = fval_
        elif nodeName_ == 'ValueOnLoanVsNonCashMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ValueOnLoanVsNonCashMetricDate = dval_
        elif nodeName_ == 'VWAFMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAFMetric')
            self.VWAFMetric = fval_
        elif nodeName_ == 'VWAFMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.VWAFMetricDate = dval_
        elif nodeName_ == 'VWARMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWARMetric')
            self.VWARMetric = fval_
        elif nodeName_ == 'VWARMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.VWARMetricDate = dval_
# end class MetricType59


class ReinvestmentType60(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RiBalance=None, RiDailyReturn=None, RiReturn=None, RiReturnToLendable=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.RiBalance = RiBalance
        self.RiDailyReturn = RiDailyReturn
        self.RiReturn = RiReturn
        self.RiReturnToLendable = RiReturnToLendable
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReinvestmentType60)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReinvestmentType60.subclass:
            return ReinvestmentType60.subclass(*args_, **kwargs_)
        else:
            return ReinvestmentType60(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RiBalance(self):
        return self.RiBalance
    def set_RiBalance(self, RiBalance):
        self.RiBalance = RiBalance
    def get_RiDailyReturn(self):
        return self.RiDailyReturn
    def set_RiDailyReturn(self, RiDailyReturn):
        self.RiDailyReturn = RiDailyReturn
    def get_RiReturn(self):
        return self.RiReturn
    def set_RiReturn(self, RiReturn):
        self.RiReturn = RiReturn
    def get_RiReturnToLendable(self):
        return self.RiReturnToLendable
    def set_RiReturnToLendable(self, RiReturnToLendable):
        self.RiReturnToLendable = RiReturnToLendable
    def hasContent_(self):
        if (
            self.RiBalance is not None or
            self.RiDailyReturn is not None or
            self.RiReturn is not None or
            self.RiReturnToLendable is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReinvestmentType60', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReinvestmentType60')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReinvestmentType60')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReinvestmentType60', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReinvestmentType60'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReinvestmentType60', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RiBalance is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiBalance>%s</%sRiBalance>%s' % (namespaceprefix_ , self.gds_format_float(self.RiBalance, input_name='RiBalance'), namespaceprefix_ , eol_))
        if self.RiDailyReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiDailyReturn>%s</%sRiDailyReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.RiDailyReturn, input_name='RiDailyReturn'), namespaceprefix_ , eol_))
        if self.RiReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiReturn>%s</%sRiReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.RiReturn, input_name='RiReturn'), namespaceprefix_ , eol_))
        if self.RiReturnToLendable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiReturnToLendable>%s</%sRiReturnToLendable>%s' % (namespaceprefix_ , self.gds_format_float(self.RiReturnToLendable, input_name='RiReturnToLendable'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RiBalance' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RiBalance')
            self.RiBalance = fval_
        elif nodeName_ == 'RiDailyReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RiDailyReturn')
            self.RiDailyReturn = fval_
        elif nodeName_ == 'RiReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RiReturn')
            self.RiReturn = fval_
        elif nodeName_ == 'RiReturnToLendable' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RiReturnToLendable')
            self.RiReturnToLendable = fval_
# end class ReinvestmentType60


class TradingType61(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AverageTenure=None, Date=None, Margin=None, MarketArea=None, SlDailyReturn=None, SlReturnToLendable=None, TotalDailyReturn=None, TotalReturn=None, TotalReturnToLendable=None, Utilisation=None, ValueOnLoan=None, ValueOnLoanVsCash=None, ValueOnLoanVsNonCash=None, VWAF=None, VWAR=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.AverageTenure = AverageTenure
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.Margin = Margin
        self.MarketArea = MarketArea
        self.SlDailyReturn = SlDailyReturn
        self.SlReturnToLendable = SlReturnToLendable
        self.TotalDailyReturn = TotalDailyReturn
        self.TotalReturn = TotalReturn
        self.TotalReturnToLendable = TotalReturnToLendable
        self.Utilisation = Utilisation
        self.ValueOnLoan = ValueOnLoan
        self.ValueOnLoanVsCash = ValueOnLoanVsCash
        self.ValueOnLoanVsNonCash = ValueOnLoanVsNonCash
        self.VWAF = VWAF
        self.VWAR = VWAR
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TradingType61)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TradingType61.subclass:
            return TradingType61.subclass(*args_, **kwargs_)
        else:
            return TradingType61(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AverageTenure(self):
        return self.AverageTenure
    def set_AverageTenure(self, AverageTenure):
        self.AverageTenure = AverageTenure
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_Margin(self):
        return self.Margin
    def set_Margin(self, Margin):
        self.Margin = Margin
    def get_MarketArea(self):
        return self.MarketArea
    def set_MarketArea(self, MarketArea):
        self.MarketArea = MarketArea
    def get_SlDailyReturn(self):
        return self.SlDailyReturn
    def set_SlDailyReturn(self, SlDailyReturn):
        self.SlDailyReturn = SlDailyReturn
    def get_SlReturnToLendable(self):
        return self.SlReturnToLendable
    def set_SlReturnToLendable(self, SlReturnToLendable):
        self.SlReturnToLendable = SlReturnToLendable
    def get_TotalDailyReturn(self):
        return self.TotalDailyReturn
    def set_TotalDailyReturn(self, TotalDailyReturn):
        self.TotalDailyReturn = TotalDailyReturn
    def get_TotalReturn(self):
        return self.TotalReturn
    def set_TotalReturn(self, TotalReturn):
        self.TotalReturn = TotalReturn
    def get_TotalReturnToLendable(self):
        return self.TotalReturnToLendable
    def set_TotalReturnToLendable(self, TotalReturnToLendable):
        self.TotalReturnToLendable = TotalReturnToLendable
    def get_Utilisation(self):
        return self.Utilisation
    def set_Utilisation(self, Utilisation):
        self.Utilisation = Utilisation
    def get_ValueOnLoan(self):
        return self.ValueOnLoan
    def set_ValueOnLoan(self, ValueOnLoan):
        self.ValueOnLoan = ValueOnLoan
    def get_ValueOnLoanVsCash(self):
        return self.ValueOnLoanVsCash
    def set_ValueOnLoanVsCash(self, ValueOnLoanVsCash):
        self.ValueOnLoanVsCash = ValueOnLoanVsCash
    def get_ValueOnLoanVsNonCash(self):
        return self.ValueOnLoanVsNonCash
    def set_ValueOnLoanVsNonCash(self, ValueOnLoanVsNonCash):
        self.ValueOnLoanVsNonCash = ValueOnLoanVsNonCash
    def get_VWAF(self):
        return self.VWAF
    def set_VWAF(self, VWAF):
        self.VWAF = VWAF
    def get_VWAR(self):
        return self.VWAR
    def set_VWAR(self, VWAR):
        self.VWAR = VWAR
    def hasContent_(self):
        if (
            self.AverageTenure is not None or
            self.Date is not None or
            self.Margin is not None or
            self.MarketArea is not None or
            self.SlDailyReturn is not None or
            self.SlReturnToLendable is not None or
            self.TotalDailyReturn is not None or
            self.TotalReturn is not None or
            self.TotalReturnToLendable is not None or
            self.Utilisation is not None or
            self.ValueOnLoan is not None or
            self.ValueOnLoanVsCash is not None or
            self.ValueOnLoanVsNonCash is not None or
            self.VWAF is not None or
            self.VWAR is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TradingType61', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TradingType61')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TradingType61')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TradingType61', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TradingType61'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TradingType61', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AverageTenure is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAverageTenure>%s</%sAverageTenure>%s' % (namespaceprefix_ , self.gds_format_float(self.AverageTenure, input_name='AverageTenure'), namespaceprefix_ , eol_))
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.Margin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMargin>%s</%sMargin>%s' % (namespaceprefix_ , self.gds_format_float(self.Margin, input_name='Margin'), namespaceprefix_ , eol_))
        if self.MarketArea is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarketArea>%s</%sMarketArea>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarketArea), input_name='MarketArea')), namespaceprefix_ , eol_))
        if self.SlDailyReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSlDailyReturn>%s</%sSlDailyReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.SlDailyReturn, input_name='SlDailyReturn'), namespaceprefix_ , eol_))
        if self.SlReturnToLendable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSlReturnToLendable>%s</%sSlReturnToLendable>%s' % (namespaceprefix_ , self.gds_format_float(self.SlReturnToLendable, input_name='SlReturnToLendable'), namespaceprefix_ , eol_))
        if self.TotalDailyReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalDailyReturn>%s</%sTotalDailyReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.TotalDailyReturn, input_name='TotalDailyReturn'), namespaceprefix_ , eol_))
        if self.TotalReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalReturn>%s</%sTotalReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.TotalReturn, input_name='TotalReturn'), namespaceprefix_ , eol_))
        if self.TotalReturnToLendable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalReturnToLendable>%s</%sTotalReturnToLendable>%s' % (namespaceprefix_ , self.gds_format_float(self.TotalReturnToLendable, input_name='TotalReturnToLendable'), namespaceprefix_ , eol_))
        if self.Utilisation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisation>%s</%sUtilisation>%s' % (namespaceprefix_ , self.gds_format_float(self.Utilisation, input_name='Utilisation'), namespaceprefix_ , eol_))
        if self.ValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoan>%s</%sValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoan, input_name='ValueOnLoan'), namespaceprefix_ , eol_))
        if self.ValueOnLoanVsCash is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanVsCash>%s</%sValueOnLoanVsCash>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoanVsCash, input_name='ValueOnLoanVsCash'), namespaceprefix_ , eol_))
        if self.ValueOnLoanVsNonCash is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanVsNonCash>%s</%sValueOnLoanVsNonCash>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoanVsNonCash, input_name='ValueOnLoanVsNonCash'), namespaceprefix_ , eol_))
        if self.VWAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAF>%s</%sVWAF>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAF, input_name='VWAF'), namespaceprefix_ , eol_))
        if self.VWAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAR>%s</%sVWAR>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAR, input_name='VWAR'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AverageTenure' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AverageTenure')
            self.AverageTenure = fval_
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
        elif nodeName_ == 'Margin' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Margin')
            self.Margin = fval_
        elif nodeName_ == 'MarketArea':
            MarketArea_ = child_.text
            MarketArea_ = self.gds_validate_string(MarketArea_, node, 'MarketArea')
            self.MarketArea = MarketArea_
        elif nodeName_ == 'SlDailyReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SlDailyReturn')
            self.SlDailyReturn = fval_
        elif nodeName_ == 'SlReturnToLendable' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SlReturnToLendable')
            self.SlReturnToLendable = fval_
        elif nodeName_ == 'TotalDailyReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TotalDailyReturn')
            self.TotalDailyReturn = fval_
        elif nodeName_ == 'TotalReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TotalReturn')
            self.TotalReturn = fval_
        elif nodeName_ == 'TotalReturnToLendable' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TotalReturnToLendable')
            self.TotalReturnToLendable = fval_
        elif nodeName_ == 'Utilisation' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Utilisation')
            self.Utilisation = fval_
        elif nodeName_ == 'ValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoan')
            self.ValueOnLoan = fval_
        elif nodeName_ == 'ValueOnLoanVsCash' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoanVsCash')
            self.ValueOnLoanVsCash = fval_
        elif nodeName_ == 'ValueOnLoanVsNonCash' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoanVsNonCash')
            self.ValueOnLoanVsNonCash = fval_
        elif nodeName_ == 'VWAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAF')
            self.VWAF = fval_
        elif nodeName_ == 'VWAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAR')
            self.VWAR = fval_
# end class TradingType61


class RankedCounterpartType62(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ACCOUNT=None, BENCHMARKFILTER1=None, DATATYPE=None, MARKET=None, RANK=None, RANKTYPE=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ACCOUNT = _cast(None, ACCOUNT)
        self.BENCHMARKFILTER1 = _cast(None, BENCHMARKFILTER1)
        self.DATATYPE = _cast(None, DATATYPE)
        self.MARKET = _cast(None, MARKET)
        self.RANK = _cast(None, RANK)
        self.RANKTYPE = _cast(None, RANKTYPE)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RankedCounterpartType62)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RankedCounterpartType62.subclass:
            return RankedCounterpartType62.subclass(*args_, **kwargs_)
        else:
            return RankedCounterpartType62(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_ACCOUNT(self):
        return self.ACCOUNT
    def set_ACCOUNT(self, ACCOUNT):
        self.ACCOUNT = ACCOUNT
    def get_BENCHMARKFILTER1(self):
        return self.BENCHMARKFILTER1
    def set_BENCHMARKFILTER1(self, BENCHMARKFILTER1):
        self.BENCHMARKFILTER1 = BENCHMARKFILTER1
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_MARKET(self):
        return self.MARKET
    def set_MARKET(self, MARKET):
        self.MARKET = MARKET
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_RANKTYPE(self):
        return self.RANKTYPE
    def set_RANKTYPE(self, RANKTYPE):
        self.RANKTYPE = RANKTYPE
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RankedCounterpartType62', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RankedCounterpartType62')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RankedCounterpartType62')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RankedCounterpartType62', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RankedCounterpartType62'):
        if self.ACCOUNT is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            outfile.write(' ACCOUNT=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ACCOUNT), input_name='ACCOUNT')), ))
        if self.BENCHMARKFILTER1 is not None and 'BENCHMARKFILTER1' not in already_processed:
            already_processed.add('BENCHMARKFILTER1')
            outfile.write(' BENCHMARKFILTER1=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.BENCHMARKFILTER1), input_name='BENCHMARKFILTER1')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.MARKET is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            outfile.write(' MARKET=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.MARKET), input_name='MARKET')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.RANKTYPE is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            outfile.write(' RANKTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANKTYPE), input_name='RANKTYPE')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RankedCounterpartType62', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ACCOUNT', node)
        if value is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            self.ACCOUNT = value
        value = find_attr_value_('BENCHMARKFILTER1', node)
        if value is not None and 'BENCHMARKFILTER1' not in already_processed:
            already_processed.add('BENCHMARKFILTER1')
            self.BENCHMARKFILTER1 = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('MARKET', node)
        if value is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            self.MARKET = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('RANKTYPE', node)
        if value is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            self.RANKTYPE = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType63.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class RankedCounterpartType62


class DataDateType63(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType63)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType63.subclass:
            return DataDateType63.subclass(*args_, **kwargs_)
        else:
            return DataDateType63(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType63', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType63')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType63')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType63', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType63'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType63', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType64.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType63


class GeneralType64(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Counterpart=None, CounterpartName=None, Date=None, RankedValue=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Counterpart = Counterpart
        self.CounterpartName = CounterpartName
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.RankedValue = RankedValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType64)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType64.subclass:
            return GeneralType64.subclass(*args_, **kwargs_)
        else:
            return GeneralType64(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Counterpart(self):
        return self.Counterpart
    def set_Counterpart(self, Counterpart):
        self.Counterpart = Counterpart
    def get_CounterpartName(self):
        return self.CounterpartName
    def set_CounterpartName(self, CounterpartName):
        self.CounterpartName = CounterpartName
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_RankedValue(self):
        return self.RankedValue
    def set_RankedValue(self, RankedValue):
        self.RankedValue = RankedValue
    def hasContent_(self):
        if (
            self.Counterpart is not None or
            self.CounterpartName is not None or
            self.Date is not None or
            self.RankedValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType64', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType64')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType64')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType64', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType64'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType64', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Counterpart is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCounterpart>%s</%sCounterpart>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Counterpart), input_name='Counterpart')), namespaceprefix_ , eol_))
        if self.CounterpartName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCounterpartName>%s</%sCounterpartName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CounterpartName), input_name='CounterpartName')), namespaceprefix_ , eol_))
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.RankedValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRankedValue>%s</%sRankedValue>%s' % (namespaceprefix_ , self.gds_format_float(self.RankedValue, input_name='RankedValue'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Counterpart':
            Counterpart_ = child_.text
            Counterpart_ = self.gds_validate_string(Counterpart_, node, 'Counterpart')
            self.Counterpart = Counterpart_
        elif nodeName_ == 'CounterpartName':
            CounterpartName_ = child_.text
            CounterpartName_ = self.gds_validate_string(CounterpartName_, node, 'CounterpartName')
            self.CounterpartName = CounterpartName_
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
        elif nodeName_ == 'RankedValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RankedValue')
            self.RankedValue = fval_
# end class GeneralType64


class RankedFundType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ACCOUNT=None, BENCHMARKFILTER1=None, DATATYPE=None, MARKET=None, RANK=None, RANKTYPE=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ACCOUNT = _cast(None, ACCOUNT)
        self.BENCHMARKFILTER1 = _cast(None, BENCHMARKFILTER1)
        self.DATATYPE = _cast(None, DATATYPE)
        self.MARKET = _cast(None, MARKET)
        self.RANK = _cast(None, RANK)
        self.RANKTYPE = _cast(None, RANKTYPE)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RankedFundType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RankedFundType.subclass:
            return RankedFundType.subclass(*args_, **kwargs_)
        else:
            return RankedFundType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_ACCOUNT(self):
        return self.ACCOUNT
    def set_ACCOUNT(self, ACCOUNT):
        self.ACCOUNT = ACCOUNT
    def get_BENCHMARKFILTER1(self):
        return self.BENCHMARKFILTER1
    def set_BENCHMARKFILTER1(self, BENCHMARKFILTER1):
        self.BENCHMARKFILTER1 = BENCHMARKFILTER1
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_MARKET(self):
        return self.MARKET
    def set_MARKET(self, MARKET):
        self.MARKET = MARKET
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_RANKTYPE(self):
        return self.RANKTYPE
    def set_RANKTYPE(self, RANKTYPE):
        self.RANKTYPE = RANKTYPE
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RankedFundType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RankedFundType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RankedFundType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RankedFundType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RankedFundType'):
        if self.ACCOUNT is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            outfile.write(' ACCOUNT=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ACCOUNT), input_name='ACCOUNT')), ))
        if self.BENCHMARKFILTER1 is not None and 'BENCHMARKFILTER1' not in already_processed:
            already_processed.add('BENCHMARKFILTER1')
            outfile.write(' BENCHMARKFILTER1=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.BENCHMARKFILTER1), input_name='BENCHMARKFILTER1')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.MARKET is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            outfile.write(' MARKET=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.MARKET), input_name='MARKET')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.RANKTYPE is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            outfile.write(' RANKTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANKTYPE), input_name='RANKTYPE')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RankedFundType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ACCOUNT', node)
        if value is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            self.ACCOUNT = value
        value = find_attr_value_('BENCHMARKFILTER1', node)
        if value is not None and 'BENCHMARKFILTER1' not in already_processed:
            already_processed.add('BENCHMARKFILTER1')
            self.BENCHMARKFILTER1 = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('MARKET', node)
        if value is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            self.MARKET = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('RANKTYPE', node)
        if value is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            self.RANKTYPE = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType65.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class RankedFundType


class DataDateType65(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType65)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType65.subclass:
            return DataDateType65.subclass(*args_, **kwargs_)
        else:
            return DataDateType65(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType65', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType65')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType65')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType65', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType65'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType65', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType66.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType65


class GeneralType66(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Date=None, FundName=None, FundPath=None, RankedValue=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.FundName = FundName
        self.FundPath = FundPath
        self.RankedValue = RankedValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType66)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType66.subclass:
            return GeneralType66.subclass(*args_, **kwargs_)
        else:
            return GeneralType66(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_FundName(self):
        return self.FundName
    def set_FundName(self, FundName):
        self.FundName = FundName
    def get_FundPath(self):
        return self.FundPath
    def set_FundPath(self, FundPath):
        self.FundPath = FundPath
    def get_RankedValue(self):
        return self.RankedValue
    def set_RankedValue(self, RankedValue):
        self.RankedValue = RankedValue
    def hasContent_(self):
        if (
            self.Date is not None or
            self.FundName is not None or
            self.FundPath is not None or
            self.RankedValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType66', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType66')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType66')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType66', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType66'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType66', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.FundName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFundName>%s</%sFundName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FundName), input_name='FundName')), namespaceprefix_ , eol_))
        if self.FundPath is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFundPath>%s</%sFundPath>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FundPath), input_name='FundPath')), namespaceprefix_ , eol_))
        if self.RankedValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRankedValue>%s</%sRankedValue>%s' % (namespaceprefix_ , self.gds_format_float(self.RankedValue, input_name='RankedValue'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
        elif nodeName_ == 'FundName':
            FundName_ = child_.text
            FundName_ = self.gds_validate_string(FundName_, node, 'FundName')
            self.FundName = FundName_
        elif nodeName_ == 'FundPath':
            FundPath_ = child_.text
            FundPath_ = self.gds_validate_string(FundPath_, node, 'FundPath')
            self.FundPath = FundPath_
        elif nodeName_ == 'RankedValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RankedValue')
            self.RankedValue = fval_
# end class GeneralType66


class RankedInstrumentType67(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ACCOUNT=None, BENCHMARKFILTER1=None, BENCHMARKFILTER2=None, MARKET=None, RANK=None, RANKTYPE=None, DATATYPE=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ACCOUNT = _cast(None, ACCOUNT)
        self.BENCHMARKFILTER1 = _cast(None, BENCHMARKFILTER1)
        self.BENCHMARKFILTER2 = _cast(None, BENCHMARKFILTER2)
        self.MARKET = _cast(None, MARKET)
        self.RANK = _cast(None, RANK)
        self.RANKTYPE = _cast(None, RANKTYPE)
        self.DATATYPE = _cast(None, DATATYPE)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RankedInstrumentType67)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RankedInstrumentType67.subclass:
            return RankedInstrumentType67.subclass(*args_, **kwargs_)
        else:
            return RankedInstrumentType67(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_ACCOUNT(self):
        return self.ACCOUNT
    def set_ACCOUNT(self, ACCOUNT):
        self.ACCOUNT = ACCOUNT
    def get_BENCHMARKFILTER1(self):
        return self.BENCHMARKFILTER1
    def set_BENCHMARKFILTER1(self, BENCHMARKFILTER1):
        self.BENCHMARKFILTER1 = BENCHMARKFILTER1
    def get_BENCHMARKFILTER2(self):
        return self.BENCHMARKFILTER2
    def set_BENCHMARKFILTER2(self, BENCHMARKFILTER2):
        self.BENCHMARKFILTER2 = BENCHMARKFILTER2
    def get_MARKET(self):
        return self.MARKET
    def set_MARKET(self, MARKET):
        self.MARKET = MARKET
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_RANKTYPE(self):
        return self.RANKTYPE
    def set_RANKTYPE(self, RANKTYPE):
        self.RANKTYPE = RANKTYPE
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RankedInstrumentType67', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RankedInstrumentType67')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RankedInstrumentType67')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RankedInstrumentType67', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RankedInstrumentType67'):
        if self.ACCOUNT is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            outfile.write(' ACCOUNT=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ACCOUNT), input_name='ACCOUNT')), ))
        if self.BENCHMARKFILTER1 is not None and 'BENCHMARKFILTER1' not in already_processed:
            already_processed.add('BENCHMARKFILTER1')
            outfile.write(' BENCHMARKFILTER1=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.BENCHMARKFILTER1), input_name='BENCHMARKFILTER1')), ))
        if self.BENCHMARKFILTER2 is not None and 'BENCHMARKFILTER2' not in already_processed:
            already_processed.add('BENCHMARKFILTER2')
            outfile.write(' BENCHMARKFILTER2=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.BENCHMARKFILTER2), input_name='BENCHMARKFILTER2')), ))
        if self.MARKET is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            outfile.write(' MARKET=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.MARKET), input_name='MARKET')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.RANKTYPE is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            outfile.write(' RANKTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANKTYPE), input_name='RANKTYPE')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RankedInstrumentType67', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ACCOUNT', node)
        if value is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            self.ACCOUNT = value
        value = find_attr_value_('BENCHMARKFILTER1', node)
        if value is not None and 'BENCHMARKFILTER1' not in already_processed:
            already_processed.add('BENCHMARKFILTER1')
            self.BENCHMARKFILTER1 = value
        value = find_attr_value_('BENCHMARKFILTER2', node)
        if value is not None and 'BENCHMARKFILTER2' not in already_processed:
            already_processed.add('BENCHMARKFILTER2')
            self.BENCHMARKFILTER2 = value
        value = find_attr_value_('MARKET', node)
        if value is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            self.MARKET = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('RANKTYPE', node)
        if value is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            self.RANKTYPE = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType68.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class RankedInstrumentType67


class DataDateType68(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType68)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType68.subclass:
            return DataDateType68.subclass(*args_, **kwargs_)
        else:
            return DataDateType68(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType68', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType68')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType68')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType68', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType68'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType68', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType69.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType68


class GeneralType69(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BB_TICKER=None, BBGID=None, CollateralValue=None, CUSIP=None, Date=None, DXLID=None, InstrumentName=None, ISIN=None, LendableValue=None, QUICK=None, RankedValue=None, RiDailyReturn=None, RiReturn=None, RiReturnToLendable=None, SEDOL=None, SlDailyReturn=None, SlReturnToLendable=None, TICKER=None, TotalDailyReturn=None, TotalReturn=None, TotalReturnToLendable=None, Utilisation=None, ValueOnLoan=None, VWAF=None, VWAR=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.BB_TICKER = BB_TICKER
        self.BBGID = BBGID
        self.CollateralValue = CollateralValue
        self.CUSIP = CUSIP
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.DXLID = DXLID
        self.InstrumentName = InstrumentName
        self.ISIN = ISIN
        self.LendableValue = LendableValue
        self.QUICK = QUICK
        self.RankedValue = RankedValue
        self.RiDailyReturn = RiDailyReturn
        self.RiReturn = RiReturn
        self.RiReturnToLendable = RiReturnToLendable
        self.SEDOL = SEDOL
        self.SlDailyReturn = SlDailyReturn
        self.SlReturnToLendable = SlReturnToLendable
        self.TICKER = TICKER
        self.TotalDailyReturn = TotalDailyReturn
        self.TotalReturn = TotalReturn
        self.TotalReturnToLendable = TotalReturnToLendable
        self.Utilisation = Utilisation
        self.ValueOnLoan = ValueOnLoan
        self.VWAF = VWAF
        self.VWAR = VWAR
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType69)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType69.subclass:
            return GeneralType69.subclass(*args_, **kwargs_)
        else:
            return GeneralType69(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BB_TICKER(self):
        return self.BB_TICKER
    def set_BB_TICKER(self, BB_TICKER):
        self.BB_TICKER = BB_TICKER
    def get_BBGID(self):
        return self.BBGID
    def set_BBGID(self, BBGID):
        self.BBGID = BBGID
    def get_CollateralValue(self):
        return self.CollateralValue
    def set_CollateralValue(self, CollateralValue):
        self.CollateralValue = CollateralValue
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_InstrumentName(self):
        return self.InstrumentName
    def set_InstrumentName(self, InstrumentName):
        self.InstrumentName = InstrumentName
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_LendableValue(self):
        return self.LendableValue
    def set_LendableValue(self, LendableValue):
        self.LendableValue = LendableValue
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_RankedValue(self):
        return self.RankedValue
    def set_RankedValue(self, RankedValue):
        self.RankedValue = RankedValue
    def get_RiDailyReturn(self):
        return self.RiDailyReturn
    def set_RiDailyReturn(self, RiDailyReturn):
        self.RiDailyReturn = RiDailyReturn
    def get_RiReturn(self):
        return self.RiReturn
    def set_RiReturn(self, RiReturn):
        self.RiReturn = RiReturn
    def get_RiReturnToLendable(self):
        return self.RiReturnToLendable
    def set_RiReturnToLendable(self, RiReturnToLendable):
        self.RiReturnToLendable = RiReturnToLendable
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_SlDailyReturn(self):
        return self.SlDailyReturn
    def set_SlDailyReturn(self, SlDailyReturn):
        self.SlDailyReturn = SlDailyReturn
    def get_SlReturnToLendable(self):
        return self.SlReturnToLendable
    def set_SlReturnToLendable(self, SlReturnToLendable):
        self.SlReturnToLendable = SlReturnToLendable
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def get_TotalDailyReturn(self):
        return self.TotalDailyReturn
    def set_TotalDailyReturn(self, TotalDailyReturn):
        self.TotalDailyReturn = TotalDailyReturn
    def get_TotalReturn(self):
        return self.TotalReturn
    def set_TotalReturn(self, TotalReturn):
        self.TotalReturn = TotalReturn
    def get_TotalReturnToLendable(self):
        return self.TotalReturnToLendable
    def set_TotalReturnToLendable(self, TotalReturnToLendable):
        self.TotalReturnToLendable = TotalReturnToLendable
    def get_Utilisation(self):
        return self.Utilisation
    def set_Utilisation(self, Utilisation):
        self.Utilisation = Utilisation
    def get_ValueOnLoan(self):
        return self.ValueOnLoan
    def set_ValueOnLoan(self, ValueOnLoan):
        self.ValueOnLoan = ValueOnLoan
    def get_VWAF(self):
        return self.VWAF
    def set_VWAF(self, VWAF):
        self.VWAF = VWAF
    def get_VWAR(self):
        return self.VWAR
    def set_VWAR(self, VWAR):
        self.VWAR = VWAR
    def hasContent_(self):
        if (
            self.BB_TICKER is not None or
            self.BBGID is not None or
            self.CollateralValue is not None or
            self.CUSIP is not None or
            self.Date is not None or
            self.DXLID is not None or
            self.InstrumentName is not None or
            self.ISIN is not None or
            self.LendableValue is not None or
            self.QUICK is not None or
            self.RankedValue is not None or
            self.RiDailyReturn is not None or
            self.RiReturn is not None or
            self.RiReturnToLendable is not None or
            self.SEDOL is not None or
            self.SlDailyReturn is not None or
            self.SlReturnToLendable is not None or
            self.TICKER is not None or
            self.TotalDailyReturn is not None or
            self.TotalReturn is not None or
            self.TotalReturnToLendable is not None or
            self.Utilisation is not None or
            self.ValueOnLoan is not None or
            self.VWAF is not None or
            self.VWAR is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType69', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType69')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType69')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType69', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType69'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType69', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BB_TICKER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBB_TICKER>%s</%sBB_TICKER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BB_TICKER), input_name='BB_TICKER')), namespaceprefix_ , eol_))
        if self.BBGID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBBGID>%s</%sBBGID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BBGID), input_name='BBGID')), namespaceprefix_ , eol_))
        if self.CollateralValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCollateralValue>%s</%sCollateralValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CollateralValue), input_name='CollateralValue')), namespaceprefix_ , eol_))
        if self.CUSIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUSIP>%s</%sCUSIP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CUSIP), input_name='CUSIP')), namespaceprefix_ , eol_))
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.DXLID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDXLID>%s</%sDXLID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DXLID), input_name='DXLID')), namespaceprefix_ , eol_))
        if self.InstrumentName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstrumentName>%s</%sInstrumentName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InstrumentName), input_name='InstrumentName')), namespaceprefix_ , eol_))
        if self.ISIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sISIN>%s</%sISIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ISIN), input_name='ISIN')), namespaceprefix_ , eol_))
        if self.LendableValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableValue>%s</%sLendableValue>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableValue, input_name='LendableValue'), namespaceprefix_ , eol_))
        if self.QUICK is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQUICK>%s</%sQUICK>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QUICK), input_name='QUICK')), namespaceprefix_ , eol_))
        if self.RankedValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRankedValue>%s</%sRankedValue>%s' % (namespaceprefix_ , self.gds_format_float(self.RankedValue, input_name='RankedValue'), namespaceprefix_ , eol_))
        if self.RiDailyReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiDailyReturn>%s</%sRiDailyReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.RiDailyReturn, input_name='RiDailyReturn'), namespaceprefix_ , eol_))
        if self.RiReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiReturn>%s</%sRiReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.RiReturn, input_name='RiReturn'), namespaceprefix_ , eol_))
        if self.RiReturnToLendable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiReturnToLendable>%s</%sRiReturnToLendable>%s' % (namespaceprefix_ , self.gds_format_float(self.RiReturnToLendable, input_name='RiReturnToLendable'), namespaceprefix_ , eol_))
        if self.SEDOL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSEDOL>%s</%sSEDOL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SEDOL), input_name='SEDOL')), namespaceprefix_ , eol_))
        if self.SlDailyReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSlDailyReturn>%s</%sSlDailyReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.SlDailyReturn, input_name='SlDailyReturn'), namespaceprefix_ , eol_))
        if self.SlReturnToLendable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSlReturnToLendable>%s</%sSlReturnToLendable>%s' % (namespaceprefix_ , self.gds_format_float(self.SlReturnToLendable, input_name='SlReturnToLendable'), namespaceprefix_ , eol_))
        if self.TICKER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTICKER>%s</%sTICKER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TICKER), input_name='TICKER')), namespaceprefix_ , eol_))
        if self.TotalDailyReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalDailyReturn>%s</%sTotalDailyReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.TotalDailyReturn, input_name='TotalDailyReturn'), namespaceprefix_ , eol_))
        if self.TotalReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalReturn>%s</%sTotalReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.TotalReturn, input_name='TotalReturn'), namespaceprefix_ , eol_))
        if self.TotalReturnToLendable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalReturnToLendable>%s</%sTotalReturnToLendable>%s' % (namespaceprefix_ , self.gds_format_float(self.TotalReturnToLendable, input_name='TotalReturnToLendable'), namespaceprefix_ , eol_))
        if self.Utilisation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisation>%s</%sUtilisation>%s' % (namespaceprefix_ , self.gds_format_float(self.Utilisation, input_name='Utilisation'), namespaceprefix_ , eol_))
        if self.ValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoan>%s</%sValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoan, input_name='ValueOnLoan'), namespaceprefix_ , eol_))
        if self.VWAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAF>%s</%sVWAF>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAF, input_name='VWAF'), namespaceprefix_ , eol_))
        if self.VWAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAR>%s</%sVWAR>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAR, input_name='VWAR'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BB_TICKER':
            BB_TICKER_ = child_.text
            BB_TICKER_ = self.gds_validate_string(BB_TICKER_, node, 'BB_TICKER')
            self.BB_TICKER = BB_TICKER_
        elif nodeName_ == 'BBGID':
            BBGID_ = child_.text
            BBGID_ = self.gds_validate_string(BBGID_, node, 'BBGID')
            self.BBGID = BBGID_
        elif nodeName_ == 'CollateralValue':
            CollateralValue_ = child_.text
            CollateralValue_ = self.gds_validate_string(CollateralValue_, node, 'CollateralValue')
            self.CollateralValue = CollateralValue_
        elif nodeName_ == 'CUSIP':
            CUSIP_ = child_.text
            CUSIP_ = self.gds_validate_string(CUSIP_, node, 'CUSIP')
            self.CUSIP = CUSIP_
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
        elif nodeName_ == 'DXLID':
            DXLID_ = child_.text
            DXLID_ = self.gds_validate_string(DXLID_, node, 'DXLID')
            self.DXLID = DXLID_
        elif nodeName_ == 'InstrumentName':
            InstrumentName_ = child_.text
            InstrumentName_ = self.gds_validate_string(InstrumentName_, node, 'InstrumentName')
            self.InstrumentName = InstrumentName_
        elif nodeName_ == 'ISIN':
            ISIN_ = child_.text
            ISIN_ = self.gds_validate_string(ISIN_, node, 'ISIN')
            self.ISIN = ISIN_
        elif nodeName_ == 'LendableValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableValue')
            self.LendableValue = fval_
        elif nodeName_ == 'QUICK':
            QUICK_ = child_.text
            QUICK_ = self.gds_validate_string(QUICK_, node, 'QUICK')
            self.QUICK = QUICK_
        elif nodeName_ == 'RankedValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RankedValue')
            self.RankedValue = fval_
        elif nodeName_ == 'RiDailyReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RiDailyReturn')
            self.RiDailyReturn = fval_
        elif nodeName_ == 'RiReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RiReturn')
            self.RiReturn = fval_
        elif nodeName_ == 'RiReturnToLendable' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RiReturnToLendable')
            self.RiReturnToLendable = fval_
        elif nodeName_ == 'SEDOL':
            SEDOL_ = child_.text
            SEDOL_ = self.gds_validate_string(SEDOL_, node, 'SEDOL')
            self.SEDOL = SEDOL_
        elif nodeName_ == 'SlDailyReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SlDailyReturn')
            self.SlDailyReturn = fval_
        elif nodeName_ == 'SlReturnToLendable' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SlReturnToLendable')
            self.SlReturnToLendable = fval_
        elif nodeName_ == 'TICKER':
            TICKER_ = child_.text
            TICKER_ = self.gds_validate_string(TICKER_, node, 'TICKER')
            self.TICKER = TICKER_
        elif nodeName_ == 'TotalDailyReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TotalDailyReturn')
            self.TotalDailyReturn = fval_
        elif nodeName_ == 'TotalReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TotalReturn')
            self.TotalReturn = fval_
        elif nodeName_ == 'TotalReturnToLendable' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TotalReturnToLendable')
            self.TotalReturnToLendable = fval_
        elif nodeName_ == 'Utilisation' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Utilisation')
            self.Utilisation = fval_
        elif nodeName_ == 'ValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoan')
            self.ValueOnLoan = fval_
        elif nodeName_ == 'VWAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAF')
            self.VWAF = fval_
        elif nodeName_ == 'VWAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAR')
            self.VWAR = fval_
# end class GeneralType69


class FilterDefinitionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RANK=None, RANKTYPE=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.RANK = _cast(None, RANK)
        self.RANKTYPE = _cast(None, RANKTYPE)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FilterDefinitionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FilterDefinitionType.subclass:
            return FilterDefinitionType.subclass(*args_, **kwargs_)
        else:
            return FilterDefinitionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_RANKTYPE(self):
        return self.RANKTYPE
    def set_RANKTYPE(self, RANKTYPE):
        self.RANKTYPE = RANKTYPE
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FilterDefinitionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FilterDefinitionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FilterDefinitionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FilterDefinitionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FilterDefinitionType'):
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.RANKTYPE is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            outfile.write(' RANKTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANKTYPE), input_name='RANKTYPE')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FilterDefinitionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('RANKTYPE', node)
        if value is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            self.RANKTYPE = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType70.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class FilterDefinitionType


class DataDateType70(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType70)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType70.subclass:
            return DataDateType70.subclass(*args_, **kwargs_)
        else:
            return DataDateType70(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType70', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType70')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType70')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType70', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType70'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType70', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType71.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType70


class GeneralType71(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FilterDescription=None, FilterName=None, FilterType=None, LastUpdated=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.FilterDescription = FilterDescription
        self.FilterName = FilterName
        self.FilterType = FilterType
        if isinstance(LastUpdated, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LastUpdated, '%Y-%m-%d').date()
        else:
            initvalue_ = LastUpdated
        self.LastUpdated = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType71)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType71.subclass:
            return GeneralType71.subclass(*args_, **kwargs_)
        else:
            return GeneralType71(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FilterDescription(self):
        return self.FilterDescription
    def set_FilterDescription(self, FilterDescription):
        self.FilterDescription = FilterDescription
    def get_FilterName(self):
        return self.FilterName
    def set_FilterName(self, FilterName):
        self.FilterName = FilterName
    def get_FilterType(self):
        return self.FilterType
    def set_FilterType(self, FilterType):
        self.FilterType = FilterType
    def get_LastUpdated(self):
        return self.LastUpdated
    def set_LastUpdated(self, LastUpdated):
        self.LastUpdated = LastUpdated
    def hasContent_(self):
        if (
            self.FilterDescription is not None or
            self.FilterName is not None or
            self.FilterType is not None or
            self.LastUpdated is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType71', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType71')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType71')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType71', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType71'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType71', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FilterDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFilterDescription>%s</%sFilterDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FilterDescription), input_name='FilterDescription')), namespaceprefix_ , eol_))
        if self.FilterName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFilterName>%s</%sFilterName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FilterName), input_name='FilterName')), namespaceprefix_ , eol_))
        if self.FilterType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFilterType>%s</%sFilterType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FilterType), input_name='FilterType')), namespaceprefix_ , eol_))
        if self.LastUpdated is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLastUpdated>%s</%sLastUpdated>%s' % (namespaceprefix_ , self.gds_format_date(self.LastUpdated, input_name='LastUpdated'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FilterDescription':
            FilterDescription_ = child_.text
            FilterDescription_ = self.gds_validate_string(FilterDescription_, node, 'FilterDescription')
            self.FilterDescription = FilterDescription_
        elif nodeName_ == 'FilterName':
            FilterName_ = child_.text
            FilterName_ = self.gds_validate_string(FilterName_, node, 'FilterName')
            self.FilterName = FilterName_
        elif nodeName_ == 'FilterType':
            FilterType_ = child_.text
            FilterType_ = self.gds_validate_string(FilterType_, node, 'FilterType')
            self.FilterType = FilterType_
        elif nodeName_ == 'LastUpdated':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.LastUpdated = dval_
# end class GeneralType71


class AccountDetailType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ACCOUNT=None, DATATYPE=None, RANK=None, FILTER=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ACCOUNT = _cast(None, ACCOUNT)
        self.DATATYPE = _cast(None, DATATYPE)
        self.RANK = _cast(None, RANK)
        self.FILTER = _cast(None, FILTER)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AccountDetailType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AccountDetailType.subclass:
            return AccountDetailType.subclass(*args_, **kwargs_)
        else:
            return AccountDetailType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_ACCOUNT(self):
        return self.ACCOUNT
    def set_ACCOUNT(self, ACCOUNT):
        self.ACCOUNT = ACCOUNT
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_FILTER(self):
        return self.FILTER
    def set_FILTER(self, FILTER):
        self.FILTER = FILTER
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AccountDetailType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AccountDetailType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AccountDetailType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AccountDetailType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AccountDetailType'):
        if self.ACCOUNT is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            outfile.write(' ACCOUNT=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ACCOUNT), input_name='ACCOUNT')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.FILTER is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            outfile.write(' FILTER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.FILTER), input_name='FILTER')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AccountDetailType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ACCOUNT', node)
        if value is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            self.ACCOUNT = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('FILTER', node)
        if value is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            self.FILTER = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType72.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class AccountDetailType


class DataDateType72(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType72)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType72.subclass:
            return DataDateType72.subclass(*args_, **kwargs_)
        else:
            return DataDateType72(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType72', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType72')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType72')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType72', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType72'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType72', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType73.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType72


class GeneralType73(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AccountCode=None, AccountName=None, AccountPath=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.AccountCode = AccountCode
        self.AccountName = AccountName
        self.AccountPath = AccountPath
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType73)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType73.subclass:
            return GeneralType73.subclass(*args_, **kwargs_)
        else:
            return GeneralType73(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AccountCode(self):
        return self.AccountCode
    def set_AccountCode(self, AccountCode):
        self.AccountCode = AccountCode
    def get_AccountName(self):
        return self.AccountName
    def set_AccountName(self, AccountName):
        self.AccountName = AccountName
    def get_AccountPath(self):
        return self.AccountPath
    def set_AccountPath(self, AccountPath):
        self.AccountPath = AccountPath
    def hasContent_(self):
        if (
            self.AccountCode is not None or
            self.AccountName is not None or
            self.AccountPath is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType73', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType73')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType73')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType73', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType73'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType73', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountCode>%s</%sAccountCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountCode), input_name='AccountCode')), namespaceprefix_ , eol_))
        if self.AccountName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountName>%s</%sAccountName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountName), input_name='AccountName')), namespaceprefix_ , eol_))
        if self.AccountPath is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountPath>%s</%sAccountPath>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountPath), input_name='AccountPath')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AccountCode':
            AccountCode_ = child_.text
            AccountCode_ = self.gds_validate_string(AccountCode_, node, 'AccountCode')
            self.AccountCode = AccountCode_
        elif nodeName_ == 'AccountName':
            AccountName_ = child_.text
            AccountName_ = self.gds_validate_string(AccountName_, node, 'AccountName')
            self.AccountName = AccountName_
        elif nodeName_ == 'AccountPath':
            AccountPath_ = child_.text
            AccountPath_ = self.gds_validate_string(AccountPath_, node, 'AccountPath')
            self.AccountPath = AccountPath_
# end class GeneralType73


class InstrumentType74(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DATATYPE=None, RANK=None, RANKTYPE=None, MARKET=None, SECTOR=None, SCREENEXPRESSION=None, SCREENTYPE=None, PORTFOLIO=None, ACCOUNT=None, COUNTERPART=None, DataDate=None, InstrumentData=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DATATYPE = _cast(None, DATATYPE)
        self.RANK = _cast(None, RANK)
        self.RANKTYPE = _cast(None, RANKTYPE)
        self.MARKET = _cast(None, MARKET)
        self.SECTOR = _cast(None, SECTOR)
        self.SCREENEXPRESSION = _cast(None, SCREENEXPRESSION)
        self.SCREENTYPE = _cast(None, SCREENTYPE)
        self.PORTFOLIO = _cast(None, PORTFOLIO)
        self.ACCOUNT = _cast(None, ACCOUNT)
        self.COUNTERPART = _cast(None, COUNTERPART)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
        self.InstrumentData = InstrumentData
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InstrumentType74)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InstrumentType74.subclass:
            return InstrumentType74.subclass(*args_, **kwargs_)
        else:
            return InstrumentType74(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_InstrumentData(self):
        return self.InstrumentData
    def set_InstrumentData(self, InstrumentData):
        self.InstrumentData = InstrumentData
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_RANKTYPE(self):
        return self.RANKTYPE
    def set_RANKTYPE(self, RANKTYPE):
        self.RANKTYPE = RANKTYPE
    def get_MARKET(self):
        return self.MARKET
    def set_MARKET(self, MARKET):
        self.MARKET = MARKET
    def get_SECTOR(self):
        return self.SECTOR
    def set_SECTOR(self, SECTOR):
        self.SECTOR = SECTOR
    def get_SCREENEXPRESSION(self):
        return self.SCREENEXPRESSION
    def set_SCREENEXPRESSION(self, SCREENEXPRESSION):
        self.SCREENEXPRESSION = SCREENEXPRESSION
    def get_SCREENTYPE(self):
        return self.SCREENTYPE
    def set_SCREENTYPE(self, SCREENTYPE):
        self.SCREENTYPE = SCREENTYPE
    def get_PORTFOLIO(self):
        return self.PORTFOLIO
    def set_PORTFOLIO(self, PORTFOLIO):
        self.PORTFOLIO = PORTFOLIO
    def get_ACCOUNT(self):
        return self.ACCOUNT
    def set_ACCOUNT(self, ACCOUNT):
        self.ACCOUNT = ACCOUNT
    def get_COUNTERPART(self):
        return self.COUNTERPART
    def set_COUNTERPART(self, COUNTERPART):
        self.COUNTERPART = COUNTERPART
    def hasContent_(self):
        if (
            self.DataDate or
            self.InstrumentData is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentType74', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InstrumentType74')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InstrumentType74')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InstrumentType74', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InstrumentType74'):
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.RANKTYPE is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            outfile.write(' RANKTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANKTYPE), input_name='RANKTYPE')), ))
        if self.MARKET is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            outfile.write(' MARKET=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.MARKET), input_name='MARKET')), ))
        if self.SECTOR is not None and 'SECTOR' not in already_processed:
            already_processed.add('SECTOR')
            outfile.write(' SECTOR=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SECTOR), input_name='SECTOR')), ))
        if self.SCREENEXPRESSION is not None and 'SCREENEXPRESSION' not in already_processed:
            already_processed.add('SCREENEXPRESSION')
            outfile.write(' SCREENEXPRESSION=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SCREENEXPRESSION), input_name='SCREENEXPRESSION')), ))
        if self.SCREENTYPE is not None and 'SCREENTYPE' not in already_processed:
            already_processed.add('SCREENTYPE')
            outfile.write(' SCREENTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SCREENTYPE), input_name='SCREENTYPE')), ))
        if self.PORTFOLIO is not None and 'PORTFOLIO' not in already_processed:
            already_processed.add('PORTFOLIO')
            outfile.write(' PORTFOLIO=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.PORTFOLIO), input_name='PORTFOLIO')), ))
        if self.ACCOUNT is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            outfile.write(' ACCOUNT=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ACCOUNT), input_name='ACCOUNT')), ))
        if self.COUNTERPART is not None and 'COUNTERPART' not in already_processed:
            already_processed.add('COUNTERPART')
            outfile.write(' COUNTERPART=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.COUNTERPART), input_name='COUNTERPART')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentType74', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
        if self.InstrumentData is not None:
            self.InstrumentData.export(outfile, level, namespaceprefix_, name_='InstrumentData', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('RANKTYPE', node)
        if value is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            self.RANKTYPE = value
        value = find_attr_value_('MARKET', node)
        if value is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            self.MARKET = value
        value = find_attr_value_('SECTOR', node)
        if value is not None and 'SECTOR' not in already_processed:
            already_processed.add('SECTOR')
            self.SECTOR = value
        value = find_attr_value_('SCREENEXPRESSION', node)
        if value is not None and 'SCREENEXPRESSION' not in already_processed:
            already_processed.add('SCREENEXPRESSION')
            self.SCREENEXPRESSION = value
        value = find_attr_value_('SCREENTYPE', node)
        if value is not None and 'SCREENTYPE' not in already_processed:
            already_processed.add('SCREENTYPE')
            self.SCREENTYPE = value
        value = find_attr_value_('PORTFOLIO', node)
        if value is not None and 'PORTFOLIO' not in already_processed:
            already_processed.add('PORTFOLIO')
            self.PORTFOLIO = value
        value = find_attr_value_('ACCOUNT', node)
        if value is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            self.ACCOUNT = value
        value = find_attr_value_('COUNTERPART', node)
        if value is not None and 'COUNTERPART' not in already_processed:
            already_processed.add('COUNTERPART')
            self.COUNTERPART = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType75.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
        elif nodeName_ == 'InstrumentData':
            obj_ = InstrumentDataType80.factory(parent_object_=self)
            obj_.build(child_)
            self.InstrumentData = obj_
            obj_.original_tagname_ = 'InstrumentData'
# end class InstrumentType74


class DataDateType75(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, ActiveInventory=None, InstrumentData=None, Inventory=None, MarketColour=None, Rerate=None, ShortSqueeze=None, Trading=None, TransactionData=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.ActiveInventory = ActiveInventory
        self.InstrumentData = InstrumentData
        self.Inventory = Inventory
        self.MarketColour = MarketColour
        self.Rerate = Rerate
        self.ShortSqueeze = ShortSqueeze
        self.Trading = Trading
        self.TransactionData = TransactionData
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType75)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType75.subclass:
            return DataDateType75.subclass(*args_, **kwargs_)
        else:
            return DataDateType75(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ActiveInventory(self):
        return self.ActiveInventory
    def set_ActiveInventory(self, ActiveInventory):
        self.ActiveInventory = ActiveInventory
    def get_InstrumentData(self):
        return self.InstrumentData
    def set_InstrumentData(self, InstrumentData):
        self.InstrumentData = InstrumentData
    def get_Inventory(self):
        return self.Inventory
    def set_Inventory(self, Inventory):
        self.Inventory = Inventory
    def get_MarketColour(self):
        return self.MarketColour
    def set_MarketColour(self, MarketColour):
        self.MarketColour = MarketColour
    def get_Rerate(self):
        return self.Rerate
    def set_Rerate(self, Rerate):
        self.Rerate = Rerate
    def get_ShortSqueeze(self):
        return self.ShortSqueeze
    def set_ShortSqueeze(self, ShortSqueeze):
        self.ShortSqueeze = ShortSqueeze
    def get_Trading(self):
        return self.Trading
    def set_Trading(self, Trading):
        self.Trading = Trading
    def get_TransactionData(self):
        return self.TransactionData
    def set_TransactionData(self, TransactionData):
        self.TransactionData = TransactionData
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.ActiveInventory is not None or
            self.InstrumentData is not None or
            self.Inventory is not None or
            self.MarketColour is not None or
            self.Rerate is not None or
            self.ShortSqueeze is not None or
            self.Trading is not None or
            self.TransactionData is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType75', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType75')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType75')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType75', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType75'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType75', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ActiveInventory is not None:
            self.ActiveInventory.export(outfile, level, namespaceprefix_, name_='ActiveInventory', pretty_print=pretty_print)
        if self.InstrumentData is not None:
            self.InstrumentData.export(outfile, level, namespaceprefix_, name_='InstrumentData', pretty_print=pretty_print)
        if self.Inventory is not None:
            self.Inventory.export(outfile, level, namespaceprefix_, name_='Inventory', pretty_print=pretty_print)
        if self.MarketColour is not None:
            self.MarketColour.export(outfile, level, namespaceprefix_, name_='MarketColour', pretty_print=pretty_print)
        if self.Rerate is not None:
            self.Rerate.export(outfile, level, namespaceprefix_, name_='Rerate', pretty_print=pretty_print)
        if self.ShortSqueeze is not None:
            self.ShortSqueeze.export(outfile, level, namespaceprefix_, name_='ShortSqueeze', pretty_print=pretty_print)
        if self.Trading is not None:
            self.Trading.export(outfile, level, namespaceprefix_, name_='Trading', pretty_print=pretty_print)
        if self.TransactionData is not None:
            self.TransactionData.export(outfile, level, namespaceprefix_, name_='TransactionData', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ActiveInventory':
            obj_ = ActiveInventoryType.factory(parent_object_=self)
            obj_.build(child_)
            self.ActiveInventory = obj_
            obj_.original_tagname_ = 'ActiveInventory'
        elif nodeName_ == 'InstrumentData':
            obj_ = InstrumentDataType76.factory(parent_object_=self)
            obj_.build(child_)
            self.InstrumentData = obj_
            obj_.original_tagname_ = 'InstrumentData'
        elif nodeName_ == 'Inventory':
            obj_ = InventoryType77.factory(parent_object_=self)
            obj_.build(child_)
            self.Inventory = obj_
            obj_.original_tagname_ = 'Inventory'
        elif nodeName_ == 'MarketColour':
            obj_ = MarketColourType.factory(parent_object_=self)
            obj_.build(child_)
            self.MarketColour = obj_
            obj_.original_tagname_ = 'MarketColour'
        elif nodeName_ == 'Rerate':
            obj_ = RerateType.factory(parent_object_=self)
            obj_.build(child_)
            self.Rerate = obj_
            obj_.original_tagname_ = 'Rerate'
        elif nodeName_ == 'ShortSqueeze':
            obj_ = ShortSqueezeType78.factory(parent_object_=self)
            obj_.build(child_)
            self.ShortSqueeze = obj_
            obj_.original_tagname_ = 'ShortSqueeze'
        elif nodeName_ == 'Trading':
            obj_ = TradingType79.factory(parent_object_=self)
            obj_.build(child_)
            self.Trading = obj_
            obj_.original_tagname_ = 'Trading'
        elif nodeName_ == 'TransactionData':
            obj_ = TransactionDataType.factory(parent_object_=self)
            obj_.build(child_)
            self.TransactionData = obj_
            obj_.original_tagname_ = 'TransactionData'
# end class DataDateType75


class ActiveInventoryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Group_ActiveAvailableQuantity=None, Group_ActiveAvailableQuantityDelta1=None, Group_ActiveAvailableQuantityDelta1Pc=None, Group_ActiveAvailableQuantityDelta30=None, Group_ActiveAvailableQuantityDelta30Pc=None, Group_ActiveAvailableQuantityDelta7=None, Group_ActiveAvailableQuantityDelta7Pc=None, Group_ActiveAvailableValue=None, Group_ActiveAvailableValueDelta1=None, Group_ActiveAvailableValueDelta1Pc=None, Group_ActiveAvailableValueDelta30=None, Group_ActiveAvailableValueDelta30Pc=None, Group_ActiveAvailableValueDelta7=None, Group_ActiveAvailableValueDelta7Pc=None, Group_ActiveLendableQuantity=None, Group_ActiveLendableQuantityDelta1=None, Group_ActiveLendableQuantityDelta1Pc=None, Group_ActiveLendableQuantityDelta30=None, Group_ActiveLendableQuantityDelta30Pc=None, Group_ActiveLendableQuantityDelta7=None, Group_ActiveLendableQuantityDelta7Pc=None, Group_ActiveLendableValue=None, Group_ActiveLendableValueDelta1=None, Group_ActiveLendableValueDelta1Pc=None, Group_ActiveLendableValueDelta30=None, Group_ActiveLendableValueDelta30Pc=None, Group_ActiveLendableValueDelta7=None, Group_ActiveLendableValueDelta7Pc=None, Group_ActiveUtilisation=None, Group_ActiveUtilisationByQuantity=None, Group_ActiveUtilisationByQuantityDelta1=None, Group_ActiveUtilisationByQuantityDelta30=None, Group_ActiveUtilisationByQuantityDelta7=None, Group_ActiveUtilisationDelta1=None, Group_ActiveUtilisationDelta30=None, Group_ActiveUtilisationDelta7=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Group_ActiveAvailableQuantity = Group_ActiveAvailableQuantity
        self.Group_ActiveAvailableQuantityDelta1 = Group_ActiveAvailableQuantityDelta1
        self.Group_ActiveAvailableQuantityDelta1Pc = Group_ActiveAvailableQuantityDelta1Pc
        self.Group_ActiveAvailableQuantityDelta30 = Group_ActiveAvailableQuantityDelta30
        self.Group_ActiveAvailableQuantityDelta30Pc = Group_ActiveAvailableQuantityDelta30Pc
        self.Group_ActiveAvailableQuantityDelta7 = Group_ActiveAvailableQuantityDelta7
        self.Group_ActiveAvailableQuantityDelta7Pc = Group_ActiveAvailableQuantityDelta7Pc
        self.Group_ActiveAvailableValue = Group_ActiveAvailableValue
        self.Group_ActiveAvailableValueDelta1 = Group_ActiveAvailableValueDelta1
        self.Group_ActiveAvailableValueDelta1Pc = Group_ActiveAvailableValueDelta1Pc
        self.Group_ActiveAvailableValueDelta30 = Group_ActiveAvailableValueDelta30
        self.Group_ActiveAvailableValueDelta30Pc = Group_ActiveAvailableValueDelta30Pc
        self.Group_ActiveAvailableValueDelta7 = Group_ActiveAvailableValueDelta7
        self.Group_ActiveAvailableValueDelta7Pc = Group_ActiveAvailableValueDelta7Pc
        self.Group_ActiveLendableQuantity = Group_ActiveLendableQuantity
        self.Group_ActiveLendableQuantityDelta1 = Group_ActiveLendableQuantityDelta1
        self.Group_ActiveLendableQuantityDelta1Pc = Group_ActiveLendableQuantityDelta1Pc
        self.Group_ActiveLendableQuantityDelta30 = Group_ActiveLendableQuantityDelta30
        self.Group_ActiveLendableQuantityDelta30Pc = Group_ActiveLendableQuantityDelta30Pc
        self.Group_ActiveLendableQuantityDelta7 = Group_ActiveLendableQuantityDelta7
        self.Group_ActiveLendableQuantityDelta7Pc = Group_ActiveLendableQuantityDelta7Pc
        self.Group_ActiveLendableValue = Group_ActiveLendableValue
        self.Group_ActiveLendableValueDelta1 = Group_ActiveLendableValueDelta1
        self.Group_ActiveLendableValueDelta1Pc = Group_ActiveLendableValueDelta1Pc
        self.Group_ActiveLendableValueDelta30 = Group_ActiveLendableValueDelta30
        self.Group_ActiveLendableValueDelta30Pc = Group_ActiveLendableValueDelta30Pc
        self.Group_ActiveLendableValueDelta7 = Group_ActiveLendableValueDelta7
        self.Group_ActiveLendableValueDelta7Pc = Group_ActiveLendableValueDelta7Pc
        self.Group_ActiveUtilisation = Group_ActiveUtilisation
        self.Group_ActiveUtilisationByQuantity = Group_ActiveUtilisationByQuantity
        self.Group_ActiveUtilisationByQuantityDelta1 = Group_ActiveUtilisationByQuantityDelta1
        self.Group_ActiveUtilisationByQuantityDelta30 = Group_ActiveUtilisationByQuantityDelta30
        self.Group_ActiveUtilisationByQuantityDelta7 = Group_ActiveUtilisationByQuantityDelta7
        self.Group_ActiveUtilisationDelta1 = Group_ActiveUtilisationDelta1
        self.Group_ActiveUtilisationDelta30 = Group_ActiveUtilisationDelta30
        self.Group_ActiveUtilisationDelta7 = Group_ActiveUtilisationDelta7
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ActiveInventoryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ActiveInventoryType.subclass:
            return ActiveInventoryType.subclass(*args_, **kwargs_)
        else:
            return ActiveInventoryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Group_ActiveAvailableQuantity(self):
        return self.Group_ActiveAvailableQuantity
    def set_Group_ActiveAvailableQuantity(self, Group_ActiveAvailableQuantity):
        self.Group_ActiveAvailableQuantity = Group_ActiveAvailableQuantity
    def get_Group_ActiveAvailableQuantityDelta1(self):
        return self.Group_ActiveAvailableQuantityDelta1
    def set_Group_ActiveAvailableQuantityDelta1(self, Group_ActiveAvailableQuantityDelta1):
        self.Group_ActiveAvailableQuantityDelta1 = Group_ActiveAvailableQuantityDelta1
    def get_Group_ActiveAvailableQuantityDelta1Pc(self):
        return self.Group_ActiveAvailableQuantityDelta1Pc
    def set_Group_ActiveAvailableQuantityDelta1Pc(self, Group_ActiveAvailableQuantityDelta1Pc):
        self.Group_ActiveAvailableQuantityDelta1Pc = Group_ActiveAvailableQuantityDelta1Pc
    def get_Group_ActiveAvailableQuantityDelta30(self):
        return self.Group_ActiveAvailableQuantityDelta30
    def set_Group_ActiveAvailableQuantityDelta30(self, Group_ActiveAvailableQuantityDelta30):
        self.Group_ActiveAvailableQuantityDelta30 = Group_ActiveAvailableQuantityDelta30
    def get_Group_ActiveAvailableQuantityDelta30Pc(self):
        return self.Group_ActiveAvailableQuantityDelta30Pc
    def set_Group_ActiveAvailableQuantityDelta30Pc(self, Group_ActiveAvailableQuantityDelta30Pc):
        self.Group_ActiveAvailableQuantityDelta30Pc = Group_ActiveAvailableQuantityDelta30Pc
    def get_Group_ActiveAvailableQuantityDelta7(self):
        return self.Group_ActiveAvailableQuantityDelta7
    def set_Group_ActiveAvailableQuantityDelta7(self, Group_ActiveAvailableQuantityDelta7):
        self.Group_ActiveAvailableQuantityDelta7 = Group_ActiveAvailableQuantityDelta7
    def get_Group_ActiveAvailableQuantityDelta7Pc(self):
        return self.Group_ActiveAvailableQuantityDelta7Pc
    def set_Group_ActiveAvailableQuantityDelta7Pc(self, Group_ActiveAvailableQuantityDelta7Pc):
        self.Group_ActiveAvailableQuantityDelta7Pc = Group_ActiveAvailableQuantityDelta7Pc
    def get_Group_ActiveAvailableValue(self):
        return self.Group_ActiveAvailableValue
    def set_Group_ActiveAvailableValue(self, Group_ActiveAvailableValue):
        self.Group_ActiveAvailableValue = Group_ActiveAvailableValue
    def get_Group_ActiveAvailableValueDelta1(self):
        return self.Group_ActiveAvailableValueDelta1
    def set_Group_ActiveAvailableValueDelta1(self, Group_ActiveAvailableValueDelta1):
        self.Group_ActiveAvailableValueDelta1 = Group_ActiveAvailableValueDelta1
    def get_Group_ActiveAvailableValueDelta1Pc(self):
        return self.Group_ActiveAvailableValueDelta1Pc
    def set_Group_ActiveAvailableValueDelta1Pc(self, Group_ActiveAvailableValueDelta1Pc):
        self.Group_ActiveAvailableValueDelta1Pc = Group_ActiveAvailableValueDelta1Pc
    def get_Group_ActiveAvailableValueDelta30(self):
        return self.Group_ActiveAvailableValueDelta30
    def set_Group_ActiveAvailableValueDelta30(self, Group_ActiveAvailableValueDelta30):
        self.Group_ActiveAvailableValueDelta30 = Group_ActiveAvailableValueDelta30
    def get_Group_ActiveAvailableValueDelta30Pc(self):
        return self.Group_ActiveAvailableValueDelta30Pc
    def set_Group_ActiveAvailableValueDelta30Pc(self, Group_ActiveAvailableValueDelta30Pc):
        self.Group_ActiveAvailableValueDelta30Pc = Group_ActiveAvailableValueDelta30Pc
    def get_Group_ActiveAvailableValueDelta7(self):
        return self.Group_ActiveAvailableValueDelta7
    def set_Group_ActiveAvailableValueDelta7(self, Group_ActiveAvailableValueDelta7):
        self.Group_ActiveAvailableValueDelta7 = Group_ActiveAvailableValueDelta7
    def get_Group_ActiveAvailableValueDelta7Pc(self):
        return self.Group_ActiveAvailableValueDelta7Pc
    def set_Group_ActiveAvailableValueDelta7Pc(self, Group_ActiveAvailableValueDelta7Pc):
        self.Group_ActiveAvailableValueDelta7Pc = Group_ActiveAvailableValueDelta7Pc
    def get_Group_ActiveLendableQuantity(self):
        return self.Group_ActiveLendableQuantity
    def set_Group_ActiveLendableQuantity(self, Group_ActiveLendableQuantity):
        self.Group_ActiveLendableQuantity = Group_ActiveLendableQuantity
    def get_Group_ActiveLendableQuantityDelta1(self):
        return self.Group_ActiveLendableQuantityDelta1
    def set_Group_ActiveLendableQuantityDelta1(self, Group_ActiveLendableQuantityDelta1):
        self.Group_ActiveLendableQuantityDelta1 = Group_ActiveLendableQuantityDelta1
    def get_Group_ActiveLendableQuantityDelta1Pc(self):
        return self.Group_ActiveLendableQuantityDelta1Pc
    def set_Group_ActiveLendableQuantityDelta1Pc(self, Group_ActiveLendableQuantityDelta1Pc):
        self.Group_ActiveLendableQuantityDelta1Pc = Group_ActiveLendableQuantityDelta1Pc
    def get_Group_ActiveLendableQuantityDelta30(self):
        return self.Group_ActiveLendableQuantityDelta30
    def set_Group_ActiveLendableQuantityDelta30(self, Group_ActiveLendableQuantityDelta30):
        self.Group_ActiveLendableQuantityDelta30 = Group_ActiveLendableQuantityDelta30
    def get_Group_ActiveLendableQuantityDelta30Pc(self):
        return self.Group_ActiveLendableQuantityDelta30Pc
    def set_Group_ActiveLendableQuantityDelta30Pc(self, Group_ActiveLendableQuantityDelta30Pc):
        self.Group_ActiveLendableQuantityDelta30Pc = Group_ActiveLendableQuantityDelta30Pc
    def get_Group_ActiveLendableQuantityDelta7(self):
        return self.Group_ActiveLendableQuantityDelta7
    def set_Group_ActiveLendableQuantityDelta7(self, Group_ActiveLendableQuantityDelta7):
        self.Group_ActiveLendableQuantityDelta7 = Group_ActiveLendableQuantityDelta7
    def get_Group_ActiveLendableQuantityDelta7Pc(self):
        return self.Group_ActiveLendableQuantityDelta7Pc
    def set_Group_ActiveLendableQuantityDelta7Pc(self, Group_ActiveLendableQuantityDelta7Pc):
        self.Group_ActiveLendableQuantityDelta7Pc = Group_ActiveLendableQuantityDelta7Pc
    def get_Group_ActiveLendableValue(self):
        return self.Group_ActiveLendableValue
    def set_Group_ActiveLendableValue(self, Group_ActiveLendableValue):
        self.Group_ActiveLendableValue = Group_ActiveLendableValue
    def get_Group_ActiveLendableValueDelta1(self):
        return self.Group_ActiveLendableValueDelta1
    def set_Group_ActiveLendableValueDelta1(self, Group_ActiveLendableValueDelta1):
        self.Group_ActiveLendableValueDelta1 = Group_ActiveLendableValueDelta1
    def get_Group_ActiveLendableValueDelta1Pc(self):
        return self.Group_ActiveLendableValueDelta1Pc
    def set_Group_ActiveLendableValueDelta1Pc(self, Group_ActiveLendableValueDelta1Pc):
        self.Group_ActiveLendableValueDelta1Pc = Group_ActiveLendableValueDelta1Pc
    def get_Group_ActiveLendableValueDelta30(self):
        return self.Group_ActiveLendableValueDelta30
    def set_Group_ActiveLendableValueDelta30(self, Group_ActiveLendableValueDelta30):
        self.Group_ActiveLendableValueDelta30 = Group_ActiveLendableValueDelta30
    def get_Group_ActiveLendableValueDelta30Pc(self):
        return self.Group_ActiveLendableValueDelta30Pc
    def set_Group_ActiveLendableValueDelta30Pc(self, Group_ActiveLendableValueDelta30Pc):
        self.Group_ActiveLendableValueDelta30Pc = Group_ActiveLendableValueDelta30Pc
    def get_Group_ActiveLendableValueDelta7(self):
        return self.Group_ActiveLendableValueDelta7
    def set_Group_ActiveLendableValueDelta7(self, Group_ActiveLendableValueDelta7):
        self.Group_ActiveLendableValueDelta7 = Group_ActiveLendableValueDelta7
    def get_Group_ActiveLendableValueDelta7Pc(self):
        return self.Group_ActiveLendableValueDelta7Pc
    def set_Group_ActiveLendableValueDelta7Pc(self, Group_ActiveLendableValueDelta7Pc):
        self.Group_ActiveLendableValueDelta7Pc = Group_ActiveLendableValueDelta7Pc
    def get_Group_ActiveUtilisation(self):
        return self.Group_ActiveUtilisation
    def set_Group_ActiveUtilisation(self, Group_ActiveUtilisation):
        self.Group_ActiveUtilisation = Group_ActiveUtilisation
    def get_Group_ActiveUtilisationByQuantity(self):
        return self.Group_ActiveUtilisationByQuantity
    def set_Group_ActiveUtilisationByQuantity(self, Group_ActiveUtilisationByQuantity):
        self.Group_ActiveUtilisationByQuantity = Group_ActiveUtilisationByQuantity
    def get_Group_ActiveUtilisationByQuantityDelta1(self):
        return self.Group_ActiveUtilisationByQuantityDelta1
    def set_Group_ActiveUtilisationByQuantityDelta1(self, Group_ActiveUtilisationByQuantityDelta1):
        self.Group_ActiveUtilisationByQuantityDelta1 = Group_ActiveUtilisationByQuantityDelta1
    def get_Group_ActiveUtilisationByQuantityDelta30(self):
        return self.Group_ActiveUtilisationByQuantityDelta30
    def set_Group_ActiveUtilisationByQuantityDelta30(self, Group_ActiveUtilisationByQuantityDelta30):
        self.Group_ActiveUtilisationByQuantityDelta30 = Group_ActiveUtilisationByQuantityDelta30
    def get_Group_ActiveUtilisationByQuantityDelta7(self):
        return self.Group_ActiveUtilisationByQuantityDelta7
    def set_Group_ActiveUtilisationByQuantityDelta7(self, Group_ActiveUtilisationByQuantityDelta7):
        self.Group_ActiveUtilisationByQuantityDelta7 = Group_ActiveUtilisationByQuantityDelta7
    def get_Group_ActiveUtilisationDelta1(self):
        return self.Group_ActiveUtilisationDelta1
    def set_Group_ActiveUtilisationDelta1(self, Group_ActiveUtilisationDelta1):
        self.Group_ActiveUtilisationDelta1 = Group_ActiveUtilisationDelta1
    def get_Group_ActiveUtilisationDelta30(self):
        return self.Group_ActiveUtilisationDelta30
    def set_Group_ActiveUtilisationDelta30(self, Group_ActiveUtilisationDelta30):
        self.Group_ActiveUtilisationDelta30 = Group_ActiveUtilisationDelta30
    def get_Group_ActiveUtilisationDelta7(self):
        return self.Group_ActiveUtilisationDelta7
    def set_Group_ActiveUtilisationDelta7(self, Group_ActiveUtilisationDelta7):
        self.Group_ActiveUtilisationDelta7 = Group_ActiveUtilisationDelta7
    def hasContent_(self):
        if (
            self.Group_ActiveAvailableQuantity is not None or
            self.Group_ActiveAvailableQuantityDelta1 is not None or
            self.Group_ActiveAvailableQuantityDelta1Pc is not None or
            self.Group_ActiveAvailableQuantityDelta30 is not None or
            self.Group_ActiveAvailableQuantityDelta30Pc is not None or
            self.Group_ActiveAvailableQuantityDelta7 is not None or
            self.Group_ActiveAvailableQuantityDelta7Pc is not None or
            self.Group_ActiveAvailableValue is not None or
            self.Group_ActiveAvailableValueDelta1 is not None or
            self.Group_ActiveAvailableValueDelta1Pc is not None or
            self.Group_ActiveAvailableValueDelta30 is not None or
            self.Group_ActiveAvailableValueDelta30Pc is not None or
            self.Group_ActiveAvailableValueDelta7 is not None or
            self.Group_ActiveAvailableValueDelta7Pc is not None or
            self.Group_ActiveLendableQuantity is not None or
            self.Group_ActiveLendableQuantityDelta1 is not None or
            self.Group_ActiveLendableQuantityDelta1Pc is not None or
            self.Group_ActiveLendableQuantityDelta30 is not None or
            self.Group_ActiveLendableQuantityDelta30Pc is not None or
            self.Group_ActiveLendableQuantityDelta7 is not None or
            self.Group_ActiveLendableQuantityDelta7Pc is not None or
            self.Group_ActiveLendableValue is not None or
            self.Group_ActiveLendableValueDelta1 is not None or
            self.Group_ActiveLendableValueDelta1Pc is not None or
            self.Group_ActiveLendableValueDelta30 is not None or
            self.Group_ActiveLendableValueDelta30Pc is not None or
            self.Group_ActiveLendableValueDelta7 is not None or
            self.Group_ActiveLendableValueDelta7Pc is not None or
            self.Group_ActiveUtilisation is not None or
            self.Group_ActiveUtilisationByQuantity is not None or
            self.Group_ActiveUtilisationByQuantityDelta1 is not None or
            self.Group_ActiveUtilisationByQuantityDelta30 is not None or
            self.Group_ActiveUtilisationByQuantityDelta7 is not None or
            self.Group_ActiveUtilisationDelta1 is not None or
            self.Group_ActiveUtilisationDelta30 is not None or
            self.Group_ActiveUtilisationDelta7 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ActiveInventoryType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ActiveInventoryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ActiveInventoryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ActiveInventoryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ActiveInventoryType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ActiveInventoryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Group_ActiveAvailableQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveAvailableQuantity>%s</%sGroup.ActiveAvailableQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveAvailableQuantity, input_name='Group.ActiveAvailableQuantity'), namespaceprefix_ , eol_))
        if self.Group_ActiveAvailableQuantityDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveAvailableQuantityDelta1>%s</%sGroup.ActiveAvailableQuantityDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveAvailableQuantityDelta1, input_name='Group.ActiveAvailableQuantityDelta1'), namespaceprefix_ , eol_))
        if self.Group_ActiveAvailableQuantityDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveAvailableQuantityDelta1Pc>%s</%sGroup.ActiveAvailableQuantityDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveAvailableQuantityDelta1Pc, input_name='Group.ActiveAvailableQuantityDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_ActiveAvailableQuantityDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveAvailableQuantityDelta30>%s</%sGroup.ActiveAvailableQuantityDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveAvailableQuantityDelta30, input_name='Group.ActiveAvailableQuantityDelta30'), namespaceprefix_ , eol_))
        if self.Group_ActiveAvailableQuantityDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveAvailableQuantityDelta30Pc>%s</%sGroup.ActiveAvailableQuantityDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveAvailableQuantityDelta30Pc, input_name='Group.ActiveAvailableQuantityDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_ActiveAvailableQuantityDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveAvailableQuantityDelta7>%s</%sGroup.ActiveAvailableQuantityDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveAvailableQuantityDelta7, input_name='Group.ActiveAvailableQuantityDelta7'), namespaceprefix_ , eol_))
        if self.Group_ActiveAvailableQuantityDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveAvailableQuantityDelta7Pc>%s</%sGroup.ActiveAvailableQuantityDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveAvailableQuantityDelta7Pc, input_name='Group.ActiveAvailableQuantityDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_ActiveAvailableValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveAvailableValue>%s</%sGroup.ActiveAvailableValue>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveAvailableValue, input_name='Group.ActiveAvailableValue'), namespaceprefix_ , eol_))
        if self.Group_ActiveAvailableValueDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveAvailableValueDelta1>%s</%sGroup.ActiveAvailableValueDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveAvailableValueDelta1, input_name='Group.ActiveAvailableValueDelta1'), namespaceprefix_ , eol_))
        if self.Group_ActiveAvailableValueDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveAvailableValueDelta1Pc>%s</%sGroup.ActiveAvailableValueDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveAvailableValueDelta1Pc, input_name='Group.ActiveAvailableValueDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_ActiveAvailableValueDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveAvailableValueDelta30>%s</%sGroup.ActiveAvailableValueDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveAvailableValueDelta30, input_name='Group.ActiveAvailableValueDelta30'), namespaceprefix_ , eol_))
        if self.Group_ActiveAvailableValueDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveAvailableValueDelta30Pc>%s</%sGroup.ActiveAvailableValueDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveAvailableValueDelta30Pc, input_name='Group.ActiveAvailableValueDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_ActiveAvailableValueDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveAvailableValueDelta7>%s</%sGroup.ActiveAvailableValueDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveAvailableValueDelta7, input_name='Group.ActiveAvailableValueDelta7'), namespaceprefix_ , eol_))
        if self.Group_ActiveAvailableValueDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveAvailableValueDelta7Pc>%s</%sGroup.ActiveAvailableValueDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveAvailableValueDelta7Pc, input_name='Group.ActiveAvailableValueDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendableQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendableQuantity>%s</%sGroup.ActiveLendableQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendableQuantity, input_name='Group.ActiveLendableQuantity'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendableQuantityDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendableQuantityDelta1>%s</%sGroup.ActiveLendableQuantityDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendableQuantityDelta1, input_name='Group.ActiveLendableQuantityDelta1'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendableQuantityDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendableQuantityDelta1Pc>%s</%sGroup.ActiveLendableQuantityDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendableQuantityDelta1Pc, input_name='Group.ActiveLendableQuantityDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendableQuantityDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendableQuantityDelta30>%s</%sGroup.ActiveLendableQuantityDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendableQuantityDelta30, input_name='Group.ActiveLendableQuantityDelta30'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendableQuantityDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendableQuantityDelta30Pc>%s</%sGroup.ActiveLendableQuantityDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendableQuantityDelta30Pc, input_name='Group.ActiveLendableQuantityDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendableQuantityDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendableQuantityDelta7>%s</%sGroup.ActiveLendableQuantityDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendableQuantityDelta7, input_name='Group.ActiveLendableQuantityDelta7'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendableQuantityDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendableQuantityDelta7Pc>%s</%sGroup.ActiveLendableQuantityDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendableQuantityDelta7Pc, input_name='Group.ActiveLendableQuantityDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendableValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendableValue>%s</%sGroup.ActiveLendableValue>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendableValue, input_name='Group.ActiveLendableValue'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendableValueDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendableValueDelta1>%s</%sGroup.ActiveLendableValueDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendableValueDelta1, input_name='Group.ActiveLendableValueDelta1'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendableValueDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendableValueDelta1Pc>%s</%sGroup.ActiveLendableValueDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendableValueDelta1Pc, input_name='Group.ActiveLendableValueDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendableValueDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendableValueDelta30>%s</%sGroup.ActiveLendableValueDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendableValueDelta30, input_name='Group.ActiveLendableValueDelta30'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendableValueDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendableValueDelta30Pc>%s</%sGroup.ActiveLendableValueDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendableValueDelta30Pc, input_name='Group.ActiveLendableValueDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendableValueDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendableValueDelta7>%s</%sGroup.ActiveLendableValueDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendableValueDelta7, input_name='Group.ActiveLendableValueDelta7'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendableValueDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendableValueDelta7Pc>%s</%sGroup.ActiveLendableValueDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendableValueDelta7Pc, input_name='Group.ActiveLendableValueDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_ActiveUtilisation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveUtilisation>%s</%sGroup.ActiveUtilisation>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveUtilisation, input_name='Group.ActiveUtilisation'), namespaceprefix_ , eol_))
        if self.Group_ActiveUtilisationByQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveUtilisationByQuantity>%s</%sGroup.ActiveUtilisationByQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveUtilisationByQuantity, input_name='Group.ActiveUtilisationByQuantity'), namespaceprefix_ , eol_))
        if self.Group_ActiveUtilisationByQuantityDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveUtilisationByQuantityDelta1>%s</%sGroup.ActiveUtilisationByQuantityDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveUtilisationByQuantityDelta1, input_name='Group.ActiveUtilisationByQuantityDelta1'), namespaceprefix_ , eol_))
        if self.Group_ActiveUtilisationByQuantityDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveUtilisationByQuantityDelta30>%s</%sGroup.ActiveUtilisationByQuantityDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveUtilisationByQuantityDelta30, input_name='Group.ActiveUtilisationByQuantityDelta30'), namespaceprefix_ , eol_))
        if self.Group_ActiveUtilisationByQuantityDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveUtilisationByQuantityDelta7>%s</%sGroup.ActiveUtilisationByQuantityDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveUtilisationByQuantityDelta7, input_name='Group.ActiveUtilisationByQuantityDelta7'), namespaceprefix_ , eol_))
        if self.Group_ActiveUtilisationDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveUtilisationDelta1>%s</%sGroup.ActiveUtilisationDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveUtilisationDelta1, input_name='Group.ActiveUtilisationDelta1'), namespaceprefix_ , eol_))
        if self.Group_ActiveUtilisationDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveUtilisationDelta30>%s</%sGroup.ActiveUtilisationDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveUtilisationDelta30, input_name='Group.ActiveUtilisationDelta30'), namespaceprefix_ , eol_))
        if self.Group_ActiveUtilisationDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveUtilisationDelta7>%s</%sGroup.ActiveUtilisationDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveUtilisationDelta7, input_name='Group.ActiveUtilisationDelta7'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Group.ActiveAvailableQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveAvailableQuantity')
            self.Group_ActiveAvailableQuantity = fval_
        elif nodeName_ == 'Group.ActiveAvailableQuantityDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveAvailableQuantityDelta1')
            self.Group_ActiveAvailableQuantityDelta1 = fval_
        elif nodeName_ == 'Group.ActiveAvailableQuantityDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveAvailableQuantityDelta1Pc')
            self.Group_ActiveAvailableQuantityDelta1Pc = fval_
        elif nodeName_ == 'Group.ActiveAvailableQuantityDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveAvailableQuantityDelta30')
            self.Group_ActiveAvailableQuantityDelta30 = fval_
        elif nodeName_ == 'Group.ActiveAvailableQuantityDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveAvailableQuantityDelta30Pc')
            self.Group_ActiveAvailableQuantityDelta30Pc = fval_
        elif nodeName_ == 'Group.ActiveAvailableQuantityDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveAvailableQuantityDelta7')
            self.Group_ActiveAvailableQuantityDelta7 = fval_
        elif nodeName_ == 'Group.ActiveAvailableQuantityDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveAvailableQuantityDelta7Pc')
            self.Group_ActiveAvailableQuantityDelta7Pc = fval_
        elif nodeName_ == 'Group.ActiveAvailableValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveAvailableValue')
            self.Group_ActiveAvailableValue = fval_
        elif nodeName_ == 'Group.ActiveAvailableValueDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveAvailableValueDelta1')
            self.Group_ActiveAvailableValueDelta1 = fval_
        elif nodeName_ == 'Group.ActiveAvailableValueDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveAvailableValueDelta1Pc')
            self.Group_ActiveAvailableValueDelta1Pc = fval_
        elif nodeName_ == 'Group.ActiveAvailableValueDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveAvailableValueDelta30')
            self.Group_ActiveAvailableValueDelta30 = fval_
        elif nodeName_ == 'Group.ActiveAvailableValueDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveAvailableValueDelta30Pc')
            self.Group_ActiveAvailableValueDelta30Pc = fval_
        elif nodeName_ == 'Group.ActiveAvailableValueDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveAvailableValueDelta7')
            self.Group_ActiveAvailableValueDelta7 = fval_
        elif nodeName_ == 'Group.ActiveAvailableValueDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveAvailableValueDelta7Pc')
            self.Group_ActiveAvailableValueDelta7Pc = fval_
        elif nodeName_ == 'Group.ActiveLendableQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendableQuantity')
            self.Group_ActiveLendableQuantity = fval_
        elif nodeName_ == 'Group.ActiveLendableQuantityDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendableQuantityDelta1')
            self.Group_ActiveLendableQuantityDelta1 = fval_
        elif nodeName_ == 'Group.ActiveLendableQuantityDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendableQuantityDelta1Pc')
            self.Group_ActiveLendableQuantityDelta1Pc = fval_
        elif nodeName_ == 'Group.ActiveLendableQuantityDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendableQuantityDelta30')
            self.Group_ActiveLendableQuantityDelta30 = fval_
        elif nodeName_ == 'Group.ActiveLendableQuantityDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendableQuantityDelta30Pc')
            self.Group_ActiveLendableQuantityDelta30Pc = fval_
        elif nodeName_ == 'Group.ActiveLendableQuantityDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendableQuantityDelta7')
            self.Group_ActiveLendableQuantityDelta7 = fval_
        elif nodeName_ == 'Group.ActiveLendableQuantityDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendableQuantityDelta7Pc')
            self.Group_ActiveLendableQuantityDelta7Pc = fval_
        elif nodeName_ == 'Group.ActiveLendableValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendableValue')
            self.Group_ActiveLendableValue = fval_
        elif nodeName_ == 'Group.ActiveLendableValueDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendableValueDelta1')
            self.Group_ActiveLendableValueDelta1 = fval_
        elif nodeName_ == 'Group.ActiveLendableValueDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendableValueDelta1Pc')
            self.Group_ActiveLendableValueDelta1Pc = fval_
        elif nodeName_ == 'Group.ActiveLendableValueDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendableValueDelta30')
            self.Group_ActiveLendableValueDelta30 = fval_
        elif nodeName_ == 'Group.ActiveLendableValueDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendableValueDelta30Pc')
            self.Group_ActiveLendableValueDelta30Pc = fval_
        elif nodeName_ == 'Group.ActiveLendableValueDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendableValueDelta7')
            self.Group_ActiveLendableValueDelta7 = fval_
        elif nodeName_ == 'Group.ActiveLendableValueDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendableValueDelta7Pc')
            self.Group_ActiveLendableValueDelta7Pc = fval_
        elif nodeName_ == 'Group.ActiveUtilisation' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveUtilisation')
            self.Group_ActiveUtilisation = fval_
        elif nodeName_ == 'Group.ActiveUtilisationByQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveUtilisationByQuantity')
            self.Group_ActiveUtilisationByQuantity = fval_
        elif nodeName_ == 'Group.ActiveUtilisationByQuantityDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveUtilisationByQuantityDelta1')
            self.Group_ActiveUtilisationByQuantityDelta1 = fval_
        elif nodeName_ == 'Group.ActiveUtilisationByQuantityDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveUtilisationByQuantityDelta30')
            self.Group_ActiveUtilisationByQuantityDelta30 = fval_
        elif nodeName_ == 'Group.ActiveUtilisationByQuantityDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveUtilisationByQuantityDelta7')
            self.Group_ActiveUtilisationByQuantityDelta7 = fval_
        elif nodeName_ == 'Group.ActiveUtilisationDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveUtilisationDelta1')
            self.Group_ActiveUtilisationDelta1 = fval_
        elif nodeName_ == 'Group.ActiveUtilisationDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveUtilisationDelta30')
            self.Group_ActiveUtilisationDelta30 = fval_
        elif nodeName_ == 'Group.ActiveUtilisationDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveUtilisationDelta7')
            self.Group_ActiveUtilisationDelta7 = fval_
# end class ActiveInventoryType


class InstrumentDataType76(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Count=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Count = Count
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InstrumentDataType76)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InstrumentDataType76.subclass:
            return InstrumentDataType76.subclass(*args_, **kwargs_)
        else:
            return InstrumentDataType76(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Count(self):
        return self.Count
    def set_Count(self, Count):
        self.Count = Count
    def hasContent_(self):
        if (
            self.Count is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentDataType76', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InstrumentDataType76')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InstrumentDataType76')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InstrumentDataType76', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InstrumentDataType76'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentDataType76', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Count is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCount>%s</%sCount>%s' % (namespaceprefix_ , self.gds_format_float(self.Count, input_name='Count'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Count' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Count')
            self.Count = fval_
# end class InstrumentDataType76


class InventoryType77(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Client_AvailableQuantity=None, Client_AvailableQuantityDelta1=None, Client_AvailableQuantityDelta1Pc=None, Client_AvailableQuantityDelta30=None, Client_AvailableQuantityDelta30Pc=None, Client_AvailableQuantityDelta7=None, Client_AvailableQuantityDelta7Pc=None, Client_AvailableValue=None, Client_AvailableValueDelta1=None, Client_AvailableValueDelta1Pc=None, Client_AvailableValueDelta30=None, Client_AvailableValueDelta30Pc=None, Client_AvailableValueDelta7=None, Client_AvailableValueDelta7Pc=None, Client_LendableQuantity=None, Client_LendableQuantityDelta1=None, Client_LendableQuantityDelta1Pc=None, Client_LendableQuantityDelta30=None, Client_LendableQuantityDelta30Pc=None, Client_LendableQuantityDelta7=None, Client_LendableQuantityDelta7Pc=None, Client_LendableValue=None, Client_LendableValueDelta1=None, Client_LendableValueDelta1Pc=None, Client_LendableValueDelta30=None, Client_LendableValueDelta30Pc=None, Client_LendableValueDelta7=None, Client_LendableValueDelta7Pc=None, Group_AvailableQuantity=None, Group_AvailableQuantityDelta1=None, Group_AvailableQuantityDelta1Pc=None, Group_AvailableQuantityDelta30=None, Group_AvailableQuantityDelta30Pc=None, Group_AvailableQuantityDelta7=None, Group_AvailableQuantityDelta7Pc=None, Group_AvailableQuantityStability=None, Group_AvailableValue=None, Group_AvailableValueDelta1=None, Group_AvailableValueDelta1Pc=None, Group_AvailableValueDelta30=None, Group_AvailableValueDelta30Pc=None, Group_AvailableValueDelta7=None, Group_AvailableValueDelta7Pc=None, Group_AvailableValueStability=None, Group_InventoryConcentration=None, Group_LendableQuantity=None, Group_LendableQuantityDelta1=None, Group_LendableQuantityDelta1Pc=None, Group_LendableQuantityDelta30=None, Group_LendableQuantityDelta30Pc=None, Group_LendableQuantityDelta7=None, Group_LendableQuantityDelta7Pc=None, Group_LendableQuantityStability=None, Group_LendableValue=None, Group_LendableValueDelta1=None, Group_LendableValueDelta1Pc=None, Group_LendableValueDelta30=None, Group_LendableValueDelta30Pc=None, Group_LendableValueDelta7=None, Group_LendableValueDelta7Pc=None, Group_LendableValueStability=None, Group_LenderQuantityOnLoanStability=None, Group_LenderValueOnLoan=None, Group_LenderValueOnLoanStability=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Client_AvailableQuantity = Client_AvailableQuantity
        self.Client_AvailableQuantityDelta1 = Client_AvailableQuantityDelta1
        self.Client_AvailableQuantityDelta1Pc = Client_AvailableQuantityDelta1Pc
        self.Client_AvailableQuantityDelta30 = Client_AvailableQuantityDelta30
        self.Client_AvailableQuantityDelta30Pc = Client_AvailableQuantityDelta30Pc
        self.Client_AvailableQuantityDelta7 = Client_AvailableQuantityDelta7
        self.Client_AvailableQuantityDelta7Pc = Client_AvailableQuantityDelta7Pc
        self.Client_AvailableValue = Client_AvailableValue
        self.Client_AvailableValueDelta1 = Client_AvailableValueDelta1
        self.Client_AvailableValueDelta1Pc = Client_AvailableValueDelta1Pc
        self.Client_AvailableValueDelta30 = Client_AvailableValueDelta30
        self.Client_AvailableValueDelta30Pc = Client_AvailableValueDelta30Pc
        self.Client_AvailableValueDelta7 = Client_AvailableValueDelta7
        self.Client_AvailableValueDelta7Pc = Client_AvailableValueDelta7Pc
        self.Client_LendableQuantity = Client_LendableQuantity
        self.Client_LendableQuantityDelta1 = Client_LendableQuantityDelta1
        self.Client_LendableQuantityDelta1Pc = Client_LendableQuantityDelta1Pc
        self.Client_LendableQuantityDelta30 = Client_LendableQuantityDelta30
        self.Client_LendableQuantityDelta30Pc = Client_LendableQuantityDelta30Pc
        self.Client_LendableQuantityDelta7 = Client_LendableQuantityDelta7
        self.Client_LendableQuantityDelta7Pc = Client_LendableQuantityDelta7Pc
        self.Client_LendableValue = Client_LendableValue
        self.Client_LendableValueDelta1 = Client_LendableValueDelta1
        self.Client_LendableValueDelta1Pc = Client_LendableValueDelta1Pc
        self.Client_LendableValueDelta30 = Client_LendableValueDelta30
        self.Client_LendableValueDelta30Pc = Client_LendableValueDelta30Pc
        self.Client_LendableValueDelta7 = Client_LendableValueDelta7
        self.Client_LendableValueDelta7Pc = Client_LendableValueDelta7Pc
        self.Group_AvailableQuantity = Group_AvailableQuantity
        self.Group_AvailableQuantityDelta1 = Group_AvailableQuantityDelta1
        self.Group_AvailableQuantityDelta1Pc = Group_AvailableQuantityDelta1Pc
        self.Group_AvailableQuantityDelta30 = Group_AvailableQuantityDelta30
        self.Group_AvailableQuantityDelta30Pc = Group_AvailableQuantityDelta30Pc
        self.Group_AvailableQuantityDelta7 = Group_AvailableQuantityDelta7
        self.Group_AvailableQuantityDelta7Pc = Group_AvailableQuantityDelta7Pc
        self.Group_AvailableQuantityStability = Group_AvailableQuantityStability
        self.Group_AvailableValue = Group_AvailableValue
        self.Group_AvailableValueDelta1 = Group_AvailableValueDelta1
        self.Group_AvailableValueDelta1Pc = Group_AvailableValueDelta1Pc
        self.Group_AvailableValueDelta30 = Group_AvailableValueDelta30
        self.Group_AvailableValueDelta30Pc = Group_AvailableValueDelta30Pc
        self.Group_AvailableValueDelta7 = Group_AvailableValueDelta7
        self.Group_AvailableValueDelta7Pc = Group_AvailableValueDelta7Pc
        self.Group_AvailableValueStability = Group_AvailableValueStability
        self.Group_InventoryConcentration = Group_InventoryConcentration
        self.Group_LendableQuantity = Group_LendableQuantity
        self.Group_LendableQuantityDelta1 = Group_LendableQuantityDelta1
        self.Group_LendableQuantityDelta1Pc = Group_LendableQuantityDelta1Pc
        self.Group_LendableQuantityDelta30 = Group_LendableQuantityDelta30
        self.Group_LendableQuantityDelta30Pc = Group_LendableQuantityDelta30Pc
        self.Group_LendableQuantityDelta7 = Group_LendableQuantityDelta7
        self.Group_LendableQuantityDelta7Pc = Group_LendableQuantityDelta7Pc
        self.Group_LendableQuantityStability = Group_LendableQuantityStability
        self.Group_LendableValue = Group_LendableValue
        self.Group_LendableValueDelta1 = Group_LendableValueDelta1
        self.Group_LendableValueDelta1Pc = Group_LendableValueDelta1Pc
        self.Group_LendableValueDelta30 = Group_LendableValueDelta30
        self.Group_LendableValueDelta30Pc = Group_LendableValueDelta30Pc
        self.Group_LendableValueDelta7 = Group_LendableValueDelta7
        self.Group_LendableValueDelta7Pc = Group_LendableValueDelta7Pc
        self.Group_LendableValueStability = Group_LendableValueStability
        self.Group_LenderQuantityOnLoanStability = Group_LenderQuantityOnLoanStability
        self.Group_LenderValueOnLoan = Group_LenderValueOnLoan
        self.Group_LenderValueOnLoanStability = Group_LenderValueOnLoanStability
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InventoryType77)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InventoryType77.subclass:
            return InventoryType77.subclass(*args_, **kwargs_)
        else:
            return InventoryType77(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Client_AvailableQuantity(self):
        return self.Client_AvailableQuantity
    def set_Client_AvailableQuantity(self, Client_AvailableQuantity):
        self.Client_AvailableQuantity = Client_AvailableQuantity
    def get_Client_AvailableQuantityDelta1(self):
        return self.Client_AvailableQuantityDelta1
    def set_Client_AvailableQuantityDelta1(self, Client_AvailableQuantityDelta1):
        self.Client_AvailableQuantityDelta1 = Client_AvailableQuantityDelta1
    def get_Client_AvailableQuantityDelta1Pc(self):
        return self.Client_AvailableQuantityDelta1Pc
    def set_Client_AvailableQuantityDelta1Pc(self, Client_AvailableQuantityDelta1Pc):
        self.Client_AvailableQuantityDelta1Pc = Client_AvailableQuantityDelta1Pc
    def get_Client_AvailableQuantityDelta30(self):
        return self.Client_AvailableQuantityDelta30
    def set_Client_AvailableQuantityDelta30(self, Client_AvailableQuantityDelta30):
        self.Client_AvailableQuantityDelta30 = Client_AvailableQuantityDelta30
    def get_Client_AvailableQuantityDelta30Pc(self):
        return self.Client_AvailableQuantityDelta30Pc
    def set_Client_AvailableQuantityDelta30Pc(self, Client_AvailableQuantityDelta30Pc):
        self.Client_AvailableQuantityDelta30Pc = Client_AvailableQuantityDelta30Pc
    def get_Client_AvailableQuantityDelta7(self):
        return self.Client_AvailableQuantityDelta7
    def set_Client_AvailableQuantityDelta7(self, Client_AvailableQuantityDelta7):
        self.Client_AvailableQuantityDelta7 = Client_AvailableQuantityDelta7
    def get_Client_AvailableQuantityDelta7Pc(self):
        return self.Client_AvailableQuantityDelta7Pc
    def set_Client_AvailableQuantityDelta7Pc(self, Client_AvailableQuantityDelta7Pc):
        self.Client_AvailableQuantityDelta7Pc = Client_AvailableQuantityDelta7Pc
    def get_Client_AvailableValue(self):
        return self.Client_AvailableValue
    def set_Client_AvailableValue(self, Client_AvailableValue):
        self.Client_AvailableValue = Client_AvailableValue
    def get_Client_AvailableValueDelta1(self):
        return self.Client_AvailableValueDelta1
    def set_Client_AvailableValueDelta1(self, Client_AvailableValueDelta1):
        self.Client_AvailableValueDelta1 = Client_AvailableValueDelta1
    def get_Client_AvailableValueDelta1Pc(self):
        return self.Client_AvailableValueDelta1Pc
    def set_Client_AvailableValueDelta1Pc(self, Client_AvailableValueDelta1Pc):
        self.Client_AvailableValueDelta1Pc = Client_AvailableValueDelta1Pc
    def get_Client_AvailableValueDelta30(self):
        return self.Client_AvailableValueDelta30
    def set_Client_AvailableValueDelta30(self, Client_AvailableValueDelta30):
        self.Client_AvailableValueDelta30 = Client_AvailableValueDelta30
    def get_Client_AvailableValueDelta30Pc(self):
        return self.Client_AvailableValueDelta30Pc
    def set_Client_AvailableValueDelta30Pc(self, Client_AvailableValueDelta30Pc):
        self.Client_AvailableValueDelta30Pc = Client_AvailableValueDelta30Pc
    def get_Client_AvailableValueDelta7(self):
        return self.Client_AvailableValueDelta7
    def set_Client_AvailableValueDelta7(self, Client_AvailableValueDelta7):
        self.Client_AvailableValueDelta7 = Client_AvailableValueDelta7
    def get_Client_AvailableValueDelta7Pc(self):
        return self.Client_AvailableValueDelta7Pc
    def set_Client_AvailableValueDelta7Pc(self, Client_AvailableValueDelta7Pc):
        self.Client_AvailableValueDelta7Pc = Client_AvailableValueDelta7Pc
    def get_Client_LendableQuantity(self):
        return self.Client_LendableQuantity
    def set_Client_LendableQuantity(self, Client_LendableQuantity):
        self.Client_LendableQuantity = Client_LendableQuantity
    def get_Client_LendableQuantityDelta1(self):
        return self.Client_LendableQuantityDelta1
    def set_Client_LendableQuantityDelta1(self, Client_LendableQuantityDelta1):
        self.Client_LendableQuantityDelta1 = Client_LendableQuantityDelta1
    def get_Client_LendableQuantityDelta1Pc(self):
        return self.Client_LendableQuantityDelta1Pc
    def set_Client_LendableQuantityDelta1Pc(self, Client_LendableQuantityDelta1Pc):
        self.Client_LendableQuantityDelta1Pc = Client_LendableQuantityDelta1Pc
    def get_Client_LendableQuantityDelta30(self):
        return self.Client_LendableQuantityDelta30
    def set_Client_LendableQuantityDelta30(self, Client_LendableQuantityDelta30):
        self.Client_LendableQuantityDelta30 = Client_LendableQuantityDelta30
    def get_Client_LendableQuantityDelta30Pc(self):
        return self.Client_LendableQuantityDelta30Pc
    def set_Client_LendableQuantityDelta30Pc(self, Client_LendableQuantityDelta30Pc):
        self.Client_LendableQuantityDelta30Pc = Client_LendableQuantityDelta30Pc
    def get_Client_LendableQuantityDelta7(self):
        return self.Client_LendableQuantityDelta7
    def set_Client_LendableQuantityDelta7(self, Client_LendableQuantityDelta7):
        self.Client_LendableQuantityDelta7 = Client_LendableQuantityDelta7
    def get_Client_LendableQuantityDelta7Pc(self):
        return self.Client_LendableQuantityDelta7Pc
    def set_Client_LendableQuantityDelta7Pc(self, Client_LendableQuantityDelta7Pc):
        self.Client_LendableQuantityDelta7Pc = Client_LendableQuantityDelta7Pc
    def get_Client_LendableValue(self):
        return self.Client_LendableValue
    def set_Client_LendableValue(self, Client_LendableValue):
        self.Client_LendableValue = Client_LendableValue
    def get_Client_LendableValueDelta1(self):
        return self.Client_LendableValueDelta1
    def set_Client_LendableValueDelta1(self, Client_LendableValueDelta1):
        self.Client_LendableValueDelta1 = Client_LendableValueDelta1
    def get_Client_LendableValueDelta1Pc(self):
        return self.Client_LendableValueDelta1Pc
    def set_Client_LendableValueDelta1Pc(self, Client_LendableValueDelta1Pc):
        self.Client_LendableValueDelta1Pc = Client_LendableValueDelta1Pc
    def get_Client_LendableValueDelta30(self):
        return self.Client_LendableValueDelta30
    def set_Client_LendableValueDelta30(self, Client_LendableValueDelta30):
        self.Client_LendableValueDelta30 = Client_LendableValueDelta30
    def get_Client_LendableValueDelta30Pc(self):
        return self.Client_LendableValueDelta30Pc
    def set_Client_LendableValueDelta30Pc(self, Client_LendableValueDelta30Pc):
        self.Client_LendableValueDelta30Pc = Client_LendableValueDelta30Pc
    def get_Client_LendableValueDelta7(self):
        return self.Client_LendableValueDelta7
    def set_Client_LendableValueDelta7(self, Client_LendableValueDelta7):
        self.Client_LendableValueDelta7 = Client_LendableValueDelta7
    def get_Client_LendableValueDelta7Pc(self):
        return self.Client_LendableValueDelta7Pc
    def set_Client_LendableValueDelta7Pc(self, Client_LendableValueDelta7Pc):
        self.Client_LendableValueDelta7Pc = Client_LendableValueDelta7Pc
    def get_Group_AvailableQuantity(self):
        return self.Group_AvailableQuantity
    def set_Group_AvailableQuantity(self, Group_AvailableQuantity):
        self.Group_AvailableQuantity = Group_AvailableQuantity
    def get_Group_AvailableQuantityDelta1(self):
        return self.Group_AvailableQuantityDelta1
    def set_Group_AvailableQuantityDelta1(self, Group_AvailableQuantityDelta1):
        self.Group_AvailableQuantityDelta1 = Group_AvailableQuantityDelta1
    def get_Group_AvailableQuantityDelta1Pc(self):
        return self.Group_AvailableQuantityDelta1Pc
    def set_Group_AvailableQuantityDelta1Pc(self, Group_AvailableQuantityDelta1Pc):
        self.Group_AvailableQuantityDelta1Pc = Group_AvailableQuantityDelta1Pc
    def get_Group_AvailableQuantityDelta30(self):
        return self.Group_AvailableQuantityDelta30
    def set_Group_AvailableQuantityDelta30(self, Group_AvailableQuantityDelta30):
        self.Group_AvailableQuantityDelta30 = Group_AvailableQuantityDelta30
    def get_Group_AvailableQuantityDelta30Pc(self):
        return self.Group_AvailableQuantityDelta30Pc
    def set_Group_AvailableQuantityDelta30Pc(self, Group_AvailableQuantityDelta30Pc):
        self.Group_AvailableQuantityDelta30Pc = Group_AvailableQuantityDelta30Pc
    def get_Group_AvailableQuantityDelta7(self):
        return self.Group_AvailableQuantityDelta7
    def set_Group_AvailableQuantityDelta7(self, Group_AvailableQuantityDelta7):
        self.Group_AvailableQuantityDelta7 = Group_AvailableQuantityDelta7
    def get_Group_AvailableQuantityDelta7Pc(self):
        return self.Group_AvailableQuantityDelta7Pc
    def set_Group_AvailableQuantityDelta7Pc(self, Group_AvailableQuantityDelta7Pc):
        self.Group_AvailableQuantityDelta7Pc = Group_AvailableQuantityDelta7Pc
    def get_Group_AvailableQuantityStability(self):
        return self.Group_AvailableQuantityStability
    def set_Group_AvailableQuantityStability(self, Group_AvailableQuantityStability):
        self.Group_AvailableQuantityStability = Group_AvailableQuantityStability
    def get_Group_AvailableValue(self):
        return self.Group_AvailableValue
    def set_Group_AvailableValue(self, Group_AvailableValue):
        self.Group_AvailableValue = Group_AvailableValue
    def get_Group_AvailableValueDelta1(self):
        return self.Group_AvailableValueDelta1
    def set_Group_AvailableValueDelta1(self, Group_AvailableValueDelta1):
        self.Group_AvailableValueDelta1 = Group_AvailableValueDelta1
    def get_Group_AvailableValueDelta1Pc(self):
        return self.Group_AvailableValueDelta1Pc
    def set_Group_AvailableValueDelta1Pc(self, Group_AvailableValueDelta1Pc):
        self.Group_AvailableValueDelta1Pc = Group_AvailableValueDelta1Pc
    def get_Group_AvailableValueDelta30(self):
        return self.Group_AvailableValueDelta30
    def set_Group_AvailableValueDelta30(self, Group_AvailableValueDelta30):
        self.Group_AvailableValueDelta30 = Group_AvailableValueDelta30
    def get_Group_AvailableValueDelta30Pc(self):
        return self.Group_AvailableValueDelta30Pc
    def set_Group_AvailableValueDelta30Pc(self, Group_AvailableValueDelta30Pc):
        self.Group_AvailableValueDelta30Pc = Group_AvailableValueDelta30Pc
    def get_Group_AvailableValueDelta7(self):
        return self.Group_AvailableValueDelta7
    def set_Group_AvailableValueDelta7(self, Group_AvailableValueDelta7):
        self.Group_AvailableValueDelta7 = Group_AvailableValueDelta7
    def get_Group_AvailableValueDelta7Pc(self):
        return self.Group_AvailableValueDelta7Pc
    def set_Group_AvailableValueDelta7Pc(self, Group_AvailableValueDelta7Pc):
        self.Group_AvailableValueDelta7Pc = Group_AvailableValueDelta7Pc
    def get_Group_AvailableValueStability(self):
        return self.Group_AvailableValueStability
    def set_Group_AvailableValueStability(self, Group_AvailableValueStability):
        self.Group_AvailableValueStability = Group_AvailableValueStability
    def get_Group_InventoryConcentration(self):
        return self.Group_InventoryConcentration
    def set_Group_InventoryConcentration(self, Group_InventoryConcentration):
        self.Group_InventoryConcentration = Group_InventoryConcentration
    def get_Group_LendableQuantity(self):
        return self.Group_LendableQuantity
    def set_Group_LendableQuantity(self, Group_LendableQuantity):
        self.Group_LendableQuantity = Group_LendableQuantity
    def get_Group_LendableQuantityDelta1(self):
        return self.Group_LendableQuantityDelta1
    def set_Group_LendableQuantityDelta1(self, Group_LendableQuantityDelta1):
        self.Group_LendableQuantityDelta1 = Group_LendableQuantityDelta1
    def get_Group_LendableQuantityDelta1Pc(self):
        return self.Group_LendableQuantityDelta1Pc
    def set_Group_LendableQuantityDelta1Pc(self, Group_LendableQuantityDelta1Pc):
        self.Group_LendableQuantityDelta1Pc = Group_LendableQuantityDelta1Pc
    def get_Group_LendableQuantityDelta30(self):
        return self.Group_LendableQuantityDelta30
    def set_Group_LendableQuantityDelta30(self, Group_LendableQuantityDelta30):
        self.Group_LendableQuantityDelta30 = Group_LendableQuantityDelta30
    def get_Group_LendableQuantityDelta30Pc(self):
        return self.Group_LendableQuantityDelta30Pc
    def set_Group_LendableQuantityDelta30Pc(self, Group_LendableQuantityDelta30Pc):
        self.Group_LendableQuantityDelta30Pc = Group_LendableQuantityDelta30Pc
    def get_Group_LendableQuantityDelta7(self):
        return self.Group_LendableQuantityDelta7
    def set_Group_LendableQuantityDelta7(self, Group_LendableQuantityDelta7):
        self.Group_LendableQuantityDelta7 = Group_LendableQuantityDelta7
    def get_Group_LendableQuantityDelta7Pc(self):
        return self.Group_LendableQuantityDelta7Pc
    def set_Group_LendableQuantityDelta7Pc(self, Group_LendableQuantityDelta7Pc):
        self.Group_LendableQuantityDelta7Pc = Group_LendableQuantityDelta7Pc
    def get_Group_LendableQuantityStability(self):
        return self.Group_LendableQuantityStability
    def set_Group_LendableQuantityStability(self, Group_LendableQuantityStability):
        self.Group_LendableQuantityStability = Group_LendableQuantityStability
    def get_Group_LendableValue(self):
        return self.Group_LendableValue
    def set_Group_LendableValue(self, Group_LendableValue):
        self.Group_LendableValue = Group_LendableValue
    def get_Group_LendableValueDelta1(self):
        return self.Group_LendableValueDelta1
    def set_Group_LendableValueDelta1(self, Group_LendableValueDelta1):
        self.Group_LendableValueDelta1 = Group_LendableValueDelta1
    def get_Group_LendableValueDelta1Pc(self):
        return self.Group_LendableValueDelta1Pc
    def set_Group_LendableValueDelta1Pc(self, Group_LendableValueDelta1Pc):
        self.Group_LendableValueDelta1Pc = Group_LendableValueDelta1Pc
    def get_Group_LendableValueDelta30(self):
        return self.Group_LendableValueDelta30
    def set_Group_LendableValueDelta30(self, Group_LendableValueDelta30):
        self.Group_LendableValueDelta30 = Group_LendableValueDelta30
    def get_Group_LendableValueDelta30Pc(self):
        return self.Group_LendableValueDelta30Pc
    def set_Group_LendableValueDelta30Pc(self, Group_LendableValueDelta30Pc):
        self.Group_LendableValueDelta30Pc = Group_LendableValueDelta30Pc
    def get_Group_LendableValueDelta7(self):
        return self.Group_LendableValueDelta7
    def set_Group_LendableValueDelta7(self, Group_LendableValueDelta7):
        self.Group_LendableValueDelta7 = Group_LendableValueDelta7
    def get_Group_LendableValueDelta7Pc(self):
        return self.Group_LendableValueDelta7Pc
    def set_Group_LendableValueDelta7Pc(self, Group_LendableValueDelta7Pc):
        self.Group_LendableValueDelta7Pc = Group_LendableValueDelta7Pc
    def get_Group_LendableValueStability(self):
        return self.Group_LendableValueStability
    def set_Group_LendableValueStability(self, Group_LendableValueStability):
        self.Group_LendableValueStability = Group_LendableValueStability
    def get_Group_LenderQuantityOnLoanStability(self):
        return self.Group_LenderQuantityOnLoanStability
    def set_Group_LenderQuantityOnLoanStability(self, Group_LenderQuantityOnLoanStability):
        self.Group_LenderQuantityOnLoanStability = Group_LenderQuantityOnLoanStability
    def get_Group_LenderValueOnLoan(self):
        return self.Group_LenderValueOnLoan
    def set_Group_LenderValueOnLoan(self, Group_LenderValueOnLoan):
        self.Group_LenderValueOnLoan = Group_LenderValueOnLoan
    def get_Group_LenderValueOnLoanStability(self):
        return self.Group_LenderValueOnLoanStability
    def set_Group_LenderValueOnLoanStability(self, Group_LenderValueOnLoanStability):
        self.Group_LenderValueOnLoanStability = Group_LenderValueOnLoanStability
    def hasContent_(self):
        if (
            self.Client_AvailableQuantity is not None or
            self.Client_AvailableQuantityDelta1 is not None or
            self.Client_AvailableQuantityDelta1Pc is not None or
            self.Client_AvailableQuantityDelta30 is not None or
            self.Client_AvailableQuantityDelta30Pc is not None or
            self.Client_AvailableQuantityDelta7 is not None or
            self.Client_AvailableQuantityDelta7Pc is not None or
            self.Client_AvailableValue is not None or
            self.Client_AvailableValueDelta1 is not None or
            self.Client_AvailableValueDelta1Pc is not None or
            self.Client_AvailableValueDelta30 is not None or
            self.Client_AvailableValueDelta30Pc is not None or
            self.Client_AvailableValueDelta7 is not None or
            self.Client_AvailableValueDelta7Pc is not None or
            self.Client_LendableQuantity is not None or
            self.Client_LendableQuantityDelta1 is not None or
            self.Client_LendableQuantityDelta1Pc is not None or
            self.Client_LendableQuantityDelta30 is not None or
            self.Client_LendableQuantityDelta30Pc is not None or
            self.Client_LendableQuantityDelta7 is not None or
            self.Client_LendableQuantityDelta7Pc is not None or
            self.Client_LendableValue is not None or
            self.Client_LendableValueDelta1 is not None or
            self.Client_LendableValueDelta1Pc is not None or
            self.Client_LendableValueDelta30 is not None or
            self.Client_LendableValueDelta30Pc is not None or
            self.Client_LendableValueDelta7 is not None or
            self.Client_LendableValueDelta7Pc is not None or
            self.Group_AvailableQuantity is not None or
            self.Group_AvailableQuantityDelta1 is not None or
            self.Group_AvailableQuantityDelta1Pc is not None or
            self.Group_AvailableQuantityDelta30 is not None or
            self.Group_AvailableQuantityDelta30Pc is not None or
            self.Group_AvailableQuantityDelta7 is not None or
            self.Group_AvailableQuantityDelta7Pc is not None or
            self.Group_AvailableQuantityStability is not None or
            self.Group_AvailableValue is not None or
            self.Group_AvailableValueDelta1 is not None or
            self.Group_AvailableValueDelta1Pc is not None or
            self.Group_AvailableValueDelta30 is not None or
            self.Group_AvailableValueDelta30Pc is not None or
            self.Group_AvailableValueDelta7 is not None or
            self.Group_AvailableValueDelta7Pc is not None or
            self.Group_AvailableValueStability is not None or
            self.Group_InventoryConcentration is not None or
            self.Group_LendableQuantity is not None or
            self.Group_LendableQuantityDelta1 is not None or
            self.Group_LendableQuantityDelta1Pc is not None or
            self.Group_LendableQuantityDelta30 is not None or
            self.Group_LendableQuantityDelta30Pc is not None or
            self.Group_LendableQuantityDelta7 is not None or
            self.Group_LendableQuantityDelta7Pc is not None or
            self.Group_LendableQuantityStability is not None or
            self.Group_LendableValue is not None or
            self.Group_LendableValueDelta1 is not None or
            self.Group_LendableValueDelta1Pc is not None or
            self.Group_LendableValueDelta30 is not None or
            self.Group_LendableValueDelta30Pc is not None or
            self.Group_LendableValueDelta7 is not None or
            self.Group_LendableValueDelta7Pc is not None or
            self.Group_LendableValueStability is not None or
            self.Group_LenderQuantityOnLoanStability is not None or
            self.Group_LenderValueOnLoan is not None or
            self.Group_LenderValueOnLoanStability is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InventoryType77', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InventoryType77')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InventoryType77')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InventoryType77', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InventoryType77'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InventoryType77', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Client_AvailableQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.AvailableQuantity>%s</%sClient.AvailableQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_AvailableQuantity, input_name='Client.AvailableQuantity'), namespaceprefix_ , eol_))
        if self.Client_AvailableQuantityDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.AvailableQuantityDelta1>%s</%sClient.AvailableQuantityDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_AvailableQuantityDelta1, input_name='Client.AvailableQuantityDelta1'), namespaceprefix_ , eol_))
        if self.Client_AvailableQuantityDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.AvailableQuantityDelta1Pc>%s</%sClient.AvailableQuantityDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_AvailableQuantityDelta1Pc, input_name='Client.AvailableQuantityDelta1Pc'), namespaceprefix_ , eol_))
        if self.Client_AvailableQuantityDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.AvailableQuantityDelta30>%s</%sClient.AvailableQuantityDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_AvailableQuantityDelta30, input_name='Client.AvailableQuantityDelta30'), namespaceprefix_ , eol_))
        if self.Client_AvailableQuantityDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.AvailableQuantityDelta30Pc>%s</%sClient.AvailableQuantityDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_AvailableQuantityDelta30Pc, input_name='Client.AvailableQuantityDelta30Pc'), namespaceprefix_ , eol_))
        if self.Client_AvailableQuantityDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.AvailableQuantityDelta7>%s</%sClient.AvailableQuantityDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_AvailableQuantityDelta7, input_name='Client.AvailableQuantityDelta7'), namespaceprefix_ , eol_))
        if self.Client_AvailableQuantityDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.AvailableQuantityDelta7Pc>%s</%sClient.AvailableQuantityDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_AvailableQuantityDelta7Pc, input_name='Client.AvailableQuantityDelta7Pc'), namespaceprefix_ , eol_))
        if self.Client_AvailableValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.AvailableValue>%s</%sClient.AvailableValue>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_AvailableValue, input_name='Client.AvailableValue'), namespaceprefix_ , eol_))
        if self.Client_AvailableValueDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.AvailableValueDelta1>%s</%sClient.AvailableValueDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_AvailableValueDelta1, input_name='Client.AvailableValueDelta1'), namespaceprefix_ , eol_))
        if self.Client_AvailableValueDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.AvailableValueDelta1Pc>%s</%sClient.AvailableValueDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_AvailableValueDelta1Pc, input_name='Client.AvailableValueDelta1Pc'), namespaceprefix_ , eol_))
        if self.Client_AvailableValueDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.AvailableValueDelta30>%s</%sClient.AvailableValueDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_AvailableValueDelta30, input_name='Client.AvailableValueDelta30'), namespaceprefix_ , eol_))
        if self.Client_AvailableValueDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.AvailableValueDelta30Pc>%s</%sClient.AvailableValueDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_AvailableValueDelta30Pc, input_name='Client.AvailableValueDelta30Pc'), namespaceprefix_ , eol_))
        if self.Client_AvailableValueDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.AvailableValueDelta7>%s</%sClient.AvailableValueDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_AvailableValueDelta7, input_name='Client.AvailableValueDelta7'), namespaceprefix_ , eol_))
        if self.Client_AvailableValueDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.AvailableValueDelta7Pc>%s</%sClient.AvailableValueDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_AvailableValueDelta7Pc, input_name='Client.AvailableValueDelta7Pc'), namespaceprefix_ , eol_))
        if self.Client_LendableQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.LendableQuantity>%s</%sClient.LendableQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_LendableQuantity, input_name='Client.LendableQuantity'), namespaceprefix_ , eol_))
        if self.Client_LendableQuantityDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.LendableQuantityDelta1>%s</%sClient.LendableQuantityDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_LendableQuantityDelta1, input_name='Client.LendableQuantityDelta1'), namespaceprefix_ , eol_))
        if self.Client_LendableQuantityDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.LendableQuantityDelta1Pc>%s</%sClient.LendableQuantityDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_LendableQuantityDelta1Pc, input_name='Client.LendableQuantityDelta1Pc'), namespaceprefix_ , eol_))
        if self.Client_LendableQuantityDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.LendableQuantityDelta30>%s</%sClient.LendableQuantityDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_LendableQuantityDelta30, input_name='Client.LendableQuantityDelta30'), namespaceprefix_ , eol_))
        if self.Client_LendableQuantityDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.LendableQuantityDelta30Pc>%s</%sClient.LendableQuantityDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_LendableQuantityDelta30Pc, input_name='Client.LendableQuantityDelta30Pc'), namespaceprefix_ , eol_))
        if self.Client_LendableQuantityDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.LendableQuantityDelta7>%s</%sClient.LendableQuantityDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_LendableQuantityDelta7, input_name='Client.LendableQuantityDelta7'), namespaceprefix_ , eol_))
        if self.Client_LendableQuantityDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.LendableQuantityDelta7Pc>%s</%sClient.LendableQuantityDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_LendableQuantityDelta7Pc, input_name='Client.LendableQuantityDelta7Pc'), namespaceprefix_ , eol_))
        if self.Client_LendableValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.LendableValue>%s</%sClient.LendableValue>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_LendableValue, input_name='Client.LendableValue'), namespaceprefix_ , eol_))
        if self.Client_LendableValueDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.LendableValueDelta1>%s</%sClient.LendableValueDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_LendableValueDelta1, input_name='Client.LendableValueDelta1'), namespaceprefix_ , eol_))
        if self.Client_LendableValueDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.LendableValueDelta1Pc>%s</%sClient.LendableValueDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_LendableValueDelta1Pc, input_name='Client.LendableValueDelta1Pc'), namespaceprefix_ , eol_))
        if self.Client_LendableValueDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.LendableValueDelta30>%s</%sClient.LendableValueDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_LendableValueDelta30, input_name='Client.LendableValueDelta30'), namespaceprefix_ , eol_))
        if self.Client_LendableValueDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.LendableValueDelta30Pc>%s</%sClient.LendableValueDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_LendableValueDelta30Pc, input_name='Client.LendableValueDelta30Pc'), namespaceprefix_ , eol_))
        if self.Client_LendableValueDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.LendableValueDelta7>%s</%sClient.LendableValueDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_LendableValueDelta7, input_name='Client.LendableValueDelta7'), namespaceprefix_ , eol_))
        if self.Client_LendableValueDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.LendableValueDelta7Pc>%s</%sClient.LendableValueDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_LendableValueDelta7Pc, input_name='Client.LendableValueDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_AvailableQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableQuantity>%s</%sGroup.AvailableQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableQuantity, input_name='Group.AvailableQuantity'), namespaceprefix_ , eol_))
        if self.Group_AvailableQuantityDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableQuantityDelta1>%s</%sGroup.AvailableQuantityDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableQuantityDelta1, input_name='Group.AvailableQuantityDelta1'), namespaceprefix_ , eol_))
        if self.Group_AvailableQuantityDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableQuantityDelta1Pc>%s</%sGroup.AvailableQuantityDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableQuantityDelta1Pc, input_name='Group.AvailableQuantityDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_AvailableQuantityDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableQuantityDelta30>%s</%sGroup.AvailableQuantityDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableQuantityDelta30, input_name='Group.AvailableQuantityDelta30'), namespaceprefix_ , eol_))
        if self.Group_AvailableQuantityDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableQuantityDelta30Pc>%s</%sGroup.AvailableQuantityDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableQuantityDelta30Pc, input_name='Group.AvailableQuantityDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_AvailableQuantityDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableQuantityDelta7>%s</%sGroup.AvailableQuantityDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableQuantityDelta7, input_name='Group.AvailableQuantityDelta7'), namespaceprefix_ , eol_))
        if self.Group_AvailableQuantityDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableQuantityDelta7Pc>%s</%sGroup.AvailableQuantityDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableQuantityDelta7Pc, input_name='Group.AvailableQuantityDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_AvailableQuantityStability is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableQuantityStability>%s</%sGroup.AvailableQuantityStability>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableQuantityStability, input_name='Group.AvailableQuantityStability'), namespaceprefix_ , eol_))
        if self.Group_AvailableValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableValue>%s</%sGroup.AvailableValue>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableValue, input_name='Group.AvailableValue'), namespaceprefix_ , eol_))
        if self.Group_AvailableValueDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableValueDelta1>%s</%sGroup.AvailableValueDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableValueDelta1, input_name='Group.AvailableValueDelta1'), namespaceprefix_ , eol_))
        if self.Group_AvailableValueDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableValueDelta1Pc>%s</%sGroup.AvailableValueDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableValueDelta1Pc, input_name='Group.AvailableValueDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_AvailableValueDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableValueDelta30>%s</%sGroup.AvailableValueDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableValueDelta30, input_name='Group.AvailableValueDelta30'), namespaceprefix_ , eol_))
        if self.Group_AvailableValueDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableValueDelta30Pc>%s</%sGroup.AvailableValueDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableValueDelta30Pc, input_name='Group.AvailableValueDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_AvailableValueDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableValueDelta7>%s</%sGroup.AvailableValueDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableValueDelta7, input_name='Group.AvailableValueDelta7'), namespaceprefix_ , eol_))
        if self.Group_AvailableValueDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableValueDelta7Pc>%s</%sGroup.AvailableValueDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableValueDelta7Pc, input_name='Group.AvailableValueDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_AvailableValueStability is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableValueStability>%s</%sGroup.AvailableValueStability>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableValueStability, input_name='Group.AvailableValueStability'), namespaceprefix_ , eol_))
        if self.Group_InventoryConcentration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.InventoryConcentration>%s</%sGroup.InventoryConcentration>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_InventoryConcentration, input_name='Group.InventoryConcentration'), namespaceprefix_ , eol_))
        if self.Group_LendableQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableQuantity>%s</%sGroup.LendableQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableQuantity, input_name='Group.LendableQuantity'), namespaceprefix_ , eol_))
        if self.Group_LendableQuantityDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableQuantityDelta1>%s</%sGroup.LendableQuantityDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableQuantityDelta1, input_name='Group.LendableQuantityDelta1'), namespaceprefix_ , eol_))
        if self.Group_LendableQuantityDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableQuantityDelta1Pc>%s</%sGroup.LendableQuantityDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableQuantityDelta1Pc, input_name='Group.LendableQuantityDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_LendableQuantityDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableQuantityDelta30>%s</%sGroup.LendableQuantityDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableQuantityDelta30, input_name='Group.LendableQuantityDelta30'), namespaceprefix_ , eol_))
        if self.Group_LendableQuantityDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableQuantityDelta30Pc>%s</%sGroup.LendableQuantityDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableQuantityDelta30Pc, input_name='Group.LendableQuantityDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_LendableQuantityDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableQuantityDelta7>%s</%sGroup.LendableQuantityDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableQuantityDelta7, input_name='Group.LendableQuantityDelta7'), namespaceprefix_ , eol_))
        if self.Group_LendableQuantityDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableQuantityDelta7Pc>%s</%sGroup.LendableQuantityDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableQuantityDelta7Pc, input_name='Group.LendableQuantityDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_LendableQuantityStability is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableQuantityStability>%s</%sGroup.LendableQuantityStability>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableQuantityStability, input_name='Group.LendableQuantityStability'), namespaceprefix_ , eol_))
        if self.Group_LendableValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableValue>%s</%sGroup.LendableValue>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableValue, input_name='Group.LendableValue'), namespaceprefix_ , eol_))
        if self.Group_LendableValueDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableValueDelta1>%s</%sGroup.LendableValueDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableValueDelta1, input_name='Group.LendableValueDelta1'), namespaceprefix_ , eol_))
        if self.Group_LendableValueDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableValueDelta1Pc>%s</%sGroup.LendableValueDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableValueDelta1Pc, input_name='Group.LendableValueDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_LendableValueDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableValueDelta30>%s</%sGroup.LendableValueDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableValueDelta30, input_name='Group.LendableValueDelta30'), namespaceprefix_ , eol_))
        if self.Group_LendableValueDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableValueDelta30Pc>%s</%sGroup.LendableValueDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableValueDelta30Pc, input_name='Group.LendableValueDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_LendableValueDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableValueDelta7>%s</%sGroup.LendableValueDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableValueDelta7, input_name='Group.LendableValueDelta7'), namespaceprefix_ , eol_))
        if self.Group_LendableValueDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableValueDelta7Pc>%s</%sGroup.LendableValueDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableValueDelta7Pc, input_name='Group.LendableValueDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_LendableValueStability is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableValueStability>%s</%sGroup.LendableValueStability>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableValueStability, input_name='Group.LendableValueStability'), namespaceprefix_ , eol_))
        if self.Group_LenderQuantityOnLoanStability is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LenderQuantityOnLoanStability>%s</%sGroup.LenderQuantityOnLoanStability>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LenderQuantityOnLoanStability, input_name='Group.LenderQuantityOnLoanStability'), namespaceprefix_ , eol_))
        if self.Group_LenderValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LenderValueOnLoan>%s</%sGroup.LenderValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LenderValueOnLoan, input_name='Group.LenderValueOnLoan'), namespaceprefix_ , eol_))
        if self.Group_LenderValueOnLoanStability is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LenderValueOnLoanStability>%s</%sGroup.LenderValueOnLoanStability>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LenderValueOnLoanStability, input_name='Group.LenderValueOnLoanStability'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Client.AvailableQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_AvailableQuantity')
            self.Client_AvailableQuantity = fval_
        elif nodeName_ == 'Client.AvailableQuantityDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_AvailableQuantityDelta1')
            self.Client_AvailableQuantityDelta1 = fval_
        elif nodeName_ == 'Client.AvailableQuantityDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_AvailableQuantityDelta1Pc')
            self.Client_AvailableQuantityDelta1Pc = fval_
        elif nodeName_ == 'Client.AvailableQuantityDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_AvailableQuantityDelta30')
            self.Client_AvailableQuantityDelta30 = fval_
        elif nodeName_ == 'Client.AvailableQuantityDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_AvailableQuantityDelta30Pc')
            self.Client_AvailableQuantityDelta30Pc = fval_
        elif nodeName_ == 'Client.AvailableQuantityDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_AvailableQuantityDelta7')
            self.Client_AvailableQuantityDelta7 = fval_
        elif nodeName_ == 'Client.AvailableQuantityDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_AvailableQuantityDelta7Pc')
            self.Client_AvailableQuantityDelta7Pc = fval_
        elif nodeName_ == 'Client.AvailableValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_AvailableValue')
            self.Client_AvailableValue = fval_
        elif nodeName_ == 'Client.AvailableValueDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_AvailableValueDelta1')
            self.Client_AvailableValueDelta1 = fval_
        elif nodeName_ == 'Client.AvailableValueDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_AvailableValueDelta1Pc')
            self.Client_AvailableValueDelta1Pc = fval_
        elif nodeName_ == 'Client.AvailableValueDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_AvailableValueDelta30')
            self.Client_AvailableValueDelta30 = fval_
        elif nodeName_ == 'Client.AvailableValueDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_AvailableValueDelta30Pc')
            self.Client_AvailableValueDelta30Pc = fval_
        elif nodeName_ == 'Client.AvailableValueDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_AvailableValueDelta7')
            self.Client_AvailableValueDelta7 = fval_
        elif nodeName_ == 'Client.AvailableValueDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_AvailableValueDelta7Pc')
            self.Client_AvailableValueDelta7Pc = fval_
        elif nodeName_ == 'Client.LendableQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_LendableQuantity')
            self.Client_LendableQuantity = fval_
        elif nodeName_ == 'Client.LendableQuantityDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_LendableQuantityDelta1')
            self.Client_LendableQuantityDelta1 = fval_
        elif nodeName_ == 'Client.LendableQuantityDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_LendableQuantityDelta1Pc')
            self.Client_LendableQuantityDelta1Pc = fval_
        elif nodeName_ == 'Client.LendableQuantityDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_LendableQuantityDelta30')
            self.Client_LendableQuantityDelta30 = fval_
        elif nodeName_ == 'Client.LendableQuantityDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_LendableQuantityDelta30Pc')
            self.Client_LendableQuantityDelta30Pc = fval_
        elif nodeName_ == 'Client.LendableQuantityDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_LendableQuantityDelta7')
            self.Client_LendableQuantityDelta7 = fval_
        elif nodeName_ == 'Client.LendableQuantityDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_LendableQuantityDelta7Pc')
            self.Client_LendableQuantityDelta7Pc = fval_
        elif nodeName_ == 'Client.LendableValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_LendableValue')
            self.Client_LendableValue = fval_
        elif nodeName_ == 'Client.LendableValueDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_LendableValueDelta1')
            self.Client_LendableValueDelta1 = fval_
        elif nodeName_ == 'Client.LendableValueDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_LendableValueDelta1Pc')
            self.Client_LendableValueDelta1Pc = fval_
        elif nodeName_ == 'Client.LendableValueDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_LendableValueDelta30')
            self.Client_LendableValueDelta30 = fval_
        elif nodeName_ == 'Client.LendableValueDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_LendableValueDelta30Pc')
            self.Client_LendableValueDelta30Pc = fval_
        elif nodeName_ == 'Client.LendableValueDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_LendableValueDelta7')
            self.Client_LendableValueDelta7 = fval_
        elif nodeName_ == 'Client.LendableValueDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_LendableValueDelta7Pc')
            self.Client_LendableValueDelta7Pc = fval_
        elif nodeName_ == 'Group.AvailableQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableQuantity')
            self.Group_AvailableQuantity = fval_
        elif nodeName_ == 'Group.AvailableQuantityDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableQuantityDelta1')
            self.Group_AvailableQuantityDelta1 = fval_
        elif nodeName_ == 'Group.AvailableQuantityDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableQuantityDelta1Pc')
            self.Group_AvailableQuantityDelta1Pc = fval_
        elif nodeName_ == 'Group.AvailableQuantityDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableQuantityDelta30')
            self.Group_AvailableQuantityDelta30 = fval_
        elif nodeName_ == 'Group.AvailableQuantityDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableQuantityDelta30Pc')
            self.Group_AvailableQuantityDelta30Pc = fval_
        elif nodeName_ == 'Group.AvailableQuantityDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableQuantityDelta7')
            self.Group_AvailableQuantityDelta7 = fval_
        elif nodeName_ == 'Group.AvailableQuantityDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableQuantityDelta7Pc')
            self.Group_AvailableQuantityDelta7Pc = fval_
        elif nodeName_ == 'Group.AvailableQuantityStability' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableQuantityStability')
            self.Group_AvailableQuantityStability = fval_
        elif nodeName_ == 'Group.AvailableValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableValue')
            self.Group_AvailableValue = fval_
        elif nodeName_ == 'Group.AvailableValueDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableValueDelta1')
            self.Group_AvailableValueDelta1 = fval_
        elif nodeName_ == 'Group.AvailableValueDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableValueDelta1Pc')
            self.Group_AvailableValueDelta1Pc = fval_
        elif nodeName_ == 'Group.AvailableValueDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableValueDelta30')
            self.Group_AvailableValueDelta30 = fval_
        elif nodeName_ == 'Group.AvailableValueDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableValueDelta30Pc')
            self.Group_AvailableValueDelta30Pc = fval_
        elif nodeName_ == 'Group.AvailableValueDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableValueDelta7')
            self.Group_AvailableValueDelta7 = fval_
        elif nodeName_ == 'Group.AvailableValueDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableValueDelta7Pc')
            self.Group_AvailableValueDelta7Pc = fval_
        elif nodeName_ == 'Group.AvailableValueStability' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableValueStability')
            self.Group_AvailableValueStability = fval_
        elif nodeName_ == 'Group.InventoryConcentration' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_InventoryConcentration')
            self.Group_InventoryConcentration = fval_
        elif nodeName_ == 'Group.LendableQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableQuantity')
            self.Group_LendableQuantity = fval_
        elif nodeName_ == 'Group.LendableQuantityDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableQuantityDelta1')
            self.Group_LendableQuantityDelta1 = fval_
        elif nodeName_ == 'Group.LendableQuantityDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableQuantityDelta1Pc')
            self.Group_LendableQuantityDelta1Pc = fval_
        elif nodeName_ == 'Group.LendableQuantityDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableQuantityDelta30')
            self.Group_LendableQuantityDelta30 = fval_
        elif nodeName_ == 'Group.LendableQuantityDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableQuantityDelta30Pc')
            self.Group_LendableQuantityDelta30Pc = fval_
        elif nodeName_ == 'Group.LendableQuantityDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableQuantityDelta7')
            self.Group_LendableQuantityDelta7 = fval_
        elif nodeName_ == 'Group.LendableQuantityDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableQuantityDelta7Pc')
            self.Group_LendableQuantityDelta7Pc = fval_
        elif nodeName_ == 'Group.LendableQuantityStability' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableQuantityStability')
            self.Group_LendableQuantityStability = fval_
        elif nodeName_ == 'Group.LendableValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableValue')
            self.Group_LendableValue = fval_
        elif nodeName_ == 'Group.LendableValueDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableValueDelta1')
            self.Group_LendableValueDelta1 = fval_
        elif nodeName_ == 'Group.LendableValueDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableValueDelta1Pc')
            self.Group_LendableValueDelta1Pc = fval_
        elif nodeName_ == 'Group.LendableValueDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableValueDelta30')
            self.Group_LendableValueDelta30 = fval_
        elif nodeName_ == 'Group.LendableValueDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableValueDelta30Pc')
            self.Group_LendableValueDelta30Pc = fval_
        elif nodeName_ == 'Group.LendableValueDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableValueDelta7')
            self.Group_LendableValueDelta7 = fval_
        elif nodeName_ == 'Group.LendableValueDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableValueDelta7Pc')
            self.Group_LendableValueDelta7Pc = fval_
        elif nodeName_ == 'Group.LendableValueStability' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableValueStability')
            self.Group_LendableValueStability = fval_
        elif nodeName_ == 'Group.LenderQuantityOnLoanStability' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LenderQuantityOnLoanStability')
            self.Group_LenderQuantityOnLoanStability = fval_
        elif nodeName_ == 'Group.LenderValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LenderValueOnLoan')
            self.Group_LenderValueOnLoan = fval_
        elif nodeName_ == 'Group.LenderValueOnLoanStability' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LenderValueOnLoanStability')
            self.Group_LenderValueOnLoanStability = fval_
# end class InventoryType77


class MarketColourType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Group_DaysToCover=None, Group_DaysToCoverDelta1=None, Group_DaysToCoverDelta1Pc=None, Group_DaysToCoverDelta30=None, Group_DaysToCoverDelta30Pc=None, Group_DaysToCoverDelta7=None, Group_DaysToCoverDelta7Pc=None, Group_IndicativeFee=None, Group_IndicativeFeeDelta1=None, Group_IndicativeFeeDelta30=None, Group_IndicativeFeeDelta7=None, Group_IndicativeRebate=None, Group_IndicativeRebateDelta1=None, Group_IndicativeRebateDelta30=None, Group_IndicativeRebateDelta7=None, Group_MarketCap=None, Group_PcFreeFloatValueOnLoan=None, Group_PcIssueValueOnLoan=None, Group_PcIssueValueOnLoanDelta1=None, Group_PcIssueValueOnLoanDelta30=None, Group_PcIssueValueOnLoanDelta7=None, Group_PcSharesOutstandingOnLoan=None, Group_PcSharesOutstandingOnLoanDelta1=None, Group_PcSharesOutstandingOnLoanDelta30=None, Group_PcSharesOutstandingOnLoanDelta7=None, Group_Price=None, Group_PriceCurrency=None, Group_PriceDelta1=None, Group_PriceDelta30=None, Group_PriceDelta7=None, Group_SharesOutstanding=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Group_DaysToCover = Group_DaysToCover
        self.Group_DaysToCoverDelta1 = Group_DaysToCoverDelta1
        self.Group_DaysToCoverDelta1Pc = Group_DaysToCoverDelta1Pc
        self.Group_DaysToCoverDelta30 = Group_DaysToCoverDelta30
        self.Group_DaysToCoverDelta30Pc = Group_DaysToCoverDelta30Pc
        self.Group_DaysToCoverDelta7 = Group_DaysToCoverDelta7
        self.Group_DaysToCoverDelta7Pc = Group_DaysToCoverDelta7Pc
        self.Group_IndicativeFee = Group_IndicativeFee
        self.Group_IndicativeFeeDelta1 = Group_IndicativeFeeDelta1
        self.Group_IndicativeFeeDelta30 = Group_IndicativeFeeDelta30
        self.Group_IndicativeFeeDelta7 = Group_IndicativeFeeDelta7
        self.Group_IndicativeRebate = Group_IndicativeRebate
        self.Group_IndicativeRebateDelta1 = Group_IndicativeRebateDelta1
        self.Group_IndicativeRebateDelta30 = Group_IndicativeRebateDelta30
        self.Group_IndicativeRebateDelta7 = Group_IndicativeRebateDelta7
        self.Group_MarketCap = Group_MarketCap
        self.Group_PcFreeFloatValueOnLoan = Group_PcFreeFloatValueOnLoan
        self.Group_PcIssueValueOnLoan = Group_PcIssueValueOnLoan
        self.Group_PcIssueValueOnLoanDelta1 = Group_PcIssueValueOnLoanDelta1
        self.Group_PcIssueValueOnLoanDelta30 = Group_PcIssueValueOnLoanDelta30
        self.Group_PcIssueValueOnLoanDelta7 = Group_PcIssueValueOnLoanDelta7
        self.Group_PcSharesOutstandingOnLoan = Group_PcSharesOutstandingOnLoan
        self.Group_PcSharesOutstandingOnLoanDelta1 = Group_PcSharesOutstandingOnLoanDelta1
        self.Group_PcSharesOutstandingOnLoanDelta30 = Group_PcSharesOutstandingOnLoanDelta30
        self.Group_PcSharesOutstandingOnLoanDelta7 = Group_PcSharesOutstandingOnLoanDelta7
        self.Group_Price = Group_Price
        self.Group_PriceCurrency = Group_PriceCurrency
        self.Group_PriceDelta1 = Group_PriceDelta1
        self.Group_PriceDelta30 = Group_PriceDelta30
        self.Group_PriceDelta7 = Group_PriceDelta7
        self.Group_SharesOutstanding = Group_SharesOutstanding
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarketColourType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarketColourType.subclass:
            return MarketColourType.subclass(*args_, **kwargs_)
        else:
            return MarketColourType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Group_DaysToCover(self):
        return self.Group_DaysToCover
    def set_Group_DaysToCover(self, Group_DaysToCover):
        self.Group_DaysToCover = Group_DaysToCover
    def get_Group_DaysToCoverDelta1(self):
        return self.Group_DaysToCoverDelta1
    def set_Group_DaysToCoverDelta1(self, Group_DaysToCoverDelta1):
        self.Group_DaysToCoverDelta1 = Group_DaysToCoverDelta1
    def get_Group_DaysToCoverDelta1Pc(self):
        return self.Group_DaysToCoverDelta1Pc
    def set_Group_DaysToCoverDelta1Pc(self, Group_DaysToCoverDelta1Pc):
        self.Group_DaysToCoverDelta1Pc = Group_DaysToCoverDelta1Pc
    def get_Group_DaysToCoverDelta30(self):
        return self.Group_DaysToCoverDelta30
    def set_Group_DaysToCoverDelta30(self, Group_DaysToCoverDelta30):
        self.Group_DaysToCoverDelta30 = Group_DaysToCoverDelta30
    def get_Group_DaysToCoverDelta30Pc(self):
        return self.Group_DaysToCoverDelta30Pc
    def set_Group_DaysToCoverDelta30Pc(self, Group_DaysToCoverDelta30Pc):
        self.Group_DaysToCoverDelta30Pc = Group_DaysToCoverDelta30Pc
    def get_Group_DaysToCoverDelta7(self):
        return self.Group_DaysToCoverDelta7
    def set_Group_DaysToCoverDelta7(self, Group_DaysToCoverDelta7):
        self.Group_DaysToCoverDelta7 = Group_DaysToCoverDelta7
    def get_Group_DaysToCoverDelta7Pc(self):
        return self.Group_DaysToCoverDelta7Pc
    def set_Group_DaysToCoverDelta7Pc(self, Group_DaysToCoverDelta7Pc):
        self.Group_DaysToCoverDelta7Pc = Group_DaysToCoverDelta7Pc
    def get_Group_IndicativeFee(self):
        return self.Group_IndicativeFee
    def set_Group_IndicativeFee(self, Group_IndicativeFee):
        self.Group_IndicativeFee = Group_IndicativeFee
    def get_Group_IndicativeFeeDelta1(self):
        return self.Group_IndicativeFeeDelta1
    def set_Group_IndicativeFeeDelta1(self, Group_IndicativeFeeDelta1):
        self.Group_IndicativeFeeDelta1 = Group_IndicativeFeeDelta1
    def get_Group_IndicativeFeeDelta30(self):
        return self.Group_IndicativeFeeDelta30
    def set_Group_IndicativeFeeDelta30(self, Group_IndicativeFeeDelta30):
        self.Group_IndicativeFeeDelta30 = Group_IndicativeFeeDelta30
    def get_Group_IndicativeFeeDelta7(self):
        return self.Group_IndicativeFeeDelta7
    def set_Group_IndicativeFeeDelta7(self, Group_IndicativeFeeDelta7):
        self.Group_IndicativeFeeDelta7 = Group_IndicativeFeeDelta7
    def get_Group_IndicativeRebate(self):
        return self.Group_IndicativeRebate
    def set_Group_IndicativeRebate(self, Group_IndicativeRebate):
        self.Group_IndicativeRebate = Group_IndicativeRebate
    def get_Group_IndicativeRebateDelta1(self):
        return self.Group_IndicativeRebateDelta1
    def set_Group_IndicativeRebateDelta1(self, Group_IndicativeRebateDelta1):
        self.Group_IndicativeRebateDelta1 = Group_IndicativeRebateDelta1
    def get_Group_IndicativeRebateDelta30(self):
        return self.Group_IndicativeRebateDelta30
    def set_Group_IndicativeRebateDelta30(self, Group_IndicativeRebateDelta30):
        self.Group_IndicativeRebateDelta30 = Group_IndicativeRebateDelta30
    def get_Group_IndicativeRebateDelta7(self):
        return self.Group_IndicativeRebateDelta7
    def set_Group_IndicativeRebateDelta7(self, Group_IndicativeRebateDelta7):
        self.Group_IndicativeRebateDelta7 = Group_IndicativeRebateDelta7
    def get_Group_MarketCap(self):
        return self.Group_MarketCap
    def set_Group_MarketCap(self, Group_MarketCap):
        self.Group_MarketCap = Group_MarketCap
    def get_Group_PcFreeFloatValueOnLoan(self):
        return self.Group_PcFreeFloatValueOnLoan
    def set_Group_PcFreeFloatValueOnLoan(self, Group_PcFreeFloatValueOnLoan):
        self.Group_PcFreeFloatValueOnLoan = Group_PcFreeFloatValueOnLoan
    def get_Group_PcIssueValueOnLoan(self):
        return self.Group_PcIssueValueOnLoan
    def set_Group_PcIssueValueOnLoan(self, Group_PcIssueValueOnLoan):
        self.Group_PcIssueValueOnLoan = Group_PcIssueValueOnLoan
    def get_Group_PcIssueValueOnLoanDelta1(self):
        return self.Group_PcIssueValueOnLoanDelta1
    def set_Group_PcIssueValueOnLoanDelta1(self, Group_PcIssueValueOnLoanDelta1):
        self.Group_PcIssueValueOnLoanDelta1 = Group_PcIssueValueOnLoanDelta1
    def get_Group_PcIssueValueOnLoanDelta30(self):
        return self.Group_PcIssueValueOnLoanDelta30
    def set_Group_PcIssueValueOnLoanDelta30(self, Group_PcIssueValueOnLoanDelta30):
        self.Group_PcIssueValueOnLoanDelta30 = Group_PcIssueValueOnLoanDelta30
    def get_Group_PcIssueValueOnLoanDelta7(self):
        return self.Group_PcIssueValueOnLoanDelta7
    def set_Group_PcIssueValueOnLoanDelta7(self, Group_PcIssueValueOnLoanDelta7):
        self.Group_PcIssueValueOnLoanDelta7 = Group_PcIssueValueOnLoanDelta7
    def get_Group_PcSharesOutstandingOnLoan(self):
        return self.Group_PcSharesOutstandingOnLoan
    def set_Group_PcSharesOutstandingOnLoan(self, Group_PcSharesOutstandingOnLoan):
        self.Group_PcSharesOutstandingOnLoan = Group_PcSharesOutstandingOnLoan
    def get_Group_PcSharesOutstandingOnLoanDelta1(self):
        return self.Group_PcSharesOutstandingOnLoanDelta1
    def set_Group_PcSharesOutstandingOnLoanDelta1(self, Group_PcSharesOutstandingOnLoanDelta1):
        self.Group_PcSharesOutstandingOnLoanDelta1 = Group_PcSharesOutstandingOnLoanDelta1
    def get_Group_PcSharesOutstandingOnLoanDelta30(self):
        return self.Group_PcSharesOutstandingOnLoanDelta30
    def set_Group_PcSharesOutstandingOnLoanDelta30(self, Group_PcSharesOutstandingOnLoanDelta30):
        self.Group_PcSharesOutstandingOnLoanDelta30 = Group_PcSharesOutstandingOnLoanDelta30
    def get_Group_PcSharesOutstandingOnLoanDelta7(self):
        return self.Group_PcSharesOutstandingOnLoanDelta7
    def set_Group_PcSharesOutstandingOnLoanDelta7(self, Group_PcSharesOutstandingOnLoanDelta7):
        self.Group_PcSharesOutstandingOnLoanDelta7 = Group_PcSharesOutstandingOnLoanDelta7
    def get_Group_Price(self):
        return self.Group_Price
    def set_Group_Price(self, Group_Price):
        self.Group_Price = Group_Price
    def get_Group_PriceCurrency(self):
        return self.Group_PriceCurrency
    def set_Group_PriceCurrency(self, Group_PriceCurrency):
        self.Group_PriceCurrency = Group_PriceCurrency
    def get_Group_PriceDelta1(self):
        return self.Group_PriceDelta1
    def set_Group_PriceDelta1(self, Group_PriceDelta1):
        self.Group_PriceDelta1 = Group_PriceDelta1
    def get_Group_PriceDelta30(self):
        return self.Group_PriceDelta30
    def set_Group_PriceDelta30(self, Group_PriceDelta30):
        self.Group_PriceDelta30 = Group_PriceDelta30
    def get_Group_PriceDelta7(self):
        return self.Group_PriceDelta7
    def set_Group_PriceDelta7(self, Group_PriceDelta7):
        self.Group_PriceDelta7 = Group_PriceDelta7
    def get_Group_SharesOutstanding(self):
        return self.Group_SharesOutstanding
    def set_Group_SharesOutstanding(self, Group_SharesOutstanding):
        self.Group_SharesOutstanding = Group_SharesOutstanding
    def hasContent_(self):
        if (
            self.Group_DaysToCover is not None or
            self.Group_DaysToCoverDelta1 is not None or
            self.Group_DaysToCoverDelta1Pc is not None or
            self.Group_DaysToCoverDelta30 is not None or
            self.Group_DaysToCoverDelta30Pc is not None or
            self.Group_DaysToCoverDelta7 is not None or
            self.Group_DaysToCoverDelta7Pc is not None or
            self.Group_IndicativeFee is not None or
            self.Group_IndicativeFeeDelta1 is not None or
            self.Group_IndicativeFeeDelta30 is not None or
            self.Group_IndicativeFeeDelta7 is not None or
            self.Group_IndicativeRebate is not None or
            self.Group_IndicativeRebateDelta1 is not None or
            self.Group_IndicativeRebateDelta30 is not None or
            self.Group_IndicativeRebateDelta7 is not None or
            self.Group_MarketCap is not None or
            self.Group_PcFreeFloatValueOnLoan is not None or
            self.Group_PcIssueValueOnLoan is not None or
            self.Group_PcIssueValueOnLoanDelta1 is not None or
            self.Group_PcIssueValueOnLoanDelta30 is not None or
            self.Group_PcIssueValueOnLoanDelta7 is not None or
            self.Group_PcSharesOutstandingOnLoan is not None or
            self.Group_PcSharesOutstandingOnLoanDelta1 is not None or
            self.Group_PcSharesOutstandingOnLoanDelta30 is not None or
            self.Group_PcSharesOutstandingOnLoanDelta7 is not None or
            self.Group_Price is not None or
            self.Group_PriceCurrency is not None or
            self.Group_PriceDelta1 is not None or
            self.Group_PriceDelta30 is not None or
            self.Group_PriceDelta7 is not None or
            self.Group_SharesOutstanding is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MarketColourType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarketColourType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarketColourType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarketColourType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarketColourType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MarketColourType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Group_DaysToCover is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.DaysToCover>%s</%sGroup.DaysToCover>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_DaysToCover, input_name='Group.DaysToCover'), namespaceprefix_ , eol_))
        if self.Group_DaysToCoverDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.DaysToCoverDelta1>%s</%sGroup.DaysToCoverDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_DaysToCoverDelta1, input_name='Group.DaysToCoverDelta1'), namespaceprefix_ , eol_))
        if self.Group_DaysToCoverDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.DaysToCoverDelta1Pc>%s</%sGroup.DaysToCoverDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_DaysToCoverDelta1Pc, input_name='Group.DaysToCoverDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_DaysToCoverDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.DaysToCoverDelta30>%s</%sGroup.DaysToCoverDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_DaysToCoverDelta30, input_name='Group.DaysToCoverDelta30'), namespaceprefix_ , eol_))
        if self.Group_DaysToCoverDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.DaysToCoverDelta30Pc>%s</%sGroup.DaysToCoverDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_DaysToCoverDelta30Pc, input_name='Group.DaysToCoverDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_DaysToCoverDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.DaysToCoverDelta7>%s</%sGroup.DaysToCoverDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_DaysToCoverDelta7, input_name='Group.DaysToCoverDelta7'), namespaceprefix_ , eol_))
        if self.Group_DaysToCoverDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.DaysToCoverDelta7Pc>%s</%sGroup.DaysToCoverDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_DaysToCoverDelta7Pc, input_name='Group.DaysToCoverDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_IndicativeFee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.IndicativeFee>%s</%sGroup.IndicativeFee>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_IndicativeFee, input_name='Group.IndicativeFee'), namespaceprefix_ , eol_))
        if self.Group_IndicativeFeeDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.IndicativeFeeDelta1>%s</%sGroup.IndicativeFeeDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_IndicativeFeeDelta1, input_name='Group.IndicativeFeeDelta1'), namespaceprefix_ , eol_))
        if self.Group_IndicativeFeeDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.IndicativeFeeDelta30>%s</%sGroup.IndicativeFeeDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_IndicativeFeeDelta30, input_name='Group.IndicativeFeeDelta30'), namespaceprefix_ , eol_))
        if self.Group_IndicativeFeeDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.IndicativeFeeDelta7>%s</%sGroup.IndicativeFeeDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_IndicativeFeeDelta7, input_name='Group.IndicativeFeeDelta7'), namespaceprefix_ , eol_))
        if self.Group_IndicativeRebate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.IndicativeRebate>%s</%sGroup.IndicativeRebate>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_IndicativeRebate, input_name='Group.IndicativeRebate'), namespaceprefix_ , eol_))
        if self.Group_IndicativeRebateDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.IndicativeRebateDelta1>%s</%sGroup.IndicativeRebateDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_IndicativeRebateDelta1, input_name='Group.IndicativeRebateDelta1'), namespaceprefix_ , eol_))
        if self.Group_IndicativeRebateDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.IndicativeRebateDelta30>%s</%sGroup.IndicativeRebateDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_IndicativeRebateDelta30, input_name='Group.IndicativeRebateDelta30'), namespaceprefix_ , eol_))
        if self.Group_IndicativeRebateDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.IndicativeRebateDelta7>%s</%sGroup.IndicativeRebateDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_IndicativeRebateDelta7, input_name='Group.IndicativeRebateDelta7'), namespaceprefix_ , eol_))
        if self.Group_MarketCap is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.MarketCap>%s</%sGroup.MarketCap>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_MarketCap, input_name='Group.MarketCap'), namespaceprefix_ , eol_))
        if self.Group_PcFreeFloatValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.PcFreeFloatValueOnLoan>%s</%sGroup.PcFreeFloatValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_PcFreeFloatValueOnLoan, input_name='Group.PcFreeFloatValueOnLoan'), namespaceprefix_ , eol_))
        if self.Group_PcIssueValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.PcIssueValueOnLoan>%s</%sGroup.PcIssueValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_PcIssueValueOnLoan, input_name='Group.PcIssueValueOnLoan'), namespaceprefix_ , eol_))
        if self.Group_PcIssueValueOnLoanDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.PcIssueValueOnLoanDelta1>%s</%sGroup.PcIssueValueOnLoanDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_PcIssueValueOnLoanDelta1, input_name='Group.PcIssueValueOnLoanDelta1'), namespaceprefix_ , eol_))
        if self.Group_PcIssueValueOnLoanDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.PcIssueValueOnLoanDelta30>%s</%sGroup.PcIssueValueOnLoanDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_PcIssueValueOnLoanDelta30, input_name='Group.PcIssueValueOnLoanDelta30'), namespaceprefix_ , eol_))
        if self.Group_PcIssueValueOnLoanDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.PcIssueValueOnLoanDelta7>%s</%sGroup.PcIssueValueOnLoanDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_PcIssueValueOnLoanDelta7, input_name='Group.PcIssueValueOnLoanDelta7'), namespaceprefix_ , eol_))
        if self.Group_PcSharesOutstandingOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.PcSharesOutstandingOnLoan>%s</%sGroup.PcSharesOutstandingOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_PcSharesOutstandingOnLoan, input_name='Group.PcSharesOutstandingOnLoan'), namespaceprefix_ , eol_))
        if self.Group_PcSharesOutstandingOnLoanDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.PcSharesOutstandingOnLoanDelta1>%s</%sGroup.PcSharesOutstandingOnLoanDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_PcSharesOutstandingOnLoanDelta1, input_name='Group.PcSharesOutstandingOnLoanDelta1'), namespaceprefix_ , eol_))
        if self.Group_PcSharesOutstandingOnLoanDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.PcSharesOutstandingOnLoanDelta30>%s</%sGroup.PcSharesOutstandingOnLoanDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_PcSharesOutstandingOnLoanDelta30, input_name='Group.PcSharesOutstandingOnLoanDelta30'), namespaceprefix_ , eol_))
        if self.Group_PcSharesOutstandingOnLoanDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.PcSharesOutstandingOnLoanDelta7>%s</%sGroup.PcSharesOutstandingOnLoanDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_PcSharesOutstandingOnLoanDelta7, input_name='Group.PcSharesOutstandingOnLoanDelta7'), namespaceprefix_ , eol_))
        if self.Group_Price is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.Price>%s</%sGroup.Price>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_Price, input_name='Group.Price'), namespaceprefix_ , eol_))
        if self.Group_PriceCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.PriceCurrency>%s</%sGroup.PriceCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Group_PriceCurrency), input_name='Group.PriceCurrency')), namespaceprefix_ , eol_))
        if self.Group_PriceDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.PriceDelta1>%s</%sGroup.PriceDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_PriceDelta1, input_name='Group.PriceDelta1'), namespaceprefix_ , eol_))
        if self.Group_PriceDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.PriceDelta30>%s</%sGroup.PriceDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_PriceDelta30, input_name='Group.PriceDelta30'), namespaceprefix_ , eol_))
        if self.Group_PriceDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.PriceDelta7>%s</%sGroup.PriceDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_PriceDelta7, input_name='Group.PriceDelta7'), namespaceprefix_ , eol_))
        if self.Group_SharesOutstanding is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SharesOutstanding>%s</%sGroup.SharesOutstanding>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SharesOutstanding, input_name='Group.SharesOutstanding'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Group.DaysToCover' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_DaysToCover')
            self.Group_DaysToCover = fval_
        elif nodeName_ == 'Group.DaysToCoverDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_DaysToCoverDelta1')
            self.Group_DaysToCoverDelta1 = fval_
        elif nodeName_ == 'Group.DaysToCoverDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_DaysToCoverDelta1Pc')
            self.Group_DaysToCoverDelta1Pc = fval_
        elif nodeName_ == 'Group.DaysToCoverDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_DaysToCoverDelta30')
            self.Group_DaysToCoverDelta30 = fval_
        elif nodeName_ == 'Group.DaysToCoverDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_DaysToCoverDelta30Pc')
            self.Group_DaysToCoverDelta30Pc = fval_
        elif nodeName_ == 'Group.DaysToCoverDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_DaysToCoverDelta7')
            self.Group_DaysToCoverDelta7 = fval_
        elif nodeName_ == 'Group.DaysToCoverDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_DaysToCoverDelta7Pc')
            self.Group_DaysToCoverDelta7Pc = fval_
        elif nodeName_ == 'Group.IndicativeFee' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_IndicativeFee')
            self.Group_IndicativeFee = fval_
        elif nodeName_ == 'Group.IndicativeFeeDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_IndicativeFeeDelta1')
            self.Group_IndicativeFeeDelta1 = fval_
        elif nodeName_ == 'Group.IndicativeFeeDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_IndicativeFeeDelta30')
            self.Group_IndicativeFeeDelta30 = fval_
        elif nodeName_ == 'Group.IndicativeFeeDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_IndicativeFeeDelta7')
            self.Group_IndicativeFeeDelta7 = fval_
        elif nodeName_ == 'Group.IndicativeRebate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_IndicativeRebate')
            self.Group_IndicativeRebate = fval_
        elif nodeName_ == 'Group.IndicativeRebateDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_IndicativeRebateDelta1')
            self.Group_IndicativeRebateDelta1 = fval_
        elif nodeName_ == 'Group.IndicativeRebateDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_IndicativeRebateDelta30')
            self.Group_IndicativeRebateDelta30 = fval_
        elif nodeName_ == 'Group.IndicativeRebateDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_IndicativeRebateDelta7')
            self.Group_IndicativeRebateDelta7 = fval_
        elif nodeName_ == 'Group.MarketCap' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_MarketCap')
            self.Group_MarketCap = fval_
        elif nodeName_ == 'Group.PcFreeFloatValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_PcFreeFloatValueOnLoan')
            self.Group_PcFreeFloatValueOnLoan = fval_
        elif nodeName_ == 'Group.PcIssueValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_PcIssueValueOnLoan')
            self.Group_PcIssueValueOnLoan = fval_
        elif nodeName_ == 'Group.PcIssueValueOnLoanDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_PcIssueValueOnLoanDelta1')
            self.Group_PcIssueValueOnLoanDelta1 = fval_
        elif nodeName_ == 'Group.PcIssueValueOnLoanDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_PcIssueValueOnLoanDelta30')
            self.Group_PcIssueValueOnLoanDelta30 = fval_
        elif nodeName_ == 'Group.PcIssueValueOnLoanDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_PcIssueValueOnLoanDelta7')
            self.Group_PcIssueValueOnLoanDelta7 = fval_
        elif nodeName_ == 'Group.PcSharesOutstandingOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_PcSharesOutstandingOnLoan')
            self.Group_PcSharesOutstandingOnLoan = fval_
        elif nodeName_ == 'Group.PcSharesOutstandingOnLoanDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_PcSharesOutstandingOnLoanDelta1')
            self.Group_PcSharesOutstandingOnLoanDelta1 = fval_
        elif nodeName_ == 'Group.PcSharesOutstandingOnLoanDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_PcSharesOutstandingOnLoanDelta30')
            self.Group_PcSharesOutstandingOnLoanDelta30 = fval_
        elif nodeName_ == 'Group.PcSharesOutstandingOnLoanDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_PcSharesOutstandingOnLoanDelta7')
            self.Group_PcSharesOutstandingOnLoanDelta7 = fval_
        elif nodeName_ == 'Group.Price' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_Price')
            self.Group_Price = fval_
        elif nodeName_ == 'Group.PriceCurrency':
            Group_PriceCurrency_ = child_.text
            Group_PriceCurrency_ = self.gds_validate_string(Group_PriceCurrency_, node, 'Group_PriceCurrency')
            self.Group_PriceCurrency = Group_PriceCurrency_
        elif nodeName_ == 'Group.PriceDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_PriceDelta1')
            self.Group_PriceDelta1 = fval_
        elif nodeName_ == 'Group.PriceDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_PriceDelta30')
            self.Group_PriceDelta30 = fval_
        elif nodeName_ == 'Group.PriceDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_PriceDelta7')
            self.Group_PriceDelta7 = fval_
        elif nodeName_ == 'Group.SharesOutstanding' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SharesOutstanding')
            self.Group_SharesOutstanding = fval_
# end class MarketColourType


class RerateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Group_ReratePreviousVWAF=None, Group_ReratePreviousVWAR=None, Group_RerateTransactionCount=None, Group_RerateTransactionCountDown=None, Group_RerateTransactionCountUp=None, Group_RerateValueOnLoan=None, Group_RerateValueOnLoanDown=None, Group_RerateValueOnLoanUp=None, Group_RerateVWAF=None, Group_RerateVWAFDelta1=None, Group_RerateVWAFDelta1Pc=None, Group_RerateVWAR=None, Group_RerateVWARDelta1=None, Group_RerateVWARDelta1Pc=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Group_ReratePreviousVWAF = Group_ReratePreviousVWAF
        self.Group_ReratePreviousVWAR = Group_ReratePreviousVWAR
        self.Group_RerateTransactionCount = Group_RerateTransactionCount
        self.Group_RerateTransactionCountDown = Group_RerateTransactionCountDown
        self.Group_RerateTransactionCountUp = Group_RerateTransactionCountUp
        self.Group_RerateValueOnLoan = Group_RerateValueOnLoan
        self.Group_RerateValueOnLoanDown = Group_RerateValueOnLoanDown
        self.Group_RerateValueOnLoanUp = Group_RerateValueOnLoanUp
        self.Group_RerateVWAF = Group_RerateVWAF
        self.Group_RerateVWAFDelta1 = Group_RerateVWAFDelta1
        self.Group_RerateVWAFDelta1Pc = Group_RerateVWAFDelta1Pc
        self.Group_RerateVWAR = Group_RerateVWAR
        self.Group_RerateVWARDelta1 = Group_RerateVWARDelta1
        self.Group_RerateVWARDelta1Pc = Group_RerateVWARDelta1Pc
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RerateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RerateType.subclass:
            return RerateType.subclass(*args_, **kwargs_)
        else:
            return RerateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Group_ReratePreviousVWAF(self):
        return self.Group_ReratePreviousVWAF
    def set_Group_ReratePreviousVWAF(self, Group_ReratePreviousVWAF):
        self.Group_ReratePreviousVWAF = Group_ReratePreviousVWAF
    def get_Group_ReratePreviousVWAR(self):
        return self.Group_ReratePreviousVWAR
    def set_Group_ReratePreviousVWAR(self, Group_ReratePreviousVWAR):
        self.Group_ReratePreviousVWAR = Group_ReratePreviousVWAR
    def get_Group_RerateTransactionCount(self):
        return self.Group_RerateTransactionCount
    def set_Group_RerateTransactionCount(self, Group_RerateTransactionCount):
        self.Group_RerateTransactionCount = Group_RerateTransactionCount
    def get_Group_RerateTransactionCountDown(self):
        return self.Group_RerateTransactionCountDown
    def set_Group_RerateTransactionCountDown(self, Group_RerateTransactionCountDown):
        self.Group_RerateTransactionCountDown = Group_RerateTransactionCountDown
    def get_Group_RerateTransactionCountUp(self):
        return self.Group_RerateTransactionCountUp
    def set_Group_RerateTransactionCountUp(self, Group_RerateTransactionCountUp):
        self.Group_RerateTransactionCountUp = Group_RerateTransactionCountUp
    def get_Group_RerateValueOnLoan(self):
        return self.Group_RerateValueOnLoan
    def set_Group_RerateValueOnLoan(self, Group_RerateValueOnLoan):
        self.Group_RerateValueOnLoan = Group_RerateValueOnLoan
    def get_Group_RerateValueOnLoanDown(self):
        return self.Group_RerateValueOnLoanDown
    def set_Group_RerateValueOnLoanDown(self, Group_RerateValueOnLoanDown):
        self.Group_RerateValueOnLoanDown = Group_RerateValueOnLoanDown
    def get_Group_RerateValueOnLoanUp(self):
        return self.Group_RerateValueOnLoanUp
    def set_Group_RerateValueOnLoanUp(self, Group_RerateValueOnLoanUp):
        self.Group_RerateValueOnLoanUp = Group_RerateValueOnLoanUp
    def get_Group_RerateVWAF(self):
        return self.Group_RerateVWAF
    def set_Group_RerateVWAF(self, Group_RerateVWAF):
        self.Group_RerateVWAF = Group_RerateVWAF
    def get_Group_RerateVWAFDelta1(self):
        return self.Group_RerateVWAFDelta1
    def set_Group_RerateVWAFDelta1(self, Group_RerateVWAFDelta1):
        self.Group_RerateVWAFDelta1 = Group_RerateVWAFDelta1
    def get_Group_RerateVWAFDelta1Pc(self):
        return self.Group_RerateVWAFDelta1Pc
    def set_Group_RerateVWAFDelta1Pc(self, Group_RerateVWAFDelta1Pc):
        self.Group_RerateVWAFDelta1Pc = Group_RerateVWAFDelta1Pc
    def get_Group_RerateVWAR(self):
        return self.Group_RerateVWAR
    def set_Group_RerateVWAR(self, Group_RerateVWAR):
        self.Group_RerateVWAR = Group_RerateVWAR
    def get_Group_RerateVWARDelta1(self):
        return self.Group_RerateVWARDelta1
    def set_Group_RerateVWARDelta1(self, Group_RerateVWARDelta1):
        self.Group_RerateVWARDelta1 = Group_RerateVWARDelta1
    def get_Group_RerateVWARDelta1Pc(self):
        return self.Group_RerateVWARDelta1Pc
    def set_Group_RerateVWARDelta1Pc(self, Group_RerateVWARDelta1Pc):
        self.Group_RerateVWARDelta1Pc = Group_RerateVWARDelta1Pc
    def hasContent_(self):
        if (
            self.Group_ReratePreviousVWAF is not None or
            self.Group_ReratePreviousVWAR is not None or
            self.Group_RerateTransactionCount is not None or
            self.Group_RerateTransactionCountDown is not None or
            self.Group_RerateTransactionCountUp is not None or
            self.Group_RerateValueOnLoan is not None or
            self.Group_RerateValueOnLoanDown is not None or
            self.Group_RerateValueOnLoanUp is not None or
            self.Group_RerateVWAF is not None or
            self.Group_RerateVWAFDelta1 is not None or
            self.Group_RerateVWAFDelta1Pc is not None or
            self.Group_RerateVWAR is not None or
            self.Group_RerateVWARDelta1 is not None or
            self.Group_RerateVWARDelta1Pc is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RerateType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RerateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RerateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RerateType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RerateType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RerateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Group_ReratePreviousVWAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ReratePreviousVWAF>%s</%sGroup.ReratePreviousVWAF>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ReratePreviousVWAF, input_name='Group.ReratePreviousVWAF'), namespaceprefix_ , eol_))
        if self.Group_ReratePreviousVWAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ReratePreviousVWAR>%s</%sGroup.ReratePreviousVWAR>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ReratePreviousVWAR, input_name='Group.ReratePreviousVWAR'), namespaceprefix_ , eol_))
        if self.Group_RerateTransactionCount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.RerateTransactionCount>%s</%sGroup.RerateTransactionCount>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_RerateTransactionCount, input_name='Group.RerateTransactionCount'), namespaceprefix_ , eol_))
        if self.Group_RerateTransactionCountDown is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.RerateTransactionCountDown>%s</%sGroup.RerateTransactionCountDown>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_RerateTransactionCountDown, input_name='Group.RerateTransactionCountDown'), namespaceprefix_ , eol_))
        if self.Group_RerateTransactionCountUp is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.RerateTransactionCountUp>%s</%sGroup.RerateTransactionCountUp>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_RerateTransactionCountUp, input_name='Group.RerateTransactionCountUp'), namespaceprefix_ , eol_))
        if self.Group_RerateValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.RerateValueOnLoan>%s</%sGroup.RerateValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_RerateValueOnLoan, input_name='Group.RerateValueOnLoan'), namespaceprefix_ , eol_))
        if self.Group_RerateValueOnLoanDown is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.RerateValueOnLoanDown>%s</%sGroup.RerateValueOnLoanDown>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_RerateValueOnLoanDown, input_name='Group.RerateValueOnLoanDown'), namespaceprefix_ , eol_))
        if self.Group_RerateValueOnLoanUp is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.RerateValueOnLoanUp>%s</%sGroup.RerateValueOnLoanUp>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_RerateValueOnLoanUp, input_name='Group.RerateValueOnLoanUp'), namespaceprefix_ , eol_))
        if self.Group_RerateVWAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.RerateVWAF>%s</%sGroup.RerateVWAF>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_RerateVWAF, input_name='Group.RerateVWAF'), namespaceprefix_ , eol_))
        if self.Group_RerateVWAFDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.RerateVWAFDelta1>%s</%sGroup.RerateVWAFDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_RerateVWAFDelta1, input_name='Group.RerateVWAFDelta1'), namespaceprefix_ , eol_))
        if self.Group_RerateVWAFDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.RerateVWAFDelta1Pc>%s</%sGroup.RerateVWAFDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_RerateVWAFDelta1Pc, input_name='Group.RerateVWAFDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_RerateVWAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.RerateVWAR>%s</%sGroup.RerateVWAR>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_RerateVWAR, input_name='Group.RerateVWAR'), namespaceprefix_ , eol_))
        if self.Group_RerateVWARDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.RerateVWARDelta1>%s</%sGroup.RerateVWARDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_RerateVWARDelta1, input_name='Group.RerateVWARDelta1'), namespaceprefix_ , eol_))
        if self.Group_RerateVWARDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.RerateVWARDelta1Pc>%s</%sGroup.RerateVWARDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_RerateVWARDelta1Pc, input_name='Group.RerateVWARDelta1Pc'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Group.ReratePreviousVWAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ReratePreviousVWAF')
            self.Group_ReratePreviousVWAF = fval_
        elif nodeName_ == 'Group.ReratePreviousVWAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ReratePreviousVWAR')
            self.Group_ReratePreviousVWAR = fval_
        elif nodeName_ == 'Group.RerateTransactionCount' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_RerateTransactionCount')
            self.Group_RerateTransactionCount = fval_
        elif nodeName_ == 'Group.RerateTransactionCountDown' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_RerateTransactionCountDown')
            self.Group_RerateTransactionCountDown = fval_
        elif nodeName_ == 'Group.RerateTransactionCountUp' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_RerateTransactionCountUp')
            self.Group_RerateTransactionCountUp = fval_
        elif nodeName_ == 'Group.RerateValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_RerateValueOnLoan')
            self.Group_RerateValueOnLoan = fval_
        elif nodeName_ == 'Group.RerateValueOnLoanDown' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_RerateValueOnLoanDown')
            self.Group_RerateValueOnLoanDown = fval_
        elif nodeName_ == 'Group.RerateValueOnLoanUp' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_RerateValueOnLoanUp')
            self.Group_RerateValueOnLoanUp = fval_
        elif nodeName_ == 'Group.RerateVWAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_RerateVWAF')
            self.Group_RerateVWAF = fval_
        elif nodeName_ == 'Group.RerateVWAFDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_RerateVWAFDelta1')
            self.Group_RerateVWAFDelta1 = fval_
        elif nodeName_ == 'Group.RerateVWAFDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_RerateVWAFDelta1Pc')
            self.Group_RerateVWAFDelta1Pc = fval_
        elif nodeName_ == 'Group.RerateVWAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_RerateVWAR')
            self.Group_RerateVWAR = fval_
        elif nodeName_ == 'Group.RerateVWARDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_RerateVWARDelta1')
            self.Group_RerateVWARDelta1 = fval_
        elif nodeName_ == 'Group.RerateVWARDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_RerateVWARDelta1Pc')
            self.Group_RerateVWARDelta1Pc = fval_
# end class RerateType


class ShortSqueezeType78(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Group_CompositeScore=None, Group_NewPositions=None, Group_OutOfMoneyPct=None, Group_ProfitandLossImpact=None, Group_TransactionDuration=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Group_CompositeScore = Group_CompositeScore
        self.Group_NewPositions = Group_NewPositions
        self.Group_OutOfMoneyPct = Group_OutOfMoneyPct
        self.Group_ProfitandLossImpact = Group_ProfitandLossImpact
        self.Group_TransactionDuration = Group_TransactionDuration
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShortSqueezeType78)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShortSqueezeType78.subclass:
            return ShortSqueezeType78.subclass(*args_, **kwargs_)
        else:
            return ShortSqueezeType78(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Group_CompositeScore(self):
        return self.Group_CompositeScore
    def set_Group_CompositeScore(self, Group_CompositeScore):
        self.Group_CompositeScore = Group_CompositeScore
    def get_Group_NewPositions(self):
        return self.Group_NewPositions
    def set_Group_NewPositions(self, Group_NewPositions):
        self.Group_NewPositions = Group_NewPositions
    def get_Group_OutOfMoneyPct(self):
        return self.Group_OutOfMoneyPct
    def set_Group_OutOfMoneyPct(self, Group_OutOfMoneyPct):
        self.Group_OutOfMoneyPct = Group_OutOfMoneyPct
    def get_Group_ProfitandLossImpact(self):
        return self.Group_ProfitandLossImpact
    def set_Group_ProfitandLossImpact(self, Group_ProfitandLossImpact):
        self.Group_ProfitandLossImpact = Group_ProfitandLossImpact
    def get_Group_TransactionDuration(self):
        return self.Group_TransactionDuration
    def set_Group_TransactionDuration(self, Group_TransactionDuration):
        self.Group_TransactionDuration = Group_TransactionDuration
    def hasContent_(self):
        if (
            self.Group_CompositeScore is not None or
            self.Group_NewPositions is not None or
            self.Group_OutOfMoneyPct is not None or
            self.Group_ProfitandLossImpact is not None or
            self.Group_TransactionDuration is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShortSqueezeType78', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShortSqueezeType78')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShortSqueezeType78')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShortSqueezeType78', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShortSqueezeType78'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShortSqueezeType78', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Group_CompositeScore is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.CompositeScore>%s</%sGroup.CompositeScore>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_CompositeScore, input_name='Group.CompositeScore'), namespaceprefix_ , eol_))
        if self.Group_NewPositions is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.NewPositions>%s</%sGroup.NewPositions>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_NewPositions, input_name='Group.NewPositions'), namespaceprefix_ , eol_))
        if self.Group_OutOfMoneyPct is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.OutOfMoneyPct>%s</%sGroup.OutOfMoneyPct>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_OutOfMoneyPct, input_name='Group.OutOfMoneyPct'), namespaceprefix_ , eol_))
        if self.Group_ProfitandLossImpact is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ProfitandLossImpact>%s</%sGroup.ProfitandLossImpact>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ProfitandLossImpact, input_name='Group.ProfitandLossImpact'), namespaceprefix_ , eol_))
        if self.Group_TransactionDuration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.TransactionDuration>%s</%sGroup.TransactionDuration>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_TransactionDuration, input_name='Group.TransactionDuration'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Group.CompositeScore' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_CompositeScore')
            self.Group_CompositeScore = fval_
        elif nodeName_ == 'Group.NewPositions' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_NewPositions')
            self.Group_NewPositions = fval_
        elif nodeName_ == 'Group.OutOfMoneyPct' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_OutOfMoneyPct')
            self.Group_OutOfMoneyPct = fval_
        elif nodeName_ == 'Group.ProfitandLossImpact' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ProfitandLossImpact')
            self.Group_ProfitandLossImpact = fval_
        elif nodeName_ == 'Group.TransactionDuration' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_TransactionDuration')
            self.Group_TransactionDuration = fval_
# end class ShortSqueezeType78


class TradingType79(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Client_DailyCost=None, Client_DailyRevenue=None, Client_MarketShare=None, Client_MarketShareDelta1=None, Client_MarketShareDelta30=None, Client_MarketShareDelta7=None, Client_MarketShareRank=None, Client_OpportunityGainLoss=None, Client_QuantityOnLoan=None, Client_QuantityOnLoanDelta1=None, Client_QuantityOnLoanDelta1Pc=None, Client_QuantityOnLoanDelta30=None, Client_QuantityOnLoanDelta30Pc=None, Client_QuantityOnLoanDelta7=None, Client_QuantityOnLoanDelta7Pc=None, Client_SAF=None, Client_SAFDelta1=None, Client_SAFDelta1Pc=None, Client_SAFDelta30=None, Client_SAFDelta30Pc=None, Client_SAFDelta7=None, Client_SAFDelta7Pc=None, Client_SAR=None, Client_SARDelta1=None, Client_SARDelta1Pc=None, Client_SARDelta30=None, Client_SARDelta30Pc=None, Client_SARDelta7=None, Client_SARDelta7Pc=None, Client_SATenure=None, Client_Utilisation=None, Client_UtilisationByQuantity=None, Client_UtilisationByQuantityDelta1=None, Client_UtilisationByQuantityDelta30=None, Client_UtilisationByQuantityDelta7=None, Client_UtilisationDelta1=None, Client_UtilisationDelta30=None, Client_UtilisationDelta7=None, Client_ValueOnLoan=None, Client_ValueOnLoanDelta1=None, Client_ValueOnLoanDelta1Pc=None, Client_ValueOnLoanDelta30=None, Client_ValueOnLoanDelta30Pc=None, Client_ValueOnLoanDelta7=None, Client_ValueOnLoanDelta7Pc=None, Client_VWAF=None, Client_VWAF1=None, Client_VWAF30=None, Client_VWAF7=None, Client_VWAFDelta1=None, Client_VWAFDelta1Pc=None, Client_VWAFDelta30=None, Client_VWAFDelta30Pc=None, Client_VWAFDelta7=None, Client_VWAFDelta7Pc=None, Client_VWAR=None, Client_VWAR1=None, Client_VWAR30=None, Client_VWAR7=None, Client_VWARDelta1=None, Client_VWARDelta1Pc=None, Client_VWARDelta30=None, Client_VWARDelta30Pc=None, Client_VWARDelta7=None, Client_VWARDelta7Pc=None, Group_ActiveLendingAgents=None, Group_BenchmarkFee=None, Group_BenchmarkFeeDelta1=None, Group_BenchmarkFeeDelta1Pc=None, Group_BenchmarkFeeDelta30=None, Group_BenchmarkFeeDelta30Pc=None, Group_BenchmarkFeeDelta7=None, Group_BenchmarkFeeDelta7Pc=None, Group_BenchmarkRebate=None, Group_BenchmarkRebateDelta1=None, Group_BenchmarkRebateDelta1Pc=None, Group_BenchmarkRebateDelta30=None, Group_BenchmarkRebateDelta30Pc=None, Group_BenchmarkRebateDelta7=None, Group_BenchmarkRebateDelta7Pc=None, Group_BorrowerConcentration=None, Group_HasDividendTrading=None, Group_LenderConcentration=None, Group_PrimeBrokers=None, Group_QuantityOnLoan=None, Group_QuantityOnLoanDelta1=None, Group_QuantityOnLoanDelta1Pc=None, Group_QuantityOnLoanDelta30=None, Group_QuantityOnLoanDelta30Pc=None, Group_QuantityOnLoanDelta7=None, Group_QuantityOnLoanDelta7Pc=None, Group_SAF=None, Group_SAFDelta1=None, Group_SAFDelta1Pc=None, Group_SAFDelta30=None, Group_SAFDelta30Pc=None, Group_SAFDelta7=None, Group_SAFDelta7Pc=None, Group_SAR=None, Group_SARDelta1=None, Group_SARDelta1Pc=None, Group_SARDelta30=None, Group_SARDelta30Pc=None, Group_SARDelta7=None, Group_SARDelta7Pc=None, Group_SATenure=None, Group_ShortLoanQuantity=None, Group_ShortLoanValue=None, Group_Utilisation=None, Group_UtilisationByQuantity=None, Group_UtilisationByQuantityDelta1=None, Group_UtilisationByQuantityDelta30=None, Group_UtilisationByQuantityDelta7=None, Group_UtilisationDelta1=None, Group_UtilisationDelta30=None, Group_UtilisationDelta7=None, Group_ValueOnLoan=None, Group_ValueOnLoanDelta1=None, Group_ValueOnLoanDelta1Pc=None, Group_ValueOnLoanDelta30=None, Group_ValueOnLoanDelta30Pc=None, Group_ValueOnLoanDelta7=None, Group_ValueOnLoanDelta7Pc=None, Group_VWAF=None, Group_VWAF1=None, Group_VWAF30=None, Group_VWAF7=None, Group_VWAFDelta1=None, Group_VWAFDelta1Pc=None, Group_VWAFDelta30=None, Group_VWAFDelta30Pc=None, Group_VWAFDelta7=None, Group_VWAFDelta7Pc=None, Group_VWAR=None, Group_VWAR1=None, Group_VWAR30=None, Group_VWAR7=None, Group_VWARDelta1=None, Group_VWARDelta1Pc=None, Group_VWARDelta30=None, Group_VWARDelta30Pc=None, Group_VWARDelta7=None, Group_VWARDelta7Pc=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Client_DailyCost = Client_DailyCost
        self.Client_DailyRevenue = Client_DailyRevenue
        self.Client_MarketShare = Client_MarketShare
        self.Client_MarketShareDelta1 = Client_MarketShareDelta1
        self.Client_MarketShareDelta30 = Client_MarketShareDelta30
        self.Client_MarketShareDelta7 = Client_MarketShareDelta7
        self.Client_MarketShareRank = Client_MarketShareRank
        self.Client_OpportunityGainLoss = Client_OpportunityGainLoss
        self.Client_QuantityOnLoan = Client_QuantityOnLoan
        self.Client_QuantityOnLoanDelta1 = Client_QuantityOnLoanDelta1
        self.Client_QuantityOnLoanDelta1Pc = Client_QuantityOnLoanDelta1Pc
        self.Client_QuantityOnLoanDelta30 = Client_QuantityOnLoanDelta30
        self.Client_QuantityOnLoanDelta30Pc = Client_QuantityOnLoanDelta30Pc
        self.Client_QuantityOnLoanDelta7 = Client_QuantityOnLoanDelta7
        self.Client_QuantityOnLoanDelta7Pc = Client_QuantityOnLoanDelta7Pc
        self.Client_SAF = Client_SAF
        self.Client_SAFDelta1 = Client_SAFDelta1
        self.Client_SAFDelta1Pc = Client_SAFDelta1Pc
        self.Client_SAFDelta30 = Client_SAFDelta30
        self.Client_SAFDelta30Pc = Client_SAFDelta30Pc
        self.Client_SAFDelta7 = Client_SAFDelta7
        self.Client_SAFDelta7Pc = Client_SAFDelta7Pc
        self.Client_SAR = Client_SAR
        self.Client_SARDelta1 = Client_SARDelta1
        self.Client_SARDelta1Pc = Client_SARDelta1Pc
        self.Client_SARDelta30 = Client_SARDelta30
        self.Client_SARDelta30Pc = Client_SARDelta30Pc
        self.Client_SARDelta7 = Client_SARDelta7
        self.Client_SARDelta7Pc = Client_SARDelta7Pc
        self.Client_SATenure = Client_SATenure
        self.Client_Utilisation = Client_Utilisation
        self.Client_UtilisationByQuantity = Client_UtilisationByQuantity
        self.Client_UtilisationByQuantityDelta1 = Client_UtilisationByQuantityDelta1
        self.Client_UtilisationByQuantityDelta30 = Client_UtilisationByQuantityDelta30
        self.Client_UtilisationByQuantityDelta7 = Client_UtilisationByQuantityDelta7
        self.Client_UtilisationDelta1 = Client_UtilisationDelta1
        self.Client_UtilisationDelta30 = Client_UtilisationDelta30
        self.Client_UtilisationDelta7 = Client_UtilisationDelta7
        self.Client_ValueOnLoan = Client_ValueOnLoan
        self.Client_ValueOnLoanDelta1 = Client_ValueOnLoanDelta1
        self.Client_ValueOnLoanDelta1Pc = Client_ValueOnLoanDelta1Pc
        self.Client_ValueOnLoanDelta30 = Client_ValueOnLoanDelta30
        self.Client_ValueOnLoanDelta30Pc = Client_ValueOnLoanDelta30Pc
        self.Client_ValueOnLoanDelta7 = Client_ValueOnLoanDelta7
        self.Client_ValueOnLoanDelta7Pc = Client_ValueOnLoanDelta7Pc
        self.Client_VWAF = Client_VWAF
        self.Client_VWAF1 = Client_VWAF1
        self.Client_VWAF30 = Client_VWAF30
        self.Client_VWAF7 = Client_VWAF7
        self.Client_VWAFDelta1 = Client_VWAFDelta1
        self.Client_VWAFDelta1Pc = Client_VWAFDelta1Pc
        self.Client_VWAFDelta30 = Client_VWAFDelta30
        self.Client_VWAFDelta30Pc = Client_VWAFDelta30Pc
        self.Client_VWAFDelta7 = Client_VWAFDelta7
        self.Client_VWAFDelta7Pc = Client_VWAFDelta7Pc
        self.Client_VWAR = Client_VWAR
        self.Client_VWAR1 = Client_VWAR1
        self.Client_VWAR30 = Client_VWAR30
        self.Client_VWAR7 = Client_VWAR7
        self.Client_VWARDelta1 = Client_VWARDelta1
        self.Client_VWARDelta1Pc = Client_VWARDelta1Pc
        self.Client_VWARDelta30 = Client_VWARDelta30
        self.Client_VWARDelta30Pc = Client_VWARDelta30Pc
        self.Client_VWARDelta7 = Client_VWARDelta7
        self.Client_VWARDelta7Pc = Client_VWARDelta7Pc
        self.Group_ActiveLendingAgents = Group_ActiveLendingAgents
        self.Group_BenchmarkFee = Group_BenchmarkFee
        self.Group_BenchmarkFeeDelta1 = Group_BenchmarkFeeDelta1
        self.Group_BenchmarkFeeDelta1Pc = Group_BenchmarkFeeDelta1Pc
        self.Group_BenchmarkFeeDelta30 = Group_BenchmarkFeeDelta30
        self.Group_BenchmarkFeeDelta30Pc = Group_BenchmarkFeeDelta30Pc
        self.Group_BenchmarkFeeDelta7 = Group_BenchmarkFeeDelta7
        self.Group_BenchmarkFeeDelta7Pc = Group_BenchmarkFeeDelta7Pc
        self.Group_BenchmarkRebate = Group_BenchmarkRebate
        self.Group_BenchmarkRebateDelta1 = Group_BenchmarkRebateDelta1
        self.Group_BenchmarkRebateDelta1Pc = Group_BenchmarkRebateDelta1Pc
        self.Group_BenchmarkRebateDelta30 = Group_BenchmarkRebateDelta30
        self.Group_BenchmarkRebateDelta30Pc = Group_BenchmarkRebateDelta30Pc
        self.Group_BenchmarkRebateDelta7 = Group_BenchmarkRebateDelta7
        self.Group_BenchmarkRebateDelta7Pc = Group_BenchmarkRebateDelta7Pc
        self.Group_BorrowerConcentration = Group_BorrowerConcentration
        self.Group_HasDividendTrading = Group_HasDividendTrading
        self.Group_LenderConcentration = Group_LenderConcentration
        self.Group_PrimeBrokers = Group_PrimeBrokers
        self.Group_QuantityOnLoan = Group_QuantityOnLoan
        self.Group_QuantityOnLoanDelta1 = Group_QuantityOnLoanDelta1
        self.Group_QuantityOnLoanDelta1Pc = Group_QuantityOnLoanDelta1Pc
        self.Group_QuantityOnLoanDelta30 = Group_QuantityOnLoanDelta30
        self.Group_QuantityOnLoanDelta30Pc = Group_QuantityOnLoanDelta30Pc
        self.Group_QuantityOnLoanDelta7 = Group_QuantityOnLoanDelta7
        self.Group_QuantityOnLoanDelta7Pc = Group_QuantityOnLoanDelta7Pc
        self.Group_SAF = Group_SAF
        self.Group_SAFDelta1 = Group_SAFDelta1
        self.Group_SAFDelta1Pc = Group_SAFDelta1Pc
        self.Group_SAFDelta30 = Group_SAFDelta30
        self.Group_SAFDelta30Pc = Group_SAFDelta30Pc
        self.Group_SAFDelta7 = Group_SAFDelta7
        self.Group_SAFDelta7Pc = Group_SAFDelta7Pc
        self.Group_SAR = Group_SAR
        self.Group_SARDelta1 = Group_SARDelta1
        self.Group_SARDelta1Pc = Group_SARDelta1Pc
        self.Group_SARDelta30 = Group_SARDelta30
        self.Group_SARDelta30Pc = Group_SARDelta30Pc
        self.Group_SARDelta7 = Group_SARDelta7
        self.Group_SARDelta7Pc = Group_SARDelta7Pc
        self.Group_SATenure = Group_SATenure
        self.Group_ShortLoanQuantity = Group_ShortLoanQuantity
        self.Group_ShortLoanValue = Group_ShortLoanValue
        self.Group_Utilisation = Group_Utilisation
        self.Group_UtilisationByQuantity = Group_UtilisationByQuantity
        self.Group_UtilisationByQuantityDelta1 = Group_UtilisationByQuantityDelta1
        self.Group_UtilisationByQuantityDelta30 = Group_UtilisationByQuantityDelta30
        self.Group_UtilisationByQuantityDelta7 = Group_UtilisationByQuantityDelta7
        self.Group_UtilisationDelta1 = Group_UtilisationDelta1
        self.Group_UtilisationDelta30 = Group_UtilisationDelta30
        self.Group_UtilisationDelta7 = Group_UtilisationDelta7
        self.Group_ValueOnLoan = Group_ValueOnLoan
        self.Group_ValueOnLoanDelta1 = Group_ValueOnLoanDelta1
        self.Group_ValueOnLoanDelta1Pc = Group_ValueOnLoanDelta1Pc
        self.Group_ValueOnLoanDelta30 = Group_ValueOnLoanDelta30
        self.Group_ValueOnLoanDelta30Pc = Group_ValueOnLoanDelta30Pc
        self.Group_ValueOnLoanDelta7 = Group_ValueOnLoanDelta7
        self.Group_ValueOnLoanDelta7Pc = Group_ValueOnLoanDelta7Pc
        self.Group_VWAF = Group_VWAF
        self.Group_VWAF1 = Group_VWAF1
        self.Group_VWAF30 = Group_VWAF30
        self.Group_VWAF7 = Group_VWAF7
        self.Group_VWAFDelta1 = Group_VWAFDelta1
        self.Group_VWAFDelta1Pc = Group_VWAFDelta1Pc
        self.Group_VWAFDelta30 = Group_VWAFDelta30
        self.Group_VWAFDelta30Pc = Group_VWAFDelta30Pc
        self.Group_VWAFDelta7 = Group_VWAFDelta7
        self.Group_VWAFDelta7Pc = Group_VWAFDelta7Pc
        self.Group_VWAR = Group_VWAR
        self.Group_VWAR1 = Group_VWAR1
        self.Group_VWAR30 = Group_VWAR30
        self.Group_VWAR7 = Group_VWAR7
        self.Group_VWARDelta1 = Group_VWARDelta1
        self.Group_VWARDelta1Pc = Group_VWARDelta1Pc
        self.Group_VWARDelta30 = Group_VWARDelta30
        self.Group_VWARDelta30Pc = Group_VWARDelta30Pc
        self.Group_VWARDelta7 = Group_VWARDelta7
        self.Group_VWARDelta7Pc = Group_VWARDelta7Pc
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TradingType79)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TradingType79.subclass:
            return TradingType79.subclass(*args_, **kwargs_)
        else:
            return TradingType79(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Client_DailyCost(self):
        return self.Client_DailyCost
    def set_Client_DailyCost(self, Client_DailyCost):
        self.Client_DailyCost = Client_DailyCost
    def get_Client_DailyRevenue(self):
        return self.Client_DailyRevenue
    def set_Client_DailyRevenue(self, Client_DailyRevenue):
        self.Client_DailyRevenue = Client_DailyRevenue
    def get_Client_MarketShare(self):
        return self.Client_MarketShare
    def set_Client_MarketShare(self, Client_MarketShare):
        self.Client_MarketShare = Client_MarketShare
    def get_Client_MarketShareDelta1(self):
        return self.Client_MarketShareDelta1
    def set_Client_MarketShareDelta1(self, Client_MarketShareDelta1):
        self.Client_MarketShareDelta1 = Client_MarketShareDelta1
    def get_Client_MarketShareDelta30(self):
        return self.Client_MarketShareDelta30
    def set_Client_MarketShareDelta30(self, Client_MarketShareDelta30):
        self.Client_MarketShareDelta30 = Client_MarketShareDelta30
    def get_Client_MarketShareDelta7(self):
        return self.Client_MarketShareDelta7
    def set_Client_MarketShareDelta7(self, Client_MarketShareDelta7):
        self.Client_MarketShareDelta7 = Client_MarketShareDelta7
    def get_Client_MarketShareRank(self):
        return self.Client_MarketShareRank
    def set_Client_MarketShareRank(self, Client_MarketShareRank):
        self.Client_MarketShareRank = Client_MarketShareRank
    def get_Client_OpportunityGainLoss(self):
        return self.Client_OpportunityGainLoss
    def set_Client_OpportunityGainLoss(self, Client_OpportunityGainLoss):
        self.Client_OpportunityGainLoss = Client_OpportunityGainLoss
    def get_Client_QuantityOnLoan(self):
        return self.Client_QuantityOnLoan
    def set_Client_QuantityOnLoan(self, Client_QuantityOnLoan):
        self.Client_QuantityOnLoan = Client_QuantityOnLoan
    def get_Client_QuantityOnLoanDelta1(self):
        return self.Client_QuantityOnLoanDelta1
    def set_Client_QuantityOnLoanDelta1(self, Client_QuantityOnLoanDelta1):
        self.Client_QuantityOnLoanDelta1 = Client_QuantityOnLoanDelta1
    def get_Client_QuantityOnLoanDelta1Pc(self):
        return self.Client_QuantityOnLoanDelta1Pc
    def set_Client_QuantityOnLoanDelta1Pc(self, Client_QuantityOnLoanDelta1Pc):
        self.Client_QuantityOnLoanDelta1Pc = Client_QuantityOnLoanDelta1Pc
    def get_Client_QuantityOnLoanDelta30(self):
        return self.Client_QuantityOnLoanDelta30
    def set_Client_QuantityOnLoanDelta30(self, Client_QuantityOnLoanDelta30):
        self.Client_QuantityOnLoanDelta30 = Client_QuantityOnLoanDelta30
    def get_Client_QuantityOnLoanDelta30Pc(self):
        return self.Client_QuantityOnLoanDelta30Pc
    def set_Client_QuantityOnLoanDelta30Pc(self, Client_QuantityOnLoanDelta30Pc):
        self.Client_QuantityOnLoanDelta30Pc = Client_QuantityOnLoanDelta30Pc
    def get_Client_QuantityOnLoanDelta7(self):
        return self.Client_QuantityOnLoanDelta7
    def set_Client_QuantityOnLoanDelta7(self, Client_QuantityOnLoanDelta7):
        self.Client_QuantityOnLoanDelta7 = Client_QuantityOnLoanDelta7
    def get_Client_QuantityOnLoanDelta7Pc(self):
        return self.Client_QuantityOnLoanDelta7Pc
    def set_Client_QuantityOnLoanDelta7Pc(self, Client_QuantityOnLoanDelta7Pc):
        self.Client_QuantityOnLoanDelta7Pc = Client_QuantityOnLoanDelta7Pc
    def get_Client_SAF(self):
        return self.Client_SAF
    def set_Client_SAF(self, Client_SAF):
        self.Client_SAF = Client_SAF
    def get_Client_SAFDelta1(self):
        return self.Client_SAFDelta1
    def set_Client_SAFDelta1(self, Client_SAFDelta1):
        self.Client_SAFDelta1 = Client_SAFDelta1
    def get_Client_SAFDelta1Pc(self):
        return self.Client_SAFDelta1Pc
    def set_Client_SAFDelta1Pc(self, Client_SAFDelta1Pc):
        self.Client_SAFDelta1Pc = Client_SAFDelta1Pc
    def get_Client_SAFDelta30(self):
        return self.Client_SAFDelta30
    def set_Client_SAFDelta30(self, Client_SAFDelta30):
        self.Client_SAFDelta30 = Client_SAFDelta30
    def get_Client_SAFDelta30Pc(self):
        return self.Client_SAFDelta30Pc
    def set_Client_SAFDelta30Pc(self, Client_SAFDelta30Pc):
        self.Client_SAFDelta30Pc = Client_SAFDelta30Pc
    def get_Client_SAFDelta7(self):
        return self.Client_SAFDelta7
    def set_Client_SAFDelta7(self, Client_SAFDelta7):
        self.Client_SAFDelta7 = Client_SAFDelta7
    def get_Client_SAFDelta7Pc(self):
        return self.Client_SAFDelta7Pc
    def set_Client_SAFDelta7Pc(self, Client_SAFDelta7Pc):
        self.Client_SAFDelta7Pc = Client_SAFDelta7Pc
    def get_Client_SAR(self):
        return self.Client_SAR
    def set_Client_SAR(self, Client_SAR):
        self.Client_SAR = Client_SAR
    def get_Client_SARDelta1(self):
        return self.Client_SARDelta1
    def set_Client_SARDelta1(self, Client_SARDelta1):
        self.Client_SARDelta1 = Client_SARDelta1
    def get_Client_SARDelta1Pc(self):
        return self.Client_SARDelta1Pc
    def set_Client_SARDelta1Pc(self, Client_SARDelta1Pc):
        self.Client_SARDelta1Pc = Client_SARDelta1Pc
    def get_Client_SARDelta30(self):
        return self.Client_SARDelta30
    def set_Client_SARDelta30(self, Client_SARDelta30):
        self.Client_SARDelta30 = Client_SARDelta30
    def get_Client_SARDelta30Pc(self):
        return self.Client_SARDelta30Pc
    def set_Client_SARDelta30Pc(self, Client_SARDelta30Pc):
        self.Client_SARDelta30Pc = Client_SARDelta30Pc
    def get_Client_SARDelta7(self):
        return self.Client_SARDelta7
    def set_Client_SARDelta7(self, Client_SARDelta7):
        self.Client_SARDelta7 = Client_SARDelta7
    def get_Client_SARDelta7Pc(self):
        return self.Client_SARDelta7Pc
    def set_Client_SARDelta7Pc(self, Client_SARDelta7Pc):
        self.Client_SARDelta7Pc = Client_SARDelta7Pc
    def get_Client_SATenure(self):
        return self.Client_SATenure
    def set_Client_SATenure(self, Client_SATenure):
        self.Client_SATenure = Client_SATenure
    def get_Client_Utilisation(self):
        return self.Client_Utilisation
    def set_Client_Utilisation(self, Client_Utilisation):
        self.Client_Utilisation = Client_Utilisation
    def get_Client_UtilisationByQuantity(self):
        return self.Client_UtilisationByQuantity
    def set_Client_UtilisationByQuantity(self, Client_UtilisationByQuantity):
        self.Client_UtilisationByQuantity = Client_UtilisationByQuantity
    def get_Client_UtilisationByQuantityDelta1(self):
        return self.Client_UtilisationByQuantityDelta1
    def set_Client_UtilisationByQuantityDelta1(self, Client_UtilisationByQuantityDelta1):
        self.Client_UtilisationByQuantityDelta1 = Client_UtilisationByQuantityDelta1
    def get_Client_UtilisationByQuantityDelta30(self):
        return self.Client_UtilisationByQuantityDelta30
    def set_Client_UtilisationByQuantityDelta30(self, Client_UtilisationByQuantityDelta30):
        self.Client_UtilisationByQuantityDelta30 = Client_UtilisationByQuantityDelta30
    def get_Client_UtilisationByQuantityDelta7(self):
        return self.Client_UtilisationByQuantityDelta7
    def set_Client_UtilisationByQuantityDelta7(self, Client_UtilisationByQuantityDelta7):
        self.Client_UtilisationByQuantityDelta7 = Client_UtilisationByQuantityDelta7
    def get_Client_UtilisationDelta1(self):
        return self.Client_UtilisationDelta1
    def set_Client_UtilisationDelta1(self, Client_UtilisationDelta1):
        self.Client_UtilisationDelta1 = Client_UtilisationDelta1
    def get_Client_UtilisationDelta30(self):
        return self.Client_UtilisationDelta30
    def set_Client_UtilisationDelta30(self, Client_UtilisationDelta30):
        self.Client_UtilisationDelta30 = Client_UtilisationDelta30
    def get_Client_UtilisationDelta7(self):
        return self.Client_UtilisationDelta7
    def set_Client_UtilisationDelta7(self, Client_UtilisationDelta7):
        self.Client_UtilisationDelta7 = Client_UtilisationDelta7
    def get_Client_ValueOnLoan(self):
        return self.Client_ValueOnLoan
    def set_Client_ValueOnLoan(self, Client_ValueOnLoan):
        self.Client_ValueOnLoan = Client_ValueOnLoan
    def get_Client_ValueOnLoanDelta1(self):
        return self.Client_ValueOnLoanDelta1
    def set_Client_ValueOnLoanDelta1(self, Client_ValueOnLoanDelta1):
        self.Client_ValueOnLoanDelta1 = Client_ValueOnLoanDelta1
    def get_Client_ValueOnLoanDelta1Pc(self):
        return self.Client_ValueOnLoanDelta1Pc
    def set_Client_ValueOnLoanDelta1Pc(self, Client_ValueOnLoanDelta1Pc):
        self.Client_ValueOnLoanDelta1Pc = Client_ValueOnLoanDelta1Pc
    def get_Client_ValueOnLoanDelta30(self):
        return self.Client_ValueOnLoanDelta30
    def set_Client_ValueOnLoanDelta30(self, Client_ValueOnLoanDelta30):
        self.Client_ValueOnLoanDelta30 = Client_ValueOnLoanDelta30
    def get_Client_ValueOnLoanDelta30Pc(self):
        return self.Client_ValueOnLoanDelta30Pc
    def set_Client_ValueOnLoanDelta30Pc(self, Client_ValueOnLoanDelta30Pc):
        self.Client_ValueOnLoanDelta30Pc = Client_ValueOnLoanDelta30Pc
    def get_Client_ValueOnLoanDelta7(self):
        return self.Client_ValueOnLoanDelta7
    def set_Client_ValueOnLoanDelta7(self, Client_ValueOnLoanDelta7):
        self.Client_ValueOnLoanDelta7 = Client_ValueOnLoanDelta7
    def get_Client_ValueOnLoanDelta7Pc(self):
        return self.Client_ValueOnLoanDelta7Pc
    def set_Client_ValueOnLoanDelta7Pc(self, Client_ValueOnLoanDelta7Pc):
        self.Client_ValueOnLoanDelta7Pc = Client_ValueOnLoanDelta7Pc
    def get_Client_VWAF(self):
        return self.Client_VWAF
    def set_Client_VWAF(self, Client_VWAF):
        self.Client_VWAF = Client_VWAF
    def get_Client_VWAF1(self):
        return self.Client_VWAF1
    def set_Client_VWAF1(self, Client_VWAF1):
        self.Client_VWAF1 = Client_VWAF1
    def get_Client_VWAF30(self):
        return self.Client_VWAF30
    def set_Client_VWAF30(self, Client_VWAF30):
        self.Client_VWAF30 = Client_VWAF30
    def get_Client_VWAF7(self):
        return self.Client_VWAF7
    def set_Client_VWAF7(self, Client_VWAF7):
        self.Client_VWAF7 = Client_VWAF7
    def get_Client_VWAFDelta1(self):
        return self.Client_VWAFDelta1
    def set_Client_VWAFDelta1(self, Client_VWAFDelta1):
        self.Client_VWAFDelta1 = Client_VWAFDelta1
    def get_Client_VWAFDelta1Pc(self):
        return self.Client_VWAFDelta1Pc
    def set_Client_VWAFDelta1Pc(self, Client_VWAFDelta1Pc):
        self.Client_VWAFDelta1Pc = Client_VWAFDelta1Pc
    def get_Client_VWAFDelta30(self):
        return self.Client_VWAFDelta30
    def set_Client_VWAFDelta30(self, Client_VWAFDelta30):
        self.Client_VWAFDelta30 = Client_VWAFDelta30
    def get_Client_VWAFDelta30Pc(self):
        return self.Client_VWAFDelta30Pc
    def set_Client_VWAFDelta30Pc(self, Client_VWAFDelta30Pc):
        self.Client_VWAFDelta30Pc = Client_VWAFDelta30Pc
    def get_Client_VWAFDelta7(self):
        return self.Client_VWAFDelta7
    def set_Client_VWAFDelta7(self, Client_VWAFDelta7):
        self.Client_VWAFDelta7 = Client_VWAFDelta7
    def get_Client_VWAFDelta7Pc(self):
        return self.Client_VWAFDelta7Pc
    def set_Client_VWAFDelta7Pc(self, Client_VWAFDelta7Pc):
        self.Client_VWAFDelta7Pc = Client_VWAFDelta7Pc
    def get_Client_VWAR(self):
        return self.Client_VWAR
    def set_Client_VWAR(self, Client_VWAR):
        self.Client_VWAR = Client_VWAR
    def get_Client_VWAR1(self):
        return self.Client_VWAR1
    def set_Client_VWAR1(self, Client_VWAR1):
        self.Client_VWAR1 = Client_VWAR1
    def get_Client_VWAR30(self):
        return self.Client_VWAR30
    def set_Client_VWAR30(self, Client_VWAR30):
        self.Client_VWAR30 = Client_VWAR30
    def get_Client_VWAR7(self):
        return self.Client_VWAR7
    def set_Client_VWAR7(self, Client_VWAR7):
        self.Client_VWAR7 = Client_VWAR7
    def get_Client_VWARDelta1(self):
        return self.Client_VWARDelta1
    def set_Client_VWARDelta1(self, Client_VWARDelta1):
        self.Client_VWARDelta1 = Client_VWARDelta1
    def get_Client_VWARDelta1Pc(self):
        return self.Client_VWARDelta1Pc
    def set_Client_VWARDelta1Pc(self, Client_VWARDelta1Pc):
        self.Client_VWARDelta1Pc = Client_VWARDelta1Pc
    def get_Client_VWARDelta30(self):
        return self.Client_VWARDelta30
    def set_Client_VWARDelta30(self, Client_VWARDelta30):
        self.Client_VWARDelta30 = Client_VWARDelta30
    def get_Client_VWARDelta30Pc(self):
        return self.Client_VWARDelta30Pc
    def set_Client_VWARDelta30Pc(self, Client_VWARDelta30Pc):
        self.Client_VWARDelta30Pc = Client_VWARDelta30Pc
    def get_Client_VWARDelta7(self):
        return self.Client_VWARDelta7
    def set_Client_VWARDelta7(self, Client_VWARDelta7):
        self.Client_VWARDelta7 = Client_VWARDelta7
    def get_Client_VWARDelta7Pc(self):
        return self.Client_VWARDelta7Pc
    def set_Client_VWARDelta7Pc(self, Client_VWARDelta7Pc):
        self.Client_VWARDelta7Pc = Client_VWARDelta7Pc
    def get_Group_ActiveLendingAgents(self):
        return self.Group_ActiveLendingAgents
    def set_Group_ActiveLendingAgents(self, Group_ActiveLendingAgents):
        self.Group_ActiveLendingAgents = Group_ActiveLendingAgents
    def get_Group_BenchmarkFee(self):
        return self.Group_BenchmarkFee
    def set_Group_BenchmarkFee(self, Group_BenchmarkFee):
        self.Group_BenchmarkFee = Group_BenchmarkFee
    def get_Group_BenchmarkFeeDelta1(self):
        return self.Group_BenchmarkFeeDelta1
    def set_Group_BenchmarkFeeDelta1(self, Group_BenchmarkFeeDelta1):
        self.Group_BenchmarkFeeDelta1 = Group_BenchmarkFeeDelta1
    def get_Group_BenchmarkFeeDelta1Pc(self):
        return self.Group_BenchmarkFeeDelta1Pc
    def set_Group_BenchmarkFeeDelta1Pc(self, Group_BenchmarkFeeDelta1Pc):
        self.Group_BenchmarkFeeDelta1Pc = Group_BenchmarkFeeDelta1Pc
    def get_Group_BenchmarkFeeDelta30(self):
        return self.Group_BenchmarkFeeDelta30
    def set_Group_BenchmarkFeeDelta30(self, Group_BenchmarkFeeDelta30):
        self.Group_BenchmarkFeeDelta30 = Group_BenchmarkFeeDelta30
    def get_Group_BenchmarkFeeDelta30Pc(self):
        return self.Group_BenchmarkFeeDelta30Pc
    def set_Group_BenchmarkFeeDelta30Pc(self, Group_BenchmarkFeeDelta30Pc):
        self.Group_BenchmarkFeeDelta30Pc = Group_BenchmarkFeeDelta30Pc
    def get_Group_BenchmarkFeeDelta7(self):
        return self.Group_BenchmarkFeeDelta7
    def set_Group_BenchmarkFeeDelta7(self, Group_BenchmarkFeeDelta7):
        self.Group_BenchmarkFeeDelta7 = Group_BenchmarkFeeDelta7
    def get_Group_BenchmarkFeeDelta7Pc(self):
        return self.Group_BenchmarkFeeDelta7Pc
    def set_Group_BenchmarkFeeDelta7Pc(self, Group_BenchmarkFeeDelta7Pc):
        self.Group_BenchmarkFeeDelta7Pc = Group_BenchmarkFeeDelta7Pc
    def get_Group_BenchmarkRebate(self):
        return self.Group_BenchmarkRebate
    def set_Group_BenchmarkRebate(self, Group_BenchmarkRebate):
        self.Group_BenchmarkRebate = Group_BenchmarkRebate
    def get_Group_BenchmarkRebateDelta1(self):
        return self.Group_BenchmarkRebateDelta1
    def set_Group_BenchmarkRebateDelta1(self, Group_BenchmarkRebateDelta1):
        self.Group_BenchmarkRebateDelta1 = Group_BenchmarkRebateDelta1
    def get_Group_BenchmarkRebateDelta1Pc(self):
        return self.Group_BenchmarkRebateDelta1Pc
    def set_Group_BenchmarkRebateDelta1Pc(self, Group_BenchmarkRebateDelta1Pc):
        self.Group_BenchmarkRebateDelta1Pc = Group_BenchmarkRebateDelta1Pc
    def get_Group_BenchmarkRebateDelta30(self):
        return self.Group_BenchmarkRebateDelta30
    def set_Group_BenchmarkRebateDelta30(self, Group_BenchmarkRebateDelta30):
        self.Group_BenchmarkRebateDelta30 = Group_BenchmarkRebateDelta30
    def get_Group_BenchmarkRebateDelta30Pc(self):
        return self.Group_BenchmarkRebateDelta30Pc
    def set_Group_BenchmarkRebateDelta30Pc(self, Group_BenchmarkRebateDelta30Pc):
        self.Group_BenchmarkRebateDelta30Pc = Group_BenchmarkRebateDelta30Pc
    def get_Group_BenchmarkRebateDelta7(self):
        return self.Group_BenchmarkRebateDelta7
    def set_Group_BenchmarkRebateDelta7(self, Group_BenchmarkRebateDelta7):
        self.Group_BenchmarkRebateDelta7 = Group_BenchmarkRebateDelta7
    def get_Group_BenchmarkRebateDelta7Pc(self):
        return self.Group_BenchmarkRebateDelta7Pc
    def set_Group_BenchmarkRebateDelta7Pc(self, Group_BenchmarkRebateDelta7Pc):
        self.Group_BenchmarkRebateDelta7Pc = Group_BenchmarkRebateDelta7Pc
    def get_Group_BorrowerConcentration(self):
        return self.Group_BorrowerConcentration
    def set_Group_BorrowerConcentration(self, Group_BorrowerConcentration):
        self.Group_BorrowerConcentration = Group_BorrowerConcentration
    def get_Group_HasDividendTrading(self):
        return self.Group_HasDividendTrading
    def set_Group_HasDividendTrading(self, Group_HasDividendTrading):
        self.Group_HasDividendTrading = Group_HasDividendTrading
    def get_Group_LenderConcentration(self):
        return self.Group_LenderConcentration
    def set_Group_LenderConcentration(self, Group_LenderConcentration):
        self.Group_LenderConcentration = Group_LenderConcentration
    def get_Group_PrimeBrokers(self):
        return self.Group_PrimeBrokers
    def set_Group_PrimeBrokers(self, Group_PrimeBrokers):
        self.Group_PrimeBrokers = Group_PrimeBrokers
    def get_Group_QuantityOnLoan(self):
        return self.Group_QuantityOnLoan
    def set_Group_QuantityOnLoan(self, Group_QuantityOnLoan):
        self.Group_QuantityOnLoan = Group_QuantityOnLoan
    def get_Group_QuantityOnLoanDelta1(self):
        return self.Group_QuantityOnLoanDelta1
    def set_Group_QuantityOnLoanDelta1(self, Group_QuantityOnLoanDelta1):
        self.Group_QuantityOnLoanDelta1 = Group_QuantityOnLoanDelta1
    def get_Group_QuantityOnLoanDelta1Pc(self):
        return self.Group_QuantityOnLoanDelta1Pc
    def set_Group_QuantityOnLoanDelta1Pc(self, Group_QuantityOnLoanDelta1Pc):
        self.Group_QuantityOnLoanDelta1Pc = Group_QuantityOnLoanDelta1Pc
    def get_Group_QuantityOnLoanDelta30(self):
        return self.Group_QuantityOnLoanDelta30
    def set_Group_QuantityOnLoanDelta30(self, Group_QuantityOnLoanDelta30):
        self.Group_QuantityOnLoanDelta30 = Group_QuantityOnLoanDelta30
    def get_Group_QuantityOnLoanDelta30Pc(self):
        return self.Group_QuantityOnLoanDelta30Pc
    def set_Group_QuantityOnLoanDelta30Pc(self, Group_QuantityOnLoanDelta30Pc):
        self.Group_QuantityOnLoanDelta30Pc = Group_QuantityOnLoanDelta30Pc
    def get_Group_QuantityOnLoanDelta7(self):
        return self.Group_QuantityOnLoanDelta7
    def set_Group_QuantityOnLoanDelta7(self, Group_QuantityOnLoanDelta7):
        self.Group_QuantityOnLoanDelta7 = Group_QuantityOnLoanDelta7
    def get_Group_QuantityOnLoanDelta7Pc(self):
        return self.Group_QuantityOnLoanDelta7Pc
    def set_Group_QuantityOnLoanDelta7Pc(self, Group_QuantityOnLoanDelta7Pc):
        self.Group_QuantityOnLoanDelta7Pc = Group_QuantityOnLoanDelta7Pc
    def get_Group_SAF(self):
        return self.Group_SAF
    def set_Group_SAF(self, Group_SAF):
        self.Group_SAF = Group_SAF
    def get_Group_SAFDelta1(self):
        return self.Group_SAFDelta1
    def set_Group_SAFDelta1(self, Group_SAFDelta1):
        self.Group_SAFDelta1 = Group_SAFDelta1
    def get_Group_SAFDelta1Pc(self):
        return self.Group_SAFDelta1Pc
    def set_Group_SAFDelta1Pc(self, Group_SAFDelta1Pc):
        self.Group_SAFDelta1Pc = Group_SAFDelta1Pc
    def get_Group_SAFDelta30(self):
        return self.Group_SAFDelta30
    def set_Group_SAFDelta30(self, Group_SAFDelta30):
        self.Group_SAFDelta30 = Group_SAFDelta30
    def get_Group_SAFDelta30Pc(self):
        return self.Group_SAFDelta30Pc
    def set_Group_SAFDelta30Pc(self, Group_SAFDelta30Pc):
        self.Group_SAFDelta30Pc = Group_SAFDelta30Pc
    def get_Group_SAFDelta7(self):
        return self.Group_SAFDelta7
    def set_Group_SAFDelta7(self, Group_SAFDelta7):
        self.Group_SAFDelta7 = Group_SAFDelta7
    def get_Group_SAFDelta7Pc(self):
        return self.Group_SAFDelta7Pc
    def set_Group_SAFDelta7Pc(self, Group_SAFDelta7Pc):
        self.Group_SAFDelta7Pc = Group_SAFDelta7Pc
    def get_Group_SAR(self):
        return self.Group_SAR
    def set_Group_SAR(self, Group_SAR):
        self.Group_SAR = Group_SAR
    def get_Group_SARDelta1(self):
        return self.Group_SARDelta1
    def set_Group_SARDelta1(self, Group_SARDelta1):
        self.Group_SARDelta1 = Group_SARDelta1
    def get_Group_SARDelta1Pc(self):
        return self.Group_SARDelta1Pc
    def set_Group_SARDelta1Pc(self, Group_SARDelta1Pc):
        self.Group_SARDelta1Pc = Group_SARDelta1Pc
    def get_Group_SARDelta30(self):
        return self.Group_SARDelta30
    def set_Group_SARDelta30(self, Group_SARDelta30):
        self.Group_SARDelta30 = Group_SARDelta30
    def get_Group_SARDelta30Pc(self):
        return self.Group_SARDelta30Pc
    def set_Group_SARDelta30Pc(self, Group_SARDelta30Pc):
        self.Group_SARDelta30Pc = Group_SARDelta30Pc
    def get_Group_SARDelta7(self):
        return self.Group_SARDelta7
    def set_Group_SARDelta7(self, Group_SARDelta7):
        self.Group_SARDelta7 = Group_SARDelta7
    def get_Group_SARDelta7Pc(self):
        return self.Group_SARDelta7Pc
    def set_Group_SARDelta7Pc(self, Group_SARDelta7Pc):
        self.Group_SARDelta7Pc = Group_SARDelta7Pc
    def get_Group_SATenure(self):
        return self.Group_SATenure
    def set_Group_SATenure(self, Group_SATenure):
        self.Group_SATenure = Group_SATenure
    def get_Group_ShortLoanQuantity(self):
        return self.Group_ShortLoanQuantity
    def set_Group_ShortLoanQuantity(self, Group_ShortLoanQuantity):
        self.Group_ShortLoanQuantity = Group_ShortLoanQuantity
    def get_Group_ShortLoanValue(self):
        return self.Group_ShortLoanValue
    def set_Group_ShortLoanValue(self, Group_ShortLoanValue):
        self.Group_ShortLoanValue = Group_ShortLoanValue
    def get_Group_Utilisation(self):
        return self.Group_Utilisation
    def set_Group_Utilisation(self, Group_Utilisation):
        self.Group_Utilisation = Group_Utilisation
    def get_Group_UtilisationByQuantity(self):
        return self.Group_UtilisationByQuantity
    def set_Group_UtilisationByQuantity(self, Group_UtilisationByQuantity):
        self.Group_UtilisationByQuantity = Group_UtilisationByQuantity
    def get_Group_UtilisationByQuantityDelta1(self):
        return self.Group_UtilisationByQuantityDelta1
    def set_Group_UtilisationByQuantityDelta1(self, Group_UtilisationByQuantityDelta1):
        self.Group_UtilisationByQuantityDelta1 = Group_UtilisationByQuantityDelta1
    def get_Group_UtilisationByQuantityDelta30(self):
        return self.Group_UtilisationByQuantityDelta30
    def set_Group_UtilisationByQuantityDelta30(self, Group_UtilisationByQuantityDelta30):
        self.Group_UtilisationByQuantityDelta30 = Group_UtilisationByQuantityDelta30
    def get_Group_UtilisationByQuantityDelta7(self):
        return self.Group_UtilisationByQuantityDelta7
    def set_Group_UtilisationByQuantityDelta7(self, Group_UtilisationByQuantityDelta7):
        self.Group_UtilisationByQuantityDelta7 = Group_UtilisationByQuantityDelta7
    def get_Group_UtilisationDelta1(self):
        return self.Group_UtilisationDelta1
    def set_Group_UtilisationDelta1(self, Group_UtilisationDelta1):
        self.Group_UtilisationDelta1 = Group_UtilisationDelta1
    def get_Group_UtilisationDelta30(self):
        return self.Group_UtilisationDelta30
    def set_Group_UtilisationDelta30(self, Group_UtilisationDelta30):
        self.Group_UtilisationDelta30 = Group_UtilisationDelta30
    def get_Group_UtilisationDelta7(self):
        return self.Group_UtilisationDelta7
    def set_Group_UtilisationDelta7(self, Group_UtilisationDelta7):
        self.Group_UtilisationDelta7 = Group_UtilisationDelta7
    def get_Group_ValueOnLoan(self):
        return self.Group_ValueOnLoan
    def set_Group_ValueOnLoan(self, Group_ValueOnLoan):
        self.Group_ValueOnLoan = Group_ValueOnLoan
    def get_Group_ValueOnLoanDelta1(self):
        return self.Group_ValueOnLoanDelta1
    def set_Group_ValueOnLoanDelta1(self, Group_ValueOnLoanDelta1):
        self.Group_ValueOnLoanDelta1 = Group_ValueOnLoanDelta1
    def get_Group_ValueOnLoanDelta1Pc(self):
        return self.Group_ValueOnLoanDelta1Pc
    def set_Group_ValueOnLoanDelta1Pc(self, Group_ValueOnLoanDelta1Pc):
        self.Group_ValueOnLoanDelta1Pc = Group_ValueOnLoanDelta1Pc
    def get_Group_ValueOnLoanDelta30(self):
        return self.Group_ValueOnLoanDelta30
    def set_Group_ValueOnLoanDelta30(self, Group_ValueOnLoanDelta30):
        self.Group_ValueOnLoanDelta30 = Group_ValueOnLoanDelta30
    def get_Group_ValueOnLoanDelta30Pc(self):
        return self.Group_ValueOnLoanDelta30Pc
    def set_Group_ValueOnLoanDelta30Pc(self, Group_ValueOnLoanDelta30Pc):
        self.Group_ValueOnLoanDelta30Pc = Group_ValueOnLoanDelta30Pc
    def get_Group_ValueOnLoanDelta7(self):
        return self.Group_ValueOnLoanDelta7
    def set_Group_ValueOnLoanDelta7(self, Group_ValueOnLoanDelta7):
        self.Group_ValueOnLoanDelta7 = Group_ValueOnLoanDelta7
    def get_Group_ValueOnLoanDelta7Pc(self):
        return self.Group_ValueOnLoanDelta7Pc
    def set_Group_ValueOnLoanDelta7Pc(self, Group_ValueOnLoanDelta7Pc):
        self.Group_ValueOnLoanDelta7Pc = Group_ValueOnLoanDelta7Pc
    def get_Group_VWAF(self):
        return self.Group_VWAF
    def set_Group_VWAF(self, Group_VWAF):
        self.Group_VWAF = Group_VWAF
    def get_Group_VWAF1(self):
        return self.Group_VWAF1
    def set_Group_VWAF1(self, Group_VWAF1):
        self.Group_VWAF1 = Group_VWAF1
    def get_Group_VWAF30(self):
        return self.Group_VWAF30
    def set_Group_VWAF30(self, Group_VWAF30):
        self.Group_VWAF30 = Group_VWAF30
    def get_Group_VWAF7(self):
        return self.Group_VWAF7
    def set_Group_VWAF7(self, Group_VWAF7):
        self.Group_VWAF7 = Group_VWAF7
    def get_Group_VWAFDelta1(self):
        return self.Group_VWAFDelta1
    def set_Group_VWAFDelta1(self, Group_VWAFDelta1):
        self.Group_VWAFDelta1 = Group_VWAFDelta1
    def get_Group_VWAFDelta1Pc(self):
        return self.Group_VWAFDelta1Pc
    def set_Group_VWAFDelta1Pc(self, Group_VWAFDelta1Pc):
        self.Group_VWAFDelta1Pc = Group_VWAFDelta1Pc
    def get_Group_VWAFDelta30(self):
        return self.Group_VWAFDelta30
    def set_Group_VWAFDelta30(self, Group_VWAFDelta30):
        self.Group_VWAFDelta30 = Group_VWAFDelta30
    def get_Group_VWAFDelta30Pc(self):
        return self.Group_VWAFDelta30Pc
    def set_Group_VWAFDelta30Pc(self, Group_VWAFDelta30Pc):
        self.Group_VWAFDelta30Pc = Group_VWAFDelta30Pc
    def get_Group_VWAFDelta7(self):
        return self.Group_VWAFDelta7
    def set_Group_VWAFDelta7(self, Group_VWAFDelta7):
        self.Group_VWAFDelta7 = Group_VWAFDelta7
    def get_Group_VWAFDelta7Pc(self):
        return self.Group_VWAFDelta7Pc
    def set_Group_VWAFDelta7Pc(self, Group_VWAFDelta7Pc):
        self.Group_VWAFDelta7Pc = Group_VWAFDelta7Pc
    def get_Group_VWAR(self):
        return self.Group_VWAR
    def set_Group_VWAR(self, Group_VWAR):
        self.Group_VWAR = Group_VWAR
    def get_Group_VWAR1(self):
        return self.Group_VWAR1
    def set_Group_VWAR1(self, Group_VWAR1):
        self.Group_VWAR1 = Group_VWAR1
    def get_Group_VWAR30(self):
        return self.Group_VWAR30
    def set_Group_VWAR30(self, Group_VWAR30):
        self.Group_VWAR30 = Group_VWAR30
    def get_Group_VWAR7(self):
        return self.Group_VWAR7
    def set_Group_VWAR7(self, Group_VWAR7):
        self.Group_VWAR7 = Group_VWAR7
    def get_Group_VWARDelta1(self):
        return self.Group_VWARDelta1
    def set_Group_VWARDelta1(self, Group_VWARDelta1):
        self.Group_VWARDelta1 = Group_VWARDelta1
    def get_Group_VWARDelta1Pc(self):
        return self.Group_VWARDelta1Pc
    def set_Group_VWARDelta1Pc(self, Group_VWARDelta1Pc):
        self.Group_VWARDelta1Pc = Group_VWARDelta1Pc
    def get_Group_VWARDelta30(self):
        return self.Group_VWARDelta30
    def set_Group_VWARDelta30(self, Group_VWARDelta30):
        self.Group_VWARDelta30 = Group_VWARDelta30
    def get_Group_VWARDelta30Pc(self):
        return self.Group_VWARDelta30Pc
    def set_Group_VWARDelta30Pc(self, Group_VWARDelta30Pc):
        self.Group_VWARDelta30Pc = Group_VWARDelta30Pc
    def get_Group_VWARDelta7(self):
        return self.Group_VWARDelta7
    def set_Group_VWARDelta7(self, Group_VWARDelta7):
        self.Group_VWARDelta7 = Group_VWARDelta7
    def get_Group_VWARDelta7Pc(self):
        return self.Group_VWARDelta7Pc
    def set_Group_VWARDelta7Pc(self, Group_VWARDelta7Pc):
        self.Group_VWARDelta7Pc = Group_VWARDelta7Pc
    def hasContent_(self):
        if (
            self.Client_DailyCost is not None or
            self.Client_DailyRevenue is not None or
            self.Client_MarketShare is not None or
            self.Client_MarketShareDelta1 is not None or
            self.Client_MarketShareDelta30 is not None or
            self.Client_MarketShareDelta7 is not None or
            self.Client_MarketShareRank is not None or
            self.Client_OpportunityGainLoss is not None or
            self.Client_QuantityOnLoan is not None or
            self.Client_QuantityOnLoanDelta1 is not None or
            self.Client_QuantityOnLoanDelta1Pc is not None or
            self.Client_QuantityOnLoanDelta30 is not None or
            self.Client_QuantityOnLoanDelta30Pc is not None or
            self.Client_QuantityOnLoanDelta7 is not None or
            self.Client_QuantityOnLoanDelta7Pc is not None or
            self.Client_SAF is not None or
            self.Client_SAFDelta1 is not None or
            self.Client_SAFDelta1Pc is not None or
            self.Client_SAFDelta30 is not None or
            self.Client_SAFDelta30Pc is not None or
            self.Client_SAFDelta7 is not None or
            self.Client_SAFDelta7Pc is not None or
            self.Client_SAR is not None or
            self.Client_SARDelta1 is not None or
            self.Client_SARDelta1Pc is not None or
            self.Client_SARDelta30 is not None or
            self.Client_SARDelta30Pc is not None or
            self.Client_SARDelta7 is not None or
            self.Client_SARDelta7Pc is not None or
            self.Client_SATenure is not None or
            self.Client_Utilisation is not None or
            self.Client_UtilisationByQuantity is not None or
            self.Client_UtilisationByQuantityDelta1 is not None or
            self.Client_UtilisationByQuantityDelta30 is not None or
            self.Client_UtilisationByQuantityDelta7 is not None or
            self.Client_UtilisationDelta1 is not None or
            self.Client_UtilisationDelta30 is not None or
            self.Client_UtilisationDelta7 is not None or
            self.Client_ValueOnLoan is not None or
            self.Client_ValueOnLoanDelta1 is not None or
            self.Client_ValueOnLoanDelta1Pc is not None or
            self.Client_ValueOnLoanDelta30 is not None or
            self.Client_ValueOnLoanDelta30Pc is not None or
            self.Client_ValueOnLoanDelta7 is not None or
            self.Client_ValueOnLoanDelta7Pc is not None or
            self.Client_VWAF is not None or
            self.Client_VWAF1 is not None or
            self.Client_VWAF30 is not None or
            self.Client_VWAF7 is not None or
            self.Client_VWAFDelta1 is not None or
            self.Client_VWAFDelta1Pc is not None or
            self.Client_VWAFDelta30 is not None or
            self.Client_VWAFDelta30Pc is not None or
            self.Client_VWAFDelta7 is not None or
            self.Client_VWAFDelta7Pc is not None or
            self.Client_VWAR is not None or
            self.Client_VWAR1 is not None or
            self.Client_VWAR30 is not None or
            self.Client_VWAR7 is not None or
            self.Client_VWARDelta1 is not None or
            self.Client_VWARDelta1Pc is not None or
            self.Client_VWARDelta30 is not None or
            self.Client_VWARDelta30Pc is not None or
            self.Client_VWARDelta7 is not None or
            self.Client_VWARDelta7Pc is not None or
            self.Group_ActiveLendingAgents is not None or
            self.Group_BenchmarkFee is not None or
            self.Group_BenchmarkFeeDelta1 is not None or
            self.Group_BenchmarkFeeDelta1Pc is not None or
            self.Group_BenchmarkFeeDelta30 is not None or
            self.Group_BenchmarkFeeDelta30Pc is not None or
            self.Group_BenchmarkFeeDelta7 is not None or
            self.Group_BenchmarkFeeDelta7Pc is not None or
            self.Group_BenchmarkRebate is not None or
            self.Group_BenchmarkRebateDelta1 is not None or
            self.Group_BenchmarkRebateDelta1Pc is not None or
            self.Group_BenchmarkRebateDelta30 is not None or
            self.Group_BenchmarkRebateDelta30Pc is not None or
            self.Group_BenchmarkRebateDelta7 is not None or
            self.Group_BenchmarkRebateDelta7Pc is not None or
            self.Group_BorrowerConcentration is not None or
            self.Group_HasDividendTrading is not None or
            self.Group_LenderConcentration is not None or
            self.Group_PrimeBrokers is not None or
            self.Group_QuantityOnLoan is not None or
            self.Group_QuantityOnLoanDelta1 is not None or
            self.Group_QuantityOnLoanDelta1Pc is not None or
            self.Group_QuantityOnLoanDelta30 is not None or
            self.Group_QuantityOnLoanDelta30Pc is not None or
            self.Group_QuantityOnLoanDelta7 is not None or
            self.Group_QuantityOnLoanDelta7Pc is not None or
            self.Group_SAF is not None or
            self.Group_SAFDelta1 is not None or
            self.Group_SAFDelta1Pc is not None or
            self.Group_SAFDelta30 is not None or
            self.Group_SAFDelta30Pc is not None or
            self.Group_SAFDelta7 is not None or
            self.Group_SAFDelta7Pc is not None or
            self.Group_SAR is not None or
            self.Group_SARDelta1 is not None or
            self.Group_SARDelta1Pc is not None or
            self.Group_SARDelta30 is not None or
            self.Group_SARDelta30Pc is not None or
            self.Group_SARDelta7 is not None or
            self.Group_SARDelta7Pc is not None or
            self.Group_SATenure is not None or
            self.Group_ShortLoanQuantity is not None or
            self.Group_ShortLoanValue is not None or
            self.Group_Utilisation is not None or
            self.Group_UtilisationByQuantity is not None or
            self.Group_UtilisationByQuantityDelta1 is not None or
            self.Group_UtilisationByQuantityDelta30 is not None or
            self.Group_UtilisationByQuantityDelta7 is not None or
            self.Group_UtilisationDelta1 is not None or
            self.Group_UtilisationDelta30 is not None or
            self.Group_UtilisationDelta7 is not None or
            self.Group_ValueOnLoan is not None or
            self.Group_ValueOnLoanDelta1 is not None or
            self.Group_ValueOnLoanDelta1Pc is not None or
            self.Group_ValueOnLoanDelta30 is not None or
            self.Group_ValueOnLoanDelta30Pc is not None or
            self.Group_ValueOnLoanDelta7 is not None or
            self.Group_ValueOnLoanDelta7Pc is not None or
            self.Group_VWAF is not None or
            self.Group_VWAF1 is not None or
            self.Group_VWAF30 is not None or
            self.Group_VWAF7 is not None or
            self.Group_VWAFDelta1 is not None or
            self.Group_VWAFDelta1Pc is not None or
            self.Group_VWAFDelta30 is not None or
            self.Group_VWAFDelta30Pc is not None or
            self.Group_VWAFDelta7 is not None or
            self.Group_VWAFDelta7Pc is not None or
            self.Group_VWAR is not None or
            self.Group_VWAR1 is not None or
            self.Group_VWAR30 is not None or
            self.Group_VWAR7 is not None or
            self.Group_VWARDelta1 is not None or
            self.Group_VWARDelta1Pc is not None or
            self.Group_VWARDelta30 is not None or
            self.Group_VWARDelta30Pc is not None or
            self.Group_VWARDelta7 is not None or
            self.Group_VWARDelta7Pc is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TradingType79', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TradingType79')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TradingType79')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TradingType79', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TradingType79'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TradingType79', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Client_DailyCost is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.DailyCost>%s</%sClient.DailyCost>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_DailyCost, input_name='Client.DailyCost'), namespaceprefix_ , eol_))
        if self.Client_DailyRevenue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.DailyRevenue>%s</%sClient.DailyRevenue>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_DailyRevenue, input_name='Client.DailyRevenue'), namespaceprefix_ , eol_))
        if self.Client_MarketShare is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.MarketShare>%s</%sClient.MarketShare>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_MarketShare, input_name='Client.MarketShare'), namespaceprefix_ , eol_))
        if self.Client_MarketShareDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.MarketShareDelta1>%s</%sClient.MarketShareDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_MarketShareDelta1, input_name='Client.MarketShareDelta1'), namespaceprefix_ , eol_))
        if self.Client_MarketShareDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.MarketShareDelta30>%s</%sClient.MarketShareDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_MarketShareDelta30, input_name='Client.MarketShareDelta30'), namespaceprefix_ , eol_))
        if self.Client_MarketShareDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.MarketShareDelta7>%s</%sClient.MarketShareDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_MarketShareDelta7, input_name='Client.MarketShareDelta7'), namespaceprefix_ , eol_))
        if self.Client_MarketShareRank is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.MarketShareRank>%s</%sClient.MarketShareRank>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_MarketShareRank, input_name='Client.MarketShareRank'), namespaceprefix_ , eol_))
        if self.Client_OpportunityGainLoss is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.OpportunityGainLoss>%s</%sClient.OpportunityGainLoss>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_OpportunityGainLoss, input_name='Client.OpportunityGainLoss'), namespaceprefix_ , eol_))
        if self.Client_QuantityOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.QuantityOnLoan>%s</%sClient.QuantityOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_QuantityOnLoan, input_name='Client.QuantityOnLoan'), namespaceprefix_ , eol_))
        if self.Client_QuantityOnLoanDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.QuantityOnLoanDelta1>%s</%sClient.QuantityOnLoanDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_QuantityOnLoanDelta1, input_name='Client.QuantityOnLoanDelta1'), namespaceprefix_ , eol_))
        if self.Client_QuantityOnLoanDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.QuantityOnLoanDelta1Pc>%s</%sClient.QuantityOnLoanDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_QuantityOnLoanDelta1Pc, input_name='Client.QuantityOnLoanDelta1Pc'), namespaceprefix_ , eol_))
        if self.Client_QuantityOnLoanDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.QuantityOnLoanDelta30>%s</%sClient.QuantityOnLoanDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_QuantityOnLoanDelta30, input_name='Client.QuantityOnLoanDelta30'), namespaceprefix_ , eol_))
        if self.Client_QuantityOnLoanDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.QuantityOnLoanDelta30Pc>%s</%sClient.QuantityOnLoanDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_QuantityOnLoanDelta30Pc, input_name='Client.QuantityOnLoanDelta30Pc'), namespaceprefix_ , eol_))
        if self.Client_QuantityOnLoanDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.QuantityOnLoanDelta7>%s</%sClient.QuantityOnLoanDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_QuantityOnLoanDelta7, input_name='Client.QuantityOnLoanDelta7'), namespaceprefix_ , eol_))
        if self.Client_QuantityOnLoanDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.QuantityOnLoanDelta7Pc>%s</%sClient.QuantityOnLoanDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_QuantityOnLoanDelta7Pc, input_name='Client.QuantityOnLoanDelta7Pc'), namespaceprefix_ , eol_))
        if self.Client_SAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SAF>%s</%sClient.SAF>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SAF, input_name='Client.SAF'), namespaceprefix_ , eol_))
        if self.Client_SAFDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SAFDelta1>%s</%sClient.SAFDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SAFDelta1, input_name='Client.SAFDelta1'), namespaceprefix_ , eol_))
        if self.Client_SAFDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SAFDelta1Pc>%s</%sClient.SAFDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SAFDelta1Pc, input_name='Client.SAFDelta1Pc'), namespaceprefix_ , eol_))
        if self.Client_SAFDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SAFDelta30>%s</%sClient.SAFDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SAFDelta30, input_name='Client.SAFDelta30'), namespaceprefix_ , eol_))
        if self.Client_SAFDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SAFDelta30Pc>%s</%sClient.SAFDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SAFDelta30Pc, input_name='Client.SAFDelta30Pc'), namespaceprefix_ , eol_))
        if self.Client_SAFDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SAFDelta7>%s</%sClient.SAFDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SAFDelta7, input_name='Client.SAFDelta7'), namespaceprefix_ , eol_))
        if self.Client_SAFDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SAFDelta7Pc>%s</%sClient.SAFDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SAFDelta7Pc, input_name='Client.SAFDelta7Pc'), namespaceprefix_ , eol_))
        if self.Client_SAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SAR>%s</%sClient.SAR>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SAR, input_name='Client.SAR'), namespaceprefix_ , eol_))
        if self.Client_SARDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SARDelta1>%s</%sClient.SARDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SARDelta1, input_name='Client.SARDelta1'), namespaceprefix_ , eol_))
        if self.Client_SARDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SARDelta1Pc>%s</%sClient.SARDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SARDelta1Pc, input_name='Client.SARDelta1Pc'), namespaceprefix_ , eol_))
        if self.Client_SARDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SARDelta30>%s</%sClient.SARDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SARDelta30, input_name='Client.SARDelta30'), namespaceprefix_ , eol_))
        if self.Client_SARDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SARDelta30Pc>%s</%sClient.SARDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SARDelta30Pc, input_name='Client.SARDelta30Pc'), namespaceprefix_ , eol_))
        if self.Client_SARDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SARDelta7>%s</%sClient.SARDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SARDelta7, input_name='Client.SARDelta7'), namespaceprefix_ , eol_))
        if self.Client_SARDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SARDelta7Pc>%s</%sClient.SARDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SARDelta7Pc, input_name='Client.SARDelta7Pc'), namespaceprefix_ , eol_))
        if self.Client_SATenure is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SATenure>%s</%sClient.SATenure>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SATenure, input_name='Client.SATenure'), namespaceprefix_ , eol_))
        if self.Client_Utilisation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.Utilisation>%s</%sClient.Utilisation>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_Utilisation, input_name='Client.Utilisation'), namespaceprefix_ , eol_))
        if self.Client_UtilisationByQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.UtilisationByQuantity>%s</%sClient.UtilisationByQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_UtilisationByQuantity, input_name='Client.UtilisationByQuantity'), namespaceprefix_ , eol_))
        if self.Client_UtilisationByQuantityDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.UtilisationByQuantityDelta1>%s</%sClient.UtilisationByQuantityDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_UtilisationByQuantityDelta1, input_name='Client.UtilisationByQuantityDelta1'), namespaceprefix_ , eol_))
        if self.Client_UtilisationByQuantityDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.UtilisationByQuantityDelta30>%s</%sClient.UtilisationByQuantityDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_UtilisationByQuantityDelta30, input_name='Client.UtilisationByQuantityDelta30'), namespaceprefix_ , eol_))
        if self.Client_UtilisationByQuantityDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.UtilisationByQuantityDelta7>%s</%sClient.UtilisationByQuantityDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_UtilisationByQuantityDelta7, input_name='Client.UtilisationByQuantityDelta7'), namespaceprefix_ , eol_))
        if self.Client_UtilisationDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.UtilisationDelta1>%s</%sClient.UtilisationDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_UtilisationDelta1, input_name='Client.UtilisationDelta1'), namespaceprefix_ , eol_))
        if self.Client_UtilisationDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.UtilisationDelta30>%s</%sClient.UtilisationDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_UtilisationDelta30, input_name='Client.UtilisationDelta30'), namespaceprefix_ , eol_))
        if self.Client_UtilisationDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.UtilisationDelta7>%s</%sClient.UtilisationDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_UtilisationDelta7, input_name='Client.UtilisationDelta7'), namespaceprefix_ , eol_))
        if self.Client_ValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.ValueOnLoan>%s</%sClient.ValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_ValueOnLoan, input_name='Client.ValueOnLoan'), namespaceprefix_ , eol_))
        if self.Client_ValueOnLoanDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.ValueOnLoanDelta1>%s</%sClient.ValueOnLoanDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_ValueOnLoanDelta1, input_name='Client.ValueOnLoanDelta1'), namespaceprefix_ , eol_))
        if self.Client_ValueOnLoanDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.ValueOnLoanDelta1Pc>%s</%sClient.ValueOnLoanDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_ValueOnLoanDelta1Pc, input_name='Client.ValueOnLoanDelta1Pc'), namespaceprefix_ , eol_))
        if self.Client_ValueOnLoanDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.ValueOnLoanDelta30>%s</%sClient.ValueOnLoanDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_ValueOnLoanDelta30, input_name='Client.ValueOnLoanDelta30'), namespaceprefix_ , eol_))
        if self.Client_ValueOnLoanDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.ValueOnLoanDelta30Pc>%s</%sClient.ValueOnLoanDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_ValueOnLoanDelta30Pc, input_name='Client.ValueOnLoanDelta30Pc'), namespaceprefix_ , eol_))
        if self.Client_ValueOnLoanDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.ValueOnLoanDelta7>%s</%sClient.ValueOnLoanDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_ValueOnLoanDelta7, input_name='Client.ValueOnLoanDelta7'), namespaceprefix_ , eol_))
        if self.Client_ValueOnLoanDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.ValueOnLoanDelta7Pc>%s</%sClient.ValueOnLoanDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_ValueOnLoanDelta7Pc, input_name='Client.ValueOnLoanDelta7Pc'), namespaceprefix_ , eol_))
        if self.Client_VWAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWAF>%s</%sClient.VWAF>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWAF, input_name='Client.VWAF'), namespaceprefix_ , eol_))
        if self.Client_VWAF1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWAF1>%s</%sClient.VWAF1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWAF1, input_name='Client.VWAF1'), namespaceprefix_ , eol_))
        if self.Client_VWAF30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWAF30>%s</%sClient.VWAF30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWAF30, input_name='Client.VWAF30'), namespaceprefix_ , eol_))
        if self.Client_VWAF7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWAF7>%s</%sClient.VWAF7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWAF7, input_name='Client.VWAF7'), namespaceprefix_ , eol_))
        if self.Client_VWAFDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWAFDelta1>%s</%sClient.VWAFDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWAFDelta1, input_name='Client.VWAFDelta1'), namespaceprefix_ , eol_))
        if self.Client_VWAFDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWAFDelta1Pc>%s</%sClient.VWAFDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWAFDelta1Pc, input_name='Client.VWAFDelta1Pc'), namespaceprefix_ , eol_))
        if self.Client_VWAFDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWAFDelta30>%s</%sClient.VWAFDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWAFDelta30, input_name='Client.VWAFDelta30'), namespaceprefix_ , eol_))
        if self.Client_VWAFDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWAFDelta30Pc>%s</%sClient.VWAFDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWAFDelta30Pc, input_name='Client.VWAFDelta30Pc'), namespaceprefix_ , eol_))
        if self.Client_VWAFDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWAFDelta7>%s</%sClient.VWAFDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWAFDelta7, input_name='Client.VWAFDelta7'), namespaceprefix_ , eol_))
        if self.Client_VWAFDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWAFDelta7Pc>%s</%sClient.VWAFDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWAFDelta7Pc, input_name='Client.VWAFDelta7Pc'), namespaceprefix_ , eol_))
        if self.Client_VWAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWAR>%s</%sClient.VWAR>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWAR, input_name='Client.VWAR'), namespaceprefix_ , eol_))
        if self.Client_VWAR1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWAR1>%s</%sClient.VWAR1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWAR1, input_name='Client.VWAR1'), namespaceprefix_ , eol_))
        if self.Client_VWAR30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWAR30>%s</%sClient.VWAR30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWAR30, input_name='Client.VWAR30'), namespaceprefix_ , eol_))
        if self.Client_VWAR7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWAR7>%s</%sClient.VWAR7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWAR7, input_name='Client.VWAR7'), namespaceprefix_ , eol_))
        if self.Client_VWARDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWARDelta1>%s</%sClient.VWARDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWARDelta1, input_name='Client.VWARDelta1'), namespaceprefix_ , eol_))
        if self.Client_VWARDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWARDelta1Pc>%s</%sClient.VWARDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWARDelta1Pc, input_name='Client.VWARDelta1Pc'), namespaceprefix_ , eol_))
        if self.Client_VWARDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWARDelta30>%s</%sClient.VWARDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWARDelta30, input_name='Client.VWARDelta30'), namespaceprefix_ , eol_))
        if self.Client_VWARDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWARDelta30Pc>%s</%sClient.VWARDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWARDelta30Pc, input_name='Client.VWARDelta30Pc'), namespaceprefix_ , eol_))
        if self.Client_VWARDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWARDelta7>%s</%sClient.VWARDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWARDelta7, input_name='Client.VWARDelta7'), namespaceprefix_ , eol_))
        if self.Client_VWARDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWARDelta7Pc>%s</%sClient.VWARDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWARDelta7Pc, input_name='Client.VWARDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendingAgents is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendingAgents>%s</%sGroup.ActiveLendingAgents>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendingAgents, input_name='Group.ActiveLendingAgents'), namespaceprefix_ , eol_))
        if self.Group_BenchmarkFee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BenchmarkFee>%s</%sGroup.BenchmarkFee>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BenchmarkFee, input_name='Group.BenchmarkFee'), namespaceprefix_ , eol_))
        if self.Group_BenchmarkFeeDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BenchmarkFeeDelta1>%s</%sGroup.BenchmarkFeeDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BenchmarkFeeDelta1, input_name='Group.BenchmarkFeeDelta1'), namespaceprefix_ , eol_))
        if self.Group_BenchmarkFeeDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BenchmarkFeeDelta1Pc>%s</%sGroup.BenchmarkFeeDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BenchmarkFeeDelta1Pc, input_name='Group.BenchmarkFeeDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_BenchmarkFeeDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BenchmarkFeeDelta30>%s</%sGroup.BenchmarkFeeDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BenchmarkFeeDelta30, input_name='Group.BenchmarkFeeDelta30'), namespaceprefix_ , eol_))
        if self.Group_BenchmarkFeeDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BenchmarkFeeDelta30Pc>%s</%sGroup.BenchmarkFeeDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BenchmarkFeeDelta30Pc, input_name='Group.BenchmarkFeeDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_BenchmarkFeeDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BenchmarkFeeDelta7>%s</%sGroup.BenchmarkFeeDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BenchmarkFeeDelta7, input_name='Group.BenchmarkFeeDelta7'), namespaceprefix_ , eol_))
        if self.Group_BenchmarkFeeDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BenchmarkFeeDelta7Pc>%s</%sGroup.BenchmarkFeeDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BenchmarkFeeDelta7Pc, input_name='Group.BenchmarkFeeDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_BenchmarkRebate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BenchmarkRebate>%s</%sGroup.BenchmarkRebate>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BenchmarkRebate, input_name='Group.BenchmarkRebate'), namespaceprefix_ , eol_))
        if self.Group_BenchmarkRebateDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BenchmarkRebateDelta1>%s</%sGroup.BenchmarkRebateDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BenchmarkRebateDelta1, input_name='Group.BenchmarkRebateDelta1'), namespaceprefix_ , eol_))
        if self.Group_BenchmarkRebateDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BenchmarkRebateDelta1Pc>%s</%sGroup.BenchmarkRebateDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BenchmarkRebateDelta1Pc, input_name='Group.BenchmarkRebateDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_BenchmarkRebateDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BenchmarkRebateDelta30>%s</%sGroup.BenchmarkRebateDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BenchmarkRebateDelta30, input_name='Group.BenchmarkRebateDelta30'), namespaceprefix_ , eol_))
        if self.Group_BenchmarkRebateDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BenchmarkRebateDelta30Pc>%s</%sGroup.BenchmarkRebateDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BenchmarkRebateDelta30Pc, input_name='Group.BenchmarkRebateDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_BenchmarkRebateDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BenchmarkRebateDelta7>%s</%sGroup.BenchmarkRebateDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BenchmarkRebateDelta7, input_name='Group.BenchmarkRebateDelta7'), namespaceprefix_ , eol_))
        if self.Group_BenchmarkRebateDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BenchmarkRebateDelta7Pc>%s</%sGroup.BenchmarkRebateDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BenchmarkRebateDelta7Pc, input_name='Group.BenchmarkRebateDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_BorrowerConcentration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BorrowerConcentration>%s</%sGroup.BorrowerConcentration>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BorrowerConcentration, input_name='Group.BorrowerConcentration'), namespaceprefix_ , eol_))
        if self.Group_HasDividendTrading is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.HasDividendTrading>%s</%sGroup.HasDividendTrading>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Group_HasDividendTrading), input_name='Group.HasDividendTrading')), namespaceprefix_ , eol_))
        if self.Group_LenderConcentration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LenderConcentration>%s</%sGroup.LenderConcentration>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LenderConcentration, input_name='Group.LenderConcentration'), namespaceprefix_ , eol_))
        if self.Group_PrimeBrokers is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.PrimeBrokers>%s</%sGroup.PrimeBrokers>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_PrimeBrokers, input_name='Group.PrimeBrokers'), namespaceprefix_ , eol_))
        if self.Group_QuantityOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.QuantityOnLoan>%s</%sGroup.QuantityOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_QuantityOnLoan, input_name='Group.QuantityOnLoan'), namespaceprefix_ , eol_))
        if self.Group_QuantityOnLoanDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.QuantityOnLoanDelta1>%s</%sGroup.QuantityOnLoanDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_QuantityOnLoanDelta1, input_name='Group.QuantityOnLoanDelta1'), namespaceprefix_ , eol_))
        if self.Group_QuantityOnLoanDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.QuantityOnLoanDelta1Pc>%s</%sGroup.QuantityOnLoanDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_QuantityOnLoanDelta1Pc, input_name='Group.QuantityOnLoanDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_QuantityOnLoanDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.QuantityOnLoanDelta30>%s</%sGroup.QuantityOnLoanDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_QuantityOnLoanDelta30, input_name='Group.QuantityOnLoanDelta30'), namespaceprefix_ , eol_))
        if self.Group_QuantityOnLoanDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.QuantityOnLoanDelta30Pc>%s</%sGroup.QuantityOnLoanDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_QuantityOnLoanDelta30Pc, input_name='Group.QuantityOnLoanDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_QuantityOnLoanDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.QuantityOnLoanDelta7>%s</%sGroup.QuantityOnLoanDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_QuantityOnLoanDelta7, input_name='Group.QuantityOnLoanDelta7'), namespaceprefix_ , eol_))
        if self.Group_QuantityOnLoanDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.QuantityOnLoanDelta7Pc>%s</%sGroup.QuantityOnLoanDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_QuantityOnLoanDelta7Pc, input_name='Group.QuantityOnLoanDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_SAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SAF>%s</%sGroup.SAF>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SAF, input_name='Group.SAF'), namespaceprefix_ , eol_))
        if self.Group_SAFDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SAFDelta1>%s</%sGroup.SAFDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SAFDelta1, input_name='Group.SAFDelta1'), namespaceprefix_ , eol_))
        if self.Group_SAFDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SAFDelta1Pc>%s</%sGroup.SAFDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SAFDelta1Pc, input_name='Group.SAFDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_SAFDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SAFDelta30>%s</%sGroup.SAFDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SAFDelta30, input_name='Group.SAFDelta30'), namespaceprefix_ , eol_))
        if self.Group_SAFDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SAFDelta30Pc>%s</%sGroup.SAFDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SAFDelta30Pc, input_name='Group.SAFDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_SAFDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SAFDelta7>%s</%sGroup.SAFDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SAFDelta7, input_name='Group.SAFDelta7'), namespaceprefix_ , eol_))
        if self.Group_SAFDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SAFDelta7Pc>%s</%sGroup.SAFDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SAFDelta7Pc, input_name='Group.SAFDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_SAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SAR>%s</%sGroup.SAR>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SAR, input_name='Group.SAR'), namespaceprefix_ , eol_))
        if self.Group_SARDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SARDelta1>%s</%sGroup.SARDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SARDelta1, input_name='Group.SARDelta1'), namespaceprefix_ , eol_))
        if self.Group_SARDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SARDelta1Pc>%s</%sGroup.SARDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SARDelta1Pc, input_name='Group.SARDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_SARDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SARDelta30>%s</%sGroup.SARDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SARDelta30, input_name='Group.SARDelta30'), namespaceprefix_ , eol_))
        if self.Group_SARDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SARDelta30Pc>%s</%sGroup.SARDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SARDelta30Pc, input_name='Group.SARDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_SARDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SARDelta7>%s</%sGroup.SARDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SARDelta7, input_name='Group.SARDelta7'), namespaceprefix_ , eol_))
        if self.Group_SARDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SARDelta7Pc>%s</%sGroup.SARDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SARDelta7Pc, input_name='Group.SARDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_SATenure is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SATenure>%s</%sGroup.SATenure>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SATenure, input_name='Group.SATenure'), namespaceprefix_ , eol_))
        if self.Group_ShortLoanQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ShortLoanQuantity>%s</%sGroup.ShortLoanQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ShortLoanQuantity, input_name='Group.ShortLoanQuantity'), namespaceprefix_ , eol_))
        if self.Group_ShortLoanValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ShortLoanValue>%s</%sGroup.ShortLoanValue>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ShortLoanValue, input_name='Group.ShortLoanValue'), namespaceprefix_ , eol_))
        if self.Group_Utilisation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.Utilisation>%s</%sGroup.Utilisation>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_Utilisation, input_name='Group.Utilisation'), namespaceprefix_ , eol_))
        if self.Group_UtilisationByQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.UtilisationByQuantity>%s</%sGroup.UtilisationByQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_UtilisationByQuantity, input_name='Group.UtilisationByQuantity'), namespaceprefix_ , eol_))
        if self.Group_UtilisationByQuantityDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.UtilisationByQuantityDelta1>%s</%sGroup.UtilisationByQuantityDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_UtilisationByQuantityDelta1, input_name='Group.UtilisationByQuantityDelta1'), namespaceprefix_ , eol_))
        if self.Group_UtilisationByQuantityDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.UtilisationByQuantityDelta30>%s</%sGroup.UtilisationByQuantityDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_UtilisationByQuantityDelta30, input_name='Group.UtilisationByQuantityDelta30'), namespaceprefix_ , eol_))
        if self.Group_UtilisationByQuantityDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.UtilisationByQuantityDelta7>%s</%sGroup.UtilisationByQuantityDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_UtilisationByQuantityDelta7, input_name='Group.UtilisationByQuantityDelta7'), namespaceprefix_ , eol_))
        if self.Group_UtilisationDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.UtilisationDelta1>%s</%sGroup.UtilisationDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_UtilisationDelta1, input_name='Group.UtilisationDelta1'), namespaceprefix_ , eol_))
        if self.Group_UtilisationDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.UtilisationDelta30>%s</%sGroup.UtilisationDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_UtilisationDelta30, input_name='Group.UtilisationDelta30'), namespaceprefix_ , eol_))
        if self.Group_UtilisationDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.UtilisationDelta7>%s</%sGroup.UtilisationDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_UtilisationDelta7, input_name='Group.UtilisationDelta7'), namespaceprefix_ , eol_))
        if self.Group_ValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ValueOnLoan>%s</%sGroup.ValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ValueOnLoan, input_name='Group.ValueOnLoan'), namespaceprefix_ , eol_))
        if self.Group_ValueOnLoanDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ValueOnLoanDelta1>%s</%sGroup.ValueOnLoanDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ValueOnLoanDelta1, input_name='Group.ValueOnLoanDelta1'), namespaceprefix_ , eol_))
        if self.Group_ValueOnLoanDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ValueOnLoanDelta1Pc>%s</%sGroup.ValueOnLoanDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ValueOnLoanDelta1Pc, input_name='Group.ValueOnLoanDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_ValueOnLoanDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ValueOnLoanDelta30>%s</%sGroup.ValueOnLoanDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ValueOnLoanDelta30, input_name='Group.ValueOnLoanDelta30'), namespaceprefix_ , eol_))
        if self.Group_ValueOnLoanDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ValueOnLoanDelta30Pc>%s</%sGroup.ValueOnLoanDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ValueOnLoanDelta30Pc, input_name='Group.ValueOnLoanDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_ValueOnLoanDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ValueOnLoanDelta7>%s</%sGroup.ValueOnLoanDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ValueOnLoanDelta7, input_name='Group.ValueOnLoanDelta7'), namespaceprefix_ , eol_))
        if self.Group_ValueOnLoanDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ValueOnLoanDelta7Pc>%s</%sGroup.ValueOnLoanDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ValueOnLoanDelta7Pc, input_name='Group.ValueOnLoanDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_VWAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAF>%s</%sGroup.VWAF>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAF, input_name='Group.VWAF'), namespaceprefix_ , eol_))
        if self.Group_VWAF1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAF1>%s</%sGroup.VWAF1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAF1, input_name='Group.VWAF1'), namespaceprefix_ , eol_))
        if self.Group_VWAF30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAF30>%s</%sGroup.VWAF30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAF30, input_name='Group.VWAF30'), namespaceprefix_ , eol_))
        if self.Group_VWAF7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAF7>%s</%sGroup.VWAF7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAF7, input_name='Group.VWAF7'), namespaceprefix_ , eol_))
        if self.Group_VWAFDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAFDelta1>%s</%sGroup.VWAFDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAFDelta1, input_name='Group.VWAFDelta1'), namespaceprefix_ , eol_))
        if self.Group_VWAFDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAFDelta1Pc>%s</%sGroup.VWAFDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAFDelta1Pc, input_name='Group.VWAFDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_VWAFDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAFDelta30>%s</%sGroup.VWAFDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAFDelta30, input_name='Group.VWAFDelta30'), namespaceprefix_ , eol_))
        if self.Group_VWAFDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAFDelta30Pc>%s</%sGroup.VWAFDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAFDelta30Pc, input_name='Group.VWAFDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_VWAFDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAFDelta7>%s</%sGroup.VWAFDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAFDelta7, input_name='Group.VWAFDelta7'), namespaceprefix_ , eol_))
        if self.Group_VWAFDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAFDelta7Pc>%s</%sGroup.VWAFDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAFDelta7Pc, input_name='Group.VWAFDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_VWAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAR>%s</%sGroup.VWAR>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAR, input_name='Group.VWAR'), namespaceprefix_ , eol_))
        if self.Group_VWAR1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAR1>%s</%sGroup.VWAR1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAR1, input_name='Group.VWAR1'), namespaceprefix_ , eol_))
        if self.Group_VWAR30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAR30>%s</%sGroup.VWAR30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAR30, input_name='Group.VWAR30'), namespaceprefix_ , eol_))
        if self.Group_VWAR7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAR7>%s</%sGroup.VWAR7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAR7, input_name='Group.VWAR7'), namespaceprefix_ , eol_))
        if self.Group_VWARDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWARDelta1>%s</%sGroup.VWARDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWARDelta1, input_name='Group.VWARDelta1'), namespaceprefix_ , eol_))
        if self.Group_VWARDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWARDelta1Pc>%s</%sGroup.VWARDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWARDelta1Pc, input_name='Group.VWARDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_VWARDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWARDelta30>%s</%sGroup.VWARDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWARDelta30, input_name='Group.VWARDelta30'), namespaceprefix_ , eol_))
        if self.Group_VWARDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWARDelta30Pc>%s</%sGroup.VWARDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWARDelta30Pc, input_name='Group.VWARDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_VWARDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWARDelta7>%s</%sGroup.VWARDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWARDelta7, input_name='Group.VWARDelta7'), namespaceprefix_ , eol_))
        if self.Group_VWARDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWARDelta7Pc>%s</%sGroup.VWARDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWARDelta7Pc, input_name='Group.VWARDelta7Pc'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Client.DailyCost' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_DailyCost')
            self.Client_DailyCost = fval_
        elif nodeName_ == 'Client.DailyRevenue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_DailyRevenue')
            self.Client_DailyRevenue = fval_
        elif nodeName_ == 'Client.MarketShare' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_MarketShare')
            self.Client_MarketShare = fval_
        elif nodeName_ == 'Client.MarketShareDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_MarketShareDelta1')
            self.Client_MarketShareDelta1 = fval_
        elif nodeName_ == 'Client.MarketShareDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_MarketShareDelta30')
            self.Client_MarketShareDelta30 = fval_
        elif nodeName_ == 'Client.MarketShareDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_MarketShareDelta7')
            self.Client_MarketShareDelta7 = fval_
        elif nodeName_ == 'Client.MarketShareRank' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_MarketShareRank')
            self.Client_MarketShareRank = fval_
        elif nodeName_ == 'Client.OpportunityGainLoss' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_OpportunityGainLoss')
            self.Client_OpportunityGainLoss = fval_
        elif nodeName_ == 'Client.QuantityOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_QuantityOnLoan')
            self.Client_QuantityOnLoan = fval_
        elif nodeName_ == 'Client.QuantityOnLoanDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_QuantityOnLoanDelta1')
            self.Client_QuantityOnLoanDelta1 = fval_
        elif nodeName_ == 'Client.QuantityOnLoanDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_QuantityOnLoanDelta1Pc')
            self.Client_QuantityOnLoanDelta1Pc = fval_
        elif nodeName_ == 'Client.QuantityOnLoanDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_QuantityOnLoanDelta30')
            self.Client_QuantityOnLoanDelta30 = fval_
        elif nodeName_ == 'Client.QuantityOnLoanDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_QuantityOnLoanDelta30Pc')
            self.Client_QuantityOnLoanDelta30Pc = fval_
        elif nodeName_ == 'Client.QuantityOnLoanDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_QuantityOnLoanDelta7')
            self.Client_QuantityOnLoanDelta7 = fval_
        elif nodeName_ == 'Client.QuantityOnLoanDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_QuantityOnLoanDelta7Pc')
            self.Client_QuantityOnLoanDelta7Pc = fval_
        elif nodeName_ == 'Client.SAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SAF')
            self.Client_SAF = fval_
        elif nodeName_ == 'Client.SAFDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SAFDelta1')
            self.Client_SAFDelta1 = fval_
        elif nodeName_ == 'Client.SAFDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SAFDelta1Pc')
            self.Client_SAFDelta1Pc = fval_
        elif nodeName_ == 'Client.SAFDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SAFDelta30')
            self.Client_SAFDelta30 = fval_
        elif nodeName_ == 'Client.SAFDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SAFDelta30Pc')
            self.Client_SAFDelta30Pc = fval_
        elif nodeName_ == 'Client.SAFDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SAFDelta7')
            self.Client_SAFDelta7 = fval_
        elif nodeName_ == 'Client.SAFDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SAFDelta7Pc')
            self.Client_SAFDelta7Pc = fval_
        elif nodeName_ == 'Client.SAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SAR')
            self.Client_SAR = fval_
        elif nodeName_ == 'Client.SARDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SARDelta1')
            self.Client_SARDelta1 = fval_
        elif nodeName_ == 'Client.SARDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SARDelta1Pc')
            self.Client_SARDelta1Pc = fval_
        elif nodeName_ == 'Client.SARDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SARDelta30')
            self.Client_SARDelta30 = fval_
        elif nodeName_ == 'Client.SARDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SARDelta30Pc')
            self.Client_SARDelta30Pc = fval_
        elif nodeName_ == 'Client.SARDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SARDelta7')
            self.Client_SARDelta7 = fval_
        elif nodeName_ == 'Client.SARDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SARDelta7Pc')
            self.Client_SARDelta7Pc = fval_
        elif nodeName_ == 'Client.SATenure' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SATenure')
            self.Client_SATenure = fval_
        elif nodeName_ == 'Client.Utilisation' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_Utilisation')
            self.Client_Utilisation = fval_
        elif nodeName_ == 'Client.UtilisationByQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_UtilisationByQuantity')
            self.Client_UtilisationByQuantity = fval_
        elif nodeName_ == 'Client.UtilisationByQuantityDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_UtilisationByQuantityDelta1')
            self.Client_UtilisationByQuantityDelta1 = fval_
        elif nodeName_ == 'Client.UtilisationByQuantityDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_UtilisationByQuantityDelta30')
            self.Client_UtilisationByQuantityDelta30 = fval_
        elif nodeName_ == 'Client.UtilisationByQuantityDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_UtilisationByQuantityDelta7')
            self.Client_UtilisationByQuantityDelta7 = fval_
        elif nodeName_ == 'Client.UtilisationDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_UtilisationDelta1')
            self.Client_UtilisationDelta1 = fval_
        elif nodeName_ == 'Client.UtilisationDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_UtilisationDelta30')
            self.Client_UtilisationDelta30 = fval_
        elif nodeName_ == 'Client.UtilisationDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_UtilisationDelta7')
            self.Client_UtilisationDelta7 = fval_
        elif nodeName_ == 'Client.ValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_ValueOnLoan')
            self.Client_ValueOnLoan = fval_
        elif nodeName_ == 'Client.ValueOnLoanDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_ValueOnLoanDelta1')
            self.Client_ValueOnLoanDelta1 = fval_
        elif nodeName_ == 'Client.ValueOnLoanDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_ValueOnLoanDelta1Pc')
            self.Client_ValueOnLoanDelta1Pc = fval_
        elif nodeName_ == 'Client.ValueOnLoanDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_ValueOnLoanDelta30')
            self.Client_ValueOnLoanDelta30 = fval_
        elif nodeName_ == 'Client.ValueOnLoanDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_ValueOnLoanDelta30Pc')
            self.Client_ValueOnLoanDelta30Pc = fval_
        elif nodeName_ == 'Client.ValueOnLoanDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_ValueOnLoanDelta7')
            self.Client_ValueOnLoanDelta7 = fval_
        elif nodeName_ == 'Client.ValueOnLoanDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_ValueOnLoanDelta7Pc')
            self.Client_ValueOnLoanDelta7Pc = fval_
        elif nodeName_ == 'Client.VWAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWAF')
            self.Client_VWAF = fval_
        elif nodeName_ == 'Client.VWAF1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWAF1')
            self.Client_VWAF1 = fval_
        elif nodeName_ == 'Client.VWAF30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWAF30')
            self.Client_VWAF30 = fval_
        elif nodeName_ == 'Client.VWAF7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWAF7')
            self.Client_VWAF7 = fval_
        elif nodeName_ == 'Client.VWAFDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWAFDelta1')
            self.Client_VWAFDelta1 = fval_
        elif nodeName_ == 'Client.VWAFDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWAFDelta1Pc')
            self.Client_VWAFDelta1Pc = fval_
        elif nodeName_ == 'Client.VWAFDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWAFDelta30')
            self.Client_VWAFDelta30 = fval_
        elif nodeName_ == 'Client.VWAFDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWAFDelta30Pc')
            self.Client_VWAFDelta30Pc = fval_
        elif nodeName_ == 'Client.VWAFDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWAFDelta7')
            self.Client_VWAFDelta7 = fval_
        elif nodeName_ == 'Client.VWAFDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWAFDelta7Pc')
            self.Client_VWAFDelta7Pc = fval_
        elif nodeName_ == 'Client.VWAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWAR')
            self.Client_VWAR = fval_
        elif nodeName_ == 'Client.VWAR1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWAR1')
            self.Client_VWAR1 = fval_
        elif nodeName_ == 'Client.VWAR30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWAR30')
            self.Client_VWAR30 = fval_
        elif nodeName_ == 'Client.VWAR7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWAR7')
            self.Client_VWAR7 = fval_
        elif nodeName_ == 'Client.VWARDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWARDelta1')
            self.Client_VWARDelta1 = fval_
        elif nodeName_ == 'Client.VWARDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWARDelta1Pc')
            self.Client_VWARDelta1Pc = fval_
        elif nodeName_ == 'Client.VWARDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWARDelta30')
            self.Client_VWARDelta30 = fval_
        elif nodeName_ == 'Client.VWARDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWARDelta30Pc')
            self.Client_VWARDelta30Pc = fval_
        elif nodeName_ == 'Client.VWARDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWARDelta7')
            self.Client_VWARDelta7 = fval_
        elif nodeName_ == 'Client.VWARDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWARDelta7Pc')
            self.Client_VWARDelta7Pc = fval_
        elif nodeName_ == 'Group.ActiveLendingAgents' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendingAgents')
            self.Group_ActiveLendingAgents = fval_
        elif nodeName_ == 'Group.BenchmarkFee' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BenchmarkFee')
            self.Group_BenchmarkFee = fval_
        elif nodeName_ == 'Group.BenchmarkFeeDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BenchmarkFeeDelta1')
            self.Group_BenchmarkFeeDelta1 = fval_
        elif nodeName_ == 'Group.BenchmarkFeeDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BenchmarkFeeDelta1Pc')
            self.Group_BenchmarkFeeDelta1Pc = fval_
        elif nodeName_ == 'Group.BenchmarkFeeDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BenchmarkFeeDelta30')
            self.Group_BenchmarkFeeDelta30 = fval_
        elif nodeName_ == 'Group.BenchmarkFeeDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BenchmarkFeeDelta30Pc')
            self.Group_BenchmarkFeeDelta30Pc = fval_
        elif nodeName_ == 'Group.BenchmarkFeeDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BenchmarkFeeDelta7')
            self.Group_BenchmarkFeeDelta7 = fval_
        elif nodeName_ == 'Group.BenchmarkFeeDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BenchmarkFeeDelta7Pc')
            self.Group_BenchmarkFeeDelta7Pc = fval_
        elif nodeName_ == 'Group.BenchmarkRebate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BenchmarkRebate')
            self.Group_BenchmarkRebate = fval_
        elif nodeName_ == 'Group.BenchmarkRebateDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BenchmarkRebateDelta1')
            self.Group_BenchmarkRebateDelta1 = fval_
        elif nodeName_ == 'Group.BenchmarkRebateDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BenchmarkRebateDelta1Pc')
            self.Group_BenchmarkRebateDelta1Pc = fval_
        elif nodeName_ == 'Group.BenchmarkRebateDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BenchmarkRebateDelta30')
            self.Group_BenchmarkRebateDelta30 = fval_
        elif nodeName_ == 'Group.BenchmarkRebateDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BenchmarkRebateDelta30Pc')
            self.Group_BenchmarkRebateDelta30Pc = fval_
        elif nodeName_ == 'Group.BenchmarkRebateDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BenchmarkRebateDelta7')
            self.Group_BenchmarkRebateDelta7 = fval_
        elif nodeName_ == 'Group.BenchmarkRebateDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BenchmarkRebateDelta7Pc')
            self.Group_BenchmarkRebateDelta7Pc = fval_
        elif nodeName_ == 'Group.BorrowerConcentration' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BorrowerConcentration')
            self.Group_BorrowerConcentration = fval_
        elif nodeName_ == 'Group.HasDividendTrading':
            Group_HasDividendTrading_ = child_.text
            Group_HasDividendTrading_ = self.gds_validate_string(Group_HasDividendTrading_, node, 'Group_HasDividendTrading')
            self.Group_HasDividendTrading = Group_HasDividendTrading_
        elif nodeName_ == 'Group.LenderConcentration' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LenderConcentration')
            self.Group_LenderConcentration = fval_
        elif nodeName_ == 'Group.PrimeBrokers' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_PrimeBrokers')
            self.Group_PrimeBrokers = fval_
        elif nodeName_ == 'Group.QuantityOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_QuantityOnLoan')
            self.Group_QuantityOnLoan = fval_
        elif nodeName_ == 'Group.QuantityOnLoanDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_QuantityOnLoanDelta1')
            self.Group_QuantityOnLoanDelta1 = fval_
        elif nodeName_ == 'Group.QuantityOnLoanDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_QuantityOnLoanDelta1Pc')
            self.Group_QuantityOnLoanDelta1Pc = fval_
        elif nodeName_ == 'Group.QuantityOnLoanDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_QuantityOnLoanDelta30')
            self.Group_QuantityOnLoanDelta30 = fval_
        elif nodeName_ == 'Group.QuantityOnLoanDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_QuantityOnLoanDelta30Pc')
            self.Group_QuantityOnLoanDelta30Pc = fval_
        elif nodeName_ == 'Group.QuantityOnLoanDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_QuantityOnLoanDelta7')
            self.Group_QuantityOnLoanDelta7 = fval_
        elif nodeName_ == 'Group.QuantityOnLoanDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_QuantityOnLoanDelta7Pc')
            self.Group_QuantityOnLoanDelta7Pc = fval_
        elif nodeName_ == 'Group.SAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SAF')
            self.Group_SAF = fval_
        elif nodeName_ == 'Group.SAFDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SAFDelta1')
            self.Group_SAFDelta1 = fval_
        elif nodeName_ == 'Group.SAFDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SAFDelta1Pc')
            self.Group_SAFDelta1Pc = fval_
        elif nodeName_ == 'Group.SAFDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SAFDelta30')
            self.Group_SAFDelta30 = fval_
        elif nodeName_ == 'Group.SAFDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SAFDelta30Pc')
            self.Group_SAFDelta30Pc = fval_
        elif nodeName_ == 'Group.SAFDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SAFDelta7')
            self.Group_SAFDelta7 = fval_
        elif nodeName_ == 'Group.SAFDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SAFDelta7Pc')
            self.Group_SAFDelta7Pc = fval_
        elif nodeName_ == 'Group.SAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SAR')
            self.Group_SAR = fval_
        elif nodeName_ == 'Group.SARDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SARDelta1')
            self.Group_SARDelta1 = fval_
        elif nodeName_ == 'Group.SARDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SARDelta1Pc')
            self.Group_SARDelta1Pc = fval_
        elif nodeName_ == 'Group.SARDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SARDelta30')
            self.Group_SARDelta30 = fval_
        elif nodeName_ == 'Group.SARDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SARDelta30Pc')
            self.Group_SARDelta30Pc = fval_
        elif nodeName_ == 'Group.SARDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SARDelta7')
            self.Group_SARDelta7 = fval_
        elif nodeName_ == 'Group.SARDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SARDelta7Pc')
            self.Group_SARDelta7Pc = fval_
        elif nodeName_ == 'Group.SATenure' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SATenure')
            self.Group_SATenure = fval_
        elif nodeName_ == 'Group.ShortLoanQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ShortLoanQuantity')
            self.Group_ShortLoanQuantity = fval_
        elif nodeName_ == 'Group.ShortLoanValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ShortLoanValue')
            self.Group_ShortLoanValue = fval_
        elif nodeName_ == 'Group.Utilisation' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_Utilisation')
            self.Group_Utilisation = fval_
        elif nodeName_ == 'Group.UtilisationByQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_UtilisationByQuantity')
            self.Group_UtilisationByQuantity = fval_
        elif nodeName_ == 'Group.UtilisationByQuantityDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_UtilisationByQuantityDelta1')
            self.Group_UtilisationByQuantityDelta1 = fval_
        elif nodeName_ == 'Group.UtilisationByQuantityDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_UtilisationByQuantityDelta30')
            self.Group_UtilisationByQuantityDelta30 = fval_
        elif nodeName_ == 'Group.UtilisationByQuantityDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_UtilisationByQuantityDelta7')
            self.Group_UtilisationByQuantityDelta7 = fval_
        elif nodeName_ == 'Group.UtilisationDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_UtilisationDelta1')
            self.Group_UtilisationDelta1 = fval_
        elif nodeName_ == 'Group.UtilisationDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_UtilisationDelta30')
            self.Group_UtilisationDelta30 = fval_
        elif nodeName_ == 'Group.UtilisationDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_UtilisationDelta7')
            self.Group_UtilisationDelta7 = fval_
        elif nodeName_ == 'Group.ValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ValueOnLoan')
            self.Group_ValueOnLoan = fval_
        elif nodeName_ == 'Group.ValueOnLoanDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ValueOnLoanDelta1')
            self.Group_ValueOnLoanDelta1 = fval_
        elif nodeName_ == 'Group.ValueOnLoanDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ValueOnLoanDelta1Pc')
            self.Group_ValueOnLoanDelta1Pc = fval_
        elif nodeName_ == 'Group.ValueOnLoanDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ValueOnLoanDelta30')
            self.Group_ValueOnLoanDelta30 = fval_
        elif nodeName_ == 'Group.ValueOnLoanDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ValueOnLoanDelta30Pc')
            self.Group_ValueOnLoanDelta30Pc = fval_
        elif nodeName_ == 'Group.ValueOnLoanDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ValueOnLoanDelta7')
            self.Group_ValueOnLoanDelta7 = fval_
        elif nodeName_ == 'Group.ValueOnLoanDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ValueOnLoanDelta7Pc')
            self.Group_ValueOnLoanDelta7Pc = fval_
        elif nodeName_ == 'Group.VWAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAF')
            self.Group_VWAF = fval_
        elif nodeName_ == 'Group.VWAF1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAF1')
            self.Group_VWAF1 = fval_
        elif nodeName_ == 'Group.VWAF30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAF30')
            self.Group_VWAF30 = fval_
        elif nodeName_ == 'Group.VWAF7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAF7')
            self.Group_VWAF7 = fval_
        elif nodeName_ == 'Group.VWAFDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAFDelta1')
            self.Group_VWAFDelta1 = fval_
        elif nodeName_ == 'Group.VWAFDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAFDelta1Pc')
            self.Group_VWAFDelta1Pc = fval_
        elif nodeName_ == 'Group.VWAFDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAFDelta30')
            self.Group_VWAFDelta30 = fval_
        elif nodeName_ == 'Group.VWAFDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAFDelta30Pc')
            self.Group_VWAFDelta30Pc = fval_
        elif nodeName_ == 'Group.VWAFDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAFDelta7')
            self.Group_VWAFDelta7 = fval_
        elif nodeName_ == 'Group.VWAFDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAFDelta7Pc')
            self.Group_VWAFDelta7Pc = fval_
        elif nodeName_ == 'Group.VWAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAR')
            self.Group_VWAR = fval_
        elif nodeName_ == 'Group.VWAR1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAR1')
            self.Group_VWAR1 = fval_
        elif nodeName_ == 'Group.VWAR30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAR30')
            self.Group_VWAR30 = fval_
        elif nodeName_ == 'Group.VWAR7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAR7')
            self.Group_VWAR7 = fval_
        elif nodeName_ == 'Group.VWARDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWARDelta1')
            self.Group_VWARDelta1 = fval_
        elif nodeName_ == 'Group.VWARDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWARDelta1Pc')
            self.Group_VWARDelta1Pc = fval_
        elif nodeName_ == 'Group.VWARDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWARDelta30')
            self.Group_VWARDelta30 = fval_
        elif nodeName_ == 'Group.VWARDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWARDelta30Pc')
            self.Group_VWARDelta30Pc = fval_
        elif nodeName_ == 'Group.VWARDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWARDelta7')
            self.Group_VWARDelta7 = fval_
        elif nodeName_ == 'Group.VWARDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWARDelta7Pc')
            self.Group_VWARDelta7Pc = fval_
# end class TradingType79


class TransactionDataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TradeType=None, Transaction_CollateralCurrency=None, Transaction_CollateralType=None, Transaction_ComparativeDailyCostIndicative=None, Transaction_ComparativeDailyCostMySA=None, Transaction_ComparativeDailyCostSA=None, Transaction_Counterpart=None, Transaction_DailyCost=None, Transaction_DailyCostCombined=None, Transaction_DailyCostDifferenceIndicative=None, Transaction_DailyCostDifferenceMySA=None, Transaction_DailyCostDifferenceSA=None, Transaction_DividendRequirement=None, Transaction_Duration=None, Transaction_Fee=None, Transaction_FundName=None, Transaction_Quantity=None, Transaction_RateVarianceIndicative=None, Transaction_RateVarianceMySA=None, Transaction_RateVarianceSA=None, Transaction_Rebate=None, Transaction_StartDate=None, Transaction_TradeStyle=None, Transaction_TransactionFee=None, Transaction_TransactionRef=None, Transaction_Value=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.TradeType = TradeType
        self.Transaction_CollateralCurrency = Transaction_CollateralCurrency
        self.Transaction_CollateralType = Transaction_CollateralType
        self.Transaction_ComparativeDailyCostIndicative = Transaction_ComparativeDailyCostIndicative
        self.Transaction_ComparativeDailyCostMySA = Transaction_ComparativeDailyCostMySA
        self.Transaction_ComparativeDailyCostSA = Transaction_ComparativeDailyCostSA
        self.Transaction_Counterpart = Transaction_Counterpart
        self.Transaction_DailyCost = Transaction_DailyCost
        self.Transaction_DailyCostCombined = Transaction_DailyCostCombined
        self.Transaction_DailyCostDifferenceIndicative = Transaction_DailyCostDifferenceIndicative
        self.Transaction_DailyCostDifferenceMySA = Transaction_DailyCostDifferenceMySA
        self.Transaction_DailyCostDifferenceSA = Transaction_DailyCostDifferenceSA
        self.Transaction_DividendRequirement = Transaction_DividendRequirement
        self.Transaction_Duration = Transaction_Duration
        self.Transaction_Fee = Transaction_Fee
        self.Transaction_FundName = Transaction_FundName
        self.Transaction_Quantity = Transaction_Quantity
        self.Transaction_RateVarianceIndicative = Transaction_RateVarianceIndicative
        self.Transaction_RateVarianceMySA = Transaction_RateVarianceMySA
        self.Transaction_RateVarianceSA = Transaction_RateVarianceSA
        self.Transaction_Rebate = Transaction_Rebate
        if isinstance(Transaction_StartDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Transaction_StartDate, '%Y-%m-%d').date()
        else:
            initvalue_ = Transaction_StartDate
        self.Transaction_StartDate = initvalue_
        self.Transaction_TradeStyle = Transaction_TradeStyle
        self.Transaction_TransactionFee = Transaction_TransactionFee
        self.Transaction_TransactionRef = Transaction_TransactionRef
        self.Transaction_Value = Transaction_Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransactionDataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransactionDataType.subclass:
            return TransactionDataType.subclass(*args_, **kwargs_)
        else:
            return TransactionDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TradeType(self):
        return self.TradeType
    def set_TradeType(self, TradeType):
        self.TradeType = TradeType
    def get_Transaction_CollateralCurrency(self):
        return self.Transaction_CollateralCurrency
    def set_Transaction_CollateralCurrency(self, Transaction_CollateralCurrency):
        self.Transaction_CollateralCurrency = Transaction_CollateralCurrency
    def get_Transaction_CollateralType(self):
        return self.Transaction_CollateralType
    def set_Transaction_CollateralType(self, Transaction_CollateralType):
        self.Transaction_CollateralType = Transaction_CollateralType
    def get_Transaction_ComparativeDailyCostIndicative(self):
        return self.Transaction_ComparativeDailyCostIndicative
    def set_Transaction_ComparativeDailyCostIndicative(self, Transaction_ComparativeDailyCostIndicative):
        self.Transaction_ComparativeDailyCostIndicative = Transaction_ComparativeDailyCostIndicative
    def get_Transaction_ComparativeDailyCostMySA(self):
        return self.Transaction_ComparativeDailyCostMySA
    def set_Transaction_ComparativeDailyCostMySA(self, Transaction_ComparativeDailyCostMySA):
        self.Transaction_ComparativeDailyCostMySA = Transaction_ComparativeDailyCostMySA
    def get_Transaction_ComparativeDailyCostSA(self):
        return self.Transaction_ComparativeDailyCostSA
    def set_Transaction_ComparativeDailyCostSA(self, Transaction_ComparativeDailyCostSA):
        self.Transaction_ComparativeDailyCostSA = Transaction_ComparativeDailyCostSA
    def get_Transaction_Counterpart(self):
        return self.Transaction_Counterpart
    def set_Transaction_Counterpart(self, Transaction_Counterpart):
        self.Transaction_Counterpart = Transaction_Counterpart
    def get_Transaction_DailyCost(self):
        return self.Transaction_DailyCost
    def set_Transaction_DailyCost(self, Transaction_DailyCost):
        self.Transaction_DailyCost = Transaction_DailyCost
    def get_Transaction_DailyCostCombined(self):
        return self.Transaction_DailyCostCombined
    def set_Transaction_DailyCostCombined(self, Transaction_DailyCostCombined):
        self.Transaction_DailyCostCombined = Transaction_DailyCostCombined
    def get_Transaction_DailyCostDifferenceIndicative(self):
        return self.Transaction_DailyCostDifferenceIndicative
    def set_Transaction_DailyCostDifferenceIndicative(self, Transaction_DailyCostDifferenceIndicative):
        self.Transaction_DailyCostDifferenceIndicative = Transaction_DailyCostDifferenceIndicative
    def get_Transaction_DailyCostDifferenceMySA(self):
        return self.Transaction_DailyCostDifferenceMySA
    def set_Transaction_DailyCostDifferenceMySA(self, Transaction_DailyCostDifferenceMySA):
        self.Transaction_DailyCostDifferenceMySA = Transaction_DailyCostDifferenceMySA
    def get_Transaction_DailyCostDifferenceSA(self):
        return self.Transaction_DailyCostDifferenceSA
    def set_Transaction_DailyCostDifferenceSA(self, Transaction_DailyCostDifferenceSA):
        self.Transaction_DailyCostDifferenceSA = Transaction_DailyCostDifferenceSA
    def get_Transaction_DividendRequirement(self):
        return self.Transaction_DividendRequirement
    def set_Transaction_DividendRequirement(self, Transaction_DividendRequirement):
        self.Transaction_DividendRequirement = Transaction_DividendRequirement
    def get_Transaction_Duration(self):
        return self.Transaction_Duration
    def set_Transaction_Duration(self, Transaction_Duration):
        self.Transaction_Duration = Transaction_Duration
    def get_Transaction_Fee(self):
        return self.Transaction_Fee
    def set_Transaction_Fee(self, Transaction_Fee):
        self.Transaction_Fee = Transaction_Fee
    def get_Transaction_FundName(self):
        return self.Transaction_FundName
    def set_Transaction_FundName(self, Transaction_FundName):
        self.Transaction_FundName = Transaction_FundName
    def get_Transaction_Quantity(self):
        return self.Transaction_Quantity
    def set_Transaction_Quantity(self, Transaction_Quantity):
        self.Transaction_Quantity = Transaction_Quantity
    def get_Transaction_RateVarianceIndicative(self):
        return self.Transaction_RateVarianceIndicative
    def set_Transaction_RateVarianceIndicative(self, Transaction_RateVarianceIndicative):
        self.Transaction_RateVarianceIndicative = Transaction_RateVarianceIndicative
    def get_Transaction_RateVarianceMySA(self):
        return self.Transaction_RateVarianceMySA
    def set_Transaction_RateVarianceMySA(self, Transaction_RateVarianceMySA):
        self.Transaction_RateVarianceMySA = Transaction_RateVarianceMySA
    def get_Transaction_RateVarianceSA(self):
        return self.Transaction_RateVarianceSA
    def set_Transaction_RateVarianceSA(self, Transaction_RateVarianceSA):
        self.Transaction_RateVarianceSA = Transaction_RateVarianceSA
    def get_Transaction_Rebate(self):
        return self.Transaction_Rebate
    def set_Transaction_Rebate(self, Transaction_Rebate):
        self.Transaction_Rebate = Transaction_Rebate
    def get_Transaction_StartDate(self):
        return self.Transaction_StartDate
    def set_Transaction_StartDate(self, Transaction_StartDate):
        self.Transaction_StartDate = Transaction_StartDate
    def get_Transaction_TradeStyle(self):
        return self.Transaction_TradeStyle
    def set_Transaction_TradeStyle(self, Transaction_TradeStyle):
        self.Transaction_TradeStyle = Transaction_TradeStyle
    def get_Transaction_TransactionFee(self):
        return self.Transaction_TransactionFee
    def set_Transaction_TransactionFee(self, Transaction_TransactionFee):
        self.Transaction_TransactionFee = Transaction_TransactionFee
    def get_Transaction_TransactionRef(self):
        return self.Transaction_TransactionRef
    def set_Transaction_TransactionRef(self, Transaction_TransactionRef):
        self.Transaction_TransactionRef = Transaction_TransactionRef
    def get_Transaction_Value(self):
        return self.Transaction_Value
    def set_Transaction_Value(self, Transaction_Value):
        self.Transaction_Value = Transaction_Value
    def hasContent_(self):
        if (
            self.TradeType is not None or
            self.Transaction_CollateralCurrency is not None or
            self.Transaction_CollateralType is not None or
            self.Transaction_ComparativeDailyCostIndicative is not None or
            self.Transaction_ComparativeDailyCostMySA is not None or
            self.Transaction_ComparativeDailyCostSA is not None or
            self.Transaction_Counterpart is not None or
            self.Transaction_DailyCost is not None or
            self.Transaction_DailyCostCombined is not None or
            self.Transaction_DailyCostDifferenceIndicative is not None or
            self.Transaction_DailyCostDifferenceMySA is not None or
            self.Transaction_DailyCostDifferenceSA is not None or
            self.Transaction_DividendRequirement is not None or
            self.Transaction_Duration is not None or
            self.Transaction_Fee is not None or
            self.Transaction_FundName is not None or
            self.Transaction_Quantity is not None or
            self.Transaction_RateVarianceIndicative is not None or
            self.Transaction_RateVarianceMySA is not None or
            self.Transaction_RateVarianceSA is not None or
            self.Transaction_Rebate is not None or
            self.Transaction_StartDate is not None or
            self.Transaction_TradeStyle is not None or
            self.Transaction_TransactionFee is not None or
            self.Transaction_TransactionRef is not None or
            self.Transaction_Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TransactionDataType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransactionDataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransactionDataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransactionDataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TransactionDataType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TransactionDataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TradeType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradeType>%s</%sTradeType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TradeType), input_name='TradeType')), namespaceprefix_ , eol_))
        if self.Transaction_CollateralCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.CollateralCurrency>%s</%sTransaction.CollateralCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Transaction_CollateralCurrency), input_name='Transaction.CollateralCurrency')), namespaceprefix_ , eol_))
        if self.Transaction_CollateralType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.CollateralType>%s</%sTransaction.CollateralType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Transaction_CollateralType), input_name='Transaction.CollateralType')), namespaceprefix_ , eol_))
        if self.Transaction_ComparativeDailyCostIndicative is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.ComparativeDailyCostIndicative>%s</%sTransaction.ComparativeDailyCostIndicative>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_ComparativeDailyCostIndicative, input_name='Transaction.ComparativeDailyCostIndicative'), namespaceprefix_ , eol_))
        if self.Transaction_ComparativeDailyCostMySA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.ComparativeDailyCostMySA>%s</%sTransaction.ComparativeDailyCostMySA>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_ComparativeDailyCostMySA, input_name='Transaction.ComparativeDailyCostMySA'), namespaceprefix_ , eol_))
        if self.Transaction_ComparativeDailyCostSA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.ComparativeDailyCostSA>%s</%sTransaction.ComparativeDailyCostSA>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_ComparativeDailyCostSA, input_name='Transaction.ComparativeDailyCostSA'), namespaceprefix_ , eol_))
        if self.Transaction_Counterpart is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.Counterpart>%s</%sTransaction.Counterpart>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Transaction_Counterpart), input_name='Transaction.Counterpart')), namespaceprefix_ , eol_))
        if self.Transaction_DailyCost is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.DailyCost>%s</%sTransaction.DailyCost>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_DailyCost, input_name='Transaction.DailyCost'), namespaceprefix_ , eol_))
        if self.Transaction_DailyCostCombined is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.DailyCostCombined>%s</%sTransaction.DailyCostCombined>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_DailyCostCombined, input_name='Transaction.DailyCostCombined'), namespaceprefix_ , eol_))
        if self.Transaction_DailyCostDifferenceIndicative is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.DailyCostDifferenceIndicative>%s</%sTransaction.DailyCostDifferenceIndicative>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_DailyCostDifferenceIndicative, input_name='Transaction.DailyCostDifferenceIndicative'), namespaceprefix_ , eol_))
        if self.Transaction_DailyCostDifferenceMySA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.DailyCostDifferenceMySA>%s</%sTransaction.DailyCostDifferenceMySA>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_DailyCostDifferenceMySA, input_name='Transaction.DailyCostDifferenceMySA'), namespaceprefix_ , eol_))
        if self.Transaction_DailyCostDifferenceSA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.DailyCostDifferenceSA>%s</%sTransaction.DailyCostDifferenceSA>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_DailyCostDifferenceSA, input_name='Transaction.DailyCostDifferenceSA'), namespaceprefix_ , eol_))
        if self.Transaction_DividendRequirement is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.DividendRequirement>%s</%sTransaction.DividendRequirement>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_DividendRequirement, input_name='Transaction.DividendRequirement'), namespaceprefix_ , eol_))
        if self.Transaction_Duration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.Duration>%s</%sTransaction.Duration>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_Duration, input_name='Transaction.Duration'), namespaceprefix_ , eol_))
        if self.Transaction_Fee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.Fee>%s</%sTransaction.Fee>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_Fee, input_name='Transaction.Fee'), namespaceprefix_ , eol_))
        if self.Transaction_FundName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.FundName>%s</%sTransaction.FundName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Transaction_FundName), input_name='Transaction.FundName')), namespaceprefix_ , eol_))
        if self.Transaction_Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.Quantity>%s</%sTransaction.Quantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_Quantity, input_name='Transaction.Quantity'), namespaceprefix_ , eol_))
        if self.Transaction_RateVarianceIndicative is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.RateVarianceIndicative>%s</%sTransaction.RateVarianceIndicative>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_RateVarianceIndicative, input_name='Transaction.RateVarianceIndicative'), namespaceprefix_ , eol_))
        if self.Transaction_RateVarianceMySA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.RateVarianceMySA>%s</%sTransaction.RateVarianceMySA>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_RateVarianceMySA, input_name='Transaction.RateVarianceMySA'), namespaceprefix_ , eol_))
        if self.Transaction_RateVarianceSA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.RateVarianceSA>%s</%sTransaction.RateVarianceSA>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_RateVarianceSA, input_name='Transaction.RateVarianceSA'), namespaceprefix_ , eol_))
        if self.Transaction_Rebate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.Rebate>%s</%sTransaction.Rebate>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_Rebate, input_name='Transaction.Rebate'), namespaceprefix_ , eol_))
        if self.Transaction_StartDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.StartDate>%s</%sTransaction.StartDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Transaction_StartDate, input_name='Transaction.StartDate'), namespaceprefix_ , eol_))
        if self.Transaction_TradeStyle is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.TradeStyle>%s</%sTransaction.TradeStyle>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Transaction_TradeStyle), input_name='Transaction.TradeStyle')), namespaceprefix_ , eol_))
        if self.Transaction_TransactionFee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.TransactionFee>%s</%sTransaction.TransactionFee>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_TransactionFee, input_name='Transaction.TransactionFee'), namespaceprefix_ , eol_))
        if self.Transaction_TransactionRef is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.TransactionRef>%s</%sTransaction.TransactionRef>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Transaction_TransactionRef), input_name='Transaction.TransactionRef')), namespaceprefix_ , eol_))
        if self.Transaction_Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.Value>%s</%sTransaction.Value>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_Value, input_name='Transaction.Value'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TradeType':
            TradeType_ = child_.text
            TradeType_ = self.gds_validate_string(TradeType_, node, 'TradeType')
            self.TradeType = TradeType_
        elif nodeName_ == 'Transaction.CollateralCurrency':
            Transaction_CollateralCurrency_ = child_.text
            Transaction_CollateralCurrency_ = self.gds_validate_string(Transaction_CollateralCurrency_, node, 'Transaction_CollateralCurrency')
            self.Transaction_CollateralCurrency = Transaction_CollateralCurrency_
        elif nodeName_ == 'Transaction.CollateralType':
            Transaction_CollateralType_ = child_.text
            Transaction_CollateralType_ = self.gds_validate_string(Transaction_CollateralType_, node, 'Transaction_CollateralType')
            self.Transaction_CollateralType = Transaction_CollateralType_
        elif nodeName_ == 'Transaction.ComparativeDailyCostIndicative' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_ComparativeDailyCostIndicative')
            self.Transaction_ComparativeDailyCostIndicative = fval_
        elif nodeName_ == 'Transaction.ComparativeDailyCostMySA' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_ComparativeDailyCostMySA')
            self.Transaction_ComparativeDailyCostMySA = fval_
        elif nodeName_ == 'Transaction.ComparativeDailyCostSA' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_ComparativeDailyCostSA')
            self.Transaction_ComparativeDailyCostSA = fval_
        elif nodeName_ == 'Transaction.Counterpart':
            Transaction_Counterpart_ = child_.text
            Transaction_Counterpart_ = self.gds_validate_string(Transaction_Counterpart_, node, 'Transaction_Counterpart')
            self.Transaction_Counterpart = Transaction_Counterpart_
        elif nodeName_ == 'Transaction.DailyCost' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_DailyCost')
            self.Transaction_DailyCost = fval_
        elif nodeName_ == 'Transaction.DailyCostCombined' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_DailyCostCombined')
            self.Transaction_DailyCostCombined = fval_
        elif nodeName_ == 'Transaction.DailyCostDifferenceIndicative' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_DailyCostDifferenceIndicative')
            self.Transaction_DailyCostDifferenceIndicative = fval_
        elif nodeName_ == 'Transaction.DailyCostDifferenceMySA' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_DailyCostDifferenceMySA')
            self.Transaction_DailyCostDifferenceMySA = fval_
        elif nodeName_ == 'Transaction.DailyCostDifferenceSA' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_DailyCostDifferenceSA')
            self.Transaction_DailyCostDifferenceSA = fval_
        elif nodeName_ == 'Transaction.DividendRequirement' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_DividendRequirement')
            self.Transaction_DividendRequirement = fval_
        elif nodeName_ == 'Transaction.Duration' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_Duration')
            self.Transaction_Duration = fval_
        elif nodeName_ == 'Transaction.Fee' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_Fee')
            self.Transaction_Fee = fval_
        elif nodeName_ == 'Transaction.FundName':
            Transaction_FundName_ = child_.text
            Transaction_FundName_ = self.gds_validate_string(Transaction_FundName_, node, 'Transaction_FundName')
            self.Transaction_FundName = Transaction_FundName_
        elif nodeName_ == 'Transaction.Quantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_Quantity')
            self.Transaction_Quantity = fval_
        elif nodeName_ == 'Transaction.RateVarianceIndicative' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_RateVarianceIndicative')
            self.Transaction_RateVarianceIndicative = fval_
        elif nodeName_ == 'Transaction.RateVarianceMySA' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_RateVarianceMySA')
            self.Transaction_RateVarianceMySA = fval_
        elif nodeName_ == 'Transaction.RateVarianceSA' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_RateVarianceSA')
            self.Transaction_RateVarianceSA = fval_
        elif nodeName_ == 'Transaction.Rebate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_Rebate')
            self.Transaction_Rebate = fval_
        elif nodeName_ == 'Transaction.StartDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Transaction_StartDate = dval_
        elif nodeName_ == 'Transaction.TradeStyle':
            Transaction_TradeStyle_ = child_.text
            Transaction_TradeStyle_ = self.gds_validate_string(Transaction_TradeStyle_, node, 'Transaction_TradeStyle')
            self.Transaction_TradeStyle = Transaction_TradeStyle_
        elif nodeName_ == 'Transaction.TransactionFee' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_TransactionFee')
            self.Transaction_TransactionFee = fval_
        elif nodeName_ == 'Transaction.TransactionRef':
            Transaction_TransactionRef_ = child_.text
            Transaction_TransactionRef_ = self.gds_validate_string(Transaction_TransactionRef_, node, 'Transaction_TransactionRef')
            self.Transaction_TransactionRef = Transaction_TransactionRef_
        elif nodeName_ == 'Transaction.Value' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_Value')
            self.Transaction_Value = fval_
# end class TransactionDataType


class InstrumentDataType80(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BB_TICKER=None, BBGID=None, CUSIP=None, DXLID=None, InstrumentID=None, InstrumentName=None, ISIN=None, MarketArea=None, QUICK=None, Sector=None, SEDOL=None, TICKER=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.BB_TICKER = BB_TICKER
        self.BBGID = BBGID
        self.CUSIP = CUSIP
        self.DXLID = DXLID
        self.InstrumentID = InstrumentID
        self.InstrumentName = InstrumentName
        self.ISIN = ISIN
        self.MarketArea = MarketArea
        self.QUICK = QUICK
        self.Sector = Sector
        self.SEDOL = SEDOL
        self.TICKER = TICKER
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InstrumentDataType80)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InstrumentDataType80.subclass:
            return InstrumentDataType80.subclass(*args_, **kwargs_)
        else:
            return InstrumentDataType80(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BB_TICKER(self):
        return self.BB_TICKER
    def set_BB_TICKER(self, BB_TICKER):
        self.BB_TICKER = BB_TICKER
    def get_BBGID(self):
        return self.BBGID
    def set_BBGID(self, BBGID):
        self.BBGID = BBGID
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_InstrumentID(self):
        return self.InstrumentID
    def set_InstrumentID(self, InstrumentID):
        self.InstrumentID = InstrumentID
    def get_InstrumentName(self):
        return self.InstrumentName
    def set_InstrumentName(self, InstrumentName):
        self.InstrumentName = InstrumentName
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_MarketArea(self):
        return self.MarketArea
    def set_MarketArea(self, MarketArea):
        self.MarketArea = MarketArea
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_Sector(self):
        return self.Sector
    def set_Sector(self, Sector):
        self.Sector = Sector
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def hasContent_(self):
        if (
            self.BB_TICKER is not None or
            self.BBGID is not None or
            self.CUSIP is not None or
            self.DXLID is not None or
            self.InstrumentID is not None or
            self.InstrumentName is not None or
            self.ISIN is not None or
            self.MarketArea is not None or
            self.QUICK is not None or
            self.Sector is not None or
            self.SEDOL is not None or
            self.TICKER is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentDataType80', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InstrumentDataType80')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InstrumentDataType80')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InstrumentDataType80', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InstrumentDataType80'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentDataType80', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BB_TICKER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBB_TICKER>%s</%sBB_TICKER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BB_TICKER), input_name='BB_TICKER')), namespaceprefix_ , eol_))
        if self.BBGID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBBGID>%s</%sBBGID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BBGID), input_name='BBGID')), namespaceprefix_ , eol_))
        if self.CUSIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUSIP>%s</%sCUSIP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CUSIP), input_name='CUSIP')), namespaceprefix_ , eol_))
        if self.DXLID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDXLID>%s</%sDXLID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DXLID), input_name='DXLID')), namespaceprefix_ , eol_))
        if self.InstrumentID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstrumentID>%s</%sInstrumentID>%s' % (namespaceprefix_ , self.gds_format_float(self.InstrumentID, input_name='InstrumentID'), namespaceprefix_ , eol_))
        if self.InstrumentName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstrumentName>%s</%sInstrumentName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InstrumentName), input_name='InstrumentName')), namespaceprefix_ , eol_))
        if self.ISIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sISIN>%s</%sISIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ISIN), input_name='ISIN')), namespaceprefix_ , eol_))
        if self.MarketArea is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarketArea>%s</%sMarketArea>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarketArea), input_name='MarketArea')), namespaceprefix_ , eol_))
        if self.QUICK is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQUICK>%s</%sQUICK>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QUICK), input_name='QUICK')), namespaceprefix_ , eol_))
        if self.Sector is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSector>%s</%sSector>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Sector), input_name='Sector')), namespaceprefix_ , eol_))
        if self.SEDOL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSEDOL>%s</%sSEDOL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SEDOL), input_name='SEDOL')), namespaceprefix_ , eol_))
        if self.TICKER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTICKER>%s</%sTICKER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TICKER), input_name='TICKER')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BB_TICKER':
            BB_TICKER_ = child_.text
            BB_TICKER_ = self.gds_validate_string(BB_TICKER_, node, 'BB_TICKER')
            self.BB_TICKER = BB_TICKER_
        elif nodeName_ == 'BBGID':
            BBGID_ = child_.text
            BBGID_ = self.gds_validate_string(BBGID_, node, 'BBGID')
            self.BBGID = BBGID_
        elif nodeName_ == 'CUSIP':
            CUSIP_ = child_.text
            CUSIP_ = self.gds_validate_string(CUSIP_, node, 'CUSIP')
            self.CUSIP = CUSIP_
        elif nodeName_ == 'DXLID':
            DXLID_ = child_.text
            DXLID_ = self.gds_validate_string(DXLID_, node, 'DXLID')
            self.DXLID = DXLID_
        elif nodeName_ == 'InstrumentID' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'InstrumentID')
            self.InstrumentID = fval_
        elif nodeName_ == 'InstrumentName':
            InstrumentName_ = child_.text
            InstrumentName_ = self.gds_validate_string(InstrumentName_, node, 'InstrumentName')
            self.InstrumentName = InstrumentName_
        elif nodeName_ == 'ISIN':
            ISIN_ = child_.text
            ISIN_ = self.gds_validate_string(ISIN_, node, 'ISIN')
            self.ISIN = ISIN_
        elif nodeName_ == 'MarketArea':
            MarketArea_ = child_.text
            MarketArea_ = self.gds_validate_string(MarketArea_, node, 'MarketArea')
            self.MarketArea = MarketArea_
        elif nodeName_ == 'QUICK':
            QUICK_ = child_.text
            QUICK_ = self.gds_validate_string(QUICK_, node, 'QUICK')
            self.QUICK = QUICK_
        elif nodeName_ == 'Sector':
            Sector_ = child_.text
            Sector_ = self.gds_validate_string(Sector_, node, 'Sector')
            self.Sector = Sector_
        elif nodeName_ == 'SEDOL':
            SEDOL_ = child_.text
            SEDOL_ = self.gds_validate_string(SEDOL_, node, 'SEDOL')
            self.SEDOL = SEDOL_
        elif nodeName_ == 'TICKER':
            TICKER_ = child_.text
            TICKER_ = self.gds_validate_string(TICKER_, node, 'TICKER')
            self.TICKER = TICKER_
# end class InstrumentDataType80


class InstrumentDistributionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DATATYPE=None, RANK=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DATATYPE = _cast(None, DATATYPE)
        self.RANK = _cast(None, RANK)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InstrumentDistributionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InstrumentDistributionType.subclass:
            return InstrumentDistributionType.subclass(*args_, **kwargs_)
        else:
            return InstrumentDistributionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentDistributionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InstrumentDistributionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InstrumentDistributionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InstrumentDistributionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InstrumentDistributionType'):
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentDistributionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType81.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class InstrumentDistributionType


class DataDateType81(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, Metrics=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
        self.Metrics = Metrics
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType81)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType81.subclass:
            return DataDateType81.subclass(*args_, **kwargs_)
        else:
            return DataDateType81(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_Metrics(self):
        return self.Metrics
    def set_Metrics(self, Metrics):
        self.Metrics = Metrics
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None or
            self.Metrics is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType81', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType81')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType81')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType81', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType81'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType81', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
        if self.Metrics is not None:
            self.Metrics.export(outfile, level, namespaceprefix_, name_='Metrics', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType82.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
        elif nodeName_ == 'Metrics':
            obj_ = MetricsType83.factory(parent_object_=self)
            obj_.build(child_)
            self.Metrics = obj_
            obj_.original_tagname_ = 'Metrics'
# end class DataDateType81


class GeneralType82(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Distribution=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if Distribution is None:
            self.Distribution = []
        else:
            self.Distribution = Distribution
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType82)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType82.subclass:
            return GeneralType82.subclass(*args_, **kwargs_)
        else:
            return GeneralType82(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Distribution(self):
        return self.Distribution
    def set_Distribution(self, Distribution):
        self.Distribution = Distribution
    def add_Distribution(self, value):
        self.Distribution.append(value)
    def add_Distribution(self, value):
        self.Distribution.append(value)
    def insert_Distribution_at(self, index, value):
        self.Distribution.insert(index, value)
    def replace_Distribution_at(self, index, value):
        self.Distribution[index] = value
    def hasContent_(self):
        if (
            self.Distribution
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType82', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType82')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType82')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType82', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType82'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType82', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Distribution_ in self.Distribution:
            Distribution_.export(outfile, level, namespaceprefix_, name_='Distribution', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Distribution':
            obj_ = DistributionType.factory(parent_object_=self)
            obj_.build(child_)
            self.Distribution.append(obj_)
            obj_.original_tagname_ = 'Distribution'
# end class GeneralType82


class DistributionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, Group_HasDividendTrading=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.value = _cast(None, value)
        self.Group_HasDividendTrading = Group_HasDividendTrading
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DistributionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DistributionType.subclass:
            return DistributionType.subclass(*args_, **kwargs_)
        else:
            return DistributionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Group_HasDividendTrading(self):
        return self.Group_HasDividendTrading
    def set_Group_HasDividendTrading(self, Group_HasDividendTrading):
        self.Group_HasDividendTrading = Group_HasDividendTrading
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.Group_HasDividendTrading is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DistributionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DistributionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DistributionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DistributionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DistributionType'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DistributionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Group_HasDividendTrading is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.HasDividendTrading>%s</%sGroup.HasDividendTrading>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Group_HasDividendTrading), input_name='Group.HasDividendTrading')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Group.HasDividendTrading':
            Group_HasDividendTrading_ = child_.text
            Group_HasDividendTrading_ = self.gds_validate_string(Group_HasDividendTrading_, node, 'Group_HasDividendTrading')
            self.Group_HasDividendTrading = Group_HasDividendTrading_
# end class DistributionType


class MetricsType83(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Distribution=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if Distribution is None:
            self.Distribution = []
        else:
            self.Distribution = Distribution
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MetricsType83)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MetricsType83.subclass:
            return MetricsType83.subclass(*args_, **kwargs_)
        else:
            return MetricsType83(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Distribution(self):
        return self.Distribution
    def set_Distribution(self, Distribution):
        self.Distribution = Distribution
    def add_Distribution(self, value):
        self.Distribution.append(value)
    def add_Distribution(self, value):
        self.Distribution.append(value)
    def insert_Distribution_at(self, index, value):
        self.Distribution.insert(index, value)
    def replace_Distribution_at(self, index, value):
        self.Distribution[index] = value
    def hasContent_(self):
        if (
            self.Distribution
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MetricsType83', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MetricsType83')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MetricsType83')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MetricsType83', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MetricsType83'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MetricsType83', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Distribution_ in self.Distribution:
            Distribution_.export(outfile, level, namespaceprefix_, name_='Distribution', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Distribution':
            obj_ = DistributionType84.factory(parent_object_=self)
            obj_.build(child_)
            self.Distribution.append(obj_)
            obj_.original_tagname_ = 'Distribution'
# end class MetricsType83


class DistributionType84(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, Client_AvailableQuantity=None, Client_AvailableQuantityDelta1=None, Client_AvailableQuantityDelta1Pc=None, Client_AvailableQuantityDelta30=None, Client_AvailableQuantityDelta30Pc=None, Client_AvailableQuantityDelta7=None, Client_AvailableQuantityDelta7Pc=None, Client_AvailableValue=None, Client_AvailableValueDelta1=None, Client_AvailableValueDelta1Pc=None, Client_AvailableValueDelta30=None, Client_AvailableValueDelta30Pc=None, Client_AvailableValueDelta7=None, Client_AvailableValueDelta7Pc=None, Client_DailyCost=None, Client_DailyCostCombined=None, Client_DailyRevenue=None, Client_LendableQuantity=None, Client_LendableQuantityDelta1=None, Client_LendableQuantityDelta1Pc=None, Client_LendableQuantityDelta30=None, Client_LendableQuantityDelta30Pc=None, Client_LendableQuantityDelta7=None, Client_LendableQuantityDelta7Pc=None, Client_LendableValue=None, Client_LendableValueDelta1=None, Client_LendableValueDelta1Pc=None, Client_LendableValueDelta30=None, Client_LendableValueDelta30Pc=None, Client_LendableValueDelta7=None, Client_LendableValueDelta7Pc=None, Client_MarketShare=None, Client_MarketShareDelta1=None, Client_MarketShareDelta30=None, Client_MarketShareDelta7=None, Client_MarketShareRank=None, Client_OpportunityGainLoss=None, Client_QuantityOnLoan=None, Client_QuantityOnLoanDelta1=None, Client_QuantityOnLoanDelta1Pc=None, Client_QuantityOnLoanDelta30=None, Client_QuantityOnLoanDelta30Pc=None, Client_QuantityOnLoanDelta7=None, Client_QuantityOnLoanDelta7Pc=None, Client_SAF=None, Client_SAFDelta1=None, Client_SAFDelta1Pc=None, Client_SAFDelta30=None, Client_SAFDelta30Pc=None, Client_SAFDelta7=None, Client_SAFDelta7Pc=None, Client_SAR=None, Client_SARDelta1=None, Client_SARDelta1Pc=None, Client_SARDelta30=None, Client_SARDelta30Pc=None, Client_SARDelta7=None, Client_SARDelta7Pc=None, Client_SATenure=None, Client_Utilisation=None, Client_UtilisationByQuantity=None, Client_UtilisationByQuantityDelta1=None, Client_UtilisationByQuantityDelta30=None, Client_UtilisationByQuantityDelta7=None, Client_UtilisationDelta1=None, Client_UtilisationDelta30=None, Client_UtilisationDelta7=None, Client_ValueOnLoan=None, Client_ValueOnLoanDelta1=None, Client_ValueOnLoanDelta1Pc=None, Client_ValueOnLoanDelta30=None, Client_ValueOnLoanDelta30Pc=None, Client_ValueOnLoanDelta7=None, Client_ValueOnLoanDelta7Pc=None, Client_VWAF=None, Client_VWAF1=None, Client_VWAF30=None, Client_VWAF7=None, Client_VWAFDelta1=None, Client_VWAFDelta1Pc=None, Client_VWAFDelta30=None, Client_VWAFDelta30Pc=None, Client_VWAFDelta7=None, Client_VWAFDelta7Pc=None, Client_VWAR=None, Client_VWAR1=None, Client_VWAR30=None, Client_VWAR7=None, Client_VWARDelta1=None, Client_VWARDelta1Pc=None, Client_VWARDelta30=None, Client_VWARDelta30Pc=None, Client_VWARDelta7=None, Client_VWARDelta7Pc=None, Group_ActiveAvailableQuantity=None, Group_ActiveAvailableQuantityDelta1=None, Group_ActiveAvailableQuantityDelta1Pc=None, Group_ActiveAvailableQuantityDelta30=None, Group_ActiveAvailableQuantityDelta30Pc=None, Group_ActiveAvailableQuantityDelta7=None, Group_ActiveAvailableQuantityDelta7Pc=None, Group_ActiveAvailableValue=None, Group_ActiveAvailableValueDelta1=None, Group_ActiveAvailableValueDelta1Pc=None, Group_ActiveAvailableValueDelta30=None, Group_ActiveAvailableValueDelta30Pc=None, Group_ActiveAvailableValueDelta7=None, Group_ActiveAvailableValueDelta7Pc=None, Group_ActiveLendableQuantity=None, Group_ActiveLendableQuantityDelta1=None, Group_ActiveLendableQuantityDelta1Pc=None, Group_ActiveLendableQuantityDelta30=None, Group_ActiveLendableQuantityDelta30Pc=None, Group_ActiveLendableQuantityDelta7=None, Group_ActiveLendableQuantityDelta7Pc=None, Group_ActiveLendableValue=None, Group_ActiveLendableValueDelta1=None, Group_ActiveLendableValueDelta1Pc=None, Group_ActiveLendableValueDelta30=None, Group_ActiveLendableValueDelta30Pc=None, Group_ActiveLendableValueDelta7=None, Group_ActiveLendableValueDelta7Pc=None, Group_ActiveLendingAgents=None, Group_ActiveUtilisation=None, Group_ActiveUtilisationByQuantity=None, Group_ActiveUtilisationByQuantityDelta1=None, Group_ActiveUtilisationByQuantityDelta30=None, Group_ActiveUtilisationByQuantityDelta7=None, Group_ActiveUtilisationDelta1=None, Group_ActiveUtilisationDelta30=None, Group_ActiveUtilisationDelta7=None, Group_AvailableQuantity=None, Group_AvailableQuantityDelta1=None, Group_AvailableQuantityDelta1Pc=None, Group_AvailableQuantityDelta30=None, Group_AvailableQuantityDelta30Pc=None, Group_AvailableQuantityDelta7=None, Group_AvailableQuantityDelta7Pc=None, Group_AvailableQuantityStability=None, Group_AvailableValue=None, Group_AvailableValueDelta1=None, Group_AvailableValueDelta1Pc=None, Group_AvailableValueDelta30=None, Group_AvailableValueDelta30Pc=None, Group_AvailableValueDelta7=None, Group_AvailableValueDelta7Pc=None, Group_AvailableValueStability=None, Group_BenchmarkFee=None, Group_BenchmarkFeeDelta1=None, Group_BenchmarkFeeDelta1Pc=None, Group_BenchmarkFeeDelta30=None, Group_BenchmarkFeeDelta30Pc=None, Group_BenchmarkFeeDelta7=None, Group_BenchmarkFeeDelta7Pc=None, Group_BenchmarkRebate=None, Group_BenchmarkRebateDelta1=None, Group_BenchmarkRebateDelta1Pc=None, Group_BenchmarkRebateDelta30=None, Group_BenchmarkRebateDelta30Pc=None, Group_BenchmarkRebateDelta7=None, Group_BenchmarkRebateDelta7Pc=None, Group_BorrowerConcentration=None, Group_CompositeScore=None, Group_DaysToCover=None, Group_DaysToCoverDelta1=None, Group_DaysToCoverDelta1Pc=None, Group_DaysToCoverDelta30=None, Group_DaysToCoverDelta30Pc=None, Group_DaysToCoverDelta7=None, Group_DaysToCoverDelta7Pc=None, Group_IndicativeFee=None, Group_IndicativeFeeDelta1=None, Group_IndicativeFeeDelta30=None, Group_IndicativeFeeDelta7=None, Group_IndicativeRebate=None, Group_IndicativeRebateDelta1=None, Group_IndicativeRebateDelta30=None, Group_IndicativeRebateDelta7=None, Group_InventoryConcentration=None, Group_LendableQuantity=None, Group_LendableQuantityDelta1=None, Group_LendableQuantityDelta1Pc=None, Group_LendableQuantityDelta30=None, Group_LendableQuantityDelta30Pc=None, Group_LendableQuantityDelta7=None, Group_LendableQuantityDelta7Pc=None, Group_LendableQuantityStability=None, Group_LendableValue=None, Group_LendableValueDelta1=None, Group_LendableValueDelta1Pc=None, Group_LendableValueDelta30=None, Group_LendableValueDelta30Pc=None, Group_LendableValueDelta7=None, Group_LendableValueDelta7Pc=None, Group_LendableValueStability=None, Group_LenderConcentration=None, Group_LenderQuantityOnLoanStability=None, Group_LenderValueOnLoan=None, Group_LenderValueOnLoanStability=None, Group_MarketCap=None, Group_NewPositions=None, Group_OutOfMoneyPct=None, Group_PcFreeFloatValueOnLoan=None, Group_PcIssueValueOnLoan=None, Group_PcIssueValueOnLoanDelta1=None, Group_PcIssueValueOnLoanDelta30=None, Group_PcIssueValueOnLoanDelta7=None, Group_PcSharesOutstandingOnLoan=None, Group_PcSharesOutstandingOnLoanDelta1=None, Group_PcSharesOutstandingOnLoanDelta30=None, Group_PcSharesOutstandingOnLoanDelta7=None, Group_PriceDelta1=None, Group_PriceDelta30=None, Group_PriceDelta7=None, Group_PrimeBrokers=None, Group_ProfitandLossImpact=None, Group_QuantityOnLoan=None, Group_QuantityOnLoanDelta1=None, Group_QuantityOnLoanDelta1Pc=None, Group_QuantityOnLoanDelta30=None, Group_QuantityOnLoanDelta30Pc=None, Group_QuantityOnLoanDelta7=None, Group_QuantityOnLoanDelta7Pc=None, Group_ReratePreviousVWAF=None, Group_ReratePreviousVWAR=None, Group_RerateTransactionCount=None, Group_RerateTransactionCountDown=None, Group_RerateTransactionCountUp=None, Group_RerateValueOnLoan=None, Group_RerateValueOnLoanDown=None, Group_RerateValueOnLoanUp=None, Group_RerateVWAF=None, Group_RerateVWAFDelta1=None, Group_RerateVWAFDelta1Pc=None, Group_RerateVWAR=None, Group_RerateVWARDelta1=None, Group_RerateVWARDelta1Pc=None, Group_SAF=None, Group_SAFDelta1=None, Group_SAFDelta1Pc=None, Group_SAFDelta30=None, Group_SAFDelta30Pc=None, Group_SAFDelta7=None, Group_SAFDelta7Pc=None, Group_SAR=None, Group_SARDelta1=None, Group_SARDelta1Pc=None, Group_SARDelta30=None, Group_SARDelta30Pc=None, Group_SARDelta7=None, Group_SARDelta7Pc=None, Group_SATenure=None, Group_SharesOutstanding=None, Group_ShortLoanQuantity=None, Group_ShortLoanValue=None, Group_TransactionDuration=None, Group_Utilisation=None, Group_UtilisationByQuantity=None, Group_UtilisationByQuantityDelta1=None, Group_UtilisationByQuantityDelta30=None, Group_UtilisationByQuantityDelta7=None, Group_UtilisationDelta1=None, Group_UtilisationDelta30=None, Group_UtilisationDelta7=None, Group_ValueOnLoan=None, Group_ValueOnLoanDelta1=None, Group_ValueOnLoanDelta1Pc=None, Group_ValueOnLoanDelta30=None, Group_ValueOnLoanDelta30Pc=None, Group_ValueOnLoanDelta7=None, Group_ValueOnLoanDelta7Pc=None, Group_VWAF=None, Group_VWAF1=None, Group_VWAF30=None, Group_VWAF7=None, Group_VWAFDelta=None, Group_VWAFDelta1=None, Group_VWAFDelta1Pc=None, Group_VWAFDelta30=None, Group_VWAFDelta30Pc=None, Group_VWAFDelta7=None, Group_VWAFDelta7Pc=None, Group_VWAR=None, Group_VWAR1=None, Group_VWAR30=None, Group_VWAR7=None, Group_VWARDelta1=None, Group_VWARDelta1Pc=None, Group_VWARDelta30=None, Group_VWARDelta30Pc=None, Group_VWARDelta7=None, Group_VWARDelta7Pc=None, LatestDataDate=None, Transaction_ComparativeDailyCostIndicative=None, Transaction_ComparativeDailyCostMySA=None, Transaction_ComparativeDailyCostSA=None, Transaction_DailyCost=None, Transaction_DailyCostDifferenceIndicative=None, Transaction_DailyCostDifferenceMySA=None, Transaction_DailyCostDifferenceSA=None, Transaction_DividendRequirement=None, Transaction_Duration=None, Transaction_Fee=None, Transaction_Quantity=None, Transaction_RateVarianceIndicative=None, Transaction_RateVarianceMySA=None, Transaction_RateVarianceSA=None, Transaction_Rebate=None, Transaction_StartDate=None, Transaction_TransactionFee=None, Transaction_Value=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.value = _cast(None, value)
        self.Client_AvailableQuantity = Client_AvailableQuantity
        self.Client_AvailableQuantityDelta1 = Client_AvailableQuantityDelta1
        self.Client_AvailableQuantityDelta1Pc = Client_AvailableQuantityDelta1Pc
        self.Client_AvailableQuantityDelta30 = Client_AvailableQuantityDelta30
        self.Client_AvailableQuantityDelta30Pc = Client_AvailableQuantityDelta30Pc
        self.Client_AvailableQuantityDelta7 = Client_AvailableQuantityDelta7
        self.Client_AvailableQuantityDelta7Pc = Client_AvailableQuantityDelta7Pc
        self.Client_AvailableValue = Client_AvailableValue
        self.Client_AvailableValueDelta1 = Client_AvailableValueDelta1
        self.Client_AvailableValueDelta1Pc = Client_AvailableValueDelta1Pc
        self.Client_AvailableValueDelta30 = Client_AvailableValueDelta30
        self.Client_AvailableValueDelta30Pc = Client_AvailableValueDelta30Pc
        self.Client_AvailableValueDelta7 = Client_AvailableValueDelta7
        self.Client_AvailableValueDelta7Pc = Client_AvailableValueDelta7Pc
        self.Client_DailyCost = Client_DailyCost
        self.Client_DailyCostCombined = Client_DailyCostCombined
        self.Client_DailyRevenue = Client_DailyRevenue
        self.Client_LendableQuantity = Client_LendableQuantity
        self.Client_LendableQuantityDelta1 = Client_LendableQuantityDelta1
        self.Client_LendableQuantityDelta1Pc = Client_LendableQuantityDelta1Pc
        self.Client_LendableQuantityDelta30 = Client_LendableQuantityDelta30
        self.Client_LendableQuantityDelta30Pc = Client_LendableQuantityDelta30Pc
        self.Client_LendableQuantityDelta7 = Client_LendableQuantityDelta7
        self.Client_LendableQuantityDelta7Pc = Client_LendableQuantityDelta7Pc
        self.Client_LendableValue = Client_LendableValue
        self.Client_LendableValueDelta1 = Client_LendableValueDelta1
        self.Client_LendableValueDelta1Pc = Client_LendableValueDelta1Pc
        self.Client_LendableValueDelta30 = Client_LendableValueDelta30
        self.Client_LendableValueDelta30Pc = Client_LendableValueDelta30Pc
        self.Client_LendableValueDelta7 = Client_LendableValueDelta7
        self.Client_LendableValueDelta7Pc = Client_LendableValueDelta7Pc
        self.Client_MarketShare = Client_MarketShare
        self.Client_MarketShareDelta1 = Client_MarketShareDelta1
        self.Client_MarketShareDelta30 = Client_MarketShareDelta30
        self.Client_MarketShareDelta7 = Client_MarketShareDelta7
        self.Client_MarketShareRank = Client_MarketShareRank
        self.Client_OpportunityGainLoss = Client_OpportunityGainLoss
        self.Client_QuantityOnLoan = Client_QuantityOnLoan
        self.Client_QuantityOnLoanDelta1 = Client_QuantityOnLoanDelta1
        self.Client_QuantityOnLoanDelta1Pc = Client_QuantityOnLoanDelta1Pc
        self.Client_QuantityOnLoanDelta30 = Client_QuantityOnLoanDelta30
        self.Client_QuantityOnLoanDelta30Pc = Client_QuantityOnLoanDelta30Pc
        self.Client_QuantityOnLoanDelta7 = Client_QuantityOnLoanDelta7
        self.Client_QuantityOnLoanDelta7Pc = Client_QuantityOnLoanDelta7Pc
        self.Client_SAF = Client_SAF
        self.Client_SAFDelta1 = Client_SAFDelta1
        self.Client_SAFDelta1Pc = Client_SAFDelta1Pc
        self.Client_SAFDelta30 = Client_SAFDelta30
        self.Client_SAFDelta30Pc = Client_SAFDelta30Pc
        self.Client_SAFDelta7 = Client_SAFDelta7
        self.Client_SAFDelta7Pc = Client_SAFDelta7Pc
        self.Client_SAR = Client_SAR
        self.Client_SARDelta1 = Client_SARDelta1
        self.Client_SARDelta1Pc = Client_SARDelta1Pc
        self.Client_SARDelta30 = Client_SARDelta30
        self.Client_SARDelta30Pc = Client_SARDelta30Pc
        self.Client_SARDelta7 = Client_SARDelta7
        self.Client_SARDelta7Pc = Client_SARDelta7Pc
        self.Client_SATenure = Client_SATenure
        self.Client_Utilisation = Client_Utilisation
        self.Client_UtilisationByQuantity = Client_UtilisationByQuantity
        self.Client_UtilisationByQuantityDelta1 = Client_UtilisationByQuantityDelta1
        self.Client_UtilisationByQuantityDelta30 = Client_UtilisationByQuantityDelta30
        self.Client_UtilisationByQuantityDelta7 = Client_UtilisationByQuantityDelta7
        self.Client_UtilisationDelta1 = Client_UtilisationDelta1
        self.Client_UtilisationDelta30 = Client_UtilisationDelta30
        self.Client_UtilisationDelta7 = Client_UtilisationDelta7
        self.Client_ValueOnLoan = Client_ValueOnLoan
        self.Client_ValueOnLoanDelta1 = Client_ValueOnLoanDelta1
        self.Client_ValueOnLoanDelta1Pc = Client_ValueOnLoanDelta1Pc
        self.Client_ValueOnLoanDelta30 = Client_ValueOnLoanDelta30
        self.Client_ValueOnLoanDelta30Pc = Client_ValueOnLoanDelta30Pc
        self.Client_ValueOnLoanDelta7 = Client_ValueOnLoanDelta7
        self.Client_ValueOnLoanDelta7Pc = Client_ValueOnLoanDelta7Pc
        self.Client_VWAF = Client_VWAF
        self.Client_VWAF1 = Client_VWAF1
        self.Client_VWAF30 = Client_VWAF30
        self.Client_VWAF7 = Client_VWAF7
        self.Client_VWAFDelta1 = Client_VWAFDelta1
        self.Client_VWAFDelta1Pc = Client_VWAFDelta1Pc
        self.Client_VWAFDelta30 = Client_VWAFDelta30
        self.Client_VWAFDelta30Pc = Client_VWAFDelta30Pc
        self.Client_VWAFDelta7 = Client_VWAFDelta7
        self.Client_VWAFDelta7Pc = Client_VWAFDelta7Pc
        self.Client_VWAR = Client_VWAR
        self.Client_VWAR1 = Client_VWAR1
        self.Client_VWAR30 = Client_VWAR30
        self.Client_VWAR7 = Client_VWAR7
        self.Client_VWARDelta1 = Client_VWARDelta1
        self.Client_VWARDelta1Pc = Client_VWARDelta1Pc
        self.Client_VWARDelta30 = Client_VWARDelta30
        self.Client_VWARDelta30Pc = Client_VWARDelta30Pc
        self.Client_VWARDelta7 = Client_VWARDelta7
        self.Client_VWARDelta7Pc = Client_VWARDelta7Pc
        self.Group_ActiveAvailableQuantity = Group_ActiveAvailableQuantity
        self.Group_ActiveAvailableQuantityDelta1 = Group_ActiveAvailableQuantityDelta1
        self.Group_ActiveAvailableQuantityDelta1Pc = Group_ActiveAvailableQuantityDelta1Pc
        self.Group_ActiveAvailableQuantityDelta30 = Group_ActiveAvailableQuantityDelta30
        self.Group_ActiveAvailableQuantityDelta30Pc = Group_ActiveAvailableQuantityDelta30Pc
        self.Group_ActiveAvailableQuantityDelta7 = Group_ActiveAvailableQuantityDelta7
        self.Group_ActiveAvailableQuantityDelta7Pc = Group_ActiveAvailableQuantityDelta7Pc
        self.Group_ActiveAvailableValue = Group_ActiveAvailableValue
        self.Group_ActiveAvailableValueDelta1 = Group_ActiveAvailableValueDelta1
        self.Group_ActiveAvailableValueDelta1Pc = Group_ActiveAvailableValueDelta1Pc
        self.Group_ActiveAvailableValueDelta30 = Group_ActiveAvailableValueDelta30
        self.Group_ActiveAvailableValueDelta30Pc = Group_ActiveAvailableValueDelta30Pc
        self.Group_ActiveAvailableValueDelta7 = Group_ActiveAvailableValueDelta7
        self.Group_ActiveAvailableValueDelta7Pc = Group_ActiveAvailableValueDelta7Pc
        self.Group_ActiveLendableQuantity = Group_ActiveLendableQuantity
        self.Group_ActiveLendableQuantityDelta1 = Group_ActiveLendableQuantityDelta1
        self.Group_ActiveLendableQuantityDelta1Pc = Group_ActiveLendableQuantityDelta1Pc
        self.Group_ActiveLendableQuantityDelta30 = Group_ActiveLendableQuantityDelta30
        self.Group_ActiveLendableQuantityDelta30Pc = Group_ActiveLendableQuantityDelta30Pc
        self.Group_ActiveLendableQuantityDelta7 = Group_ActiveLendableQuantityDelta7
        self.Group_ActiveLendableQuantityDelta7Pc = Group_ActiveLendableQuantityDelta7Pc
        self.Group_ActiveLendableValue = Group_ActiveLendableValue
        self.Group_ActiveLendableValueDelta1 = Group_ActiveLendableValueDelta1
        self.Group_ActiveLendableValueDelta1Pc = Group_ActiveLendableValueDelta1Pc
        self.Group_ActiveLendableValueDelta30 = Group_ActiveLendableValueDelta30
        self.Group_ActiveLendableValueDelta30Pc = Group_ActiveLendableValueDelta30Pc
        self.Group_ActiveLendableValueDelta7 = Group_ActiveLendableValueDelta7
        self.Group_ActiveLendableValueDelta7Pc = Group_ActiveLendableValueDelta7Pc
        self.Group_ActiveLendingAgents = Group_ActiveLendingAgents
        self.Group_ActiveUtilisation = Group_ActiveUtilisation
        self.Group_ActiveUtilisationByQuantity = Group_ActiveUtilisationByQuantity
        self.Group_ActiveUtilisationByQuantityDelta1 = Group_ActiveUtilisationByQuantityDelta1
        self.Group_ActiveUtilisationByQuantityDelta30 = Group_ActiveUtilisationByQuantityDelta30
        self.Group_ActiveUtilisationByQuantityDelta7 = Group_ActiveUtilisationByQuantityDelta7
        self.Group_ActiveUtilisationDelta1 = Group_ActiveUtilisationDelta1
        self.Group_ActiveUtilisationDelta30 = Group_ActiveUtilisationDelta30
        self.Group_ActiveUtilisationDelta7 = Group_ActiveUtilisationDelta7
        self.Group_AvailableQuantity = Group_AvailableQuantity
        self.Group_AvailableQuantityDelta1 = Group_AvailableQuantityDelta1
        self.Group_AvailableQuantityDelta1Pc = Group_AvailableQuantityDelta1Pc
        self.Group_AvailableQuantityDelta30 = Group_AvailableQuantityDelta30
        self.Group_AvailableQuantityDelta30Pc = Group_AvailableQuantityDelta30Pc
        self.Group_AvailableQuantityDelta7 = Group_AvailableQuantityDelta7
        self.Group_AvailableQuantityDelta7Pc = Group_AvailableQuantityDelta7Pc
        self.Group_AvailableQuantityStability = Group_AvailableQuantityStability
        self.Group_AvailableValue = Group_AvailableValue
        self.Group_AvailableValueDelta1 = Group_AvailableValueDelta1
        self.Group_AvailableValueDelta1Pc = Group_AvailableValueDelta1Pc
        self.Group_AvailableValueDelta30 = Group_AvailableValueDelta30
        self.Group_AvailableValueDelta30Pc = Group_AvailableValueDelta30Pc
        self.Group_AvailableValueDelta7 = Group_AvailableValueDelta7
        self.Group_AvailableValueDelta7Pc = Group_AvailableValueDelta7Pc
        self.Group_AvailableValueStability = Group_AvailableValueStability
        self.Group_BenchmarkFee = Group_BenchmarkFee
        self.Group_BenchmarkFeeDelta1 = Group_BenchmarkFeeDelta1
        self.Group_BenchmarkFeeDelta1Pc = Group_BenchmarkFeeDelta1Pc
        self.Group_BenchmarkFeeDelta30 = Group_BenchmarkFeeDelta30
        self.Group_BenchmarkFeeDelta30Pc = Group_BenchmarkFeeDelta30Pc
        self.Group_BenchmarkFeeDelta7 = Group_BenchmarkFeeDelta7
        self.Group_BenchmarkFeeDelta7Pc = Group_BenchmarkFeeDelta7Pc
        self.Group_BenchmarkRebate = Group_BenchmarkRebate
        self.Group_BenchmarkRebateDelta1 = Group_BenchmarkRebateDelta1
        self.Group_BenchmarkRebateDelta1Pc = Group_BenchmarkRebateDelta1Pc
        self.Group_BenchmarkRebateDelta30 = Group_BenchmarkRebateDelta30
        self.Group_BenchmarkRebateDelta30Pc = Group_BenchmarkRebateDelta30Pc
        self.Group_BenchmarkRebateDelta7 = Group_BenchmarkRebateDelta7
        self.Group_BenchmarkRebateDelta7Pc = Group_BenchmarkRebateDelta7Pc
        self.Group_BorrowerConcentration = Group_BorrowerConcentration
        self.Group_CompositeScore = Group_CompositeScore
        self.Group_DaysToCover = Group_DaysToCover
        self.Group_DaysToCoverDelta1 = Group_DaysToCoverDelta1
        self.Group_DaysToCoverDelta1Pc = Group_DaysToCoverDelta1Pc
        self.Group_DaysToCoverDelta30 = Group_DaysToCoverDelta30
        self.Group_DaysToCoverDelta30Pc = Group_DaysToCoverDelta30Pc
        self.Group_DaysToCoverDelta7 = Group_DaysToCoverDelta7
        self.Group_DaysToCoverDelta7Pc = Group_DaysToCoverDelta7Pc
        self.Group_IndicativeFee = Group_IndicativeFee
        self.Group_IndicativeFeeDelta1 = Group_IndicativeFeeDelta1
        self.Group_IndicativeFeeDelta30 = Group_IndicativeFeeDelta30
        self.Group_IndicativeFeeDelta7 = Group_IndicativeFeeDelta7
        self.Group_IndicativeRebate = Group_IndicativeRebate
        self.Group_IndicativeRebateDelta1 = Group_IndicativeRebateDelta1
        self.Group_IndicativeRebateDelta30 = Group_IndicativeRebateDelta30
        self.Group_IndicativeRebateDelta7 = Group_IndicativeRebateDelta7
        self.Group_InventoryConcentration = Group_InventoryConcentration
        self.Group_LendableQuantity = Group_LendableQuantity
        self.Group_LendableQuantityDelta1 = Group_LendableQuantityDelta1
        self.Group_LendableQuantityDelta1Pc = Group_LendableQuantityDelta1Pc
        self.Group_LendableQuantityDelta30 = Group_LendableQuantityDelta30
        self.Group_LendableQuantityDelta30Pc = Group_LendableQuantityDelta30Pc
        self.Group_LendableQuantityDelta7 = Group_LendableQuantityDelta7
        self.Group_LendableQuantityDelta7Pc = Group_LendableQuantityDelta7Pc
        self.Group_LendableQuantityStability = Group_LendableQuantityStability
        self.Group_LendableValue = Group_LendableValue
        self.Group_LendableValueDelta1 = Group_LendableValueDelta1
        self.Group_LendableValueDelta1Pc = Group_LendableValueDelta1Pc
        self.Group_LendableValueDelta30 = Group_LendableValueDelta30
        self.Group_LendableValueDelta30Pc = Group_LendableValueDelta30Pc
        self.Group_LendableValueDelta7 = Group_LendableValueDelta7
        self.Group_LendableValueDelta7Pc = Group_LendableValueDelta7Pc
        self.Group_LendableValueStability = Group_LendableValueStability
        self.Group_LenderConcentration = Group_LenderConcentration
        self.Group_LenderQuantityOnLoanStability = Group_LenderQuantityOnLoanStability
        self.Group_LenderValueOnLoan = Group_LenderValueOnLoan
        self.Group_LenderValueOnLoanStability = Group_LenderValueOnLoanStability
        self.Group_MarketCap = Group_MarketCap
        self.Group_NewPositions = Group_NewPositions
        self.Group_OutOfMoneyPct = Group_OutOfMoneyPct
        self.Group_PcFreeFloatValueOnLoan = Group_PcFreeFloatValueOnLoan
        self.Group_PcIssueValueOnLoan = Group_PcIssueValueOnLoan
        self.Group_PcIssueValueOnLoanDelta1 = Group_PcIssueValueOnLoanDelta1
        self.Group_PcIssueValueOnLoanDelta30 = Group_PcIssueValueOnLoanDelta30
        self.Group_PcIssueValueOnLoanDelta7 = Group_PcIssueValueOnLoanDelta7
        self.Group_PcSharesOutstandingOnLoan = Group_PcSharesOutstandingOnLoan
        self.Group_PcSharesOutstandingOnLoanDelta1 = Group_PcSharesOutstandingOnLoanDelta1
        self.Group_PcSharesOutstandingOnLoanDelta30 = Group_PcSharesOutstandingOnLoanDelta30
        self.Group_PcSharesOutstandingOnLoanDelta7 = Group_PcSharesOutstandingOnLoanDelta7
        self.Group_PriceDelta1 = Group_PriceDelta1
        self.Group_PriceDelta30 = Group_PriceDelta30
        self.Group_PriceDelta7 = Group_PriceDelta7
        self.Group_PrimeBrokers = Group_PrimeBrokers
        self.Group_ProfitandLossImpact = Group_ProfitandLossImpact
        self.Group_QuantityOnLoan = Group_QuantityOnLoan
        self.Group_QuantityOnLoanDelta1 = Group_QuantityOnLoanDelta1
        self.Group_QuantityOnLoanDelta1Pc = Group_QuantityOnLoanDelta1Pc
        self.Group_QuantityOnLoanDelta30 = Group_QuantityOnLoanDelta30
        self.Group_QuantityOnLoanDelta30Pc = Group_QuantityOnLoanDelta30Pc
        self.Group_QuantityOnLoanDelta7 = Group_QuantityOnLoanDelta7
        self.Group_QuantityOnLoanDelta7Pc = Group_QuantityOnLoanDelta7Pc
        self.Group_ReratePreviousVWAF = Group_ReratePreviousVWAF
        self.Group_ReratePreviousVWAR = Group_ReratePreviousVWAR
        self.Group_RerateTransactionCount = Group_RerateTransactionCount
        self.Group_RerateTransactionCountDown = Group_RerateTransactionCountDown
        self.Group_RerateTransactionCountUp = Group_RerateTransactionCountUp
        self.Group_RerateValueOnLoan = Group_RerateValueOnLoan
        self.Group_RerateValueOnLoanDown = Group_RerateValueOnLoanDown
        self.Group_RerateValueOnLoanUp = Group_RerateValueOnLoanUp
        self.Group_RerateVWAF = Group_RerateVWAF
        self.Group_RerateVWAFDelta1 = Group_RerateVWAFDelta1
        self.Group_RerateVWAFDelta1Pc = Group_RerateVWAFDelta1Pc
        self.Group_RerateVWAR = Group_RerateVWAR
        self.Group_RerateVWARDelta1 = Group_RerateVWARDelta1
        self.Group_RerateVWARDelta1Pc = Group_RerateVWARDelta1Pc
        self.Group_SAF = Group_SAF
        self.Group_SAFDelta1 = Group_SAFDelta1
        self.Group_SAFDelta1Pc = Group_SAFDelta1Pc
        self.Group_SAFDelta30 = Group_SAFDelta30
        self.Group_SAFDelta30Pc = Group_SAFDelta30Pc
        self.Group_SAFDelta7 = Group_SAFDelta7
        self.Group_SAFDelta7Pc = Group_SAFDelta7Pc
        self.Group_SAR = Group_SAR
        self.Group_SARDelta1 = Group_SARDelta1
        self.Group_SARDelta1Pc = Group_SARDelta1Pc
        self.Group_SARDelta30 = Group_SARDelta30
        self.Group_SARDelta30Pc = Group_SARDelta30Pc
        self.Group_SARDelta7 = Group_SARDelta7
        self.Group_SARDelta7Pc = Group_SARDelta7Pc
        self.Group_SATenure = Group_SATenure
        self.Group_SharesOutstanding = Group_SharesOutstanding
        self.Group_ShortLoanQuantity = Group_ShortLoanQuantity
        self.Group_ShortLoanValue = Group_ShortLoanValue
        self.Group_TransactionDuration = Group_TransactionDuration
        self.Group_Utilisation = Group_Utilisation
        self.Group_UtilisationByQuantity = Group_UtilisationByQuantity
        self.Group_UtilisationByQuantityDelta1 = Group_UtilisationByQuantityDelta1
        self.Group_UtilisationByQuantityDelta30 = Group_UtilisationByQuantityDelta30
        self.Group_UtilisationByQuantityDelta7 = Group_UtilisationByQuantityDelta7
        self.Group_UtilisationDelta1 = Group_UtilisationDelta1
        self.Group_UtilisationDelta30 = Group_UtilisationDelta30
        self.Group_UtilisationDelta7 = Group_UtilisationDelta7
        self.Group_ValueOnLoan = Group_ValueOnLoan
        self.Group_ValueOnLoanDelta1 = Group_ValueOnLoanDelta1
        self.Group_ValueOnLoanDelta1Pc = Group_ValueOnLoanDelta1Pc
        self.Group_ValueOnLoanDelta30 = Group_ValueOnLoanDelta30
        self.Group_ValueOnLoanDelta30Pc = Group_ValueOnLoanDelta30Pc
        self.Group_ValueOnLoanDelta7 = Group_ValueOnLoanDelta7
        self.Group_ValueOnLoanDelta7Pc = Group_ValueOnLoanDelta7Pc
        self.Group_VWAF = Group_VWAF
        self.Group_VWAF1 = Group_VWAF1
        self.Group_VWAF30 = Group_VWAF30
        self.Group_VWAF7 = Group_VWAF7
        self.Group_VWAFDelta = Group_VWAFDelta
        self.Group_VWAFDelta1 = Group_VWAFDelta1
        self.Group_VWAFDelta1Pc = Group_VWAFDelta1Pc
        self.Group_VWAFDelta30 = Group_VWAFDelta30
        self.Group_VWAFDelta30Pc = Group_VWAFDelta30Pc
        self.Group_VWAFDelta7 = Group_VWAFDelta7
        self.Group_VWAFDelta7Pc = Group_VWAFDelta7Pc
        self.Group_VWAR = Group_VWAR
        self.Group_VWAR1 = Group_VWAR1
        self.Group_VWAR30 = Group_VWAR30
        self.Group_VWAR7 = Group_VWAR7
        self.Group_VWARDelta1 = Group_VWARDelta1
        self.Group_VWARDelta1Pc = Group_VWARDelta1Pc
        self.Group_VWARDelta30 = Group_VWARDelta30
        self.Group_VWARDelta30Pc = Group_VWARDelta30Pc
        self.Group_VWARDelta7 = Group_VWARDelta7
        self.Group_VWARDelta7Pc = Group_VWARDelta7Pc
        self.LatestDataDate = LatestDataDate
        self.Transaction_ComparativeDailyCostIndicative = Transaction_ComparativeDailyCostIndicative
        self.Transaction_ComparativeDailyCostMySA = Transaction_ComparativeDailyCostMySA
        self.Transaction_ComparativeDailyCostSA = Transaction_ComparativeDailyCostSA
        self.Transaction_DailyCost = Transaction_DailyCost
        self.Transaction_DailyCostDifferenceIndicative = Transaction_DailyCostDifferenceIndicative
        self.Transaction_DailyCostDifferenceMySA = Transaction_DailyCostDifferenceMySA
        self.Transaction_DailyCostDifferenceSA = Transaction_DailyCostDifferenceSA
        self.Transaction_DividendRequirement = Transaction_DividendRequirement
        self.Transaction_Duration = Transaction_Duration
        self.Transaction_Fee = Transaction_Fee
        self.Transaction_Quantity = Transaction_Quantity
        self.Transaction_RateVarianceIndicative = Transaction_RateVarianceIndicative
        self.Transaction_RateVarianceMySA = Transaction_RateVarianceMySA
        self.Transaction_RateVarianceSA = Transaction_RateVarianceSA
        self.Transaction_Rebate = Transaction_Rebate
        if isinstance(Transaction_StartDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Transaction_StartDate, '%Y-%m-%d').date()
        else:
            initvalue_ = Transaction_StartDate
        self.Transaction_StartDate = initvalue_
        self.Transaction_TransactionFee = Transaction_TransactionFee
        self.Transaction_Value = Transaction_Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DistributionType84)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DistributionType84.subclass:
            return DistributionType84.subclass(*args_, **kwargs_)
        else:
            return DistributionType84(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Client_AvailableQuantity(self):
        return self.Client_AvailableQuantity
    def set_Client_AvailableQuantity(self, Client_AvailableQuantity):
        self.Client_AvailableQuantity = Client_AvailableQuantity
    def get_Client_AvailableQuantityDelta1(self):
        return self.Client_AvailableQuantityDelta1
    def set_Client_AvailableQuantityDelta1(self, Client_AvailableQuantityDelta1):
        self.Client_AvailableQuantityDelta1 = Client_AvailableQuantityDelta1
    def get_Client_AvailableQuantityDelta1Pc(self):
        return self.Client_AvailableQuantityDelta1Pc
    def set_Client_AvailableQuantityDelta1Pc(self, Client_AvailableQuantityDelta1Pc):
        self.Client_AvailableQuantityDelta1Pc = Client_AvailableQuantityDelta1Pc
    def get_Client_AvailableQuantityDelta30(self):
        return self.Client_AvailableQuantityDelta30
    def set_Client_AvailableQuantityDelta30(self, Client_AvailableQuantityDelta30):
        self.Client_AvailableQuantityDelta30 = Client_AvailableQuantityDelta30
    def get_Client_AvailableQuantityDelta30Pc(self):
        return self.Client_AvailableQuantityDelta30Pc
    def set_Client_AvailableQuantityDelta30Pc(self, Client_AvailableQuantityDelta30Pc):
        self.Client_AvailableQuantityDelta30Pc = Client_AvailableQuantityDelta30Pc
    def get_Client_AvailableQuantityDelta7(self):
        return self.Client_AvailableQuantityDelta7
    def set_Client_AvailableQuantityDelta7(self, Client_AvailableQuantityDelta7):
        self.Client_AvailableQuantityDelta7 = Client_AvailableQuantityDelta7
    def get_Client_AvailableQuantityDelta7Pc(self):
        return self.Client_AvailableQuantityDelta7Pc
    def set_Client_AvailableQuantityDelta7Pc(self, Client_AvailableQuantityDelta7Pc):
        self.Client_AvailableQuantityDelta7Pc = Client_AvailableQuantityDelta7Pc
    def get_Client_AvailableValue(self):
        return self.Client_AvailableValue
    def set_Client_AvailableValue(self, Client_AvailableValue):
        self.Client_AvailableValue = Client_AvailableValue
    def get_Client_AvailableValueDelta1(self):
        return self.Client_AvailableValueDelta1
    def set_Client_AvailableValueDelta1(self, Client_AvailableValueDelta1):
        self.Client_AvailableValueDelta1 = Client_AvailableValueDelta1
    def get_Client_AvailableValueDelta1Pc(self):
        return self.Client_AvailableValueDelta1Pc
    def set_Client_AvailableValueDelta1Pc(self, Client_AvailableValueDelta1Pc):
        self.Client_AvailableValueDelta1Pc = Client_AvailableValueDelta1Pc
    def get_Client_AvailableValueDelta30(self):
        return self.Client_AvailableValueDelta30
    def set_Client_AvailableValueDelta30(self, Client_AvailableValueDelta30):
        self.Client_AvailableValueDelta30 = Client_AvailableValueDelta30
    def get_Client_AvailableValueDelta30Pc(self):
        return self.Client_AvailableValueDelta30Pc
    def set_Client_AvailableValueDelta30Pc(self, Client_AvailableValueDelta30Pc):
        self.Client_AvailableValueDelta30Pc = Client_AvailableValueDelta30Pc
    def get_Client_AvailableValueDelta7(self):
        return self.Client_AvailableValueDelta7
    def set_Client_AvailableValueDelta7(self, Client_AvailableValueDelta7):
        self.Client_AvailableValueDelta7 = Client_AvailableValueDelta7
    def get_Client_AvailableValueDelta7Pc(self):
        return self.Client_AvailableValueDelta7Pc
    def set_Client_AvailableValueDelta7Pc(self, Client_AvailableValueDelta7Pc):
        self.Client_AvailableValueDelta7Pc = Client_AvailableValueDelta7Pc
    def get_Client_DailyCost(self):
        return self.Client_DailyCost
    def set_Client_DailyCost(self, Client_DailyCost):
        self.Client_DailyCost = Client_DailyCost
    def get_Client_DailyCostCombined(self):
        return self.Client_DailyCostCombined
    def set_Client_DailyCostCombined(self, Client_DailyCostCombined):
        self.Client_DailyCostCombined = Client_DailyCostCombined
    def get_Client_DailyRevenue(self):
        return self.Client_DailyRevenue
    def set_Client_DailyRevenue(self, Client_DailyRevenue):
        self.Client_DailyRevenue = Client_DailyRevenue
    def get_Client_LendableQuantity(self):
        return self.Client_LendableQuantity
    def set_Client_LendableQuantity(self, Client_LendableQuantity):
        self.Client_LendableQuantity = Client_LendableQuantity
    def get_Client_LendableQuantityDelta1(self):
        return self.Client_LendableQuantityDelta1
    def set_Client_LendableQuantityDelta1(self, Client_LendableQuantityDelta1):
        self.Client_LendableQuantityDelta1 = Client_LendableQuantityDelta1
    def get_Client_LendableQuantityDelta1Pc(self):
        return self.Client_LendableQuantityDelta1Pc
    def set_Client_LendableQuantityDelta1Pc(self, Client_LendableQuantityDelta1Pc):
        self.Client_LendableQuantityDelta1Pc = Client_LendableQuantityDelta1Pc
    def get_Client_LendableQuantityDelta30(self):
        return self.Client_LendableQuantityDelta30
    def set_Client_LendableQuantityDelta30(self, Client_LendableQuantityDelta30):
        self.Client_LendableQuantityDelta30 = Client_LendableQuantityDelta30
    def get_Client_LendableQuantityDelta30Pc(self):
        return self.Client_LendableQuantityDelta30Pc
    def set_Client_LendableQuantityDelta30Pc(self, Client_LendableQuantityDelta30Pc):
        self.Client_LendableQuantityDelta30Pc = Client_LendableQuantityDelta30Pc
    def get_Client_LendableQuantityDelta7(self):
        return self.Client_LendableQuantityDelta7
    def set_Client_LendableQuantityDelta7(self, Client_LendableQuantityDelta7):
        self.Client_LendableQuantityDelta7 = Client_LendableQuantityDelta7
    def get_Client_LendableQuantityDelta7Pc(self):
        return self.Client_LendableQuantityDelta7Pc
    def set_Client_LendableQuantityDelta7Pc(self, Client_LendableQuantityDelta7Pc):
        self.Client_LendableQuantityDelta7Pc = Client_LendableQuantityDelta7Pc
    def get_Client_LendableValue(self):
        return self.Client_LendableValue
    def set_Client_LendableValue(self, Client_LendableValue):
        self.Client_LendableValue = Client_LendableValue
    def get_Client_LendableValueDelta1(self):
        return self.Client_LendableValueDelta1
    def set_Client_LendableValueDelta1(self, Client_LendableValueDelta1):
        self.Client_LendableValueDelta1 = Client_LendableValueDelta1
    def get_Client_LendableValueDelta1Pc(self):
        return self.Client_LendableValueDelta1Pc
    def set_Client_LendableValueDelta1Pc(self, Client_LendableValueDelta1Pc):
        self.Client_LendableValueDelta1Pc = Client_LendableValueDelta1Pc
    def get_Client_LendableValueDelta30(self):
        return self.Client_LendableValueDelta30
    def set_Client_LendableValueDelta30(self, Client_LendableValueDelta30):
        self.Client_LendableValueDelta30 = Client_LendableValueDelta30
    def get_Client_LendableValueDelta30Pc(self):
        return self.Client_LendableValueDelta30Pc
    def set_Client_LendableValueDelta30Pc(self, Client_LendableValueDelta30Pc):
        self.Client_LendableValueDelta30Pc = Client_LendableValueDelta30Pc
    def get_Client_LendableValueDelta7(self):
        return self.Client_LendableValueDelta7
    def set_Client_LendableValueDelta7(self, Client_LendableValueDelta7):
        self.Client_LendableValueDelta7 = Client_LendableValueDelta7
    def get_Client_LendableValueDelta7Pc(self):
        return self.Client_LendableValueDelta7Pc
    def set_Client_LendableValueDelta7Pc(self, Client_LendableValueDelta7Pc):
        self.Client_LendableValueDelta7Pc = Client_LendableValueDelta7Pc
    def get_Client_MarketShare(self):
        return self.Client_MarketShare
    def set_Client_MarketShare(self, Client_MarketShare):
        self.Client_MarketShare = Client_MarketShare
    def get_Client_MarketShareDelta1(self):
        return self.Client_MarketShareDelta1
    def set_Client_MarketShareDelta1(self, Client_MarketShareDelta1):
        self.Client_MarketShareDelta1 = Client_MarketShareDelta1
    def get_Client_MarketShareDelta30(self):
        return self.Client_MarketShareDelta30
    def set_Client_MarketShareDelta30(self, Client_MarketShareDelta30):
        self.Client_MarketShareDelta30 = Client_MarketShareDelta30
    def get_Client_MarketShareDelta7(self):
        return self.Client_MarketShareDelta7
    def set_Client_MarketShareDelta7(self, Client_MarketShareDelta7):
        self.Client_MarketShareDelta7 = Client_MarketShareDelta7
    def get_Client_MarketShareRank(self):
        return self.Client_MarketShareRank
    def set_Client_MarketShareRank(self, Client_MarketShareRank):
        self.Client_MarketShareRank = Client_MarketShareRank
    def get_Client_OpportunityGainLoss(self):
        return self.Client_OpportunityGainLoss
    def set_Client_OpportunityGainLoss(self, Client_OpportunityGainLoss):
        self.Client_OpportunityGainLoss = Client_OpportunityGainLoss
    def get_Client_QuantityOnLoan(self):
        return self.Client_QuantityOnLoan
    def set_Client_QuantityOnLoan(self, Client_QuantityOnLoan):
        self.Client_QuantityOnLoan = Client_QuantityOnLoan
    def get_Client_QuantityOnLoanDelta1(self):
        return self.Client_QuantityOnLoanDelta1
    def set_Client_QuantityOnLoanDelta1(self, Client_QuantityOnLoanDelta1):
        self.Client_QuantityOnLoanDelta1 = Client_QuantityOnLoanDelta1
    def get_Client_QuantityOnLoanDelta1Pc(self):
        return self.Client_QuantityOnLoanDelta1Pc
    def set_Client_QuantityOnLoanDelta1Pc(self, Client_QuantityOnLoanDelta1Pc):
        self.Client_QuantityOnLoanDelta1Pc = Client_QuantityOnLoanDelta1Pc
    def get_Client_QuantityOnLoanDelta30(self):
        return self.Client_QuantityOnLoanDelta30
    def set_Client_QuantityOnLoanDelta30(self, Client_QuantityOnLoanDelta30):
        self.Client_QuantityOnLoanDelta30 = Client_QuantityOnLoanDelta30
    def get_Client_QuantityOnLoanDelta30Pc(self):
        return self.Client_QuantityOnLoanDelta30Pc
    def set_Client_QuantityOnLoanDelta30Pc(self, Client_QuantityOnLoanDelta30Pc):
        self.Client_QuantityOnLoanDelta30Pc = Client_QuantityOnLoanDelta30Pc
    def get_Client_QuantityOnLoanDelta7(self):
        return self.Client_QuantityOnLoanDelta7
    def set_Client_QuantityOnLoanDelta7(self, Client_QuantityOnLoanDelta7):
        self.Client_QuantityOnLoanDelta7 = Client_QuantityOnLoanDelta7
    def get_Client_QuantityOnLoanDelta7Pc(self):
        return self.Client_QuantityOnLoanDelta7Pc
    def set_Client_QuantityOnLoanDelta7Pc(self, Client_QuantityOnLoanDelta7Pc):
        self.Client_QuantityOnLoanDelta7Pc = Client_QuantityOnLoanDelta7Pc
    def get_Client_SAF(self):
        return self.Client_SAF
    def set_Client_SAF(self, Client_SAF):
        self.Client_SAF = Client_SAF
    def get_Client_SAFDelta1(self):
        return self.Client_SAFDelta1
    def set_Client_SAFDelta1(self, Client_SAFDelta1):
        self.Client_SAFDelta1 = Client_SAFDelta1
    def get_Client_SAFDelta1Pc(self):
        return self.Client_SAFDelta1Pc
    def set_Client_SAFDelta1Pc(self, Client_SAFDelta1Pc):
        self.Client_SAFDelta1Pc = Client_SAFDelta1Pc
    def get_Client_SAFDelta30(self):
        return self.Client_SAFDelta30
    def set_Client_SAFDelta30(self, Client_SAFDelta30):
        self.Client_SAFDelta30 = Client_SAFDelta30
    def get_Client_SAFDelta30Pc(self):
        return self.Client_SAFDelta30Pc
    def set_Client_SAFDelta30Pc(self, Client_SAFDelta30Pc):
        self.Client_SAFDelta30Pc = Client_SAFDelta30Pc
    def get_Client_SAFDelta7(self):
        return self.Client_SAFDelta7
    def set_Client_SAFDelta7(self, Client_SAFDelta7):
        self.Client_SAFDelta7 = Client_SAFDelta7
    def get_Client_SAFDelta7Pc(self):
        return self.Client_SAFDelta7Pc
    def set_Client_SAFDelta7Pc(self, Client_SAFDelta7Pc):
        self.Client_SAFDelta7Pc = Client_SAFDelta7Pc
    def get_Client_SAR(self):
        return self.Client_SAR
    def set_Client_SAR(self, Client_SAR):
        self.Client_SAR = Client_SAR
    def get_Client_SARDelta1(self):
        return self.Client_SARDelta1
    def set_Client_SARDelta1(self, Client_SARDelta1):
        self.Client_SARDelta1 = Client_SARDelta1
    def get_Client_SARDelta1Pc(self):
        return self.Client_SARDelta1Pc
    def set_Client_SARDelta1Pc(self, Client_SARDelta1Pc):
        self.Client_SARDelta1Pc = Client_SARDelta1Pc
    def get_Client_SARDelta30(self):
        return self.Client_SARDelta30
    def set_Client_SARDelta30(self, Client_SARDelta30):
        self.Client_SARDelta30 = Client_SARDelta30
    def get_Client_SARDelta30Pc(self):
        return self.Client_SARDelta30Pc
    def set_Client_SARDelta30Pc(self, Client_SARDelta30Pc):
        self.Client_SARDelta30Pc = Client_SARDelta30Pc
    def get_Client_SARDelta7(self):
        return self.Client_SARDelta7
    def set_Client_SARDelta7(self, Client_SARDelta7):
        self.Client_SARDelta7 = Client_SARDelta7
    def get_Client_SARDelta7Pc(self):
        return self.Client_SARDelta7Pc
    def set_Client_SARDelta7Pc(self, Client_SARDelta7Pc):
        self.Client_SARDelta7Pc = Client_SARDelta7Pc
    def get_Client_SATenure(self):
        return self.Client_SATenure
    def set_Client_SATenure(self, Client_SATenure):
        self.Client_SATenure = Client_SATenure
    def get_Client_Utilisation(self):
        return self.Client_Utilisation
    def set_Client_Utilisation(self, Client_Utilisation):
        self.Client_Utilisation = Client_Utilisation
    def get_Client_UtilisationByQuantity(self):
        return self.Client_UtilisationByQuantity
    def set_Client_UtilisationByQuantity(self, Client_UtilisationByQuantity):
        self.Client_UtilisationByQuantity = Client_UtilisationByQuantity
    def get_Client_UtilisationByQuantityDelta1(self):
        return self.Client_UtilisationByQuantityDelta1
    def set_Client_UtilisationByQuantityDelta1(self, Client_UtilisationByQuantityDelta1):
        self.Client_UtilisationByQuantityDelta1 = Client_UtilisationByQuantityDelta1
    def get_Client_UtilisationByQuantityDelta30(self):
        return self.Client_UtilisationByQuantityDelta30
    def set_Client_UtilisationByQuantityDelta30(self, Client_UtilisationByQuantityDelta30):
        self.Client_UtilisationByQuantityDelta30 = Client_UtilisationByQuantityDelta30
    def get_Client_UtilisationByQuantityDelta7(self):
        return self.Client_UtilisationByQuantityDelta7
    def set_Client_UtilisationByQuantityDelta7(self, Client_UtilisationByQuantityDelta7):
        self.Client_UtilisationByQuantityDelta7 = Client_UtilisationByQuantityDelta7
    def get_Client_UtilisationDelta1(self):
        return self.Client_UtilisationDelta1
    def set_Client_UtilisationDelta1(self, Client_UtilisationDelta1):
        self.Client_UtilisationDelta1 = Client_UtilisationDelta1
    def get_Client_UtilisationDelta30(self):
        return self.Client_UtilisationDelta30
    def set_Client_UtilisationDelta30(self, Client_UtilisationDelta30):
        self.Client_UtilisationDelta30 = Client_UtilisationDelta30
    def get_Client_UtilisationDelta7(self):
        return self.Client_UtilisationDelta7
    def set_Client_UtilisationDelta7(self, Client_UtilisationDelta7):
        self.Client_UtilisationDelta7 = Client_UtilisationDelta7
    def get_Client_ValueOnLoan(self):
        return self.Client_ValueOnLoan
    def set_Client_ValueOnLoan(self, Client_ValueOnLoan):
        self.Client_ValueOnLoan = Client_ValueOnLoan
    def get_Client_ValueOnLoanDelta1(self):
        return self.Client_ValueOnLoanDelta1
    def set_Client_ValueOnLoanDelta1(self, Client_ValueOnLoanDelta1):
        self.Client_ValueOnLoanDelta1 = Client_ValueOnLoanDelta1
    def get_Client_ValueOnLoanDelta1Pc(self):
        return self.Client_ValueOnLoanDelta1Pc
    def set_Client_ValueOnLoanDelta1Pc(self, Client_ValueOnLoanDelta1Pc):
        self.Client_ValueOnLoanDelta1Pc = Client_ValueOnLoanDelta1Pc
    def get_Client_ValueOnLoanDelta30(self):
        return self.Client_ValueOnLoanDelta30
    def set_Client_ValueOnLoanDelta30(self, Client_ValueOnLoanDelta30):
        self.Client_ValueOnLoanDelta30 = Client_ValueOnLoanDelta30
    def get_Client_ValueOnLoanDelta30Pc(self):
        return self.Client_ValueOnLoanDelta30Pc
    def set_Client_ValueOnLoanDelta30Pc(self, Client_ValueOnLoanDelta30Pc):
        self.Client_ValueOnLoanDelta30Pc = Client_ValueOnLoanDelta30Pc
    def get_Client_ValueOnLoanDelta7(self):
        return self.Client_ValueOnLoanDelta7
    def set_Client_ValueOnLoanDelta7(self, Client_ValueOnLoanDelta7):
        self.Client_ValueOnLoanDelta7 = Client_ValueOnLoanDelta7
    def get_Client_ValueOnLoanDelta7Pc(self):
        return self.Client_ValueOnLoanDelta7Pc
    def set_Client_ValueOnLoanDelta7Pc(self, Client_ValueOnLoanDelta7Pc):
        self.Client_ValueOnLoanDelta7Pc = Client_ValueOnLoanDelta7Pc
    def get_Client_VWAF(self):
        return self.Client_VWAF
    def set_Client_VWAF(self, Client_VWAF):
        self.Client_VWAF = Client_VWAF
    def get_Client_VWAF1(self):
        return self.Client_VWAF1
    def set_Client_VWAF1(self, Client_VWAF1):
        self.Client_VWAF1 = Client_VWAF1
    def get_Client_VWAF30(self):
        return self.Client_VWAF30
    def set_Client_VWAF30(self, Client_VWAF30):
        self.Client_VWAF30 = Client_VWAF30
    def get_Client_VWAF7(self):
        return self.Client_VWAF7
    def set_Client_VWAF7(self, Client_VWAF7):
        self.Client_VWAF7 = Client_VWAF7
    def get_Client_VWAFDelta1(self):
        return self.Client_VWAFDelta1
    def set_Client_VWAFDelta1(self, Client_VWAFDelta1):
        self.Client_VWAFDelta1 = Client_VWAFDelta1
    def get_Client_VWAFDelta1Pc(self):
        return self.Client_VWAFDelta1Pc
    def set_Client_VWAFDelta1Pc(self, Client_VWAFDelta1Pc):
        self.Client_VWAFDelta1Pc = Client_VWAFDelta1Pc
    def get_Client_VWAFDelta30(self):
        return self.Client_VWAFDelta30
    def set_Client_VWAFDelta30(self, Client_VWAFDelta30):
        self.Client_VWAFDelta30 = Client_VWAFDelta30
    def get_Client_VWAFDelta30Pc(self):
        return self.Client_VWAFDelta30Pc
    def set_Client_VWAFDelta30Pc(self, Client_VWAFDelta30Pc):
        self.Client_VWAFDelta30Pc = Client_VWAFDelta30Pc
    def get_Client_VWAFDelta7(self):
        return self.Client_VWAFDelta7
    def set_Client_VWAFDelta7(self, Client_VWAFDelta7):
        self.Client_VWAFDelta7 = Client_VWAFDelta7
    def get_Client_VWAFDelta7Pc(self):
        return self.Client_VWAFDelta7Pc
    def set_Client_VWAFDelta7Pc(self, Client_VWAFDelta7Pc):
        self.Client_VWAFDelta7Pc = Client_VWAFDelta7Pc
    def get_Client_VWAR(self):
        return self.Client_VWAR
    def set_Client_VWAR(self, Client_VWAR):
        self.Client_VWAR = Client_VWAR
    def get_Client_VWAR1(self):
        return self.Client_VWAR1
    def set_Client_VWAR1(self, Client_VWAR1):
        self.Client_VWAR1 = Client_VWAR1
    def get_Client_VWAR30(self):
        return self.Client_VWAR30
    def set_Client_VWAR30(self, Client_VWAR30):
        self.Client_VWAR30 = Client_VWAR30
    def get_Client_VWAR7(self):
        return self.Client_VWAR7
    def set_Client_VWAR7(self, Client_VWAR7):
        self.Client_VWAR7 = Client_VWAR7
    def get_Client_VWARDelta1(self):
        return self.Client_VWARDelta1
    def set_Client_VWARDelta1(self, Client_VWARDelta1):
        self.Client_VWARDelta1 = Client_VWARDelta1
    def get_Client_VWARDelta1Pc(self):
        return self.Client_VWARDelta1Pc
    def set_Client_VWARDelta1Pc(self, Client_VWARDelta1Pc):
        self.Client_VWARDelta1Pc = Client_VWARDelta1Pc
    def get_Client_VWARDelta30(self):
        return self.Client_VWARDelta30
    def set_Client_VWARDelta30(self, Client_VWARDelta30):
        self.Client_VWARDelta30 = Client_VWARDelta30
    def get_Client_VWARDelta30Pc(self):
        return self.Client_VWARDelta30Pc
    def set_Client_VWARDelta30Pc(self, Client_VWARDelta30Pc):
        self.Client_VWARDelta30Pc = Client_VWARDelta30Pc
    def get_Client_VWARDelta7(self):
        return self.Client_VWARDelta7
    def set_Client_VWARDelta7(self, Client_VWARDelta7):
        self.Client_VWARDelta7 = Client_VWARDelta7
    def get_Client_VWARDelta7Pc(self):
        return self.Client_VWARDelta7Pc
    def set_Client_VWARDelta7Pc(self, Client_VWARDelta7Pc):
        self.Client_VWARDelta7Pc = Client_VWARDelta7Pc
    def get_Group_ActiveAvailableQuantity(self):
        return self.Group_ActiveAvailableQuantity
    def set_Group_ActiveAvailableQuantity(self, Group_ActiveAvailableQuantity):
        self.Group_ActiveAvailableQuantity = Group_ActiveAvailableQuantity
    def get_Group_ActiveAvailableQuantityDelta1(self):
        return self.Group_ActiveAvailableQuantityDelta1
    def set_Group_ActiveAvailableQuantityDelta1(self, Group_ActiveAvailableQuantityDelta1):
        self.Group_ActiveAvailableQuantityDelta1 = Group_ActiveAvailableQuantityDelta1
    def get_Group_ActiveAvailableQuantityDelta1Pc(self):
        return self.Group_ActiveAvailableQuantityDelta1Pc
    def set_Group_ActiveAvailableQuantityDelta1Pc(self, Group_ActiveAvailableQuantityDelta1Pc):
        self.Group_ActiveAvailableQuantityDelta1Pc = Group_ActiveAvailableQuantityDelta1Pc
    def get_Group_ActiveAvailableQuantityDelta30(self):
        return self.Group_ActiveAvailableQuantityDelta30
    def set_Group_ActiveAvailableQuantityDelta30(self, Group_ActiveAvailableQuantityDelta30):
        self.Group_ActiveAvailableQuantityDelta30 = Group_ActiveAvailableQuantityDelta30
    def get_Group_ActiveAvailableQuantityDelta30Pc(self):
        return self.Group_ActiveAvailableQuantityDelta30Pc
    def set_Group_ActiveAvailableQuantityDelta30Pc(self, Group_ActiveAvailableQuantityDelta30Pc):
        self.Group_ActiveAvailableQuantityDelta30Pc = Group_ActiveAvailableQuantityDelta30Pc
    def get_Group_ActiveAvailableQuantityDelta7(self):
        return self.Group_ActiveAvailableQuantityDelta7
    def set_Group_ActiveAvailableQuantityDelta7(self, Group_ActiveAvailableQuantityDelta7):
        self.Group_ActiveAvailableQuantityDelta7 = Group_ActiveAvailableQuantityDelta7
    def get_Group_ActiveAvailableQuantityDelta7Pc(self):
        return self.Group_ActiveAvailableQuantityDelta7Pc
    def set_Group_ActiveAvailableQuantityDelta7Pc(self, Group_ActiveAvailableQuantityDelta7Pc):
        self.Group_ActiveAvailableQuantityDelta7Pc = Group_ActiveAvailableQuantityDelta7Pc
    def get_Group_ActiveAvailableValue(self):
        return self.Group_ActiveAvailableValue
    def set_Group_ActiveAvailableValue(self, Group_ActiveAvailableValue):
        self.Group_ActiveAvailableValue = Group_ActiveAvailableValue
    def get_Group_ActiveAvailableValueDelta1(self):
        return self.Group_ActiveAvailableValueDelta1
    def set_Group_ActiveAvailableValueDelta1(self, Group_ActiveAvailableValueDelta1):
        self.Group_ActiveAvailableValueDelta1 = Group_ActiveAvailableValueDelta1
    def get_Group_ActiveAvailableValueDelta1Pc(self):
        return self.Group_ActiveAvailableValueDelta1Pc
    def set_Group_ActiveAvailableValueDelta1Pc(self, Group_ActiveAvailableValueDelta1Pc):
        self.Group_ActiveAvailableValueDelta1Pc = Group_ActiveAvailableValueDelta1Pc
    def get_Group_ActiveAvailableValueDelta30(self):
        return self.Group_ActiveAvailableValueDelta30
    def set_Group_ActiveAvailableValueDelta30(self, Group_ActiveAvailableValueDelta30):
        self.Group_ActiveAvailableValueDelta30 = Group_ActiveAvailableValueDelta30
    def get_Group_ActiveAvailableValueDelta30Pc(self):
        return self.Group_ActiveAvailableValueDelta30Pc
    def set_Group_ActiveAvailableValueDelta30Pc(self, Group_ActiveAvailableValueDelta30Pc):
        self.Group_ActiveAvailableValueDelta30Pc = Group_ActiveAvailableValueDelta30Pc
    def get_Group_ActiveAvailableValueDelta7(self):
        return self.Group_ActiveAvailableValueDelta7
    def set_Group_ActiveAvailableValueDelta7(self, Group_ActiveAvailableValueDelta7):
        self.Group_ActiveAvailableValueDelta7 = Group_ActiveAvailableValueDelta7
    def get_Group_ActiveAvailableValueDelta7Pc(self):
        return self.Group_ActiveAvailableValueDelta7Pc
    def set_Group_ActiveAvailableValueDelta7Pc(self, Group_ActiveAvailableValueDelta7Pc):
        self.Group_ActiveAvailableValueDelta7Pc = Group_ActiveAvailableValueDelta7Pc
    def get_Group_ActiveLendableQuantity(self):
        return self.Group_ActiveLendableQuantity
    def set_Group_ActiveLendableQuantity(self, Group_ActiveLendableQuantity):
        self.Group_ActiveLendableQuantity = Group_ActiveLendableQuantity
    def get_Group_ActiveLendableQuantityDelta1(self):
        return self.Group_ActiveLendableQuantityDelta1
    def set_Group_ActiveLendableQuantityDelta1(self, Group_ActiveLendableQuantityDelta1):
        self.Group_ActiveLendableQuantityDelta1 = Group_ActiveLendableQuantityDelta1
    def get_Group_ActiveLendableQuantityDelta1Pc(self):
        return self.Group_ActiveLendableQuantityDelta1Pc
    def set_Group_ActiveLendableQuantityDelta1Pc(self, Group_ActiveLendableQuantityDelta1Pc):
        self.Group_ActiveLendableQuantityDelta1Pc = Group_ActiveLendableQuantityDelta1Pc
    def get_Group_ActiveLendableQuantityDelta30(self):
        return self.Group_ActiveLendableQuantityDelta30
    def set_Group_ActiveLendableQuantityDelta30(self, Group_ActiveLendableQuantityDelta30):
        self.Group_ActiveLendableQuantityDelta30 = Group_ActiveLendableQuantityDelta30
    def get_Group_ActiveLendableQuantityDelta30Pc(self):
        return self.Group_ActiveLendableQuantityDelta30Pc
    def set_Group_ActiveLendableQuantityDelta30Pc(self, Group_ActiveLendableQuantityDelta30Pc):
        self.Group_ActiveLendableQuantityDelta30Pc = Group_ActiveLendableQuantityDelta30Pc
    def get_Group_ActiveLendableQuantityDelta7(self):
        return self.Group_ActiveLendableQuantityDelta7
    def set_Group_ActiveLendableQuantityDelta7(self, Group_ActiveLendableQuantityDelta7):
        self.Group_ActiveLendableQuantityDelta7 = Group_ActiveLendableQuantityDelta7
    def get_Group_ActiveLendableQuantityDelta7Pc(self):
        return self.Group_ActiveLendableQuantityDelta7Pc
    def set_Group_ActiveLendableQuantityDelta7Pc(self, Group_ActiveLendableQuantityDelta7Pc):
        self.Group_ActiveLendableQuantityDelta7Pc = Group_ActiveLendableQuantityDelta7Pc
    def get_Group_ActiveLendableValue(self):
        return self.Group_ActiveLendableValue
    def set_Group_ActiveLendableValue(self, Group_ActiveLendableValue):
        self.Group_ActiveLendableValue = Group_ActiveLendableValue
    def get_Group_ActiveLendableValueDelta1(self):
        return self.Group_ActiveLendableValueDelta1
    def set_Group_ActiveLendableValueDelta1(self, Group_ActiveLendableValueDelta1):
        self.Group_ActiveLendableValueDelta1 = Group_ActiveLendableValueDelta1
    def get_Group_ActiveLendableValueDelta1Pc(self):
        return self.Group_ActiveLendableValueDelta1Pc
    def set_Group_ActiveLendableValueDelta1Pc(self, Group_ActiveLendableValueDelta1Pc):
        self.Group_ActiveLendableValueDelta1Pc = Group_ActiveLendableValueDelta1Pc
    def get_Group_ActiveLendableValueDelta30(self):
        return self.Group_ActiveLendableValueDelta30
    def set_Group_ActiveLendableValueDelta30(self, Group_ActiveLendableValueDelta30):
        self.Group_ActiveLendableValueDelta30 = Group_ActiveLendableValueDelta30
    def get_Group_ActiveLendableValueDelta30Pc(self):
        return self.Group_ActiveLendableValueDelta30Pc
    def set_Group_ActiveLendableValueDelta30Pc(self, Group_ActiveLendableValueDelta30Pc):
        self.Group_ActiveLendableValueDelta30Pc = Group_ActiveLendableValueDelta30Pc
    def get_Group_ActiveLendableValueDelta7(self):
        return self.Group_ActiveLendableValueDelta7
    def set_Group_ActiveLendableValueDelta7(self, Group_ActiveLendableValueDelta7):
        self.Group_ActiveLendableValueDelta7 = Group_ActiveLendableValueDelta7
    def get_Group_ActiveLendableValueDelta7Pc(self):
        return self.Group_ActiveLendableValueDelta7Pc
    def set_Group_ActiveLendableValueDelta7Pc(self, Group_ActiveLendableValueDelta7Pc):
        self.Group_ActiveLendableValueDelta7Pc = Group_ActiveLendableValueDelta7Pc
    def get_Group_ActiveLendingAgents(self):
        return self.Group_ActiveLendingAgents
    def set_Group_ActiveLendingAgents(self, Group_ActiveLendingAgents):
        self.Group_ActiveLendingAgents = Group_ActiveLendingAgents
    def get_Group_ActiveUtilisation(self):
        return self.Group_ActiveUtilisation
    def set_Group_ActiveUtilisation(self, Group_ActiveUtilisation):
        self.Group_ActiveUtilisation = Group_ActiveUtilisation
    def get_Group_ActiveUtilisationByQuantity(self):
        return self.Group_ActiveUtilisationByQuantity
    def set_Group_ActiveUtilisationByQuantity(self, Group_ActiveUtilisationByQuantity):
        self.Group_ActiveUtilisationByQuantity = Group_ActiveUtilisationByQuantity
    def get_Group_ActiveUtilisationByQuantityDelta1(self):
        return self.Group_ActiveUtilisationByQuantityDelta1
    def set_Group_ActiveUtilisationByQuantityDelta1(self, Group_ActiveUtilisationByQuantityDelta1):
        self.Group_ActiveUtilisationByQuantityDelta1 = Group_ActiveUtilisationByQuantityDelta1
    def get_Group_ActiveUtilisationByQuantityDelta30(self):
        return self.Group_ActiveUtilisationByQuantityDelta30
    def set_Group_ActiveUtilisationByQuantityDelta30(self, Group_ActiveUtilisationByQuantityDelta30):
        self.Group_ActiveUtilisationByQuantityDelta30 = Group_ActiveUtilisationByQuantityDelta30
    def get_Group_ActiveUtilisationByQuantityDelta7(self):
        return self.Group_ActiveUtilisationByQuantityDelta7
    def set_Group_ActiveUtilisationByQuantityDelta7(self, Group_ActiveUtilisationByQuantityDelta7):
        self.Group_ActiveUtilisationByQuantityDelta7 = Group_ActiveUtilisationByQuantityDelta7
    def get_Group_ActiveUtilisationDelta1(self):
        return self.Group_ActiveUtilisationDelta1
    def set_Group_ActiveUtilisationDelta1(self, Group_ActiveUtilisationDelta1):
        self.Group_ActiveUtilisationDelta1 = Group_ActiveUtilisationDelta1
    def get_Group_ActiveUtilisationDelta30(self):
        return self.Group_ActiveUtilisationDelta30
    def set_Group_ActiveUtilisationDelta30(self, Group_ActiveUtilisationDelta30):
        self.Group_ActiveUtilisationDelta30 = Group_ActiveUtilisationDelta30
    def get_Group_ActiveUtilisationDelta7(self):
        return self.Group_ActiveUtilisationDelta7
    def set_Group_ActiveUtilisationDelta7(self, Group_ActiveUtilisationDelta7):
        self.Group_ActiveUtilisationDelta7 = Group_ActiveUtilisationDelta7
    def get_Group_AvailableQuantity(self):
        return self.Group_AvailableQuantity
    def set_Group_AvailableQuantity(self, Group_AvailableQuantity):
        self.Group_AvailableQuantity = Group_AvailableQuantity
    def get_Group_AvailableQuantityDelta1(self):
        return self.Group_AvailableQuantityDelta1
    def set_Group_AvailableQuantityDelta1(self, Group_AvailableQuantityDelta1):
        self.Group_AvailableQuantityDelta1 = Group_AvailableQuantityDelta1
    def get_Group_AvailableQuantityDelta1Pc(self):
        return self.Group_AvailableQuantityDelta1Pc
    def set_Group_AvailableQuantityDelta1Pc(self, Group_AvailableQuantityDelta1Pc):
        self.Group_AvailableQuantityDelta1Pc = Group_AvailableQuantityDelta1Pc
    def get_Group_AvailableQuantityDelta30(self):
        return self.Group_AvailableQuantityDelta30
    def set_Group_AvailableQuantityDelta30(self, Group_AvailableQuantityDelta30):
        self.Group_AvailableQuantityDelta30 = Group_AvailableQuantityDelta30
    def get_Group_AvailableQuantityDelta30Pc(self):
        return self.Group_AvailableQuantityDelta30Pc
    def set_Group_AvailableQuantityDelta30Pc(self, Group_AvailableQuantityDelta30Pc):
        self.Group_AvailableQuantityDelta30Pc = Group_AvailableQuantityDelta30Pc
    def get_Group_AvailableQuantityDelta7(self):
        return self.Group_AvailableQuantityDelta7
    def set_Group_AvailableQuantityDelta7(self, Group_AvailableQuantityDelta7):
        self.Group_AvailableQuantityDelta7 = Group_AvailableQuantityDelta7
    def get_Group_AvailableQuantityDelta7Pc(self):
        return self.Group_AvailableQuantityDelta7Pc
    def set_Group_AvailableQuantityDelta7Pc(self, Group_AvailableQuantityDelta7Pc):
        self.Group_AvailableQuantityDelta7Pc = Group_AvailableQuantityDelta7Pc
    def get_Group_AvailableQuantityStability(self):
        return self.Group_AvailableQuantityStability
    def set_Group_AvailableQuantityStability(self, Group_AvailableQuantityStability):
        self.Group_AvailableQuantityStability = Group_AvailableQuantityStability
    def get_Group_AvailableValue(self):
        return self.Group_AvailableValue
    def set_Group_AvailableValue(self, Group_AvailableValue):
        self.Group_AvailableValue = Group_AvailableValue
    def get_Group_AvailableValueDelta1(self):
        return self.Group_AvailableValueDelta1
    def set_Group_AvailableValueDelta1(self, Group_AvailableValueDelta1):
        self.Group_AvailableValueDelta1 = Group_AvailableValueDelta1
    def get_Group_AvailableValueDelta1Pc(self):
        return self.Group_AvailableValueDelta1Pc
    def set_Group_AvailableValueDelta1Pc(self, Group_AvailableValueDelta1Pc):
        self.Group_AvailableValueDelta1Pc = Group_AvailableValueDelta1Pc
    def get_Group_AvailableValueDelta30(self):
        return self.Group_AvailableValueDelta30
    def set_Group_AvailableValueDelta30(self, Group_AvailableValueDelta30):
        self.Group_AvailableValueDelta30 = Group_AvailableValueDelta30
    def get_Group_AvailableValueDelta30Pc(self):
        return self.Group_AvailableValueDelta30Pc
    def set_Group_AvailableValueDelta30Pc(self, Group_AvailableValueDelta30Pc):
        self.Group_AvailableValueDelta30Pc = Group_AvailableValueDelta30Pc
    def get_Group_AvailableValueDelta7(self):
        return self.Group_AvailableValueDelta7
    def set_Group_AvailableValueDelta7(self, Group_AvailableValueDelta7):
        self.Group_AvailableValueDelta7 = Group_AvailableValueDelta7
    def get_Group_AvailableValueDelta7Pc(self):
        return self.Group_AvailableValueDelta7Pc
    def set_Group_AvailableValueDelta7Pc(self, Group_AvailableValueDelta7Pc):
        self.Group_AvailableValueDelta7Pc = Group_AvailableValueDelta7Pc
    def get_Group_AvailableValueStability(self):
        return self.Group_AvailableValueStability
    def set_Group_AvailableValueStability(self, Group_AvailableValueStability):
        self.Group_AvailableValueStability = Group_AvailableValueStability
    def get_Group_BenchmarkFee(self):
        return self.Group_BenchmarkFee
    def set_Group_BenchmarkFee(self, Group_BenchmarkFee):
        self.Group_BenchmarkFee = Group_BenchmarkFee
    def get_Group_BenchmarkFeeDelta1(self):
        return self.Group_BenchmarkFeeDelta1
    def set_Group_BenchmarkFeeDelta1(self, Group_BenchmarkFeeDelta1):
        self.Group_BenchmarkFeeDelta1 = Group_BenchmarkFeeDelta1
    def get_Group_BenchmarkFeeDelta1Pc(self):
        return self.Group_BenchmarkFeeDelta1Pc
    def set_Group_BenchmarkFeeDelta1Pc(self, Group_BenchmarkFeeDelta1Pc):
        self.Group_BenchmarkFeeDelta1Pc = Group_BenchmarkFeeDelta1Pc
    def get_Group_BenchmarkFeeDelta30(self):
        return self.Group_BenchmarkFeeDelta30
    def set_Group_BenchmarkFeeDelta30(self, Group_BenchmarkFeeDelta30):
        self.Group_BenchmarkFeeDelta30 = Group_BenchmarkFeeDelta30
    def get_Group_BenchmarkFeeDelta30Pc(self):
        return self.Group_BenchmarkFeeDelta30Pc
    def set_Group_BenchmarkFeeDelta30Pc(self, Group_BenchmarkFeeDelta30Pc):
        self.Group_BenchmarkFeeDelta30Pc = Group_BenchmarkFeeDelta30Pc
    def get_Group_BenchmarkFeeDelta7(self):
        return self.Group_BenchmarkFeeDelta7
    def set_Group_BenchmarkFeeDelta7(self, Group_BenchmarkFeeDelta7):
        self.Group_BenchmarkFeeDelta7 = Group_BenchmarkFeeDelta7
    def get_Group_BenchmarkFeeDelta7Pc(self):
        return self.Group_BenchmarkFeeDelta7Pc
    def set_Group_BenchmarkFeeDelta7Pc(self, Group_BenchmarkFeeDelta7Pc):
        self.Group_BenchmarkFeeDelta7Pc = Group_BenchmarkFeeDelta7Pc
    def get_Group_BenchmarkRebate(self):
        return self.Group_BenchmarkRebate
    def set_Group_BenchmarkRebate(self, Group_BenchmarkRebate):
        self.Group_BenchmarkRebate = Group_BenchmarkRebate
    def get_Group_BenchmarkRebateDelta1(self):
        return self.Group_BenchmarkRebateDelta1
    def set_Group_BenchmarkRebateDelta1(self, Group_BenchmarkRebateDelta1):
        self.Group_BenchmarkRebateDelta1 = Group_BenchmarkRebateDelta1
    def get_Group_BenchmarkRebateDelta1Pc(self):
        return self.Group_BenchmarkRebateDelta1Pc
    def set_Group_BenchmarkRebateDelta1Pc(self, Group_BenchmarkRebateDelta1Pc):
        self.Group_BenchmarkRebateDelta1Pc = Group_BenchmarkRebateDelta1Pc
    def get_Group_BenchmarkRebateDelta30(self):
        return self.Group_BenchmarkRebateDelta30
    def set_Group_BenchmarkRebateDelta30(self, Group_BenchmarkRebateDelta30):
        self.Group_BenchmarkRebateDelta30 = Group_BenchmarkRebateDelta30
    def get_Group_BenchmarkRebateDelta30Pc(self):
        return self.Group_BenchmarkRebateDelta30Pc
    def set_Group_BenchmarkRebateDelta30Pc(self, Group_BenchmarkRebateDelta30Pc):
        self.Group_BenchmarkRebateDelta30Pc = Group_BenchmarkRebateDelta30Pc
    def get_Group_BenchmarkRebateDelta7(self):
        return self.Group_BenchmarkRebateDelta7
    def set_Group_BenchmarkRebateDelta7(self, Group_BenchmarkRebateDelta7):
        self.Group_BenchmarkRebateDelta7 = Group_BenchmarkRebateDelta7
    def get_Group_BenchmarkRebateDelta7Pc(self):
        return self.Group_BenchmarkRebateDelta7Pc
    def set_Group_BenchmarkRebateDelta7Pc(self, Group_BenchmarkRebateDelta7Pc):
        self.Group_BenchmarkRebateDelta7Pc = Group_BenchmarkRebateDelta7Pc
    def get_Group_BorrowerConcentration(self):
        return self.Group_BorrowerConcentration
    def set_Group_BorrowerConcentration(self, Group_BorrowerConcentration):
        self.Group_BorrowerConcentration = Group_BorrowerConcentration
    def get_Group_CompositeScore(self):
        return self.Group_CompositeScore
    def set_Group_CompositeScore(self, Group_CompositeScore):
        self.Group_CompositeScore = Group_CompositeScore
    def get_Group_DaysToCover(self):
        return self.Group_DaysToCover
    def set_Group_DaysToCover(self, Group_DaysToCover):
        self.Group_DaysToCover = Group_DaysToCover
    def get_Group_DaysToCoverDelta1(self):
        return self.Group_DaysToCoverDelta1
    def set_Group_DaysToCoverDelta1(self, Group_DaysToCoverDelta1):
        self.Group_DaysToCoverDelta1 = Group_DaysToCoverDelta1
    def get_Group_DaysToCoverDelta1Pc(self):
        return self.Group_DaysToCoverDelta1Pc
    def set_Group_DaysToCoverDelta1Pc(self, Group_DaysToCoverDelta1Pc):
        self.Group_DaysToCoverDelta1Pc = Group_DaysToCoverDelta1Pc
    def get_Group_DaysToCoverDelta30(self):
        return self.Group_DaysToCoverDelta30
    def set_Group_DaysToCoverDelta30(self, Group_DaysToCoverDelta30):
        self.Group_DaysToCoverDelta30 = Group_DaysToCoverDelta30
    def get_Group_DaysToCoverDelta30Pc(self):
        return self.Group_DaysToCoverDelta30Pc
    def set_Group_DaysToCoverDelta30Pc(self, Group_DaysToCoverDelta30Pc):
        self.Group_DaysToCoverDelta30Pc = Group_DaysToCoverDelta30Pc
    def get_Group_DaysToCoverDelta7(self):
        return self.Group_DaysToCoverDelta7
    def set_Group_DaysToCoverDelta7(self, Group_DaysToCoverDelta7):
        self.Group_DaysToCoverDelta7 = Group_DaysToCoverDelta7
    def get_Group_DaysToCoverDelta7Pc(self):
        return self.Group_DaysToCoverDelta7Pc
    def set_Group_DaysToCoverDelta7Pc(self, Group_DaysToCoverDelta7Pc):
        self.Group_DaysToCoverDelta7Pc = Group_DaysToCoverDelta7Pc
    def get_Group_IndicativeFee(self):
        return self.Group_IndicativeFee
    def set_Group_IndicativeFee(self, Group_IndicativeFee):
        self.Group_IndicativeFee = Group_IndicativeFee
    def get_Group_IndicativeFeeDelta1(self):
        return self.Group_IndicativeFeeDelta1
    def set_Group_IndicativeFeeDelta1(self, Group_IndicativeFeeDelta1):
        self.Group_IndicativeFeeDelta1 = Group_IndicativeFeeDelta1
    def get_Group_IndicativeFeeDelta30(self):
        return self.Group_IndicativeFeeDelta30
    def set_Group_IndicativeFeeDelta30(self, Group_IndicativeFeeDelta30):
        self.Group_IndicativeFeeDelta30 = Group_IndicativeFeeDelta30
    def get_Group_IndicativeFeeDelta7(self):
        return self.Group_IndicativeFeeDelta7
    def set_Group_IndicativeFeeDelta7(self, Group_IndicativeFeeDelta7):
        self.Group_IndicativeFeeDelta7 = Group_IndicativeFeeDelta7
    def get_Group_IndicativeRebate(self):
        return self.Group_IndicativeRebate
    def set_Group_IndicativeRebate(self, Group_IndicativeRebate):
        self.Group_IndicativeRebate = Group_IndicativeRebate
    def get_Group_IndicativeRebateDelta1(self):
        return self.Group_IndicativeRebateDelta1
    def set_Group_IndicativeRebateDelta1(self, Group_IndicativeRebateDelta1):
        self.Group_IndicativeRebateDelta1 = Group_IndicativeRebateDelta1
    def get_Group_IndicativeRebateDelta30(self):
        return self.Group_IndicativeRebateDelta30
    def set_Group_IndicativeRebateDelta30(self, Group_IndicativeRebateDelta30):
        self.Group_IndicativeRebateDelta30 = Group_IndicativeRebateDelta30
    def get_Group_IndicativeRebateDelta7(self):
        return self.Group_IndicativeRebateDelta7
    def set_Group_IndicativeRebateDelta7(self, Group_IndicativeRebateDelta7):
        self.Group_IndicativeRebateDelta7 = Group_IndicativeRebateDelta7
    def get_Group_InventoryConcentration(self):
        return self.Group_InventoryConcentration
    def set_Group_InventoryConcentration(self, Group_InventoryConcentration):
        self.Group_InventoryConcentration = Group_InventoryConcentration
    def get_Group_LendableQuantity(self):
        return self.Group_LendableQuantity
    def set_Group_LendableQuantity(self, Group_LendableQuantity):
        self.Group_LendableQuantity = Group_LendableQuantity
    def get_Group_LendableQuantityDelta1(self):
        return self.Group_LendableQuantityDelta1
    def set_Group_LendableQuantityDelta1(self, Group_LendableQuantityDelta1):
        self.Group_LendableQuantityDelta1 = Group_LendableQuantityDelta1
    def get_Group_LendableQuantityDelta1Pc(self):
        return self.Group_LendableQuantityDelta1Pc
    def set_Group_LendableQuantityDelta1Pc(self, Group_LendableQuantityDelta1Pc):
        self.Group_LendableQuantityDelta1Pc = Group_LendableQuantityDelta1Pc
    def get_Group_LendableQuantityDelta30(self):
        return self.Group_LendableQuantityDelta30
    def set_Group_LendableQuantityDelta30(self, Group_LendableQuantityDelta30):
        self.Group_LendableQuantityDelta30 = Group_LendableQuantityDelta30
    def get_Group_LendableQuantityDelta30Pc(self):
        return self.Group_LendableQuantityDelta30Pc
    def set_Group_LendableQuantityDelta30Pc(self, Group_LendableQuantityDelta30Pc):
        self.Group_LendableQuantityDelta30Pc = Group_LendableQuantityDelta30Pc
    def get_Group_LendableQuantityDelta7(self):
        return self.Group_LendableQuantityDelta7
    def set_Group_LendableQuantityDelta7(self, Group_LendableQuantityDelta7):
        self.Group_LendableQuantityDelta7 = Group_LendableQuantityDelta7
    def get_Group_LendableQuantityDelta7Pc(self):
        return self.Group_LendableQuantityDelta7Pc
    def set_Group_LendableQuantityDelta7Pc(self, Group_LendableQuantityDelta7Pc):
        self.Group_LendableQuantityDelta7Pc = Group_LendableQuantityDelta7Pc
    def get_Group_LendableQuantityStability(self):
        return self.Group_LendableQuantityStability
    def set_Group_LendableQuantityStability(self, Group_LendableQuantityStability):
        self.Group_LendableQuantityStability = Group_LendableQuantityStability
    def get_Group_LendableValue(self):
        return self.Group_LendableValue
    def set_Group_LendableValue(self, Group_LendableValue):
        self.Group_LendableValue = Group_LendableValue
    def get_Group_LendableValueDelta1(self):
        return self.Group_LendableValueDelta1
    def set_Group_LendableValueDelta1(self, Group_LendableValueDelta1):
        self.Group_LendableValueDelta1 = Group_LendableValueDelta1
    def get_Group_LendableValueDelta1Pc(self):
        return self.Group_LendableValueDelta1Pc
    def set_Group_LendableValueDelta1Pc(self, Group_LendableValueDelta1Pc):
        self.Group_LendableValueDelta1Pc = Group_LendableValueDelta1Pc
    def get_Group_LendableValueDelta30(self):
        return self.Group_LendableValueDelta30
    def set_Group_LendableValueDelta30(self, Group_LendableValueDelta30):
        self.Group_LendableValueDelta30 = Group_LendableValueDelta30
    def get_Group_LendableValueDelta30Pc(self):
        return self.Group_LendableValueDelta30Pc
    def set_Group_LendableValueDelta30Pc(self, Group_LendableValueDelta30Pc):
        self.Group_LendableValueDelta30Pc = Group_LendableValueDelta30Pc
    def get_Group_LendableValueDelta7(self):
        return self.Group_LendableValueDelta7
    def set_Group_LendableValueDelta7(self, Group_LendableValueDelta7):
        self.Group_LendableValueDelta7 = Group_LendableValueDelta7
    def get_Group_LendableValueDelta7Pc(self):
        return self.Group_LendableValueDelta7Pc
    def set_Group_LendableValueDelta7Pc(self, Group_LendableValueDelta7Pc):
        self.Group_LendableValueDelta7Pc = Group_LendableValueDelta7Pc
    def get_Group_LendableValueStability(self):
        return self.Group_LendableValueStability
    def set_Group_LendableValueStability(self, Group_LendableValueStability):
        self.Group_LendableValueStability = Group_LendableValueStability
    def get_Group_LenderConcentration(self):
        return self.Group_LenderConcentration
    def set_Group_LenderConcentration(self, Group_LenderConcentration):
        self.Group_LenderConcentration = Group_LenderConcentration
    def get_Group_LenderQuantityOnLoanStability(self):
        return self.Group_LenderQuantityOnLoanStability
    def set_Group_LenderQuantityOnLoanStability(self, Group_LenderQuantityOnLoanStability):
        self.Group_LenderQuantityOnLoanStability = Group_LenderQuantityOnLoanStability
    def get_Group_LenderValueOnLoan(self):
        return self.Group_LenderValueOnLoan
    def set_Group_LenderValueOnLoan(self, Group_LenderValueOnLoan):
        self.Group_LenderValueOnLoan = Group_LenderValueOnLoan
    def get_Group_LenderValueOnLoanStability(self):
        return self.Group_LenderValueOnLoanStability
    def set_Group_LenderValueOnLoanStability(self, Group_LenderValueOnLoanStability):
        self.Group_LenderValueOnLoanStability = Group_LenderValueOnLoanStability
    def get_Group_MarketCap(self):
        return self.Group_MarketCap
    def set_Group_MarketCap(self, Group_MarketCap):
        self.Group_MarketCap = Group_MarketCap
    def get_Group_NewPositions(self):
        return self.Group_NewPositions
    def set_Group_NewPositions(self, Group_NewPositions):
        self.Group_NewPositions = Group_NewPositions
    def get_Group_OutOfMoneyPct(self):
        return self.Group_OutOfMoneyPct
    def set_Group_OutOfMoneyPct(self, Group_OutOfMoneyPct):
        self.Group_OutOfMoneyPct = Group_OutOfMoneyPct
    def get_Group_PcFreeFloatValueOnLoan(self):
        return self.Group_PcFreeFloatValueOnLoan
    def set_Group_PcFreeFloatValueOnLoan(self, Group_PcFreeFloatValueOnLoan):
        self.Group_PcFreeFloatValueOnLoan = Group_PcFreeFloatValueOnLoan
    def get_Group_PcIssueValueOnLoan(self):
        return self.Group_PcIssueValueOnLoan
    def set_Group_PcIssueValueOnLoan(self, Group_PcIssueValueOnLoan):
        self.Group_PcIssueValueOnLoan = Group_PcIssueValueOnLoan
    def get_Group_PcIssueValueOnLoanDelta1(self):
        return self.Group_PcIssueValueOnLoanDelta1
    def set_Group_PcIssueValueOnLoanDelta1(self, Group_PcIssueValueOnLoanDelta1):
        self.Group_PcIssueValueOnLoanDelta1 = Group_PcIssueValueOnLoanDelta1
    def get_Group_PcIssueValueOnLoanDelta30(self):
        return self.Group_PcIssueValueOnLoanDelta30
    def set_Group_PcIssueValueOnLoanDelta30(self, Group_PcIssueValueOnLoanDelta30):
        self.Group_PcIssueValueOnLoanDelta30 = Group_PcIssueValueOnLoanDelta30
    def get_Group_PcIssueValueOnLoanDelta7(self):
        return self.Group_PcIssueValueOnLoanDelta7
    def set_Group_PcIssueValueOnLoanDelta7(self, Group_PcIssueValueOnLoanDelta7):
        self.Group_PcIssueValueOnLoanDelta7 = Group_PcIssueValueOnLoanDelta7
    def get_Group_PcSharesOutstandingOnLoan(self):
        return self.Group_PcSharesOutstandingOnLoan
    def set_Group_PcSharesOutstandingOnLoan(self, Group_PcSharesOutstandingOnLoan):
        self.Group_PcSharesOutstandingOnLoan = Group_PcSharesOutstandingOnLoan
    def get_Group_PcSharesOutstandingOnLoanDelta1(self):
        return self.Group_PcSharesOutstandingOnLoanDelta1
    def set_Group_PcSharesOutstandingOnLoanDelta1(self, Group_PcSharesOutstandingOnLoanDelta1):
        self.Group_PcSharesOutstandingOnLoanDelta1 = Group_PcSharesOutstandingOnLoanDelta1
    def get_Group_PcSharesOutstandingOnLoanDelta30(self):
        return self.Group_PcSharesOutstandingOnLoanDelta30
    def set_Group_PcSharesOutstandingOnLoanDelta30(self, Group_PcSharesOutstandingOnLoanDelta30):
        self.Group_PcSharesOutstandingOnLoanDelta30 = Group_PcSharesOutstandingOnLoanDelta30
    def get_Group_PcSharesOutstandingOnLoanDelta7(self):
        return self.Group_PcSharesOutstandingOnLoanDelta7
    def set_Group_PcSharesOutstandingOnLoanDelta7(self, Group_PcSharesOutstandingOnLoanDelta7):
        self.Group_PcSharesOutstandingOnLoanDelta7 = Group_PcSharesOutstandingOnLoanDelta7
    def get_Group_PriceDelta1(self):
        return self.Group_PriceDelta1
    def set_Group_PriceDelta1(self, Group_PriceDelta1):
        self.Group_PriceDelta1 = Group_PriceDelta1
    def get_Group_PriceDelta30(self):
        return self.Group_PriceDelta30
    def set_Group_PriceDelta30(self, Group_PriceDelta30):
        self.Group_PriceDelta30 = Group_PriceDelta30
    def get_Group_PriceDelta7(self):
        return self.Group_PriceDelta7
    def set_Group_PriceDelta7(self, Group_PriceDelta7):
        self.Group_PriceDelta7 = Group_PriceDelta7
    def get_Group_PrimeBrokers(self):
        return self.Group_PrimeBrokers
    def set_Group_PrimeBrokers(self, Group_PrimeBrokers):
        self.Group_PrimeBrokers = Group_PrimeBrokers
    def get_Group_ProfitandLossImpact(self):
        return self.Group_ProfitandLossImpact
    def set_Group_ProfitandLossImpact(self, Group_ProfitandLossImpact):
        self.Group_ProfitandLossImpact = Group_ProfitandLossImpact
    def get_Group_QuantityOnLoan(self):
        return self.Group_QuantityOnLoan
    def set_Group_QuantityOnLoan(self, Group_QuantityOnLoan):
        self.Group_QuantityOnLoan = Group_QuantityOnLoan
    def get_Group_QuantityOnLoanDelta1(self):
        return self.Group_QuantityOnLoanDelta1
    def set_Group_QuantityOnLoanDelta1(self, Group_QuantityOnLoanDelta1):
        self.Group_QuantityOnLoanDelta1 = Group_QuantityOnLoanDelta1
    def get_Group_QuantityOnLoanDelta1Pc(self):
        return self.Group_QuantityOnLoanDelta1Pc
    def set_Group_QuantityOnLoanDelta1Pc(self, Group_QuantityOnLoanDelta1Pc):
        self.Group_QuantityOnLoanDelta1Pc = Group_QuantityOnLoanDelta1Pc
    def get_Group_QuantityOnLoanDelta30(self):
        return self.Group_QuantityOnLoanDelta30
    def set_Group_QuantityOnLoanDelta30(self, Group_QuantityOnLoanDelta30):
        self.Group_QuantityOnLoanDelta30 = Group_QuantityOnLoanDelta30
    def get_Group_QuantityOnLoanDelta30Pc(self):
        return self.Group_QuantityOnLoanDelta30Pc
    def set_Group_QuantityOnLoanDelta30Pc(self, Group_QuantityOnLoanDelta30Pc):
        self.Group_QuantityOnLoanDelta30Pc = Group_QuantityOnLoanDelta30Pc
    def get_Group_QuantityOnLoanDelta7(self):
        return self.Group_QuantityOnLoanDelta7
    def set_Group_QuantityOnLoanDelta7(self, Group_QuantityOnLoanDelta7):
        self.Group_QuantityOnLoanDelta7 = Group_QuantityOnLoanDelta7
    def get_Group_QuantityOnLoanDelta7Pc(self):
        return self.Group_QuantityOnLoanDelta7Pc
    def set_Group_QuantityOnLoanDelta7Pc(self, Group_QuantityOnLoanDelta7Pc):
        self.Group_QuantityOnLoanDelta7Pc = Group_QuantityOnLoanDelta7Pc
    def get_Group_ReratePreviousVWAF(self):
        return self.Group_ReratePreviousVWAF
    def set_Group_ReratePreviousVWAF(self, Group_ReratePreviousVWAF):
        self.Group_ReratePreviousVWAF = Group_ReratePreviousVWAF
    def get_Group_ReratePreviousVWAR(self):
        return self.Group_ReratePreviousVWAR
    def set_Group_ReratePreviousVWAR(self, Group_ReratePreviousVWAR):
        self.Group_ReratePreviousVWAR = Group_ReratePreviousVWAR
    def get_Group_RerateTransactionCount(self):
        return self.Group_RerateTransactionCount
    def set_Group_RerateTransactionCount(self, Group_RerateTransactionCount):
        self.Group_RerateTransactionCount = Group_RerateTransactionCount
    def get_Group_RerateTransactionCountDown(self):
        return self.Group_RerateTransactionCountDown
    def set_Group_RerateTransactionCountDown(self, Group_RerateTransactionCountDown):
        self.Group_RerateTransactionCountDown = Group_RerateTransactionCountDown
    def get_Group_RerateTransactionCountUp(self):
        return self.Group_RerateTransactionCountUp
    def set_Group_RerateTransactionCountUp(self, Group_RerateTransactionCountUp):
        self.Group_RerateTransactionCountUp = Group_RerateTransactionCountUp
    def get_Group_RerateValueOnLoan(self):
        return self.Group_RerateValueOnLoan
    def set_Group_RerateValueOnLoan(self, Group_RerateValueOnLoan):
        self.Group_RerateValueOnLoan = Group_RerateValueOnLoan
    def get_Group_RerateValueOnLoanDown(self):
        return self.Group_RerateValueOnLoanDown
    def set_Group_RerateValueOnLoanDown(self, Group_RerateValueOnLoanDown):
        self.Group_RerateValueOnLoanDown = Group_RerateValueOnLoanDown
    def get_Group_RerateValueOnLoanUp(self):
        return self.Group_RerateValueOnLoanUp
    def set_Group_RerateValueOnLoanUp(self, Group_RerateValueOnLoanUp):
        self.Group_RerateValueOnLoanUp = Group_RerateValueOnLoanUp
    def get_Group_RerateVWAF(self):
        return self.Group_RerateVWAF
    def set_Group_RerateVWAF(self, Group_RerateVWAF):
        self.Group_RerateVWAF = Group_RerateVWAF
    def get_Group_RerateVWAFDelta1(self):
        return self.Group_RerateVWAFDelta1
    def set_Group_RerateVWAFDelta1(self, Group_RerateVWAFDelta1):
        self.Group_RerateVWAFDelta1 = Group_RerateVWAFDelta1
    def get_Group_RerateVWAFDelta1Pc(self):
        return self.Group_RerateVWAFDelta1Pc
    def set_Group_RerateVWAFDelta1Pc(self, Group_RerateVWAFDelta1Pc):
        self.Group_RerateVWAFDelta1Pc = Group_RerateVWAFDelta1Pc
    def get_Group_RerateVWAR(self):
        return self.Group_RerateVWAR
    def set_Group_RerateVWAR(self, Group_RerateVWAR):
        self.Group_RerateVWAR = Group_RerateVWAR
    def get_Group_RerateVWARDelta1(self):
        return self.Group_RerateVWARDelta1
    def set_Group_RerateVWARDelta1(self, Group_RerateVWARDelta1):
        self.Group_RerateVWARDelta1 = Group_RerateVWARDelta1
    def get_Group_RerateVWARDelta1Pc(self):
        return self.Group_RerateVWARDelta1Pc
    def set_Group_RerateVWARDelta1Pc(self, Group_RerateVWARDelta1Pc):
        self.Group_RerateVWARDelta1Pc = Group_RerateVWARDelta1Pc
    def get_Group_SAF(self):
        return self.Group_SAF
    def set_Group_SAF(self, Group_SAF):
        self.Group_SAF = Group_SAF
    def get_Group_SAFDelta1(self):
        return self.Group_SAFDelta1
    def set_Group_SAFDelta1(self, Group_SAFDelta1):
        self.Group_SAFDelta1 = Group_SAFDelta1
    def get_Group_SAFDelta1Pc(self):
        return self.Group_SAFDelta1Pc
    def set_Group_SAFDelta1Pc(self, Group_SAFDelta1Pc):
        self.Group_SAFDelta1Pc = Group_SAFDelta1Pc
    def get_Group_SAFDelta30(self):
        return self.Group_SAFDelta30
    def set_Group_SAFDelta30(self, Group_SAFDelta30):
        self.Group_SAFDelta30 = Group_SAFDelta30
    def get_Group_SAFDelta30Pc(self):
        return self.Group_SAFDelta30Pc
    def set_Group_SAFDelta30Pc(self, Group_SAFDelta30Pc):
        self.Group_SAFDelta30Pc = Group_SAFDelta30Pc
    def get_Group_SAFDelta7(self):
        return self.Group_SAFDelta7
    def set_Group_SAFDelta7(self, Group_SAFDelta7):
        self.Group_SAFDelta7 = Group_SAFDelta7
    def get_Group_SAFDelta7Pc(self):
        return self.Group_SAFDelta7Pc
    def set_Group_SAFDelta7Pc(self, Group_SAFDelta7Pc):
        self.Group_SAFDelta7Pc = Group_SAFDelta7Pc
    def get_Group_SAR(self):
        return self.Group_SAR
    def set_Group_SAR(self, Group_SAR):
        self.Group_SAR = Group_SAR
    def get_Group_SARDelta1(self):
        return self.Group_SARDelta1
    def set_Group_SARDelta1(self, Group_SARDelta1):
        self.Group_SARDelta1 = Group_SARDelta1
    def get_Group_SARDelta1Pc(self):
        return self.Group_SARDelta1Pc
    def set_Group_SARDelta1Pc(self, Group_SARDelta1Pc):
        self.Group_SARDelta1Pc = Group_SARDelta1Pc
    def get_Group_SARDelta30(self):
        return self.Group_SARDelta30
    def set_Group_SARDelta30(self, Group_SARDelta30):
        self.Group_SARDelta30 = Group_SARDelta30
    def get_Group_SARDelta30Pc(self):
        return self.Group_SARDelta30Pc
    def set_Group_SARDelta30Pc(self, Group_SARDelta30Pc):
        self.Group_SARDelta30Pc = Group_SARDelta30Pc
    def get_Group_SARDelta7(self):
        return self.Group_SARDelta7
    def set_Group_SARDelta7(self, Group_SARDelta7):
        self.Group_SARDelta7 = Group_SARDelta7
    def get_Group_SARDelta7Pc(self):
        return self.Group_SARDelta7Pc
    def set_Group_SARDelta7Pc(self, Group_SARDelta7Pc):
        self.Group_SARDelta7Pc = Group_SARDelta7Pc
    def get_Group_SATenure(self):
        return self.Group_SATenure
    def set_Group_SATenure(self, Group_SATenure):
        self.Group_SATenure = Group_SATenure
    def get_Group_SharesOutstanding(self):
        return self.Group_SharesOutstanding
    def set_Group_SharesOutstanding(self, Group_SharesOutstanding):
        self.Group_SharesOutstanding = Group_SharesOutstanding
    def get_Group_ShortLoanQuantity(self):
        return self.Group_ShortLoanQuantity
    def set_Group_ShortLoanQuantity(self, Group_ShortLoanQuantity):
        self.Group_ShortLoanQuantity = Group_ShortLoanQuantity
    def get_Group_ShortLoanValue(self):
        return self.Group_ShortLoanValue
    def set_Group_ShortLoanValue(self, Group_ShortLoanValue):
        self.Group_ShortLoanValue = Group_ShortLoanValue
    def get_Group_TransactionDuration(self):
        return self.Group_TransactionDuration
    def set_Group_TransactionDuration(self, Group_TransactionDuration):
        self.Group_TransactionDuration = Group_TransactionDuration
    def get_Group_Utilisation(self):
        return self.Group_Utilisation
    def set_Group_Utilisation(self, Group_Utilisation):
        self.Group_Utilisation = Group_Utilisation
    def get_Group_UtilisationByQuantity(self):
        return self.Group_UtilisationByQuantity
    def set_Group_UtilisationByQuantity(self, Group_UtilisationByQuantity):
        self.Group_UtilisationByQuantity = Group_UtilisationByQuantity
    def get_Group_UtilisationByQuantityDelta1(self):
        return self.Group_UtilisationByQuantityDelta1
    def set_Group_UtilisationByQuantityDelta1(self, Group_UtilisationByQuantityDelta1):
        self.Group_UtilisationByQuantityDelta1 = Group_UtilisationByQuantityDelta1
    def get_Group_UtilisationByQuantityDelta30(self):
        return self.Group_UtilisationByQuantityDelta30
    def set_Group_UtilisationByQuantityDelta30(self, Group_UtilisationByQuantityDelta30):
        self.Group_UtilisationByQuantityDelta30 = Group_UtilisationByQuantityDelta30
    def get_Group_UtilisationByQuantityDelta7(self):
        return self.Group_UtilisationByQuantityDelta7
    def set_Group_UtilisationByQuantityDelta7(self, Group_UtilisationByQuantityDelta7):
        self.Group_UtilisationByQuantityDelta7 = Group_UtilisationByQuantityDelta7
    def get_Group_UtilisationDelta1(self):
        return self.Group_UtilisationDelta1
    def set_Group_UtilisationDelta1(self, Group_UtilisationDelta1):
        self.Group_UtilisationDelta1 = Group_UtilisationDelta1
    def get_Group_UtilisationDelta30(self):
        return self.Group_UtilisationDelta30
    def set_Group_UtilisationDelta30(self, Group_UtilisationDelta30):
        self.Group_UtilisationDelta30 = Group_UtilisationDelta30
    def get_Group_UtilisationDelta7(self):
        return self.Group_UtilisationDelta7
    def set_Group_UtilisationDelta7(self, Group_UtilisationDelta7):
        self.Group_UtilisationDelta7 = Group_UtilisationDelta7
    def get_Group_ValueOnLoan(self):
        return self.Group_ValueOnLoan
    def set_Group_ValueOnLoan(self, Group_ValueOnLoan):
        self.Group_ValueOnLoan = Group_ValueOnLoan
    def get_Group_ValueOnLoanDelta1(self):
        return self.Group_ValueOnLoanDelta1
    def set_Group_ValueOnLoanDelta1(self, Group_ValueOnLoanDelta1):
        self.Group_ValueOnLoanDelta1 = Group_ValueOnLoanDelta1
    def get_Group_ValueOnLoanDelta1Pc(self):
        return self.Group_ValueOnLoanDelta1Pc
    def set_Group_ValueOnLoanDelta1Pc(self, Group_ValueOnLoanDelta1Pc):
        self.Group_ValueOnLoanDelta1Pc = Group_ValueOnLoanDelta1Pc
    def get_Group_ValueOnLoanDelta30(self):
        return self.Group_ValueOnLoanDelta30
    def set_Group_ValueOnLoanDelta30(self, Group_ValueOnLoanDelta30):
        self.Group_ValueOnLoanDelta30 = Group_ValueOnLoanDelta30
    def get_Group_ValueOnLoanDelta30Pc(self):
        return self.Group_ValueOnLoanDelta30Pc
    def set_Group_ValueOnLoanDelta30Pc(self, Group_ValueOnLoanDelta30Pc):
        self.Group_ValueOnLoanDelta30Pc = Group_ValueOnLoanDelta30Pc
    def get_Group_ValueOnLoanDelta7(self):
        return self.Group_ValueOnLoanDelta7
    def set_Group_ValueOnLoanDelta7(self, Group_ValueOnLoanDelta7):
        self.Group_ValueOnLoanDelta7 = Group_ValueOnLoanDelta7
    def get_Group_ValueOnLoanDelta7Pc(self):
        return self.Group_ValueOnLoanDelta7Pc
    def set_Group_ValueOnLoanDelta7Pc(self, Group_ValueOnLoanDelta7Pc):
        self.Group_ValueOnLoanDelta7Pc = Group_ValueOnLoanDelta7Pc
    def get_Group_VWAF(self):
        return self.Group_VWAF
    def set_Group_VWAF(self, Group_VWAF):
        self.Group_VWAF = Group_VWAF
    def get_Group_VWAF1(self):
        return self.Group_VWAF1
    def set_Group_VWAF1(self, Group_VWAF1):
        self.Group_VWAF1 = Group_VWAF1
    def get_Group_VWAF30(self):
        return self.Group_VWAF30
    def set_Group_VWAF30(self, Group_VWAF30):
        self.Group_VWAF30 = Group_VWAF30
    def get_Group_VWAF7(self):
        return self.Group_VWAF7
    def set_Group_VWAF7(self, Group_VWAF7):
        self.Group_VWAF7 = Group_VWAF7
    def get_Group_VWAFDelta(self):
        return self.Group_VWAFDelta
    def set_Group_VWAFDelta(self, Group_VWAFDelta):
        self.Group_VWAFDelta = Group_VWAFDelta
    def get_Group_VWAFDelta1(self):
        return self.Group_VWAFDelta1
    def set_Group_VWAFDelta1(self, Group_VWAFDelta1):
        self.Group_VWAFDelta1 = Group_VWAFDelta1
    def get_Group_VWAFDelta1Pc(self):
        return self.Group_VWAFDelta1Pc
    def set_Group_VWAFDelta1Pc(self, Group_VWAFDelta1Pc):
        self.Group_VWAFDelta1Pc = Group_VWAFDelta1Pc
    def get_Group_VWAFDelta30(self):
        return self.Group_VWAFDelta30
    def set_Group_VWAFDelta30(self, Group_VWAFDelta30):
        self.Group_VWAFDelta30 = Group_VWAFDelta30
    def get_Group_VWAFDelta30Pc(self):
        return self.Group_VWAFDelta30Pc
    def set_Group_VWAFDelta30Pc(self, Group_VWAFDelta30Pc):
        self.Group_VWAFDelta30Pc = Group_VWAFDelta30Pc
    def get_Group_VWAFDelta7(self):
        return self.Group_VWAFDelta7
    def set_Group_VWAFDelta7(self, Group_VWAFDelta7):
        self.Group_VWAFDelta7 = Group_VWAFDelta7
    def get_Group_VWAFDelta7Pc(self):
        return self.Group_VWAFDelta7Pc
    def set_Group_VWAFDelta7Pc(self, Group_VWAFDelta7Pc):
        self.Group_VWAFDelta7Pc = Group_VWAFDelta7Pc
    def get_Group_VWAR(self):
        return self.Group_VWAR
    def set_Group_VWAR(self, Group_VWAR):
        self.Group_VWAR = Group_VWAR
    def get_Group_VWAR1(self):
        return self.Group_VWAR1
    def set_Group_VWAR1(self, Group_VWAR1):
        self.Group_VWAR1 = Group_VWAR1
    def get_Group_VWAR30(self):
        return self.Group_VWAR30
    def set_Group_VWAR30(self, Group_VWAR30):
        self.Group_VWAR30 = Group_VWAR30
    def get_Group_VWAR7(self):
        return self.Group_VWAR7
    def set_Group_VWAR7(self, Group_VWAR7):
        self.Group_VWAR7 = Group_VWAR7
    def get_Group_VWARDelta1(self):
        return self.Group_VWARDelta1
    def set_Group_VWARDelta1(self, Group_VWARDelta1):
        self.Group_VWARDelta1 = Group_VWARDelta1
    def get_Group_VWARDelta1Pc(self):
        return self.Group_VWARDelta1Pc
    def set_Group_VWARDelta1Pc(self, Group_VWARDelta1Pc):
        self.Group_VWARDelta1Pc = Group_VWARDelta1Pc
    def get_Group_VWARDelta30(self):
        return self.Group_VWARDelta30
    def set_Group_VWARDelta30(self, Group_VWARDelta30):
        self.Group_VWARDelta30 = Group_VWARDelta30
    def get_Group_VWARDelta30Pc(self):
        return self.Group_VWARDelta30Pc
    def set_Group_VWARDelta30Pc(self, Group_VWARDelta30Pc):
        self.Group_VWARDelta30Pc = Group_VWARDelta30Pc
    def get_Group_VWARDelta7(self):
        return self.Group_VWARDelta7
    def set_Group_VWARDelta7(self, Group_VWARDelta7):
        self.Group_VWARDelta7 = Group_VWARDelta7
    def get_Group_VWARDelta7Pc(self):
        return self.Group_VWARDelta7Pc
    def set_Group_VWARDelta7Pc(self, Group_VWARDelta7Pc):
        self.Group_VWARDelta7Pc = Group_VWARDelta7Pc
    def get_LatestDataDate(self):
        return self.LatestDataDate
    def set_LatestDataDate(self, LatestDataDate):
        self.LatestDataDate = LatestDataDate
    def get_Transaction_ComparativeDailyCostIndicative(self):
        return self.Transaction_ComparativeDailyCostIndicative
    def set_Transaction_ComparativeDailyCostIndicative(self, Transaction_ComparativeDailyCostIndicative):
        self.Transaction_ComparativeDailyCostIndicative = Transaction_ComparativeDailyCostIndicative
    def get_Transaction_ComparativeDailyCostMySA(self):
        return self.Transaction_ComparativeDailyCostMySA
    def set_Transaction_ComparativeDailyCostMySA(self, Transaction_ComparativeDailyCostMySA):
        self.Transaction_ComparativeDailyCostMySA = Transaction_ComparativeDailyCostMySA
    def get_Transaction_ComparativeDailyCostSA(self):
        return self.Transaction_ComparativeDailyCostSA
    def set_Transaction_ComparativeDailyCostSA(self, Transaction_ComparativeDailyCostSA):
        self.Transaction_ComparativeDailyCostSA = Transaction_ComparativeDailyCostSA
    def get_Transaction_DailyCost(self):
        return self.Transaction_DailyCost
    def set_Transaction_DailyCost(self, Transaction_DailyCost):
        self.Transaction_DailyCost = Transaction_DailyCost
    def get_Transaction_DailyCostDifferenceIndicative(self):
        return self.Transaction_DailyCostDifferenceIndicative
    def set_Transaction_DailyCostDifferenceIndicative(self, Transaction_DailyCostDifferenceIndicative):
        self.Transaction_DailyCostDifferenceIndicative = Transaction_DailyCostDifferenceIndicative
    def get_Transaction_DailyCostDifferenceMySA(self):
        return self.Transaction_DailyCostDifferenceMySA
    def set_Transaction_DailyCostDifferenceMySA(self, Transaction_DailyCostDifferenceMySA):
        self.Transaction_DailyCostDifferenceMySA = Transaction_DailyCostDifferenceMySA
    def get_Transaction_DailyCostDifferenceSA(self):
        return self.Transaction_DailyCostDifferenceSA
    def set_Transaction_DailyCostDifferenceSA(self, Transaction_DailyCostDifferenceSA):
        self.Transaction_DailyCostDifferenceSA = Transaction_DailyCostDifferenceSA
    def get_Transaction_DividendRequirement(self):
        return self.Transaction_DividendRequirement
    def set_Transaction_DividendRequirement(self, Transaction_DividendRequirement):
        self.Transaction_DividendRequirement = Transaction_DividendRequirement
    def get_Transaction_Duration(self):
        return self.Transaction_Duration
    def set_Transaction_Duration(self, Transaction_Duration):
        self.Transaction_Duration = Transaction_Duration
    def get_Transaction_Fee(self):
        return self.Transaction_Fee
    def set_Transaction_Fee(self, Transaction_Fee):
        self.Transaction_Fee = Transaction_Fee
    def get_Transaction_Quantity(self):
        return self.Transaction_Quantity
    def set_Transaction_Quantity(self, Transaction_Quantity):
        self.Transaction_Quantity = Transaction_Quantity
    def get_Transaction_RateVarianceIndicative(self):
        return self.Transaction_RateVarianceIndicative
    def set_Transaction_RateVarianceIndicative(self, Transaction_RateVarianceIndicative):
        self.Transaction_RateVarianceIndicative = Transaction_RateVarianceIndicative
    def get_Transaction_RateVarianceMySA(self):
        return self.Transaction_RateVarianceMySA
    def set_Transaction_RateVarianceMySA(self, Transaction_RateVarianceMySA):
        self.Transaction_RateVarianceMySA = Transaction_RateVarianceMySA
    def get_Transaction_RateVarianceSA(self):
        return self.Transaction_RateVarianceSA
    def set_Transaction_RateVarianceSA(self, Transaction_RateVarianceSA):
        self.Transaction_RateVarianceSA = Transaction_RateVarianceSA
    def get_Transaction_Rebate(self):
        return self.Transaction_Rebate
    def set_Transaction_Rebate(self, Transaction_Rebate):
        self.Transaction_Rebate = Transaction_Rebate
    def get_Transaction_StartDate(self):
        return self.Transaction_StartDate
    def set_Transaction_StartDate(self, Transaction_StartDate):
        self.Transaction_StartDate = Transaction_StartDate
    def get_Transaction_TransactionFee(self):
        return self.Transaction_TransactionFee
    def set_Transaction_TransactionFee(self, Transaction_TransactionFee):
        self.Transaction_TransactionFee = Transaction_TransactionFee
    def get_Transaction_Value(self):
        return self.Transaction_Value
    def set_Transaction_Value(self, Transaction_Value):
        self.Transaction_Value = Transaction_Value
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.Client_AvailableQuantity is not None or
            self.Client_AvailableQuantityDelta1 is not None or
            self.Client_AvailableQuantityDelta1Pc is not None or
            self.Client_AvailableQuantityDelta30 is not None or
            self.Client_AvailableQuantityDelta30Pc is not None or
            self.Client_AvailableQuantityDelta7 is not None or
            self.Client_AvailableQuantityDelta7Pc is not None or
            self.Client_AvailableValue is not None or
            self.Client_AvailableValueDelta1 is not None or
            self.Client_AvailableValueDelta1Pc is not None or
            self.Client_AvailableValueDelta30 is not None or
            self.Client_AvailableValueDelta30Pc is not None or
            self.Client_AvailableValueDelta7 is not None or
            self.Client_AvailableValueDelta7Pc is not None or
            self.Client_DailyCost is not None or
            self.Client_DailyCostCombined is not None or
            self.Client_DailyRevenue is not None or
            self.Client_LendableQuantity is not None or
            self.Client_LendableQuantityDelta1 is not None or
            self.Client_LendableQuantityDelta1Pc is not None or
            self.Client_LendableQuantityDelta30 is not None or
            self.Client_LendableQuantityDelta30Pc is not None or
            self.Client_LendableQuantityDelta7 is not None or
            self.Client_LendableQuantityDelta7Pc is not None or
            self.Client_LendableValue is not None or
            self.Client_LendableValueDelta1 is not None or
            self.Client_LendableValueDelta1Pc is not None or
            self.Client_LendableValueDelta30 is not None or
            self.Client_LendableValueDelta30Pc is not None or
            self.Client_LendableValueDelta7 is not None or
            self.Client_LendableValueDelta7Pc is not None or
            self.Client_MarketShare is not None or
            self.Client_MarketShareDelta1 is not None or
            self.Client_MarketShareDelta30 is not None or
            self.Client_MarketShareDelta7 is not None or
            self.Client_MarketShareRank is not None or
            self.Client_OpportunityGainLoss is not None or
            self.Client_QuantityOnLoan is not None or
            self.Client_QuantityOnLoanDelta1 is not None or
            self.Client_QuantityOnLoanDelta1Pc is not None or
            self.Client_QuantityOnLoanDelta30 is not None or
            self.Client_QuantityOnLoanDelta30Pc is not None or
            self.Client_QuantityOnLoanDelta7 is not None or
            self.Client_QuantityOnLoanDelta7Pc is not None or
            self.Client_SAF is not None or
            self.Client_SAFDelta1 is not None or
            self.Client_SAFDelta1Pc is not None or
            self.Client_SAFDelta30 is not None or
            self.Client_SAFDelta30Pc is not None or
            self.Client_SAFDelta7 is not None or
            self.Client_SAFDelta7Pc is not None or
            self.Client_SAR is not None or
            self.Client_SARDelta1 is not None or
            self.Client_SARDelta1Pc is not None or
            self.Client_SARDelta30 is not None or
            self.Client_SARDelta30Pc is not None or
            self.Client_SARDelta7 is not None or
            self.Client_SARDelta7Pc is not None or
            self.Client_SATenure is not None or
            self.Client_Utilisation is not None or
            self.Client_UtilisationByQuantity is not None or
            self.Client_UtilisationByQuantityDelta1 is not None or
            self.Client_UtilisationByQuantityDelta30 is not None or
            self.Client_UtilisationByQuantityDelta7 is not None or
            self.Client_UtilisationDelta1 is not None or
            self.Client_UtilisationDelta30 is not None or
            self.Client_UtilisationDelta7 is not None or
            self.Client_ValueOnLoan is not None or
            self.Client_ValueOnLoanDelta1 is not None or
            self.Client_ValueOnLoanDelta1Pc is not None or
            self.Client_ValueOnLoanDelta30 is not None or
            self.Client_ValueOnLoanDelta30Pc is not None or
            self.Client_ValueOnLoanDelta7 is not None or
            self.Client_ValueOnLoanDelta7Pc is not None or
            self.Client_VWAF is not None or
            self.Client_VWAF1 is not None or
            self.Client_VWAF30 is not None or
            self.Client_VWAF7 is not None or
            self.Client_VWAFDelta1 is not None or
            self.Client_VWAFDelta1Pc is not None or
            self.Client_VWAFDelta30 is not None or
            self.Client_VWAFDelta30Pc is not None or
            self.Client_VWAFDelta7 is not None or
            self.Client_VWAFDelta7Pc is not None or
            self.Client_VWAR is not None or
            self.Client_VWAR1 is not None or
            self.Client_VWAR30 is not None or
            self.Client_VWAR7 is not None or
            self.Client_VWARDelta1 is not None or
            self.Client_VWARDelta1Pc is not None or
            self.Client_VWARDelta30 is not None or
            self.Client_VWARDelta30Pc is not None or
            self.Client_VWARDelta7 is not None or
            self.Client_VWARDelta7Pc is not None or
            self.Group_ActiveAvailableQuantity is not None or
            self.Group_ActiveAvailableQuantityDelta1 is not None or
            self.Group_ActiveAvailableQuantityDelta1Pc is not None or
            self.Group_ActiveAvailableQuantityDelta30 is not None or
            self.Group_ActiveAvailableQuantityDelta30Pc is not None or
            self.Group_ActiveAvailableQuantityDelta7 is not None or
            self.Group_ActiveAvailableQuantityDelta7Pc is not None or
            self.Group_ActiveAvailableValue is not None or
            self.Group_ActiveAvailableValueDelta1 is not None or
            self.Group_ActiveAvailableValueDelta1Pc is not None or
            self.Group_ActiveAvailableValueDelta30 is not None or
            self.Group_ActiveAvailableValueDelta30Pc is not None or
            self.Group_ActiveAvailableValueDelta7 is not None or
            self.Group_ActiveAvailableValueDelta7Pc is not None or
            self.Group_ActiveLendableQuantity is not None or
            self.Group_ActiveLendableQuantityDelta1 is not None or
            self.Group_ActiveLendableQuantityDelta1Pc is not None or
            self.Group_ActiveLendableQuantityDelta30 is not None or
            self.Group_ActiveLendableQuantityDelta30Pc is not None or
            self.Group_ActiveLendableQuantityDelta7 is not None or
            self.Group_ActiveLendableQuantityDelta7Pc is not None or
            self.Group_ActiveLendableValue is not None or
            self.Group_ActiveLendableValueDelta1 is not None or
            self.Group_ActiveLendableValueDelta1Pc is not None or
            self.Group_ActiveLendableValueDelta30 is not None or
            self.Group_ActiveLendableValueDelta30Pc is not None or
            self.Group_ActiveLendableValueDelta7 is not None or
            self.Group_ActiveLendableValueDelta7Pc is not None or
            self.Group_ActiveLendingAgents is not None or
            self.Group_ActiveUtilisation is not None or
            self.Group_ActiveUtilisationByQuantity is not None or
            self.Group_ActiveUtilisationByQuantityDelta1 is not None or
            self.Group_ActiveUtilisationByQuantityDelta30 is not None or
            self.Group_ActiveUtilisationByQuantityDelta7 is not None or
            self.Group_ActiveUtilisationDelta1 is not None or
            self.Group_ActiveUtilisationDelta30 is not None or
            self.Group_ActiveUtilisationDelta7 is not None or
            self.Group_AvailableQuantity is not None or
            self.Group_AvailableQuantityDelta1 is not None or
            self.Group_AvailableQuantityDelta1Pc is not None or
            self.Group_AvailableQuantityDelta30 is not None or
            self.Group_AvailableQuantityDelta30Pc is not None or
            self.Group_AvailableQuantityDelta7 is not None or
            self.Group_AvailableQuantityDelta7Pc is not None or
            self.Group_AvailableQuantityStability is not None or
            self.Group_AvailableValue is not None or
            self.Group_AvailableValueDelta1 is not None or
            self.Group_AvailableValueDelta1Pc is not None or
            self.Group_AvailableValueDelta30 is not None or
            self.Group_AvailableValueDelta30Pc is not None or
            self.Group_AvailableValueDelta7 is not None or
            self.Group_AvailableValueDelta7Pc is not None or
            self.Group_AvailableValueStability is not None or
            self.Group_BenchmarkFee is not None or
            self.Group_BenchmarkFeeDelta1 is not None or
            self.Group_BenchmarkFeeDelta1Pc is not None or
            self.Group_BenchmarkFeeDelta30 is not None or
            self.Group_BenchmarkFeeDelta30Pc is not None or
            self.Group_BenchmarkFeeDelta7 is not None or
            self.Group_BenchmarkFeeDelta7Pc is not None or
            self.Group_BenchmarkRebate is not None or
            self.Group_BenchmarkRebateDelta1 is not None or
            self.Group_BenchmarkRebateDelta1Pc is not None or
            self.Group_BenchmarkRebateDelta30 is not None or
            self.Group_BenchmarkRebateDelta30Pc is not None or
            self.Group_BenchmarkRebateDelta7 is not None or
            self.Group_BenchmarkRebateDelta7Pc is not None or
            self.Group_BorrowerConcentration is not None or
            self.Group_CompositeScore is not None or
            self.Group_DaysToCover is not None or
            self.Group_DaysToCoverDelta1 is not None or
            self.Group_DaysToCoverDelta1Pc is not None or
            self.Group_DaysToCoverDelta30 is not None or
            self.Group_DaysToCoverDelta30Pc is not None or
            self.Group_DaysToCoverDelta7 is not None or
            self.Group_DaysToCoverDelta7Pc is not None or
            self.Group_IndicativeFee is not None or
            self.Group_IndicativeFeeDelta1 is not None or
            self.Group_IndicativeFeeDelta30 is not None or
            self.Group_IndicativeFeeDelta7 is not None or
            self.Group_IndicativeRebate is not None or
            self.Group_IndicativeRebateDelta1 is not None or
            self.Group_IndicativeRebateDelta30 is not None or
            self.Group_IndicativeRebateDelta7 is not None or
            self.Group_InventoryConcentration is not None or
            self.Group_LendableQuantity is not None or
            self.Group_LendableQuantityDelta1 is not None or
            self.Group_LendableQuantityDelta1Pc is not None or
            self.Group_LendableQuantityDelta30 is not None or
            self.Group_LendableQuantityDelta30Pc is not None or
            self.Group_LendableQuantityDelta7 is not None or
            self.Group_LendableQuantityDelta7Pc is not None or
            self.Group_LendableQuantityStability is not None or
            self.Group_LendableValue is not None or
            self.Group_LendableValueDelta1 is not None or
            self.Group_LendableValueDelta1Pc is not None or
            self.Group_LendableValueDelta30 is not None or
            self.Group_LendableValueDelta30Pc is not None or
            self.Group_LendableValueDelta7 is not None or
            self.Group_LendableValueDelta7Pc is not None or
            self.Group_LendableValueStability is not None or
            self.Group_LenderConcentration is not None or
            self.Group_LenderQuantityOnLoanStability is not None or
            self.Group_LenderValueOnLoan is not None or
            self.Group_LenderValueOnLoanStability is not None or
            self.Group_MarketCap is not None or
            self.Group_NewPositions is not None or
            self.Group_OutOfMoneyPct is not None or
            self.Group_PcFreeFloatValueOnLoan is not None or
            self.Group_PcIssueValueOnLoan is not None or
            self.Group_PcIssueValueOnLoanDelta1 is not None or
            self.Group_PcIssueValueOnLoanDelta30 is not None or
            self.Group_PcIssueValueOnLoanDelta7 is not None or
            self.Group_PcSharesOutstandingOnLoan is not None or
            self.Group_PcSharesOutstandingOnLoanDelta1 is not None or
            self.Group_PcSharesOutstandingOnLoanDelta30 is not None or
            self.Group_PcSharesOutstandingOnLoanDelta7 is not None or
            self.Group_PriceDelta1 is not None or
            self.Group_PriceDelta30 is not None or
            self.Group_PriceDelta7 is not None or
            self.Group_PrimeBrokers is not None or
            self.Group_ProfitandLossImpact is not None or
            self.Group_QuantityOnLoan is not None or
            self.Group_QuantityOnLoanDelta1 is not None or
            self.Group_QuantityOnLoanDelta1Pc is not None or
            self.Group_QuantityOnLoanDelta30 is not None or
            self.Group_QuantityOnLoanDelta30Pc is not None or
            self.Group_QuantityOnLoanDelta7 is not None or
            self.Group_QuantityOnLoanDelta7Pc is not None or
            self.Group_ReratePreviousVWAF is not None or
            self.Group_ReratePreviousVWAR is not None or
            self.Group_RerateTransactionCount is not None or
            self.Group_RerateTransactionCountDown is not None or
            self.Group_RerateTransactionCountUp is not None or
            self.Group_RerateValueOnLoan is not None or
            self.Group_RerateValueOnLoanDown is not None or
            self.Group_RerateValueOnLoanUp is not None or
            self.Group_RerateVWAF is not None or
            self.Group_RerateVWAFDelta1 is not None or
            self.Group_RerateVWAFDelta1Pc is not None or
            self.Group_RerateVWAR is not None or
            self.Group_RerateVWARDelta1 is not None or
            self.Group_RerateVWARDelta1Pc is not None or
            self.Group_SAF is not None or
            self.Group_SAFDelta1 is not None or
            self.Group_SAFDelta1Pc is not None or
            self.Group_SAFDelta30 is not None or
            self.Group_SAFDelta30Pc is not None or
            self.Group_SAFDelta7 is not None or
            self.Group_SAFDelta7Pc is not None or
            self.Group_SAR is not None or
            self.Group_SARDelta1 is not None or
            self.Group_SARDelta1Pc is not None or
            self.Group_SARDelta30 is not None or
            self.Group_SARDelta30Pc is not None or
            self.Group_SARDelta7 is not None or
            self.Group_SARDelta7Pc is not None or
            self.Group_SATenure is not None or
            self.Group_SharesOutstanding is not None or
            self.Group_ShortLoanQuantity is not None or
            self.Group_ShortLoanValue is not None or
            self.Group_TransactionDuration is not None or
            self.Group_Utilisation is not None or
            self.Group_UtilisationByQuantity is not None or
            self.Group_UtilisationByQuantityDelta1 is not None or
            self.Group_UtilisationByQuantityDelta30 is not None or
            self.Group_UtilisationByQuantityDelta7 is not None or
            self.Group_UtilisationDelta1 is not None or
            self.Group_UtilisationDelta30 is not None or
            self.Group_UtilisationDelta7 is not None or
            self.Group_ValueOnLoan is not None or
            self.Group_ValueOnLoanDelta1 is not None or
            self.Group_ValueOnLoanDelta1Pc is not None or
            self.Group_ValueOnLoanDelta30 is not None or
            self.Group_ValueOnLoanDelta30Pc is not None or
            self.Group_ValueOnLoanDelta7 is not None or
            self.Group_ValueOnLoanDelta7Pc is not None or
            self.Group_VWAF is not None or
            self.Group_VWAF1 is not None or
            self.Group_VWAF30 is not None or
            self.Group_VWAF7 is not None or
            self.Group_VWAFDelta is not None or
            self.Group_VWAFDelta1 is not None or
            self.Group_VWAFDelta1Pc is not None or
            self.Group_VWAFDelta30 is not None or
            self.Group_VWAFDelta30Pc is not None or
            self.Group_VWAFDelta7 is not None or
            self.Group_VWAFDelta7Pc is not None or
            self.Group_VWAR is not None or
            self.Group_VWAR1 is not None or
            self.Group_VWAR30 is not None or
            self.Group_VWAR7 is not None or
            self.Group_VWARDelta1 is not None or
            self.Group_VWARDelta1Pc is not None or
            self.Group_VWARDelta30 is not None or
            self.Group_VWARDelta30Pc is not None or
            self.Group_VWARDelta7 is not None or
            self.Group_VWARDelta7Pc is not None or
            self.LatestDataDate is not None or
            self.Transaction_ComparativeDailyCostIndicative is not None or
            self.Transaction_ComparativeDailyCostMySA is not None or
            self.Transaction_ComparativeDailyCostSA is not None or
            self.Transaction_DailyCost is not None or
            self.Transaction_DailyCostDifferenceIndicative is not None or
            self.Transaction_DailyCostDifferenceMySA is not None or
            self.Transaction_DailyCostDifferenceSA is not None or
            self.Transaction_DividendRequirement is not None or
            self.Transaction_Duration is not None or
            self.Transaction_Fee is not None or
            self.Transaction_Quantity is not None or
            self.Transaction_RateVarianceIndicative is not None or
            self.Transaction_RateVarianceMySA is not None or
            self.Transaction_RateVarianceSA is not None or
            self.Transaction_Rebate is not None or
            self.Transaction_StartDate is not None or
            self.Transaction_TransactionFee is not None or
            self.Transaction_Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DistributionType84', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DistributionType84')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DistributionType84')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DistributionType84', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DistributionType84'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DistributionType84', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Client_AvailableQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.AvailableQuantity>%s</%sClient.AvailableQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_AvailableQuantity, input_name='Client.AvailableQuantity'), namespaceprefix_ , eol_))
        if self.Client_AvailableQuantityDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.AvailableQuantityDelta1>%s</%sClient.AvailableQuantityDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_AvailableQuantityDelta1, input_name='Client.AvailableQuantityDelta1'), namespaceprefix_ , eol_))
        if self.Client_AvailableQuantityDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.AvailableQuantityDelta1Pc>%s</%sClient.AvailableQuantityDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_AvailableQuantityDelta1Pc, input_name='Client.AvailableQuantityDelta1Pc'), namespaceprefix_ , eol_))
        if self.Client_AvailableQuantityDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.AvailableQuantityDelta30>%s</%sClient.AvailableQuantityDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_AvailableQuantityDelta30, input_name='Client.AvailableQuantityDelta30'), namespaceprefix_ , eol_))
        if self.Client_AvailableQuantityDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.AvailableQuantityDelta30Pc>%s</%sClient.AvailableQuantityDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_AvailableQuantityDelta30Pc, input_name='Client.AvailableQuantityDelta30Pc'), namespaceprefix_ , eol_))
        if self.Client_AvailableQuantityDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.AvailableQuantityDelta7>%s</%sClient.AvailableQuantityDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_AvailableQuantityDelta7, input_name='Client.AvailableQuantityDelta7'), namespaceprefix_ , eol_))
        if self.Client_AvailableQuantityDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.AvailableQuantityDelta7Pc>%s</%sClient.AvailableQuantityDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_AvailableQuantityDelta7Pc, input_name='Client.AvailableQuantityDelta7Pc'), namespaceprefix_ , eol_))
        if self.Client_AvailableValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.AvailableValue>%s</%sClient.AvailableValue>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_AvailableValue, input_name='Client.AvailableValue'), namespaceprefix_ , eol_))
        if self.Client_AvailableValueDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.AvailableValueDelta1>%s</%sClient.AvailableValueDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_AvailableValueDelta1, input_name='Client.AvailableValueDelta1'), namespaceprefix_ , eol_))
        if self.Client_AvailableValueDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.AvailableValueDelta1Pc>%s</%sClient.AvailableValueDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_AvailableValueDelta1Pc, input_name='Client.AvailableValueDelta1Pc'), namespaceprefix_ , eol_))
        if self.Client_AvailableValueDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.AvailableValueDelta30>%s</%sClient.AvailableValueDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_AvailableValueDelta30, input_name='Client.AvailableValueDelta30'), namespaceprefix_ , eol_))
        if self.Client_AvailableValueDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.AvailableValueDelta30Pc>%s</%sClient.AvailableValueDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_AvailableValueDelta30Pc, input_name='Client.AvailableValueDelta30Pc'), namespaceprefix_ , eol_))
        if self.Client_AvailableValueDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.AvailableValueDelta7>%s</%sClient.AvailableValueDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_AvailableValueDelta7, input_name='Client.AvailableValueDelta7'), namespaceprefix_ , eol_))
        if self.Client_AvailableValueDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.AvailableValueDelta7Pc>%s</%sClient.AvailableValueDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_AvailableValueDelta7Pc, input_name='Client.AvailableValueDelta7Pc'), namespaceprefix_ , eol_))
        if self.Client_DailyCost is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.DailyCost>%s</%sClient.DailyCost>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_DailyCost, input_name='Client.DailyCost'), namespaceprefix_ , eol_))
        if self.Client_DailyCostCombined is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.DailyCostCombined>%s</%sClient.DailyCostCombined>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_DailyCostCombined, input_name='Client.DailyCostCombined'), namespaceprefix_ , eol_))
        if self.Client_DailyRevenue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.DailyRevenue>%s</%sClient.DailyRevenue>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_DailyRevenue, input_name='Client.DailyRevenue'), namespaceprefix_ , eol_))
        if self.Client_LendableQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.LendableQuantity>%s</%sClient.LendableQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_LendableQuantity, input_name='Client.LendableQuantity'), namespaceprefix_ , eol_))
        if self.Client_LendableQuantityDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.LendableQuantityDelta1>%s</%sClient.LendableQuantityDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_LendableQuantityDelta1, input_name='Client.LendableQuantityDelta1'), namespaceprefix_ , eol_))
        if self.Client_LendableQuantityDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.LendableQuantityDelta1Pc>%s</%sClient.LendableQuantityDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_LendableQuantityDelta1Pc, input_name='Client.LendableQuantityDelta1Pc'), namespaceprefix_ , eol_))
        if self.Client_LendableQuantityDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.LendableQuantityDelta30>%s</%sClient.LendableQuantityDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_LendableQuantityDelta30, input_name='Client.LendableQuantityDelta30'), namespaceprefix_ , eol_))
        if self.Client_LendableQuantityDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.LendableQuantityDelta30Pc>%s</%sClient.LendableQuantityDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_LendableQuantityDelta30Pc, input_name='Client.LendableQuantityDelta30Pc'), namespaceprefix_ , eol_))
        if self.Client_LendableQuantityDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.LendableQuantityDelta7>%s</%sClient.LendableQuantityDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_LendableQuantityDelta7, input_name='Client.LendableQuantityDelta7'), namespaceprefix_ , eol_))
        if self.Client_LendableQuantityDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.LendableQuantityDelta7Pc>%s</%sClient.LendableQuantityDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_LendableQuantityDelta7Pc, input_name='Client.LendableQuantityDelta7Pc'), namespaceprefix_ , eol_))
        if self.Client_LendableValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.LendableValue>%s</%sClient.LendableValue>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_LendableValue, input_name='Client.LendableValue'), namespaceprefix_ , eol_))
        if self.Client_LendableValueDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.LendableValueDelta1>%s</%sClient.LendableValueDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_LendableValueDelta1, input_name='Client.LendableValueDelta1'), namespaceprefix_ , eol_))
        if self.Client_LendableValueDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.LendableValueDelta1Pc>%s</%sClient.LendableValueDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_LendableValueDelta1Pc, input_name='Client.LendableValueDelta1Pc'), namespaceprefix_ , eol_))
        if self.Client_LendableValueDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.LendableValueDelta30>%s</%sClient.LendableValueDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_LendableValueDelta30, input_name='Client.LendableValueDelta30'), namespaceprefix_ , eol_))
        if self.Client_LendableValueDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.LendableValueDelta30Pc>%s</%sClient.LendableValueDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_LendableValueDelta30Pc, input_name='Client.LendableValueDelta30Pc'), namespaceprefix_ , eol_))
        if self.Client_LendableValueDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.LendableValueDelta7>%s</%sClient.LendableValueDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_LendableValueDelta7, input_name='Client.LendableValueDelta7'), namespaceprefix_ , eol_))
        if self.Client_LendableValueDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.LendableValueDelta7Pc>%s</%sClient.LendableValueDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_LendableValueDelta7Pc, input_name='Client.LendableValueDelta7Pc'), namespaceprefix_ , eol_))
        if self.Client_MarketShare is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.MarketShare>%s</%sClient.MarketShare>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_MarketShare, input_name='Client.MarketShare'), namespaceprefix_ , eol_))
        if self.Client_MarketShareDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.MarketShareDelta1>%s</%sClient.MarketShareDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_MarketShareDelta1, input_name='Client.MarketShareDelta1'), namespaceprefix_ , eol_))
        if self.Client_MarketShareDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.MarketShareDelta30>%s</%sClient.MarketShareDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_MarketShareDelta30, input_name='Client.MarketShareDelta30'), namespaceprefix_ , eol_))
        if self.Client_MarketShareDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.MarketShareDelta7>%s</%sClient.MarketShareDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_MarketShareDelta7, input_name='Client.MarketShareDelta7'), namespaceprefix_ , eol_))
        if self.Client_MarketShareRank is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.MarketShareRank>%s</%sClient.MarketShareRank>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_MarketShareRank, input_name='Client.MarketShareRank'), namespaceprefix_ , eol_))
        if self.Client_OpportunityGainLoss is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.OpportunityGainLoss>%s</%sClient.OpportunityGainLoss>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_OpportunityGainLoss, input_name='Client.OpportunityGainLoss'), namespaceprefix_ , eol_))
        if self.Client_QuantityOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.QuantityOnLoan>%s</%sClient.QuantityOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_QuantityOnLoan, input_name='Client.QuantityOnLoan'), namespaceprefix_ , eol_))
        if self.Client_QuantityOnLoanDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.QuantityOnLoanDelta1>%s</%sClient.QuantityOnLoanDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_QuantityOnLoanDelta1, input_name='Client.QuantityOnLoanDelta1'), namespaceprefix_ , eol_))
        if self.Client_QuantityOnLoanDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.QuantityOnLoanDelta1Pc>%s</%sClient.QuantityOnLoanDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_QuantityOnLoanDelta1Pc, input_name='Client.QuantityOnLoanDelta1Pc'), namespaceprefix_ , eol_))
        if self.Client_QuantityOnLoanDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.QuantityOnLoanDelta30>%s</%sClient.QuantityOnLoanDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_QuantityOnLoanDelta30, input_name='Client.QuantityOnLoanDelta30'), namespaceprefix_ , eol_))
        if self.Client_QuantityOnLoanDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.QuantityOnLoanDelta30Pc>%s</%sClient.QuantityOnLoanDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_QuantityOnLoanDelta30Pc, input_name='Client.QuantityOnLoanDelta30Pc'), namespaceprefix_ , eol_))
        if self.Client_QuantityOnLoanDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.QuantityOnLoanDelta7>%s</%sClient.QuantityOnLoanDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_QuantityOnLoanDelta7, input_name='Client.QuantityOnLoanDelta7'), namespaceprefix_ , eol_))
        if self.Client_QuantityOnLoanDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.QuantityOnLoanDelta7Pc>%s</%sClient.QuantityOnLoanDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_QuantityOnLoanDelta7Pc, input_name='Client.QuantityOnLoanDelta7Pc'), namespaceprefix_ , eol_))
        if self.Client_SAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SAF>%s</%sClient.SAF>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SAF, input_name='Client.SAF'), namespaceprefix_ , eol_))
        if self.Client_SAFDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SAFDelta1>%s</%sClient.SAFDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SAFDelta1, input_name='Client.SAFDelta1'), namespaceprefix_ , eol_))
        if self.Client_SAFDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SAFDelta1Pc>%s</%sClient.SAFDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SAFDelta1Pc, input_name='Client.SAFDelta1Pc'), namespaceprefix_ , eol_))
        if self.Client_SAFDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SAFDelta30>%s</%sClient.SAFDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SAFDelta30, input_name='Client.SAFDelta30'), namespaceprefix_ , eol_))
        if self.Client_SAFDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SAFDelta30Pc>%s</%sClient.SAFDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SAFDelta30Pc, input_name='Client.SAFDelta30Pc'), namespaceprefix_ , eol_))
        if self.Client_SAFDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SAFDelta7>%s</%sClient.SAFDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SAFDelta7, input_name='Client.SAFDelta7'), namespaceprefix_ , eol_))
        if self.Client_SAFDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SAFDelta7Pc>%s</%sClient.SAFDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SAFDelta7Pc, input_name='Client.SAFDelta7Pc'), namespaceprefix_ , eol_))
        if self.Client_SAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SAR>%s</%sClient.SAR>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SAR, input_name='Client.SAR'), namespaceprefix_ , eol_))
        if self.Client_SARDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SARDelta1>%s</%sClient.SARDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SARDelta1, input_name='Client.SARDelta1'), namespaceprefix_ , eol_))
        if self.Client_SARDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SARDelta1Pc>%s</%sClient.SARDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SARDelta1Pc, input_name='Client.SARDelta1Pc'), namespaceprefix_ , eol_))
        if self.Client_SARDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SARDelta30>%s</%sClient.SARDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SARDelta30, input_name='Client.SARDelta30'), namespaceprefix_ , eol_))
        if self.Client_SARDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SARDelta30Pc>%s</%sClient.SARDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SARDelta30Pc, input_name='Client.SARDelta30Pc'), namespaceprefix_ , eol_))
        if self.Client_SARDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SARDelta7>%s</%sClient.SARDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SARDelta7, input_name='Client.SARDelta7'), namespaceprefix_ , eol_))
        if self.Client_SARDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SARDelta7Pc>%s</%sClient.SARDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SARDelta7Pc, input_name='Client.SARDelta7Pc'), namespaceprefix_ , eol_))
        if self.Client_SATenure is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.SATenure>%s</%sClient.SATenure>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_SATenure, input_name='Client.SATenure'), namespaceprefix_ , eol_))
        if self.Client_Utilisation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.Utilisation>%s</%sClient.Utilisation>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_Utilisation, input_name='Client.Utilisation'), namespaceprefix_ , eol_))
        if self.Client_UtilisationByQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.UtilisationByQuantity>%s</%sClient.UtilisationByQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_UtilisationByQuantity, input_name='Client.UtilisationByQuantity'), namespaceprefix_ , eol_))
        if self.Client_UtilisationByQuantityDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.UtilisationByQuantityDelta1>%s</%sClient.UtilisationByQuantityDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_UtilisationByQuantityDelta1, input_name='Client.UtilisationByQuantityDelta1'), namespaceprefix_ , eol_))
        if self.Client_UtilisationByQuantityDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.UtilisationByQuantityDelta30>%s</%sClient.UtilisationByQuantityDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_UtilisationByQuantityDelta30, input_name='Client.UtilisationByQuantityDelta30'), namespaceprefix_ , eol_))
        if self.Client_UtilisationByQuantityDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.UtilisationByQuantityDelta7>%s</%sClient.UtilisationByQuantityDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_UtilisationByQuantityDelta7, input_name='Client.UtilisationByQuantityDelta7'), namespaceprefix_ , eol_))
        if self.Client_UtilisationDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.UtilisationDelta1>%s</%sClient.UtilisationDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_UtilisationDelta1, input_name='Client.UtilisationDelta1'), namespaceprefix_ , eol_))
        if self.Client_UtilisationDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.UtilisationDelta30>%s</%sClient.UtilisationDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_UtilisationDelta30, input_name='Client.UtilisationDelta30'), namespaceprefix_ , eol_))
        if self.Client_UtilisationDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.UtilisationDelta7>%s</%sClient.UtilisationDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_UtilisationDelta7, input_name='Client.UtilisationDelta7'), namespaceprefix_ , eol_))
        if self.Client_ValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.ValueOnLoan>%s</%sClient.ValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_ValueOnLoan, input_name='Client.ValueOnLoan'), namespaceprefix_ , eol_))
        if self.Client_ValueOnLoanDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.ValueOnLoanDelta1>%s</%sClient.ValueOnLoanDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_ValueOnLoanDelta1, input_name='Client.ValueOnLoanDelta1'), namespaceprefix_ , eol_))
        if self.Client_ValueOnLoanDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.ValueOnLoanDelta1Pc>%s</%sClient.ValueOnLoanDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_ValueOnLoanDelta1Pc, input_name='Client.ValueOnLoanDelta1Pc'), namespaceprefix_ , eol_))
        if self.Client_ValueOnLoanDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.ValueOnLoanDelta30>%s</%sClient.ValueOnLoanDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_ValueOnLoanDelta30, input_name='Client.ValueOnLoanDelta30'), namespaceprefix_ , eol_))
        if self.Client_ValueOnLoanDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.ValueOnLoanDelta30Pc>%s</%sClient.ValueOnLoanDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_ValueOnLoanDelta30Pc, input_name='Client.ValueOnLoanDelta30Pc'), namespaceprefix_ , eol_))
        if self.Client_ValueOnLoanDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.ValueOnLoanDelta7>%s</%sClient.ValueOnLoanDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_ValueOnLoanDelta7, input_name='Client.ValueOnLoanDelta7'), namespaceprefix_ , eol_))
        if self.Client_ValueOnLoanDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.ValueOnLoanDelta7Pc>%s</%sClient.ValueOnLoanDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_ValueOnLoanDelta7Pc, input_name='Client.ValueOnLoanDelta7Pc'), namespaceprefix_ , eol_))
        if self.Client_VWAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWAF>%s</%sClient.VWAF>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWAF, input_name='Client.VWAF'), namespaceprefix_ , eol_))
        if self.Client_VWAF1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWAF1>%s</%sClient.VWAF1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWAF1, input_name='Client.VWAF1'), namespaceprefix_ , eol_))
        if self.Client_VWAF30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWAF30>%s</%sClient.VWAF30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWAF30, input_name='Client.VWAF30'), namespaceprefix_ , eol_))
        if self.Client_VWAF7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWAF7>%s</%sClient.VWAF7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWAF7, input_name='Client.VWAF7'), namespaceprefix_ , eol_))
        if self.Client_VWAFDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWAFDelta1>%s</%sClient.VWAFDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWAFDelta1, input_name='Client.VWAFDelta1'), namespaceprefix_ , eol_))
        if self.Client_VWAFDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWAFDelta1Pc>%s</%sClient.VWAFDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWAFDelta1Pc, input_name='Client.VWAFDelta1Pc'), namespaceprefix_ , eol_))
        if self.Client_VWAFDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWAFDelta30>%s</%sClient.VWAFDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWAFDelta30, input_name='Client.VWAFDelta30'), namespaceprefix_ , eol_))
        if self.Client_VWAFDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWAFDelta30Pc>%s</%sClient.VWAFDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWAFDelta30Pc, input_name='Client.VWAFDelta30Pc'), namespaceprefix_ , eol_))
        if self.Client_VWAFDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWAFDelta7>%s</%sClient.VWAFDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWAFDelta7, input_name='Client.VWAFDelta7'), namespaceprefix_ , eol_))
        if self.Client_VWAFDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWAFDelta7Pc>%s</%sClient.VWAFDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWAFDelta7Pc, input_name='Client.VWAFDelta7Pc'), namespaceprefix_ , eol_))
        if self.Client_VWAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWAR>%s</%sClient.VWAR>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWAR, input_name='Client.VWAR'), namespaceprefix_ , eol_))
        if self.Client_VWAR1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWAR1>%s</%sClient.VWAR1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWAR1, input_name='Client.VWAR1'), namespaceprefix_ , eol_))
        if self.Client_VWAR30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWAR30>%s</%sClient.VWAR30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWAR30, input_name='Client.VWAR30'), namespaceprefix_ , eol_))
        if self.Client_VWAR7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWAR7>%s</%sClient.VWAR7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWAR7, input_name='Client.VWAR7'), namespaceprefix_ , eol_))
        if self.Client_VWARDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWARDelta1>%s</%sClient.VWARDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWARDelta1, input_name='Client.VWARDelta1'), namespaceprefix_ , eol_))
        if self.Client_VWARDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWARDelta1Pc>%s</%sClient.VWARDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWARDelta1Pc, input_name='Client.VWARDelta1Pc'), namespaceprefix_ , eol_))
        if self.Client_VWARDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWARDelta30>%s</%sClient.VWARDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWARDelta30, input_name='Client.VWARDelta30'), namespaceprefix_ , eol_))
        if self.Client_VWARDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWARDelta30Pc>%s</%sClient.VWARDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWARDelta30Pc, input_name='Client.VWARDelta30Pc'), namespaceprefix_ , eol_))
        if self.Client_VWARDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWARDelta7>%s</%sClient.VWARDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWARDelta7, input_name='Client.VWARDelta7'), namespaceprefix_ , eol_))
        if self.Client_VWARDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClient.VWARDelta7Pc>%s</%sClient.VWARDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Client_VWARDelta7Pc, input_name='Client.VWARDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_ActiveAvailableQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveAvailableQuantity>%s</%sGroup.ActiveAvailableQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveAvailableQuantity, input_name='Group.ActiveAvailableQuantity'), namespaceprefix_ , eol_))
        if self.Group_ActiveAvailableQuantityDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveAvailableQuantityDelta1>%s</%sGroup.ActiveAvailableQuantityDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveAvailableQuantityDelta1, input_name='Group.ActiveAvailableQuantityDelta1'), namespaceprefix_ , eol_))
        if self.Group_ActiveAvailableQuantityDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveAvailableQuantityDelta1Pc>%s</%sGroup.ActiveAvailableQuantityDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveAvailableQuantityDelta1Pc, input_name='Group.ActiveAvailableQuantityDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_ActiveAvailableQuantityDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveAvailableQuantityDelta30>%s</%sGroup.ActiveAvailableQuantityDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveAvailableQuantityDelta30, input_name='Group.ActiveAvailableQuantityDelta30'), namespaceprefix_ , eol_))
        if self.Group_ActiveAvailableQuantityDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveAvailableQuantityDelta30Pc>%s</%sGroup.ActiveAvailableQuantityDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveAvailableQuantityDelta30Pc, input_name='Group.ActiveAvailableQuantityDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_ActiveAvailableQuantityDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveAvailableQuantityDelta7>%s</%sGroup.ActiveAvailableQuantityDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveAvailableQuantityDelta7, input_name='Group.ActiveAvailableQuantityDelta7'), namespaceprefix_ , eol_))
        if self.Group_ActiveAvailableQuantityDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveAvailableQuantityDelta7Pc>%s</%sGroup.ActiveAvailableQuantityDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveAvailableQuantityDelta7Pc, input_name='Group.ActiveAvailableQuantityDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_ActiveAvailableValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveAvailableValue>%s</%sGroup.ActiveAvailableValue>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveAvailableValue, input_name='Group.ActiveAvailableValue'), namespaceprefix_ , eol_))
        if self.Group_ActiveAvailableValueDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveAvailableValueDelta1>%s</%sGroup.ActiveAvailableValueDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveAvailableValueDelta1, input_name='Group.ActiveAvailableValueDelta1'), namespaceprefix_ , eol_))
        if self.Group_ActiveAvailableValueDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveAvailableValueDelta1Pc>%s</%sGroup.ActiveAvailableValueDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveAvailableValueDelta1Pc, input_name='Group.ActiveAvailableValueDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_ActiveAvailableValueDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveAvailableValueDelta30>%s</%sGroup.ActiveAvailableValueDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveAvailableValueDelta30, input_name='Group.ActiveAvailableValueDelta30'), namespaceprefix_ , eol_))
        if self.Group_ActiveAvailableValueDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveAvailableValueDelta30Pc>%s</%sGroup.ActiveAvailableValueDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveAvailableValueDelta30Pc, input_name='Group.ActiveAvailableValueDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_ActiveAvailableValueDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveAvailableValueDelta7>%s</%sGroup.ActiveAvailableValueDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveAvailableValueDelta7, input_name='Group.ActiveAvailableValueDelta7'), namespaceprefix_ , eol_))
        if self.Group_ActiveAvailableValueDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveAvailableValueDelta7Pc>%s</%sGroup.ActiveAvailableValueDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveAvailableValueDelta7Pc, input_name='Group.ActiveAvailableValueDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendableQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendableQuantity>%s</%sGroup.ActiveLendableQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendableQuantity, input_name='Group.ActiveLendableQuantity'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendableQuantityDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendableQuantityDelta1>%s</%sGroup.ActiveLendableQuantityDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendableQuantityDelta1, input_name='Group.ActiveLendableQuantityDelta1'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendableQuantityDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendableQuantityDelta1Pc>%s</%sGroup.ActiveLendableQuantityDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendableQuantityDelta1Pc, input_name='Group.ActiveLendableQuantityDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendableQuantityDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendableQuantityDelta30>%s</%sGroup.ActiveLendableQuantityDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendableQuantityDelta30, input_name='Group.ActiveLendableQuantityDelta30'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendableQuantityDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendableQuantityDelta30Pc>%s</%sGroup.ActiveLendableQuantityDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendableQuantityDelta30Pc, input_name='Group.ActiveLendableQuantityDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendableQuantityDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendableQuantityDelta7>%s</%sGroup.ActiveLendableQuantityDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendableQuantityDelta7, input_name='Group.ActiveLendableQuantityDelta7'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendableQuantityDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendableQuantityDelta7Pc>%s</%sGroup.ActiveLendableQuantityDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendableQuantityDelta7Pc, input_name='Group.ActiveLendableQuantityDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendableValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendableValue>%s</%sGroup.ActiveLendableValue>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendableValue, input_name='Group.ActiveLendableValue'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendableValueDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendableValueDelta1>%s</%sGroup.ActiveLendableValueDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendableValueDelta1, input_name='Group.ActiveLendableValueDelta1'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendableValueDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendableValueDelta1Pc>%s</%sGroup.ActiveLendableValueDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendableValueDelta1Pc, input_name='Group.ActiveLendableValueDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendableValueDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendableValueDelta30>%s</%sGroup.ActiveLendableValueDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendableValueDelta30, input_name='Group.ActiveLendableValueDelta30'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendableValueDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendableValueDelta30Pc>%s</%sGroup.ActiveLendableValueDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendableValueDelta30Pc, input_name='Group.ActiveLendableValueDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendableValueDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendableValueDelta7>%s</%sGroup.ActiveLendableValueDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendableValueDelta7, input_name='Group.ActiveLendableValueDelta7'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendableValueDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendableValueDelta7Pc>%s</%sGroup.ActiveLendableValueDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendableValueDelta7Pc, input_name='Group.ActiveLendableValueDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_ActiveLendingAgents is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveLendingAgents>%s</%sGroup.ActiveLendingAgents>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveLendingAgents, input_name='Group.ActiveLendingAgents'), namespaceprefix_ , eol_))
        if self.Group_ActiveUtilisation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveUtilisation>%s</%sGroup.ActiveUtilisation>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveUtilisation, input_name='Group.ActiveUtilisation'), namespaceprefix_ , eol_))
        if self.Group_ActiveUtilisationByQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveUtilisationByQuantity>%s</%sGroup.ActiveUtilisationByQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveUtilisationByQuantity, input_name='Group.ActiveUtilisationByQuantity'), namespaceprefix_ , eol_))
        if self.Group_ActiveUtilisationByQuantityDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveUtilisationByQuantityDelta1>%s</%sGroup.ActiveUtilisationByQuantityDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveUtilisationByQuantityDelta1, input_name='Group.ActiveUtilisationByQuantityDelta1'), namespaceprefix_ , eol_))
        if self.Group_ActiveUtilisationByQuantityDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveUtilisationByQuantityDelta30>%s</%sGroup.ActiveUtilisationByQuantityDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveUtilisationByQuantityDelta30, input_name='Group.ActiveUtilisationByQuantityDelta30'), namespaceprefix_ , eol_))
        if self.Group_ActiveUtilisationByQuantityDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveUtilisationByQuantityDelta7>%s</%sGroup.ActiveUtilisationByQuantityDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveUtilisationByQuantityDelta7, input_name='Group.ActiveUtilisationByQuantityDelta7'), namespaceprefix_ , eol_))
        if self.Group_ActiveUtilisationDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveUtilisationDelta1>%s</%sGroup.ActiveUtilisationDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveUtilisationDelta1, input_name='Group.ActiveUtilisationDelta1'), namespaceprefix_ , eol_))
        if self.Group_ActiveUtilisationDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveUtilisationDelta30>%s</%sGroup.ActiveUtilisationDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveUtilisationDelta30, input_name='Group.ActiveUtilisationDelta30'), namespaceprefix_ , eol_))
        if self.Group_ActiveUtilisationDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ActiveUtilisationDelta7>%s</%sGroup.ActiveUtilisationDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ActiveUtilisationDelta7, input_name='Group.ActiveUtilisationDelta7'), namespaceprefix_ , eol_))
        if self.Group_AvailableQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableQuantity>%s</%sGroup.AvailableQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableQuantity, input_name='Group.AvailableQuantity'), namespaceprefix_ , eol_))
        if self.Group_AvailableQuantityDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableQuantityDelta1>%s</%sGroup.AvailableQuantityDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableQuantityDelta1, input_name='Group.AvailableQuantityDelta1'), namespaceprefix_ , eol_))
        if self.Group_AvailableQuantityDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableQuantityDelta1Pc>%s</%sGroup.AvailableQuantityDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableQuantityDelta1Pc, input_name='Group.AvailableQuantityDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_AvailableQuantityDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableQuantityDelta30>%s</%sGroup.AvailableQuantityDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableQuantityDelta30, input_name='Group.AvailableQuantityDelta30'), namespaceprefix_ , eol_))
        if self.Group_AvailableQuantityDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableQuantityDelta30Pc>%s</%sGroup.AvailableQuantityDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableQuantityDelta30Pc, input_name='Group.AvailableQuantityDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_AvailableQuantityDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableQuantityDelta7>%s</%sGroup.AvailableQuantityDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableQuantityDelta7, input_name='Group.AvailableQuantityDelta7'), namespaceprefix_ , eol_))
        if self.Group_AvailableQuantityDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableQuantityDelta7Pc>%s</%sGroup.AvailableQuantityDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableQuantityDelta7Pc, input_name='Group.AvailableQuantityDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_AvailableQuantityStability is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableQuantityStability>%s</%sGroup.AvailableQuantityStability>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableQuantityStability, input_name='Group.AvailableQuantityStability'), namespaceprefix_ , eol_))
        if self.Group_AvailableValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableValue>%s</%sGroup.AvailableValue>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableValue, input_name='Group.AvailableValue'), namespaceprefix_ , eol_))
        if self.Group_AvailableValueDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableValueDelta1>%s</%sGroup.AvailableValueDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableValueDelta1, input_name='Group.AvailableValueDelta1'), namespaceprefix_ , eol_))
        if self.Group_AvailableValueDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableValueDelta1Pc>%s</%sGroup.AvailableValueDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableValueDelta1Pc, input_name='Group.AvailableValueDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_AvailableValueDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableValueDelta30>%s</%sGroup.AvailableValueDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableValueDelta30, input_name='Group.AvailableValueDelta30'), namespaceprefix_ , eol_))
        if self.Group_AvailableValueDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableValueDelta30Pc>%s</%sGroup.AvailableValueDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableValueDelta30Pc, input_name='Group.AvailableValueDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_AvailableValueDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableValueDelta7>%s</%sGroup.AvailableValueDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableValueDelta7, input_name='Group.AvailableValueDelta7'), namespaceprefix_ , eol_))
        if self.Group_AvailableValueDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableValueDelta7Pc>%s</%sGroup.AvailableValueDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableValueDelta7Pc, input_name='Group.AvailableValueDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_AvailableValueStability is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.AvailableValueStability>%s</%sGroup.AvailableValueStability>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_AvailableValueStability, input_name='Group.AvailableValueStability'), namespaceprefix_ , eol_))
        if self.Group_BenchmarkFee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BenchmarkFee>%s</%sGroup.BenchmarkFee>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BenchmarkFee, input_name='Group.BenchmarkFee'), namespaceprefix_ , eol_))
        if self.Group_BenchmarkFeeDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BenchmarkFeeDelta1>%s</%sGroup.BenchmarkFeeDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BenchmarkFeeDelta1, input_name='Group.BenchmarkFeeDelta1'), namespaceprefix_ , eol_))
        if self.Group_BenchmarkFeeDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BenchmarkFeeDelta1Pc>%s</%sGroup.BenchmarkFeeDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BenchmarkFeeDelta1Pc, input_name='Group.BenchmarkFeeDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_BenchmarkFeeDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BenchmarkFeeDelta30>%s</%sGroup.BenchmarkFeeDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BenchmarkFeeDelta30, input_name='Group.BenchmarkFeeDelta30'), namespaceprefix_ , eol_))
        if self.Group_BenchmarkFeeDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BenchmarkFeeDelta30Pc>%s</%sGroup.BenchmarkFeeDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BenchmarkFeeDelta30Pc, input_name='Group.BenchmarkFeeDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_BenchmarkFeeDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BenchmarkFeeDelta7>%s</%sGroup.BenchmarkFeeDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BenchmarkFeeDelta7, input_name='Group.BenchmarkFeeDelta7'), namespaceprefix_ , eol_))
        if self.Group_BenchmarkFeeDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BenchmarkFeeDelta7Pc>%s</%sGroup.BenchmarkFeeDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BenchmarkFeeDelta7Pc, input_name='Group.BenchmarkFeeDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_BenchmarkRebate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BenchmarkRebate>%s</%sGroup.BenchmarkRebate>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BenchmarkRebate, input_name='Group.BenchmarkRebate'), namespaceprefix_ , eol_))
        if self.Group_BenchmarkRebateDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BenchmarkRebateDelta1>%s</%sGroup.BenchmarkRebateDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BenchmarkRebateDelta1, input_name='Group.BenchmarkRebateDelta1'), namespaceprefix_ , eol_))
        if self.Group_BenchmarkRebateDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BenchmarkRebateDelta1Pc>%s</%sGroup.BenchmarkRebateDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BenchmarkRebateDelta1Pc, input_name='Group.BenchmarkRebateDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_BenchmarkRebateDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BenchmarkRebateDelta30>%s</%sGroup.BenchmarkRebateDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BenchmarkRebateDelta30, input_name='Group.BenchmarkRebateDelta30'), namespaceprefix_ , eol_))
        if self.Group_BenchmarkRebateDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BenchmarkRebateDelta30Pc>%s</%sGroup.BenchmarkRebateDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BenchmarkRebateDelta30Pc, input_name='Group.BenchmarkRebateDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_BenchmarkRebateDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BenchmarkRebateDelta7>%s</%sGroup.BenchmarkRebateDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BenchmarkRebateDelta7, input_name='Group.BenchmarkRebateDelta7'), namespaceprefix_ , eol_))
        if self.Group_BenchmarkRebateDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BenchmarkRebateDelta7Pc>%s</%sGroup.BenchmarkRebateDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BenchmarkRebateDelta7Pc, input_name='Group.BenchmarkRebateDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_BorrowerConcentration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.BorrowerConcentration>%s</%sGroup.BorrowerConcentration>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_BorrowerConcentration, input_name='Group.BorrowerConcentration'), namespaceprefix_ , eol_))
        if self.Group_CompositeScore is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.CompositeScore>%s</%sGroup.CompositeScore>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_CompositeScore, input_name='Group.CompositeScore'), namespaceprefix_ , eol_))
        if self.Group_DaysToCover is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.DaysToCover>%s</%sGroup.DaysToCover>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_DaysToCover, input_name='Group.DaysToCover'), namespaceprefix_ , eol_))
        if self.Group_DaysToCoverDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.DaysToCoverDelta1>%s</%sGroup.DaysToCoverDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_DaysToCoverDelta1, input_name='Group.DaysToCoverDelta1'), namespaceprefix_ , eol_))
        if self.Group_DaysToCoverDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.DaysToCoverDelta1Pc>%s</%sGroup.DaysToCoverDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_DaysToCoverDelta1Pc, input_name='Group.DaysToCoverDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_DaysToCoverDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.DaysToCoverDelta30>%s</%sGroup.DaysToCoverDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_DaysToCoverDelta30, input_name='Group.DaysToCoverDelta30'), namespaceprefix_ , eol_))
        if self.Group_DaysToCoverDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.DaysToCoverDelta30Pc>%s</%sGroup.DaysToCoverDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_DaysToCoverDelta30Pc, input_name='Group.DaysToCoverDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_DaysToCoverDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.DaysToCoverDelta7>%s</%sGroup.DaysToCoverDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_DaysToCoverDelta7, input_name='Group.DaysToCoverDelta7'), namespaceprefix_ , eol_))
        if self.Group_DaysToCoverDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.DaysToCoverDelta7Pc>%s</%sGroup.DaysToCoverDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_DaysToCoverDelta7Pc, input_name='Group.DaysToCoverDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_IndicativeFee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.IndicativeFee>%s</%sGroup.IndicativeFee>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_IndicativeFee, input_name='Group.IndicativeFee'), namespaceprefix_ , eol_))
        if self.Group_IndicativeFeeDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.IndicativeFeeDelta1>%s</%sGroup.IndicativeFeeDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_IndicativeFeeDelta1, input_name='Group.IndicativeFeeDelta1'), namespaceprefix_ , eol_))
        if self.Group_IndicativeFeeDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.IndicativeFeeDelta30>%s</%sGroup.IndicativeFeeDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_IndicativeFeeDelta30, input_name='Group.IndicativeFeeDelta30'), namespaceprefix_ , eol_))
        if self.Group_IndicativeFeeDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.IndicativeFeeDelta7>%s</%sGroup.IndicativeFeeDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_IndicativeFeeDelta7, input_name='Group.IndicativeFeeDelta7'), namespaceprefix_ , eol_))
        if self.Group_IndicativeRebate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.IndicativeRebate>%s</%sGroup.IndicativeRebate>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_IndicativeRebate, input_name='Group.IndicativeRebate'), namespaceprefix_ , eol_))
        if self.Group_IndicativeRebateDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.IndicativeRebateDelta1>%s</%sGroup.IndicativeRebateDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_IndicativeRebateDelta1, input_name='Group.IndicativeRebateDelta1'), namespaceprefix_ , eol_))
        if self.Group_IndicativeRebateDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.IndicativeRebateDelta30>%s</%sGroup.IndicativeRebateDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_IndicativeRebateDelta30, input_name='Group.IndicativeRebateDelta30'), namespaceprefix_ , eol_))
        if self.Group_IndicativeRebateDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.IndicativeRebateDelta7>%s</%sGroup.IndicativeRebateDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_IndicativeRebateDelta7, input_name='Group.IndicativeRebateDelta7'), namespaceprefix_ , eol_))
        if self.Group_InventoryConcentration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.InventoryConcentration>%s</%sGroup.InventoryConcentration>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_InventoryConcentration, input_name='Group.InventoryConcentration'), namespaceprefix_ , eol_))
        if self.Group_LendableQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableQuantity>%s</%sGroup.LendableQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableQuantity, input_name='Group.LendableQuantity'), namespaceprefix_ , eol_))
        if self.Group_LendableQuantityDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableQuantityDelta1>%s</%sGroup.LendableQuantityDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableQuantityDelta1, input_name='Group.LendableQuantityDelta1'), namespaceprefix_ , eol_))
        if self.Group_LendableQuantityDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableQuantityDelta1Pc>%s</%sGroup.LendableQuantityDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableQuantityDelta1Pc, input_name='Group.LendableQuantityDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_LendableQuantityDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableQuantityDelta30>%s</%sGroup.LendableQuantityDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableQuantityDelta30, input_name='Group.LendableQuantityDelta30'), namespaceprefix_ , eol_))
        if self.Group_LendableQuantityDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableQuantityDelta30Pc>%s</%sGroup.LendableQuantityDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableQuantityDelta30Pc, input_name='Group.LendableQuantityDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_LendableQuantityDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableQuantityDelta7>%s</%sGroup.LendableQuantityDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableQuantityDelta7, input_name='Group.LendableQuantityDelta7'), namespaceprefix_ , eol_))
        if self.Group_LendableQuantityDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableQuantityDelta7Pc>%s</%sGroup.LendableQuantityDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableQuantityDelta7Pc, input_name='Group.LendableQuantityDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_LendableQuantityStability is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableQuantityStability>%s</%sGroup.LendableQuantityStability>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableQuantityStability, input_name='Group.LendableQuantityStability'), namespaceprefix_ , eol_))
        if self.Group_LendableValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableValue>%s</%sGroup.LendableValue>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableValue, input_name='Group.LendableValue'), namespaceprefix_ , eol_))
        if self.Group_LendableValueDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableValueDelta1>%s</%sGroup.LendableValueDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableValueDelta1, input_name='Group.LendableValueDelta1'), namespaceprefix_ , eol_))
        if self.Group_LendableValueDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableValueDelta1Pc>%s</%sGroup.LendableValueDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableValueDelta1Pc, input_name='Group.LendableValueDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_LendableValueDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableValueDelta30>%s</%sGroup.LendableValueDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableValueDelta30, input_name='Group.LendableValueDelta30'), namespaceprefix_ , eol_))
        if self.Group_LendableValueDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableValueDelta30Pc>%s</%sGroup.LendableValueDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableValueDelta30Pc, input_name='Group.LendableValueDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_LendableValueDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableValueDelta7>%s</%sGroup.LendableValueDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableValueDelta7, input_name='Group.LendableValueDelta7'), namespaceprefix_ , eol_))
        if self.Group_LendableValueDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableValueDelta7Pc>%s</%sGroup.LendableValueDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableValueDelta7Pc, input_name='Group.LendableValueDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_LendableValueStability is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LendableValueStability>%s</%sGroup.LendableValueStability>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LendableValueStability, input_name='Group.LendableValueStability'), namespaceprefix_ , eol_))
        if self.Group_LenderConcentration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LenderConcentration>%s</%sGroup.LenderConcentration>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LenderConcentration, input_name='Group.LenderConcentration'), namespaceprefix_ , eol_))
        if self.Group_LenderQuantityOnLoanStability is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LenderQuantityOnLoanStability>%s</%sGroup.LenderQuantityOnLoanStability>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LenderQuantityOnLoanStability, input_name='Group.LenderQuantityOnLoanStability'), namespaceprefix_ , eol_))
        if self.Group_LenderValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LenderValueOnLoan>%s</%sGroup.LenderValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LenderValueOnLoan, input_name='Group.LenderValueOnLoan'), namespaceprefix_ , eol_))
        if self.Group_LenderValueOnLoanStability is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.LenderValueOnLoanStability>%s</%sGroup.LenderValueOnLoanStability>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_LenderValueOnLoanStability, input_name='Group.LenderValueOnLoanStability'), namespaceprefix_ , eol_))
        if self.Group_MarketCap is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.MarketCap>%s</%sGroup.MarketCap>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_MarketCap, input_name='Group.MarketCap'), namespaceprefix_ , eol_))
        if self.Group_NewPositions is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.NewPositions>%s</%sGroup.NewPositions>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_NewPositions, input_name='Group.NewPositions'), namespaceprefix_ , eol_))
        if self.Group_OutOfMoneyPct is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.OutOfMoneyPct>%s</%sGroup.OutOfMoneyPct>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_OutOfMoneyPct, input_name='Group.OutOfMoneyPct'), namespaceprefix_ , eol_))
        if self.Group_PcFreeFloatValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.PcFreeFloatValueOnLoan>%s</%sGroup.PcFreeFloatValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_PcFreeFloatValueOnLoan, input_name='Group.PcFreeFloatValueOnLoan'), namespaceprefix_ , eol_))
        if self.Group_PcIssueValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.PcIssueValueOnLoan>%s</%sGroup.PcIssueValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_PcIssueValueOnLoan, input_name='Group.PcIssueValueOnLoan'), namespaceprefix_ , eol_))
        if self.Group_PcIssueValueOnLoanDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.PcIssueValueOnLoanDelta1>%s</%sGroup.PcIssueValueOnLoanDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_PcIssueValueOnLoanDelta1, input_name='Group.PcIssueValueOnLoanDelta1'), namespaceprefix_ , eol_))
        if self.Group_PcIssueValueOnLoanDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.PcIssueValueOnLoanDelta30>%s</%sGroup.PcIssueValueOnLoanDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_PcIssueValueOnLoanDelta30, input_name='Group.PcIssueValueOnLoanDelta30'), namespaceprefix_ , eol_))
        if self.Group_PcIssueValueOnLoanDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.PcIssueValueOnLoanDelta7>%s</%sGroup.PcIssueValueOnLoanDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_PcIssueValueOnLoanDelta7, input_name='Group.PcIssueValueOnLoanDelta7'), namespaceprefix_ , eol_))
        if self.Group_PcSharesOutstandingOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.PcSharesOutstandingOnLoan>%s</%sGroup.PcSharesOutstandingOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_PcSharesOutstandingOnLoan, input_name='Group.PcSharesOutstandingOnLoan'), namespaceprefix_ , eol_))
        if self.Group_PcSharesOutstandingOnLoanDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.PcSharesOutstandingOnLoanDelta1>%s</%sGroup.PcSharesOutstandingOnLoanDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_PcSharesOutstandingOnLoanDelta1, input_name='Group.PcSharesOutstandingOnLoanDelta1'), namespaceprefix_ , eol_))
        if self.Group_PcSharesOutstandingOnLoanDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.PcSharesOutstandingOnLoanDelta30>%s</%sGroup.PcSharesOutstandingOnLoanDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_PcSharesOutstandingOnLoanDelta30, input_name='Group.PcSharesOutstandingOnLoanDelta30'), namespaceprefix_ , eol_))
        if self.Group_PcSharesOutstandingOnLoanDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.PcSharesOutstandingOnLoanDelta7>%s</%sGroup.PcSharesOutstandingOnLoanDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_PcSharesOutstandingOnLoanDelta7, input_name='Group.PcSharesOutstandingOnLoanDelta7'), namespaceprefix_ , eol_))
        if self.Group_PriceDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.PriceDelta1>%s</%sGroup.PriceDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_PriceDelta1, input_name='Group.PriceDelta1'), namespaceprefix_ , eol_))
        if self.Group_PriceDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.PriceDelta30>%s</%sGroup.PriceDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_PriceDelta30, input_name='Group.PriceDelta30'), namespaceprefix_ , eol_))
        if self.Group_PriceDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.PriceDelta7>%s</%sGroup.PriceDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_PriceDelta7, input_name='Group.PriceDelta7'), namespaceprefix_ , eol_))
        if self.Group_PrimeBrokers is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.PrimeBrokers>%s</%sGroup.PrimeBrokers>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_PrimeBrokers, input_name='Group.PrimeBrokers'), namespaceprefix_ , eol_))
        if self.Group_ProfitandLossImpact is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ProfitandLossImpact>%s</%sGroup.ProfitandLossImpact>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ProfitandLossImpact, input_name='Group.ProfitandLossImpact'), namespaceprefix_ , eol_))
        if self.Group_QuantityOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.QuantityOnLoan>%s</%sGroup.QuantityOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_QuantityOnLoan, input_name='Group.QuantityOnLoan'), namespaceprefix_ , eol_))
        if self.Group_QuantityOnLoanDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.QuantityOnLoanDelta1>%s</%sGroup.QuantityOnLoanDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_QuantityOnLoanDelta1, input_name='Group.QuantityOnLoanDelta1'), namespaceprefix_ , eol_))
        if self.Group_QuantityOnLoanDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.QuantityOnLoanDelta1Pc>%s</%sGroup.QuantityOnLoanDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_QuantityOnLoanDelta1Pc, input_name='Group.QuantityOnLoanDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_QuantityOnLoanDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.QuantityOnLoanDelta30>%s</%sGroup.QuantityOnLoanDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_QuantityOnLoanDelta30, input_name='Group.QuantityOnLoanDelta30'), namespaceprefix_ , eol_))
        if self.Group_QuantityOnLoanDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.QuantityOnLoanDelta30Pc>%s</%sGroup.QuantityOnLoanDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_QuantityOnLoanDelta30Pc, input_name='Group.QuantityOnLoanDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_QuantityOnLoanDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.QuantityOnLoanDelta7>%s</%sGroup.QuantityOnLoanDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_QuantityOnLoanDelta7, input_name='Group.QuantityOnLoanDelta7'), namespaceprefix_ , eol_))
        if self.Group_QuantityOnLoanDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.QuantityOnLoanDelta7Pc>%s</%sGroup.QuantityOnLoanDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_QuantityOnLoanDelta7Pc, input_name='Group.QuantityOnLoanDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_ReratePreviousVWAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ReratePreviousVWAF>%s</%sGroup.ReratePreviousVWAF>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ReratePreviousVWAF, input_name='Group.ReratePreviousVWAF'), namespaceprefix_ , eol_))
        if self.Group_ReratePreviousVWAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ReratePreviousVWAR>%s</%sGroup.ReratePreviousVWAR>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ReratePreviousVWAR, input_name='Group.ReratePreviousVWAR'), namespaceprefix_ , eol_))
        if self.Group_RerateTransactionCount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.RerateTransactionCount>%s</%sGroup.RerateTransactionCount>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_RerateTransactionCount, input_name='Group.RerateTransactionCount'), namespaceprefix_ , eol_))
        if self.Group_RerateTransactionCountDown is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.RerateTransactionCountDown>%s</%sGroup.RerateTransactionCountDown>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_RerateTransactionCountDown, input_name='Group.RerateTransactionCountDown'), namespaceprefix_ , eol_))
        if self.Group_RerateTransactionCountUp is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.RerateTransactionCountUp>%s</%sGroup.RerateTransactionCountUp>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_RerateTransactionCountUp, input_name='Group.RerateTransactionCountUp'), namespaceprefix_ , eol_))
        if self.Group_RerateValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.RerateValueOnLoan>%s</%sGroup.RerateValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_RerateValueOnLoan, input_name='Group.RerateValueOnLoan'), namespaceprefix_ , eol_))
        if self.Group_RerateValueOnLoanDown is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.RerateValueOnLoanDown>%s</%sGroup.RerateValueOnLoanDown>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_RerateValueOnLoanDown, input_name='Group.RerateValueOnLoanDown'), namespaceprefix_ , eol_))
        if self.Group_RerateValueOnLoanUp is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.RerateValueOnLoanUp>%s</%sGroup.RerateValueOnLoanUp>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_RerateValueOnLoanUp, input_name='Group.RerateValueOnLoanUp'), namespaceprefix_ , eol_))
        if self.Group_RerateVWAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.RerateVWAF>%s</%sGroup.RerateVWAF>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_RerateVWAF, input_name='Group.RerateVWAF'), namespaceprefix_ , eol_))
        if self.Group_RerateVWAFDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.RerateVWAFDelta1>%s</%sGroup.RerateVWAFDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_RerateVWAFDelta1, input_name='Group.RerateVWAFDelta1'), namespaceprefix_ , eol_))
        if self.Group_RerateVWAFDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.RerateVWAFDelta1Pc>%s</%sGroup.RerateVWAFDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_RerateVWAFDelta1Pc, input_name='Group.RerateVWAFDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_RerateVWAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.RerateVWAR>%s</%sGroup.RerateVWAR>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_RerateVWAR, input_name='Group.RerateVWAR'), namespaceprefix_ , eol_))
        if self.Group_RerateVWARDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.RerateVWARDelta1>%s</%sGroup.RerateVWARDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_RerateVWARDelta1, input_name='Group.RerateVWARDelta1'), namespaceprefix_ , eol_))
        if self.Group_RerateVWARDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.RerateVWARDelta1Pc>%s</%sGroup.RerateVWARDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_RerateVWARDelta1Pc, input_name='Group.RerateVWARDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_SAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SAF>%s</%sGroup.SAF>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SAF, input_name='Group.SAF'), namespaceprefix_ , eol_))
        if self.Group_SAFDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SAFDelta1>%s</%sGroup.SAFDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SAFDelta1, input_name='Group.SAFDelta1'), namespaceprefix_ , eol_))
        if self.Group_SAFDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SAFDelta1Pc>%s</%sGroup.SAFDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SAFDelta1Pc, input_name='Group.SAFDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_SAFDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SAFDelta30>%s</%sGroup.SAFDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SAFDelta30, input_name='Group.SAFDelta30'), namespaceprefix_ , eol_))
        if self.Group_SAFDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SAFDelta30Pc>%s</%sGroup.SAFDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SAFDelta30Pc, input_name='Group.SAFDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_SAFDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SAFDelta7>%s</%sGroup.SAFDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SAFDelta7, input_name='Group.SAFDelta7'), namespaceprefix_ , eol_))
        if self.Group_SAFDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SAFDelta7Pc>%s</%sGroup.SAFDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SAFDelta7Pc, input_name='Group.SAFDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_SAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SAR>%s</%sGroup.SAR>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SAR, input_name='Group.SAR'), namespaceprefix_ , eol_))
        if self.Group_SARDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SARDelta1>%s</%sGroup.SARDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SARDelta1, input_name='Group.SARDelta1'), namespaceprefix_ , eol_))
        if self.Group_SARDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SARDelta1Pc>%s</%sGroup.SARDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SARDelta1Pc, input_name='Group.SARDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_SARDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SARDelta30>%s</%sGroup.SARDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SARDelta30, input_name='Group.SARDelta30'), namespaceprefix_ , eol_))
        if self.Group_SARDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SARDelta30Pc>%s</%sGroup.SARDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SARDelta30Pc, input_name='Group.SARDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_SARDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SARDelta7>%s</%sGroup.SARDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SARDelta7, input_name='Group.SARDelta7'), namespaceprefix_ , eol_))
        if self.Group_SARDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SARDelta7Pc>%s</%sGroup.SARDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SARDelta7Pc, input_name='Group.SARDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_SATenure is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SATenure>%s</%sGroup.SATenure>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SATenure, input_name='Group.SATenure'), namespaceprefix_ , eol_))
        if self.Group_SharesOutstanding is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.SharesOutstanding>%s</%sGroup.SharesOutstanding>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_SharesOutstanding, input_name='Group.SharesOutstanding'), namespaceprefix_ , eol_))
        if self.Group_ShortLoanQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ShortLoanQuantity>%s</%sGroup.ShortLoanQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ShortLoanQuantity, input_name='Group.ShortLoanQuantity'), namespaceprefix_ , eol_))
        if self.Group_ShortLoanValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ShortLoanValue>%s</%sGroup.ShortLoanValue>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ShortLoanValue, input_name='Group.ShortLoanValue'), namespaceprefix_ , eol_))
        if self.Group_TransactionDuration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.TransactionDuration>%s</%sGroup.TransactionDuration>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_TransactionDuration, input_name='Group.TransactionDuration'), namespaceprefix_ , eol_))
        if self.Group_Utilisation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.Utilisation>%s</%sGroup.Utilisation>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_Utilisation, input_name='Group.Utilisation'), namespaceprefix_ , eol_))
        if self.Group_UtilisationByQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.UtilisationByQuantity>%s</%sGroup.UtilisationByQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_UtilisationByQuantity, input_name='Group.UtilisationByQuantity'), namespaceprefix_ , eol_))
        if self.Group_UtilisationByQuantityDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.UtilisationByQuantityDelta1>%s</%sGroup.UtilisationByQuantityDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_UtilisationByQuantityDelta1, input_name='Group.UtilisationByQuantityDelta1'), namespaceprefix_ , eol_))
        if self.Group_UtilisationByQuantityDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.UtilisationByQuantityDelta30>%s</%sGroup.UtilisationByQuantityDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_UtilisationByQuantityDelta30, input_name='Group.UtilisationByQuantityDelta30'), namespaceprefix_ , eol_))
        if self.Group_UtilisationByQuantityDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.UtilisationByQuantityDelta7>%s</%sGroup.UtilisationByQuantityDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_UtilisationByQuantityDelta7, input_name='Group.UtilisationByQuantityDelta7'), namespaceprefix_ , eol_))
        if self.Group_UtilisationDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.UtilisationDelta1>%s</%sGroup.UtilisationDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_UtilisationDelta1, input_name='Group.UtilisationDelta1'), namespaceprefix_ , eol_))
        if self.Group_UtilisationDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.UtilisationDelta30>%s</%sGroup.UtilisationDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_UtilisationDelta30, input_name='Group.UtilisationDelta30'), namespaceprefix_ , eol_))
        if self.Group_UtilisationDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.UtilisationDelta7>%s</%sGroup.UtilisationDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_UtilisationDelta7, input_name='Group.UtilisationDelta7'), namespaceprefix_ , eol_))
        if self.Group_ValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ValueOnLoan>%s</%sGroup.ValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ValueOnLoan, input_name='Group.ValueOnLoan'), namespaceprefix_ , eol_))
        if self.Group_ValueOnLoanDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ValueOnLoanDelta1>%s</%sGroup.ValueOnLoanDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ValueOnLoanDelta1, input_name='Group.ValueOnLoanDelta1'), namespaceprefix_ , eol_))
        if self.Group_ValueOnLoanDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ValueOnLoanDelta1Pc>%s</%sGroup.ValueOnLoanDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ValueOnLoanDelta1Pc, input_name='Group.ValueOnLoanDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_ValueOnLoanDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ValueOnLoanDelta30>%s</%sGroup.ValueOnLoanDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ValueOnLoanDelta30, input_name='Group.ValueOnLoanDelta30'), namespaceprefix_ , eol_))
        if self.Group_ValueOnLoanDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ValueOnLoanDelta30Pc>%s</%sGroup.ValueOnLoanDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ValueOnLoanDelta30Pc, input_name='Group.ValueOnLoanDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_ValueOnLoanDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ValueOnLoanDelta7>%s</%sGroup.ValueOnLoanDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ValueOnLoanDelta7, input_name='Group.ValueOnLoanDelta7'), namespaceprefix_ , eol_))
        if self.Group_ValueOnLoanDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.ValueOnLoanDelta7Pc>%s</%sGroup.ValueOnLoanDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_ValueOnLoanDelta7Pc, input_name='Group.ValueOnLoanDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_VWAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAF>%s</%sGroup.VWAF>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAF, input_name='Group.VWAF'), namespaceprefix_ , eol_))
        if self.Group_VWAF1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAF1>%s</%sGroup.VWAF1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAF1, input_name='Group.VWAF1'), namespaceprefix_ , eol_))
        if self.Group_VWAF30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAF30>%s</%sGroup.VWAF30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAF30, input_name='Group.VWAF30'), namespaceprefix_ , eol_))
        if self.Group_VWAF7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAF7>%s</%sGroup.VWAF7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAF7, input_name='Group.VWAF7'), namespaceprefix_ , eol_))
        if self.Group_VWAFDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAFDelta>%s</%sGroup.VWAFDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAFDelta, input_name='Group.VWAFDelta'), namespaceprefix_ , eol_))
        if self.Group_VWAFDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAFDelta1>%s</%sGroup.VWAFDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAFDelta1, input_name='Group.VWAFDelta1'), namespaceprefix_ , eol_))
        if self.Group_VWAFDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAFDelta1Pc>%s</%sGroup.VWAFDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAFDelta1Pc, input_name='Group.VWAFDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_VWAFDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAFDelta30>%s</%sGroup.VWAFDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAFDelta30, input_name='Group.VWAFDelta30'), namespaceprefix_ , eol_))
        if self.Group_VWAFDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAFDelta30Pc>%s</%sGroup.VWAFDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAFDelta30Pc, input_name='Group.VWAFDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_VWAFDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAFDelta7>%s</%sGroup.VWAFDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAFDelta7, input_name='Group.VWAFDelta7'), namespaceprefix_ , eol_))
        if self.Group_VWAFDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAFDelta7Pc>%s</%sGroup.VWAFDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAFDelta7Pc, input_name='Group.VWAFDelta7Pc'), namespaceprefix_ , eol_))
        if self.Group_VWAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAR>%s</%sGroup.VWAR>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAR, input_name='Group.VWAR'), namespaceprefix_ , eol_))
        if self.Group_VWAR1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAR1>%s</%sGroup.VWAR1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAR1, input_name='Group.VWAR1'), namespaceprefix_ , eol_))
        if self.Group_VWAR30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAR30>%s</%sGroup.VWAR30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAR30, input_name='Group.VWAR30'), namespaceprefix_ , eol_))
        if self.Group_VWAR7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWAR7>%s</%sGroup.VWAR7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWAR7, input_name='Group.VWAR7'), namespaceprefix_ , eol_))
        if self.Group_VWARDelta1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWARDelta1>%s</%sGroup.VWARDelta1>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWARDelta1, input_name='Group.VWARDelta1'), namespaceprefix_ , eol_))
        if self.Group_VWARDelta1Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWARDelta1Pc>%s</%sGroup.VWARDelta1Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWARDelta1Pc, input_name='Group.VWARDelta1Pc'), namespaceprefix_ , eol_))
        if self.Group_VWARDelta30 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWARDelta30>%s</%sGroup.VWARDelta30>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWARDelta30, input_name='Group.VWARDelta30'), namespaceprefix_ , eol_))
        if self.Group_VWARDelta30Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWARDelta30Pc>%s</%sGroup.VWARDelta30Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWARDelta30Pc, input_name='Group.VWARDelta30Pc'), namespaceprefix_ , eol_))
        if self.Group_VWARDelta7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWARDelta7>%s</%sGroup.VWARDelta7>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWARDelta7, input_name='Group.VWARDelta7'), namespaceprefix_ , eol_))
        if self.Group_VWARDelta7Pc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroup.VWARDelta7Pc>%s</%sGroup.VWARDelta7Pc>%s' % (namespaceprefix_ , self.gds_format_float(self.Group_VWARDelta7Pc, input_name='Group.VWARDelta7Pc'), namespaceprefix_ , eol_))
        if self.LatestDataDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLatestDataDate>%s</%sLatestDataDate>%s' % (namespaceprefix_ , self.gds_format_float(self.LatestDataDate, input_name='LatestDataDate'), namespaceprefix_ , eol_))
        if self.Transaction_ComparativeDailyCostIndicative is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.ComparativeDailyCostIndicative>%s</%sTransaction.ComparativeDailyCostIndicative>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_ComparativeDailyCostIndicative, input_name='Transaction.ComparativeDailyCostIndicative'), namespaceprefix_ , eol_))
        if self.Transaction_ComparativeDailyCostMySA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.ComparativeDailyCostMySA>%s</%sTransaction.ComparativeDailyCostMySA>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_ComparativeDailyCostMySA, input_name='Transaction.ComparativeDailyCostMySA'), namespaceprefix_ , eol_))
        if self.Transaction_ComparativeDailyCostSA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.ComparativeDailyCostSA>%s</%sTransaction.ComparativeDailyCostSA>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_ComparativeDailyCostSA, input_name='Transaction.ComparativeDailyCostSA'), namespaceprefix_ , eol_))
        if self.Transaction_DailyCost is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.DailyCost>%s</%sTransaction.DailyCost>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_DailyCost, input_name='Transaction.DailyCost'), namespaceprefix_ , eol_))
        if self.Transaction_DailyCostDifferenceIndicative is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.DailyCostDifferenceIndicative>%s</%sTransaction.DailyCostDifferenceIndicative>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_DailyCostDifferenceIndicative, input_name='Transaction.DailyCostDifferenceIndicative'), namespaceprefix_ , eol_))
        if self.Transaction_DailyCostDifferenceMySA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.DailyCostDifferenceMySA>%s</%sTransaction.DailyCostDifferenceMySA>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_DailyCostDifferenceMySA, input_name='Transaction.DailyCostDifferenceMySA'), namespaceprefix_ , eol_))
        if self.Transaction_DailyCostDifferenceSA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.DailyCostDifferenceSA>%s</%sTransaction.DailyCostDifferenceSA>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_DailyCostDifferenceSA, input_name='Transaction.DailyCostDifferenceSA'), namespaceprefix_ , eol_))
        if self.Transaction_DividendRequirement is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.DividendRequirement>%s</%sTransaction.DividendRequirement>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_DividendRequirement, input_name='Transaction.DividendRequirement'), namespaceprefix_ , eol_))
        if self.Transaction_Duration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.Duration>%s</%sTransaction.Duration>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_Duration, input_name='Transaction.Duration'), namespaceprefix_ , eol_))
        if self.Transaction_Fee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.Fee>%s</%sTransaction.Fee>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_Fee, input_name='Transaction.Fee'), namespaceprefix_ , eol_))
        if self.Transaction_Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.Quantity>%s</%sTransaction.Quantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_Quantity, input_name='Transaction.Quantity'), namespaceprefix_ , eol_))
        if self.Transaction_RateVarianceIndicative is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.RateVarianceIndicative>%s</%sTransaction.RateVarianceIndicative>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_RateVarianceIndicative, input_name='Transaction.RateVarianceIndicative'), namespaceprefix_ , eol_))
        if self.Transaction_RateVarianceMySA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.RateVarianceMySA>%s</%sTransaction.RateVarianceMySA>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_RateVarianceMySA, input_name='Transaction.RateVarianceMySA'), namespaceprefix_ , eol_))
        if self.Transaction_RateVarianceSA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.RateVarianceSA>%s</%sTransaction.RateVarianceSA>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_RateVarianceSA, input_name='Transaction.RateVarianceSA'), namespaceprefix_ , eol_))
        if self.Transaction_Rebate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.Rebate>%s</%sTransaction.Rebate>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_Rebate, input_name='Transaction.Rebate'), namespaceprefix_ , eol_))
        if self.Transaction_StartDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.StartDate>%s</%sTransaction.StartDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Transaction_StartDate, input_name='Transaction.StartDate'), namespaceprefix_ , eol_))
        if self.Transaction_TransactionFee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.TransactionFee>%s</%sTransaction.TransactionFee>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_TransactionFee, input_name='Transaction.TransactionFee'), namespaceprefix_ , eol_))
        if self.Transaction_Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransaction.Value>%s</%sTransaction.Value>%s' % (namespaceprefix_ , self.gds_format_float(self.Transaction_Value, input_name='Transaction.Value'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Client.AvailableQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_AvailableQuantity')
            self.Client_AvailableQuantity = fval_
        elif nodeName_ == 'Client.AvailableQuantityDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_AvailableQuantityDelta1')
            self.Client_AvailableQuantityDelta1 = fval_
        elif nodeName_ == 'Client.AvailableQuantityDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_AvailableQuantityDelta1Pc')
            self.Client_AvailableQuantityDelta1Pc = fval_
        elif nodeName_ == 'Client.AvailableQuantityDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_AvailableQuantityDelta30')
            self.Client_AvailableQuantityDelta30 = fval_
        elif nodeName_ == 'Client.AvailableQuantityDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_AvailableQuantityDelta30Pc')
            self.Client_AvailableQuantityDelta30Pc = fval_
        elif nodeName_ == 'Client.AvailableQuantityDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_AvailableQuantityDelta7')
            self.Client_AvailableQuantityDelta7 = fval_
        elif nodeName_ == 'Client.AvailableQuantityDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_AvailableQuantityDelta7Pc')
            self.Client_AvailableQuantityDelta7Pc = fval_
        elif nodeName_ == 'Client.AvailableValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_AvailableValue')
            self.Client_AvailableValue = fval_
        elif nodeName_ == 'Client.AvailableValueDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_AvailableValueDelta1')
            self.Client_AvailableValueDelta1 = fval_
        elif nodeName_ == 'Client.AvailableValueDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_AvailableValueDelta1Pc')
            self.Client_AvailableValueDelta1Pc = fval_
        elif nodeName_ == 'Client.AvailableValueDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_AvailableValueDelta30')
            self.Client_AvailableValueDelta30 = fval_
        elif nodeName_ == 'Client.AvailableValueDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_AvailableValueDelta30Pc')
            self.Client_AvailableValueDelta30Pc = fval_
        elif nodeName_ == 'Client.AvailableValueDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_AvailableValueDelta7')
            self.Client_AvailableValueDelta7 = fval_
        elif nodeName_ == 'Client.AvailableValueDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_AvailableValueDelta7Pc')
            self.Client_AvailableValueDelta7Pc = fval_
        elif nodeName_ == 'Client.DailyCost' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_DailyCost')
            self.Client_DailyCost = fval_
        elif nodeName_ == 'Client.DailyCostCombined' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_DailyCostCombined')
            self.Client_DailyCostCombined = fval_
        elif nodeName_ == 'Client.DailyRevenue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_DailyRevenue')
            self.Client_DailyRevenue = fval_
        elif nodeName_ == 'Client.LendableQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_LendableQuantity')
            self.Client_LendableQuantity = fval_
        elif nodeName_ == 'Client.LendableQuantityDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_LendableQuantityDelta1')
            self.Client_LendableQuantityDelta1 = fval_
        elif nodeName_ == 'Client.LendableQuantityDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_LendableQuantityDelta1Pc')
            self.Client_LendableQuantityDelta1Pc = fval_
        elif nodeName_ == 'Client.LendableQuantityDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_LendableQuantityDelta30')
            self.Client_LendableQuantityDelta30 = fval_
        elif nodeName_ == 'Client.LendableQuantityDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_LendableQuantityDelta30Pc')
            self.Client_LendableQuantityDelta30Pc = fval_
        elif nodeName_ == 'Client.LendableQuantityDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_LendableQuantityDelta7')
            self.Client_LendableQuantityDelta7 = fval_
        elif nodeName_ == 'Client.LendableQuantityDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_LendableQuantityDelta7Pc')
            self.Client_LendableQuantityDelta7Pc = fval_
        elif nodeName_ == 'Client.LendableValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_LendableValue')
            self.Client_LendableValue = fval_
        elif nodeName_ == 'Client.LendableValueDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_LendableValueDelta1')
            self.Client_LendableValueDelta1 = fval_
        elif nodeName_ == 'Client.LendableValueDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_LendableValueDelta1Pc')
            self.Client_LendableValueDelta1Pc = fval_
        elif nodeName_ == 'Client.LendableValueDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_LendableValueDelta30')
            self.Client_LendableValueDelta30 = fval_
        elif nodeName_ == 'Client.LendableValueDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_LendableValueDelta30Pc')
            self.Client_LendableValueDelta30Pc = fval_
        elif nodeName_ == 'Client.LendableValueDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_LendableValueDelta7')
            self.Client_LendableValueDelta7 = fval_
        elif nodeName_ == 'Client.LendableValueDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_LendableValueDelta7Pc')
            self.Client_LendableValueDelta7Pc = fval_
        elif nodeName_ == 'Client.MarketShare' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_MarketShare')
            self.Client_MarketShare = fval_
        elif nodeName_ == 'Client.MarketShareDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_MarketShareDelta1')
            self.Client_MarketShareDelta1 = fval_
        elif nodeName_ == 'Client.MarketShareDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_MarketShareDelta30')
            self.Client_MarketShareDelta30 = fval_
        elif nodeName_ == 'Client.MarketShareDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_MarketShareDelta7')
            self.Client_MarketShareDelta7 = fval_
        elif nodeName_ == 'Client.MarketShareRank' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_MarketShareRank')
            self.Client_MarketShareRank = fval_
        elif nodeName_ == 'Client.OpportunityGainLoss' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_OpportunityGainLoss')
            self.Client_OpportunityGainLoss = fval_
        elif nodeName_ == 'Client.QuantityOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_QuantityOnLoan')
            self.Client_QuantityOnLoan = fval_
        elif nodeName_ == 'Client.QuantityOnLoanDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_QuantityOnLoanDelta1')
            self.Client_QuantityOnLoanDelta1 = fval_
        elif nodeName_ == 'Client.QuantityOnLoanDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_QuantityOnLoanDelta1Pc')
            self.Client_QuantityOnLoanDelta1Pc = fval_
        elif nodeName_ == 'Client.QuantityOnLoanDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_QuantityOnLoanDelta30')
            self.Client_QuantityOnLoanDelta30 = fval_
        elif nodeName_ == 'Client.QuantityOnLoanDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_QuantityOnLoanDelta30Pc')
            self.Client_QuantityOnLoanDelta30Pc = fval_
        elif nodeName_ == 'Client.QuantityOnLoanDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_QuantityOnLoanDelta7')
            self.Client_QuantityOnLoanDelta7 = fval_
        elif nodeName_ == 'Client.QuantityOnLoanDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_QuantityOnLoanDelta7Pc')
            self.Client_QuantityOnLoanDelta7Pc = fval_
        elif nodeName_ == 'Client.SAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SAF')
            self.Client_SAF = fval_
        elif nodeName_ == 'Client.SAFDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SAFDelta1')
            self.Client_SAFDelta1 = fval_
        elif nodeName_ == 'Client.SAFDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SAFDelta1Pc')
            self.Client_SAFDelta1Pc = fval_
        elif nodeName_ == 'Client.SAFDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SAFDelta30')
            self.Client_SAFDelta30 = fval_
        elif nodeName_ == 'Client.SAFDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SAFDelta30Pc')
            self.Client_SAFDelta30Pc = fval_
        elif nodeName_ == 'Client.SAFDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SAFDelta7')
            self.Client_SAFDelta7 = fval_
        elif nodeName_ == 'Client.SAFDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SAFDelta7Pc')
            self.Client_SAFDelta7Pc = fval_
        elif nodeName_ == 'Client.SAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SAR')
            self.Client_SAR = fval_
        elif nodeName_ == 'Client.SARDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SARDelta1')
            self.Client_SARDelta1 = fval_
        elif nodeName_ == 'Client.SARDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SARDelta1Pc')
            self.Client_SARDelta1Pc = fval_
        elif nodeName_ == 'Client.SARDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SARDelta30')
            self.Client_SARDelta30 = fval_
        elif nodeName_ == 'Client.SARDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SARDelta30Pc')
            self.Client_SARDelta30Pc = fval_
        elif nodeName_ == 'Client.SARDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SARDelta7')
            self.Client_SARDelta7 = fval_
        elif nodeName_ == 'Client.SARDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SARDelta7Pc')
            self.Client_SARDelta7Pc = fval_
        elif nodeName_ == 'Client.SATenure' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_SATenure')
            self.Client_SATenure = fval_
        elif nodeName_ == 'Client.Utilisation' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_Utilisation')
            self.Client_Utilisation = fval_
        elif nodeName_ == 'Client.UtilisationByQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_UtilisationByQuantity')
            self.Client_UtilisationByQuantity = fval_
        elif nodeName_ == 'Client.UtilisationByQuantityDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_UtilisationByQuantityDelta1')
            self.Client_UtilisationByQuantityDelta1 = fval_
        elif nodeName_ == 'Client.UtilisationByQuantityDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_UtilisationByQuantityDelta30')
            self.Client_UtilisationByQuantityDelta30 = fval_
        elif nodeName_ == 'Client.UtilisationByQuantityDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_UtilisationByQuantityDelta7')
            self.Client_UtilisationByQuantityDelta7 = fval_
        elif nodeName_ == 'Client.UtilisationDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_UtilisationDelta1')
            self.Client_UtilisationDelta1 = fval_
        elif nodeName_ == 'Client.UtilisationDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_UtilisationDelta30')
            self.Client_UtilisationDelta30 = fval_
        elif nodeName_ == 'Client.UtilisationDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_UtilisationDelta7')
            self.Client_UtilisationDelta7 = fval_
        elif nodeName_ == 'Client.ValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_ValueOnLoan')
            self.Client_ValueOnLoan = fval_
        elif nodeName_ == 'Client.ValueOnLoanDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_ValueOnLoanDelta1')
            self.Client_ValueOnLoanDelta1 = fval_
        elif nodeName_ == 'Client.ValueOnLoanDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_ValueOnLoanDelta1Pc')
            self.Client_ValueOnLoanDelta1Pc = fval_
        elif nodeName_ == 'Client.ValueOnLoanDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_ValueOnLoanDelta30')
            self.Client_ValueOnLoanDelta30 = fval_
        elif nodeName_ == 'Client.ValueOnLoanDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_ValueOnLoanDelta30Pc')
            self.Client_ValueOnLoanDelta30Pc = fval_
        elif nodeName_ == 'Client.ValueOnLoanDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_ValueOnLoanDelta7')
            self.Client_ValueOnLoanDelta7 = fval_
        elif nodeName_ == 'Client.ValueOnLoanDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_ValueOnLoanDelta7Pc')
            self.Client_ValueOnLoanDelta7Pc = fval_
        elif nodeName_ == 'Client.VWAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWAF')
            self.Client_VWAF = fval_
        elif nodeName_ == 'Client.VWAF1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWAF1')
            self.Client_VWAF1 = fval_
        elif nodeName_ == 'Client.VWAF30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWAF30')
            self.Client_VWAF30 = fval_
        elif nodeName_ == 'Client.VWAF7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWAF7')
            self.Client_VWAF7 = fval_
        elif nodeName_ == 'Client.VWAFDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWAFDelta1')
            self.Client_VWAFDelta1 = fval_
        elif nodeName_ == 'Client.VWAFDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWAFDelta1Pc')
            self.Client_VWAFDelta1Pc = fval_
        elif nodeName_ == 'Client.VWAFDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWAFDelta30')
            self.Client_VWAFDelta30 = fval_
        elif nodeName_ == 'Client.VWAFDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWAFDelta30Pc')
            self.Client_VWAFDelta30Pc = fval_
        elif nodeName_ == 'Client.VWAFDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWAFDelta7')
            self.Client_VWAFDelta7 = fval_
        elif nodeName_ == 'Client.VWAFDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWAFDelta7Pc')
            self.Client_VWAFDelta7Pc = fval_
        elif nodeName_ == 'Client.VWAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWAR')
            self.Client_VWAR = fval_
        elif nodeName_ == 'Client.VWAR1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWAR1')
            self.Client_VWAR1 = fval_
        elif nodeName_ == 'Client.VWAR30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWAR30')
            self.Client_VWAR30 = fval_
        elif nodeName_ == 'Client.VWAR7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWAR7')
            self.Client_VWAR7 = fval_
        elif nodeName_ == 'Client.VWARDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWARDelta1')
            self.Client_VWARDelta1 = fval_
        elif nodeName_ == 'Client.VWARDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWARDelta1Pc')
            self.Client_VWARDelta1Pc = fval_
        elif nodeName_ == 'Client.VWARDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWARDelta30')
            self.Client_VWARDelta30 = fval_
        elif nodeName_ == 'Client.VWARDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWARDelta30Pc')
            self.Client_VWARDelta30Pc = fval_
        elif nodeName_ == 'Client.VWARDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWARDelta7')
            self.Client_VWARDelta7 = fval_
        elif nodeName_ == 'Client.VWARDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Client_VWARDelta7Pc')
            self.Client_VWARDelta7Pc = fval_
        elif nodeName_ == 'Group.ActiveAvailableQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveAvailableQuantity')
            self.Group_ActiveAvailableQuantity = fval_
        elif nodeName_ == 'Group.ActiveAvailableQuantityDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveAvailableQuantityDelta1')
            self.Group_ActiveAvailableQuantityDelta1 = fval_
        elif nodeName_ == 'Group.ActiveAvailableQuantityDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveAvailableQuantityDelta1Pc')
            self.Group_ActiveAvailableQuantityDelta1Pc = fval_
        elif nodeName_ == 'Group.ActiveAvailableQuantityDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveAvailableQuantityDelta30')
            self.Group_ActiveAvailableQuantityDelta30 = fval_
        elif nodeName_ == 'Group.ActiveAvailableQuantityDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveAvailableQuantityDelta30Pc')
            self.Group_ActiveAvailableQuantityDelta30Pc = fval_
        elif nodeName_ == 'Group.ActiveAvailableQuantityDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveAvailableQuantityDelta7')
            self.Group_ActiveAvailableQuantityDelta7 = fval_
        elif nodeName_ == 'Group.ActiveAvailableQuantityDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveAvailableQuantityDelta7Pc')
            self.Group_ActiveAvailableQuantityDelta7Pc = fval_
        elif nodeName_ == 'Group.ActiveAvailableValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveAvailableValue')
            self.Group_ActiveAvailableValue = fval_
        elif nodeName_ == 'Group.ActiveAvailableValueDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveAvailableValueDelta1')
            self.Group_ActiveAvailableValueDelta1 = fval_
        elif nodeName_ == 'Group.ActiveAvailableValueDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveAvailableValueDelta1Pc')
            self.Group_ActiveAvailableValueDelta1Pc = fval_
        elif nodeName_ == 'Group.ActiveAvailableValueDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveAvailableValueDelta30')
            self.Group_ActiveAvailableValueDelta30 = fval_
        elif nodeName_ == 'Group.ActiveAvailableValueDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveAvailableValueDelta30Pc')
            self.Group_ActiveAvailableValueDelta30Pc = fval_
        elif nodeName_ == 'Group.ActiveAvailableValueDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveAvailableValueDelta7')
            self.Group_ActiveAvailableValueDelta7 = fval_
        elif nodeName_ == 'Group.ActiveAvailableValueDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveAvailableValueDelta7Pc')
            self.Group_ActiveAvailableValueDelta7Pc = fval_
        elif nodeName_ == 'Group.ActiveLendableQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendableQuantity')
            self.Group_ActiveLendableQuantity = fval_
        elif nodeName_ == 'Group.ActiveLendableQuantityDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendableQuantityDelta1')
            self.Group_ActiveLendableQuantityDelta1 = fval_
        elif nodeName_ == 'Group.ActiveLendableQuantityDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendableQuantityDelta1Pc')
            self.Group_ActiveLendableQuantityDelta1Pc = fval_
        elif nodeName_ == 'Group.ActiveLendableQuantityDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendableQuantityDelta30')
            self.Group_ActiveLendableQuantityDelta30 = fval_
        elif nodeName_ == 'Group.ActiveLendableQuantityDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendableQuantityDelta30Pc')
            self.Group_ActiveLendableQuantityDelta30Pc = fval_
        elif nodeName_ == 'Group.ActiveLendableQuantityDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendableQuantityDelta7')
            self.Group_ActiveLendableQuantityDelta7 = fval_
        elif nodeName_ == 'Group.ActiveLendableQuantityDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendableQuantityDelta7Pc')
            self.Group_ActiveLendableQuantityDelta7Pc = fval_
        elif nodeName_ == 'Group.ActiveLendableValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendableValue')
            self.Group_ActiveLendableValue = fval_
        elif nodeName_ == 'Group.ActiveLendableValueDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendableValueDelta1')
            self.Group_ActiveLendableValueDelta1 = fval_
        elif nodeName_ == 'Group.ActiveLendableValueDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendableValueDelta1Pc')
            self.Group_ActiveLendableValueDelta1Pc = fval_
        elif nodeName_ == 'Group.ActiveLendableValueDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendableValueDelta30')
            self.Group_ActiveLendableValueDelta30 = fval_
        elif nodeName_ == 'Group.ActiveLendableValueDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendableValueDelta30Pc')
            self.Group_ActiveLendableValueDelta30Pc = fval_
        elif nodeName_ == 'Group.ActiveLendableValueDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendableValueDelta7')
            self.Group_ActiveLendableValueDelta7 = fval_
        elif nodeName_ == 'Group.ActiveLendableValueDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendableValueDelta7Pc')
            self.Group_ActiveLendableValueDelta7Pc = fval_
        elif nodeName_ == 'Group.ActiveLendingAgents' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveLendingAgents')
            self.Group_ActiveLendingAgents = fval_
        elif nodeName_ == 'Group.ActiveUtilisation' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveUtilisation')
            self.Group_ActiveUtilisation = fval_
        elif nodeName_ == 'Group.ActiveUtilisationByQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveUtilisationByQuantity')
            self.Group_ActiveUtilisationByQuantity = fval_
        elif nodeName_ == 'Group.ActiveUtilisationByQuantityDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveUtilisationByQuantityDelta1')
            self.Group_ActiveUtilisationByQuantityDelta1 = fval_
        elif nodeName_ == 'Group.ActiveUtilisationByQuantityDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveUtilisationByQuantityDelta30')
            self.Group_ActiveUtilisationByQuantityDelta30 = fval_
        elif nodeName_ == 'Group.ActiveUtilisationByQuantityDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveUtilisationByQuantityDelta7')
            self.Group_ActiveUtilisationByQuantityDelta7 = fval_
        elif nodeName_ == 'Group.ActiveUtilisationDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveUtilisationDelta1')
            self.Group_ActiveUtilisationDelta1 = fval_
        elif nodeName_ == 'Group.ActiveUtilisationDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveUtilisationDelta30')
            self.Group_ActiveUtilisationDelta30 = fval_
        elif nodeName_ == 'Group.ActiveUtilisationDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ActiveUtilisationDelta7')
            self.Group_ActiveUtilisationDelta7 = fval_
        elif nodeName_ == 'Group.AvailableQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableQuantity')
            self.Group_AvailableQuantity = fval_
        elif nodeName_ == 'Group.AvailableQuantityDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableQuantityDelta1')
            self.Group_AvailableQuantityDelta1 = fval_
        elif nodeName_ == 'Group.AvailableQuantityDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableQuantityDelta1Pc')
            self.Group_AvailableQuantityDelta1Pc = fval_
        elif nodeName_ == 'Group.AvailableQuantityDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableQuantityDelta30')
            self.Group_AvailableQuantityDelta30 = fval_
        elif nodeName_ == 'Group.AvailableQuantityDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableQuantityDelta30Pc')
            self.Group_AvailableQuantityDelta30Pc = fval_
        elif nodeName_ == 'Group.AvailableQuantityDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableQuantityDelta7')
            self.Group_AvailableQuantityDelta7 = fval_
        elif nodeName_ == 'Group.AvailableQuantityDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableQuantityDelta7Pc')
            self.Group_AvailableQuantityDelta7Pc = fval_
        elif nodeName_ == 'Group.AvailableQuantityStability' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableQuantityStability')
            self.Group_AvailableQuantityStability = fval_
        elif nodeName_ == 'Group.AvailableValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableValue')
            self.Group_AvailableValue = fval_
        elif nodeName_ == 'Group.AvailableValueDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableValueDelta1')
            self.Group_AvailableValueDelta1 = fval_
        elif nodeName_ == 'Group.AvailableValueDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableValueDelta1Pc')
            self.Group_AvailableValueDelta1Pc = fval_
        elif nodeName_ == 'Group.AvailableValueDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableValueDelta30')
            self.Group_AvailableValueDelta30 = fval_
        elif nodeName_ == 'Group.AvailableValueDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableValueDelta30Pc')
            self.Group_AvailableValueDelta30Pc = fval_
        elif nodeName_ == 'Group.AvailableValueDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableValueDelta7')
            self.Group_AvailableValueDelta7 = fval_
        elif nodeName_ == 'Group.AvailableValueDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableValueDelta7Pc')
            self.Group_AvailableValueDelta7Pc = fval_
        elif nodeName_ == 'Group.AvailableValueStability' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_AvailableValueStability')
            self.Group_AvailableValueStability = fval_
        elif nodeName_ == 'Group.BenchmarkFee' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BenchmarkFee')
            self.Group_BenchmarkFee = fval_
        elif nodeName_ == 'Group.BenchmarkFeeDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BenchmarkFeeDelta1')
            self.Group_BenchmarkFeeDelta1 = fval_
        elif nodeName_ == 'Group.BenchmarkFeeDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BenchmarkFeeDelta1Pc')
            self.Group_BenchmarkFeeDelta1Pc = fval_
        elif nodeName_ == 'Group.BenchmarkFeeDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BenchmarkFeeDelta30')
            self.Group_BenchmarkFeeDelta30 = fval_
        elif nodeName_ == 'Group.BenchmarkFeeDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BenchmarkFeeDelta30Pc')
            self.Group_BenchmarkFeeDelta30Pc = fval_
        elif nodeName_ == 'Group.BenchmarkFeeDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BenchmarkFeeDelta7')
            self.Group_BenchmarkFeeDelta7 = fval_
        elif nodeName_ == 'Group.BenchmarkFeeDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BenchmarkFeeDelta7Pc')
            self.Group_BenchmarkFeeDelta7Pc = fval_
        elif nodeName_ == 'Group.BenchmarkRebate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BenchmarkRebate')
            self.Group_BenchmarkRebate = fval_
        elif nodeName_ == 'Group.BenchmarkRebateDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BenchmarkRebateDelta1')
            self.Group_BenchmarkRebateDelta1 = fval_
        elif nodeName_ == 'Group.BenchmarkRebateDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BenchmarkRebateDelta1Pc')
            self.Group_BenchmarkRebateDelta1Pc = fval_
        elif nodeName_ == 'Group.BenchmarkRebateDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BenchmarkRebateDelta30')
            self.Group_BenchmarkRebateDelta30 = fval_
        elif nodeName_ == 'Group.BenchmarkRebateDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BenchmarkRebateDelta30Pc')
            self.Group_BenchmarkRebateDelta30Pc = fval_
        elif nodeName_ == 'Group.BenchmarkRebateDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BenchmarkRebateDelta7')
            self.Group_BenchmarkRebateDelta7 = fval_
        elif nodeName_ == 'Group.BenchmarkRebateDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BenchmarkRebateDelta7Pc')
            self.Group_BenchmarkRebateDelta7Pc = fval_
        elif nodeName_ == 'Group.BorrowerConcentration' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_BorrowerConcentration')
            self.Group_BorrowerConcentration = fval_
        elif nodeName_ == 'Group.CompositeScore' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_CompositeScore')
            self.Group_CompositeScore = fval_
        elif nodeName_ == 'Group.DaysToCover' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_DaysToCover')
            self.Group_DaysToCover = fval_
        elif nodeName_ == 'Group.DaysToCoverDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_DaysToCoverDelta1')
            self.Group_DaysToCoverDelta1 = fval_
        elif nodeName_ == 'Group.DaysToCoverDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_DaysToCoverDelta1Pc')
            self.Group_DaysToCoverDelta1Pc = fval_
        elif nodeName_ == 'Group.DaysToCoverDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_DaysToCoverDelta30')
            self.Group_DaysToCoverDelta30 = fval_
        elif nodeName_ == 'Group.DaysToCoverDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_DaysToCoverDelta30Pc')
            self.Group_DaysToCoverDelta30Pc = fval_
        elif nodeName_ == 'Group.DaysToCoverDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_DaysToCoverDelta7')
            self.Group_DaysToCoverDelta7 = fval_
        elif nodeName_ == 'Group.DaysToCoverDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_DaysToCoverDelta7Pc')
            self.Group_DaysToCoverDelta7Pc = fval_
        elif nodeName_ == 'Group.IndicativeFee' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_IndicativeFee')
            self.Group_IndicativeFee = fval_
        elif nodeName_ == 'Group.IndicativeFeeDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_IndicativeFeeDelta1')
            self.Group_IndicativeFeeDelta1 = fval_
        elif nodeName_ == 'Group.IndicativeFeeDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_IndicativeFeeDelta30')
            self.Group_IndicativeFeeDelta30 = fval_
        elif nodeName_ == 'Group.IndicativeFeeDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_IndicativeFeeDelta7')
            self.Group_IndicativeFeeDelta7 = fval_
        elif nodeName_ == 'Group.IndicativeRebate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_IndicativeRebate')
            self.Group_IndicativeRebate = fval_
        elif nodeName_ == 'Group.IndicativeRebateDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_IndicativeRebateDelta1')
            self.Group_IndicativeRebateDelta1 = fval_
        elif nodeName_ == 'Group.IndicativeRebateDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_IndicativeRebateDelta30')
            self.Group_IndicativeRebateDelta30 = fval_
        elif nodeName_ == 'Group.IndicativeRebateDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_IndicativeRebateDelta7')
            self.Group_IndicativeRebateDelta7 = fval_
        elif nodeName_ == 'Group.InventoryConcentration' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_InventoryConcentration')
            self.Group_InventoryConcentration = fval_
        elif nodeName_ == 'Group.LendableQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableQuantity')
            self.Group_LendableQuantity = fval_
        elif nodeName_ == 'Group.LendableQuantityDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableQuantityDelta1')
            self.Group_LendableQuantityDelta1 = fval_
        elif nodeName_ == 'Group.LendableQuantityDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableQuantityDelta1Pc')
            self.Group_LendableQuantityDelta1Pc = fval_
        elif nodeName_ == 'Group.LendableQuantityDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableQuantityDelta30')
            self.Group_LendableQuantityDelta30 = fval_
        elif nodeName_ == 'Group.LendableQuantityDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableQuantityDelta30Pc')
            self.Group_LendableQuantityDelta30Pc = fval_
        elif nodeName_ == 'Group.LendableQuantityDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableQuantityDelta7')
            self.Group_LendableQuantityDelta7 = fval_
        elif nodeName_ == 'Group.LendableQuantityDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableQuantityDelta7Pc')
            self.Group_LendableQuantityDelta7Pc = fval_
        elif nodeName_ == 'Group.LendableQuantityStability' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableQuantityStability')
            self.Group_LendableQuantityStability = fval_
        elif nodeName_ == 'Group.LendableValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableValue')
            self.Group_LendableValue = fval_
        elif nodeName_ == 'Group.LendableValueDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableValueDelta1')
            self.Group_LendableValueDelta1 = fval_
        elif nodeName_ == 'Group.LendableValueDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableValueDelta1Pc')
            self.Group_LendableValueDelta1Pc = fval_
        elif nodeName_ == 'Group.LendableValueDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableValueDelta30')
            self.Group_LendableValueDelta30 = fval_
        elif nodeName_ == 'Group.LendableValueDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableValueDelta30Pc')
            self.Group_LendableValueDelta30Pc = fval_
        elif nodeName_ == 'Group.LendableValueDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableValueDelta7')
            self.Group_LendableValueDelta7 = fval_
        elif nodeName_ == 'Group.LendableValueDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableValueDelta7Pc')
            self.Group_LendableValueDelta7Pc = fval_
        elif nodeName_ == 'Group.LendableValueStability' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LendableValueStability')
            self.Group_LendableValueStability = fval_
        elif nodeName_ == 'Group.LenderConcentration' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LenderConcentration')
            self.Group_LenderConcentration = fval_
        elif nodeName_ == 'Group.LenderQuantityOnLoanStability' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LenderQuantityOnLoanStability')
            self.Group_LenderQuantityOnLoanStability = fval_
        elif nodeName_ == 'Group.LenderValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LenderValueOnLoan')
            self.Group_LenderValueOnLoan = fval_
        elif nodeName_ == 'Group.LenderValueOnLoanStability' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_LenderValueOnLoanStability')
            self.Group_LenderValueOnLoanStability = fval_
        elif nodeName_ == 'Group.MarketCap' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_MarketCap')
            self.Group_MarketCap = fval_
        elif nodeName_ == 'Group.NewPositions' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_NewPositions')
            self.Group_NewPositions = fval_
        elif nodeName_ == 'Group.OutOfMoneyPct' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_OutOfMoneyPct')
            self.Group_OutOfMoneyPct = fval_
        elif nodeName_ == 'Group.PcFreeFloatValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_PcFreeFloatValueOnLoan')
            self.Group_PcFreeFloatValueOnLoan = fval_
        elif nodeName_ == 'Group.PcIssueValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_PcIssueValueOnLoan')
            self.Group_PcIssueValueOnLoan = fval_
        elif nodeName_ == 'Group.PcIssueValueOnLoanDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_PcIssueValueOnLoanDelta1')
            self.Group_PcIssueValueOnLoanDelta1 = fval_
        elif nodeName_ == 'Group.PcIssueValueOnLoanDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_PcIssueValueOnLoanDelta30')
            self.Group_PcIssueValueOnLoanDelta30 = fval_
        elif nodeName_ == 'Group.PcIssueValueOnLoanDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_PcIssueValueOnLoanDelta7')
            self.Group_PcIssueValueOnLoanDelta7 = fval_
        elif nodeName_ == 'Group.PcSharesOutstandingOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_PcSharesOutstandingOnLoan')
            self.Group_PcSharesOutstandingOnLoan = fval_
        elif nodeName_ == 'Group.PcSharesOutstandingOnLoanDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_PcSharesOutstandingOnLoanDelta1')
            self.Group_PcSharesOutstandingOnLoanDelta1 = fval_
        elif nodeName_ == 'Group.PcSharesOutstandingOnLoanDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_PcSharesOutstandingOnLoanDelta30')
            self.Group_PcSharesOutstandingOnLoanDelta30 = fval_
        elif nodeName_ == 'Group.PcSharesOutstandingOnLoanDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_PcSharesOutstandingOnLoanDelta7')
            self.Group_PcSharesOutstandingOnLoanDelta7 = fval_
        elif nodeName_ == 'Group.PriceDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_PriceDelta1')
            self.Group_PriceDelta1 = fval_
        elif nodeName_ == 'Group.PriceDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_PriceDelta30')
            self.Group_PriceDelta30 = fval_
        elif nodeName_ == 'Group.PriceDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_PriceDelta7')
            self.Group_PriceDelta7 = fval_
        elif nodeName_ == 'Group.PrimeBrokers' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_PrimeBrokers')
            self.Group_PrimeBrokers = fval_
        elif nodeName_ == 'Group.ProfitandLossImpact' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ProfitandLossImpact')
            self.Group_ProfitandLossImpact = fval_
        elif nodeName_ == 'Group.QuantityOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_QuantityOnLoan')
            self.Group_QuantityOnLoan = fval_
        elif nodeName_ == 'Group.QuantityOnLoanDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_QuantityOnLoanDelta1')
            self.Group_QuantityOnLoanDelta1 = fval_
        elif nodeName_ == 'Group.QuantityOnLoanDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_QuantityOnLoanDelta1Pc')
            self.Group_QuantityOnLoanDelta1Pc = fval_
        elif nodeName_ == 'Group.QuantityOnLoanDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_QuantityOnLoanDelta30')
            self.Group_QuantityOnLoanDelta30 = fval_
        elif nodeName_ == 'Group.QuantityOnLoanDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_QuantityOnLoanDelta30Pc')
            self.Group_QuantityOnLoanDelta30Pc = fval_
        elif nodeName_ == 'Group.QuantityOnLoanDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_QuantityOnLoanDelta7')
            self.Group_QuantityOnLoanDelta7 = fval_
        elif nodeName_ == 'Group.QuantityOnLoanDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_QuantityOnLoanDelta7Pc')
            self.Group_QuantityOnLoanDelta7Pc = fval_
        elif nodeName_ == 'Group.ReratePreviousVWAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ReratePreviousVWAF')
            self.Group_ReratePreviousVWAF = fval_
        elif nodeName_ == 'Group.ReratePreviousVWAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ReratePreviousVWAR')
            self.Group_ReratePreviousVWAR = fval_
        elif nodeName_ == 'Group.RerateTransactionCount' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_RerateTransactionCount')
            self.Group_RerateTransactionCount = fval_
        elif nodeName_ == 'Group.RerateTransactionCountDown' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_RerateTransactionCountDown')
            self.Group_RerateTransactionCountDown = fval_
        elif nodeName_ == 'Group.RerateTransactionCountUp' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_RerateTransactionCountUp')
            self.Group_RerateTransactionCountUp = fval_
        elif nodeName_ == 'Group.RerateValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_RerateValueOnLoan')
            self.Group_RerateValueOnLoan = fval_
        elif nodeName_ == 'Group.RerateValueOnLoanDown' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_RerateValueOnLoanDown')
            self.Group_RerateValueOnLoanDown = fval_
        elif nodeName_ == 'Group.RerateValueOnLoanUp' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_RerateValueOnLoanUp')
            self.Group_RerateValueOnLoanUp = fval_
        elif nodeName_ == 'Group.RerateVWAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_RerateVWAF')
            self.Group_RerateVWAF = fval_
        elif nodeName_ == 'Group.RerateVWAFDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_RerateVWAFDelta1')
            self.Group_RerateVWAFDelta1 = fval_
        elif nodeName_ == 'Group.RerateVWAFDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_RerateVWAFDelta1Pc')
            self.Group_RerateVWAFDelta1Pc = fval_
        elif nodeName_ == 'Group.RerateVWAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_RerateVWAR')
            self.Group_RerateVWAR = fval_
        elif nodeName_ == 'Group.RerateVWARDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_RerateVWARDelta1')
            self.Group_RerateVWARDelta1 = fval_
        elif nodeName_ == 'Group.RerateVWARDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_RerateVWARDelta1Pc')
            self.Group_RerateVWARDelta1Pc = fval_
        elif nodeName_ == 'Group.SAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SAF')
            self.Group_SAF = fval_
        elif nodeName_ == 'Group.SAFDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SAFDelta1')
            self.Group_SAFDelta1 = fval_
        elif nodeName_ == 'Group.SAFDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SAFDelta1Pc')
            self.Group_SAFDelta1Pc = fval_
        elif nodeName_ == 'Group.SAFDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SAFDelta30')
            self.Group_SAFDelta30 = fval_
        elif nodeName_ == 'Group.SAFDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SAFDelta30Pc')
            self.Group_SAFDelta30Pc = fval_
        elif nodeName_ == 'Group.SAFDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SAFDelta7')
            self.Group_SAFDelta7 = fval_
        elif nodeName_ == 'Group.SAFDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SAFDelta7Pc')
            self.Group_SAFDelta7Pc = fval_
        elif nodeName_ == 'Group.SAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SAR')
            self.Group_SAR = fval_
        elif nodeName_ == 'Group.SARDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SARDelta1')
            self.Group_SARDelta1 = fval_
        elif nodeName_ == 'Group.SARDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SARDelta1Pc')
            self.Group_SARDelta1Pc = fval_
        elif nodeName_ == 'Group.SARDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SARDelta30')
            self.Group_SARDelta30 = fval_
        elif nodeName_ == 'Group.SARDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SARDelta30Pc')
            self.Group_SARDelta30Pc = fval_
        elif nodeName_ == 'Group.SARDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SARDelta7')
            self.Group_SARDelta7 = fval_
        elif nodeName_ == 'Group.SARDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SARDelta7Pc')
            self.Group_SARDelta7Pc = fval_
        elif nodeName_ == 'Group.SATenure' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SATenure')
            self.Group_SATenure = fval_
        elif nodeName_ == 'Group.SharesOutstanding' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_SharesOutstanding')
            self.Group_SharesOutstanding = fval_
        elif nodeName_ == 'Group.ShortLoanQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ShortLoanQuantity')
            self.Group_ShortLoanQuantity = fval_
        elif nodeName_ == 'Group.ShortLoanValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ShortLoanValue')
            self.Group_ShortLoanValue = fval_
        elif nodeName_ == 'Group.TransactionDuration' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_TransactionDuration')
            self.Group_TransactionDuration = fval_
        elif nodeName_ == 'Group.Utilisation' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_Utilisation')
            self.Group_Utilisation = fval_
        elif nodeName_ == 'Group.UtilisationByQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_UtilisationByQuantity')
            self.Group_UtilisationByQuantity = fval_
        elif nodeName_ == 'Group.UtilisationByQuantityDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_UtilisationByQuantityDelta1')
            self.Group_UtilisationByQuantityDelta1 = fval_
        elif nodeName_ == 'Group.UtilisationByQuantityDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_UtilisationByQuantityDelta30')
            self.Group_UtilisationByQuantityDelta30 = fval_
        elif nodeName_ == 'Group.UtilisationByQuantityDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_UtilisationByQuantityDelta7')
            self.Group_UtilisationByQuantityDelta7 = fval_
        elif nodeName_ == 'Group.UtilisationDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_UtilisationDelta1')
            self.Group_UtilisationDelta1 = fval_
        elif nodeName_ == 'Group.UtilisationDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_UtilisationDelta30')
            self.Group_UtilisationDelta30 = fval_
        elif nodeName_ == 'Group.UtilisationDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_UtilisationDelta7')
            self.Group_UtilisationDelta7 = fval_
        elif nodeName_ == 'Group.ValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ValueOnLoan')
            self.Group_ValueOnLoan = fval_
        elif nodeName_ == 'Group.ValueOnLoanDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ValueOnLoanDelta1')
            self.Group_ValueOnLoanDelta1 = fval_
        elif nodeName_ == 'Group.ValueOnLoanDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ValueOnLoanDelta1Pc')
            self.Group_ValueOnLoanDelta1Pc = fval_
        elif nodeName_ == 'Group.ValueOnLoanDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ValueOnLoanDelta30')
            self.Group_ValueOnLoanDelta30 = fval_
        elif nodeName_ == 'Group.ValueOnLoanDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ValueOnLoanDelta30Pc')
            self.Group_ValueOnLoanDelta30Pc = fval_
        elif nodeName_ == 'Group.ValueOnLoanDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ValueOnLoanDelta7')
            self.Group_ValueOnLoanDelta7 = fval_
        elif nodeName_ == 'Group.ValueOnLoanDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_ValueOnLoanDelta7Pc')
            self.Group_ValueOnLoanDelta7Pc = fval_
        elif nodeName_ == 'Group.VWAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAF')
            self.Group_VWAF = fval_
        elif nodeName_ == 'Group.VWAF1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAF1')
            self.Group_VWAF1 = fval_
        elif nodeName_ == 'Group.VWAF30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAF30')
            self.Group_VWAF30 = fval_
        elif nodeName_ == 'Group.VWAF7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAF7')
            self.Group_VWAF7 = fval_
        elif nodeName_ == 'Group.VWAFDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAFDelta')
            self.Group_VWAFDelta = fval_
        elif nodeName_ == 'Group.VWAFDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAFDelta1')
            self.Group_VWAFDelta1 = fval_
        elif nodeName_ == 'Group.VWAFDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAFDelta1Pc')
            self.Group_VWAFDelta1Pc = fval_
        elif nodeName_ == 'Group.VWAFDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAFDelta30')
            self.Group_VWAFDelta30 = fval_
        elif nodeName_ == 'Group.VWAFDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAFDelta30Pc')
            self.Group_VWAFDelta30Pc = fval_
        elif nodeName_ == 'Group.VWAFDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAFDelta7')
            self.Group_VWAFDelta7 = fval_
        elif nodeName_ == 'Group.VWAFDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAFDelta7Pc')
            self.Group_VWAFDelta7Pc = fval_
        elif nodeName_ == 'Group.VWAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAR')
            self.Group_VWAR = fval_
        elif nodeName_ == 'Group.VWAR1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAR1')
            self.Group_VWAR1 = fval_
        elif nodeName_ == 'Group.VWAR30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAR30')
            self.Group_VWAR30 = fval_
        elif nodeName_ == 'Group.VWAR7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWAR7')
            self.Group_VWAR7 = fval_
        elif nodeName_ == 'Group.VWARDelta1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWARDelta1')
            self.Group_VWARDelta1 = fval_
        elif nodeName_ == 'Group.VWARDelta1Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWARDelta1Pc')
            self.Group_VWARDelta1Pc = fval_
        elif nodeName_ == 'Group.VWARDelta30' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWARDelta30')
            self.Group_VWARDelta30 = fval_
        elif nodeName_ == 'Group.VWARDelta30Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWARDelta30Pc')
            self.Group_VWARDelta30Pc = fval_
        elif nodeName_ == 'Group.VWARDelta7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWARDelta7')
            self.Group_VWARDelta7 = fval_
        elif nodeName_ == 'Group.VWARDelta7Pc' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Group_VWARDelta7Pc')
            self.Group_VWARDelta7Pc = fval_
        elif nodeName_ == 'LatestDataDate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LatestDataDate')
            self.LatestDataDate = fval_
        elif nodeName_ == 'Transaction.ComparativeDailyCostIndicative' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_ComparativeDailyCostIndicative')
            self.Transaction_ComparativeDailyCostIndicative = fval_
        elif nodeName_ == 'Transaction.ComparativeDailyCostMySA' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_ComparativeDailyCostMySA')
            self.Transaction_ComparativeDailyCostMySA = fval_
        elif nodeName_ == 'Transaction.ComparativeDailyCostSA' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_ComparativeDailyCostSA')
            self.Transaction_ComparativeDailyCostSA = fval_
        elif nodeName_ == 'Transaction.DailyCost' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_DailyCost')
            self.Transaction_DailyCost = fval_
        elif nodeName_ == 'Transaction.DailyCostDifferenceIndicative' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_DailyCostDifferenceIndicative')
            self.Transaction_DailyCostDifferenceIndicative = fval_
        elif nodeName_ == 'Transaction.DailyCostDifferenceMySA' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_DailyCostDifferenceMySA')
            self.Transaction_DailyCostDifferenceMySA = fval_
        elif nodeName_ == 'Transaction.DailyCostDifferenceSA' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_DailyCostDifferenceSA')
            self.Transaction_DailyCostDifferenceSA = fval_
        elif nodeName_ == 'Transaction.DividendRequirement' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_DividendRequirement')
            self.Transaction_DividendRequirement = fval_
        elif nodeName_ == 'Transaction.Duration' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_Duration')
            self.Transaction_Duration = fval_
        elif nodeName_ == 'Transaction.Fee' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_Fee')
            self.Transaction_Fee = fval_
        elif nodeName_ == 'Transaction.Quantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_Quantity')
            self.Transaction_Quantity = fval_
        elif nodeName_ == 'Transaction.RateVarianceIndicative' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_RateVarianceIndicative')
            self.Transaction_RateVarianceIndicative = fval_
        elif nodeName_ == 'Transaction.RateVarianceMySA' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_RateVarianceMySA')
            self.Transaction_RateVarianceMySA = fval_
        elif nodeName_ == 'Transaction.RateVarianceSA' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_RateVarianceSA')
            self.Transaction_RateVarianceSA = fval_
        elif nodeName_ == 'Transaction.Rebate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_Rebate')
            self.Transaction_Rebate = fval_
        elif nodeName_ == 'Transaction.StartDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Transaction_StartDate = dval_
        elif nodeName_ == 'Transaction.TransactionFee' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_TransactionFee')
            self.Transaction_TransactionFee = fval_
        elif nodeName_ == 'Transaction.Value' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Transaction_Value')
            self.Transaction_Value = fval_
# end class DistributionType84


class AssetType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ANY=None, CUSIP=None, DATATYPE=None, DXLID=None, ISIN=None, QUICK=None, RANK=None, SEDOL=None, TICKER=None, TICKER_CODE=None, INSTRUMENTID=None, LISTINGID=None, ASSETID=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ANY = _cast(None, ANY)
        self.CUSIP = _cast(None, CUSIP)
        self.DATATYPE = _cast(None, DATATYPE)
        self.DXLID = _cast(None, DXLID)
        self.ISIN = _cast(None, ISIN)
        self.QUICK = _cast(None, QUICK)
        self.RANK = _cast(None, RANK)
        self.SEDOL = _cast(None, SEDOL)
        self.TICKER = _cast(None, TICKER)
        self.TICKER_CODE = _cast(None, TICKER_CODE)
        self.INSTRUMENTID = _cast(None, INSTRUMENTID)
        self.LISTINGID = _cast(None, LISTINGID)
        self.ASSETID = _cast(None, ASSETID)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AssetType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AssetType.subclass:
            return AssetType.subclass(*args_, **kwargs_)
        else:
            return AssetType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_ANY(self):
        return self.ANY
    def set_ANY(self, ANY):
        self.ANY = ANY
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def get_TICKER_CODE(self):
        return self.TICKER_CODE
    def set_TICKER_CODE(self, TICKER_CODE):
        self.TICKER_CODE = TICKER_CODE
    def get_INSTRUMENTID(self):
        return self.INSTRUMENTID
    def set_INSTRUMENTID(self, INSTRUMENTID):
        self.INSTRUMENTID = INSTRUMENTID
    def get_LISTINGID(self):
        return self.LISTINGID
    def set_LISTINGID(self, LISTINGID):
        self.LISTINGID = LISTINGID
    def get_ASSETID(self):
        return self.ASSETID
    def set_ASSETID(self, ASSETID):
        self.ASSETID = ASSETID
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AssetType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AssetType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AssetType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AssetType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AssetType'):
        if self.ANY is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            outfile.write(' ANY=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ANY), input_name='ANY')), ))
        if self.CUSIP is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            outfile.write(' CUSIP=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.CUSIP), input_name='CUSIP')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.DXLID is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            outfile.write(' DXLID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DXLID), input_name='DXLID')), ))
        if self.ISIN is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            outfile.write(' ISIN=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ISIN), input_name='ISIN')), ))
        if self.QUICK is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            outfile.write(' QUICK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.QUICK), input_name='QUICK')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.SEDOL is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            outfile.write(' SEDOL=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SEDOL), input_name='SEDOL')), ))
        if self.TICKER is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            outfile.write(' TICKER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER), input_name='TICKER')), ))
        if self.TICKER_CODE is not None and 'TICKER_CODE' not in already_processed:
            already_processed.add('TICKER_CODE')
            outfile.write(' TICKER.CODE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TICKER_CODE), input_name='TICKER.CODE')), ))
        if self.INSTRUMENTID is not None and 'INSTRUMENTID' not in already_processed:
            already_processed.add('INSTRUMENTID')
            outfile.write(' INSTRUMENTID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.INSTRUMENTID), input_name='INSTRUMENTID')), ))
        if self.LISTINGID is not None and 'LISTINGID' not in already_processed:
            already_processed.add('LISTINGID')
            outfile.write(' LISTINGID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.LISTINGID), input_name='LISTINGID')), ))
        if self.ASSETID is not None and 'ASSETID' not in already_processed:
            already_processed.add('ASSETID')
            outfile.write(' ASSETID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ASSETID), input_name='ASSETID')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AssetType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ANY', node)
        if value is not None and 'ANY' not in already_processed:
            already_processed.add('ANY')
            self.ANY = value
        value = find_attr_value_('CUSIP', node)
        if value is not None and 'CUSIP' not in already_processed:
            already_processed.add('CUSIP')
            self.CUSIP = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('DXLID', node)
        if value is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            self.DXLID = value
        value = find_attr_value_('ISIN', node)
        if value is not None and 'ISIN' not in already_processed:
            already_processed.add('ISIN')
            self.ISIN = value
        value = find_attr_value_('QUICK', node)
        if value is not None and 'QUICK' not in already_processed:
            already_processed.add('QUICK')
            self.QUICK = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('SEDOL', node)
        if value is not None and 'SEDOL' not in already_processed:
            already_processed.add('SEDOL')
            self.SEDOL = value
        value = find_attr_value_('TICKER', node)
        if value is not None and 'TICKER' not in already_processed:
            already_processed.add('TICKER')
            self.TICKER = value
        value = find_attr_value_('TICKER.CODE', node)
        if value is not None and 'TICKER.CODE' not in already_processed:
            already_processed.add('TICKER.CODE')
            self.TICKER_CODE = value
        value = find_attr_value_('INSTRUMENTID', node)
        if value is not None and 'INSTRUMENTID' not in already_processed:
            already_processed.add('INSTRUMENTID')
            self.INSTRUMENTID = value
        value = find_attr_value_('LISTINGID', node)
        if value is not None and 'LISTINGID' not in already_processed:
            already_processed.add('LISTINGID')
            self.LISTINGID = value
        value = find_attr_value_('ASSETID', node)
        if value is not None and 'ASSETID' not in already_processed:
            already_processed.add('ASSETID')
            self.ASSETID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType85.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class AssetType


class DataDateType85(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, Codes=None, GeneralInformation=None, Listings=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.Codes = Codes
        self.GeneralInformation = GeneralInformation
        self.Listings = Listings
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType85)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType85.subclass:
            return DataDateType85.subclass(*args_, **kwargs_)
        else:
            return DataDateType85(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Codes(self):
        return self.Codes
    def set_Codes(self, Codes):
        self.Codes = Codes
    def get_GeneralInformation(self):
        return self.GeneralInformation
    def set_GeneralInformation(self, GeneralInformation):
        self.GeneralInformation = GeneralInformation
    def get_Listings(self):
        return self.Listings
    def set_Listings(self, Listings):
        self.Listings = Listings
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.Codes is not None or
            self.GeneralInformation is not None or
            self.Listings is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType85', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType85')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType85')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType85', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType85'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType85', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Codes is not None:
            self.Codes.export(outfile, level, namespaceprefix_, name_='Codes', pretty_print=pretty_print)
        if self.GeneralInformation is not None:
            self.GeneralInformation.export(outfile, level, namespaceprefix_, name_='GeneralInformation', pretty_print=pretty_print)
        if self.Listings is not None:
            self.Listings.export(outfile, level, namespaceprefix_, name_='Listings', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Codes':
            obj_ = CodesType.factory(parent_object_=self)
            obj_.build(child_)
            self.Codes = obj_
            obj_.original_tagname_ = 'Codes'
        elif nodeName_ == 'GeneralInformation':
            obj_ = GeneralInformationType.factory(parent_object_=self)
            obj_.build(child_)
            self.GeneralInformation = obj_
            obj_.original_tagname_ = 'GeneralInformation'
        elif nodeName_ == 'Listings':
            obj_ = ListingsType.factory(parent_object_=self)
            obj_.build(child_)
            self.Listings = obj_
            obj_.original_tagname_ = 'Listings'
# end class DataDateType85


class CodesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Codes_code_endDate=None, Codes_code_metaType=None, Codes_code_startDate=None, Codes_code_value=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(Codes_code_endDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Codes_code_endDate, '%Y-%m-%d').date()
        else:
            initvalue_ = Codes_code_endDate
        self.Codes_code_endDate = initvalue_
        self.Codes_code_metaType = Codes_code_metaType
        if isinstance(Codes_code_startDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Codes_code_startDate, '%Y-%m-%d').date()
        else:
            initvalue_ = Codes_code_startDate
        self.Codes_code_startDate = initvalue_
        self.Codes_code_value = Codes_code_value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CodesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CodesType.subclass:
            return CodesType.subclass(*args_, **kwargs_)
        else:
            return CodesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Codes_code_endDate(self):
        return self.Codes_code_endDate
    def set_Codes_code_endDate(self, Codes_code_endDate):
        self.Codes_code_endDate = Codes_code_endDate
    def get_Codes_code_metaType(self):
        return self.Codes_code_metaType
    def set_Codes_code_metaType(self, Codes_code_metaType):
        self.Codes_code_metaType = Codes_code_metaType
    def get_Codes_code_startDate(self):
        return self.Codes_code_startDate
    def set_Codes_code_startDate(self, Codes_code_startDate):
        self.Codes_code_startDate = Codes_code_startDate
    def get_Codes_code_value(self):
        return self.Codes_code_value
    def set_Codes_code_value(self, Codes_code_value):
        self.Codes_code_value = Codes_code_value
    def hasContent_(self):
        if (
            self.Codes_code_endDate is not None or
            self.Codes_code_metaType is not None or
            self.Codes_code_startDate is not None or
            self.Codes_code_value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CodesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CodesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CodesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CodesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CodesType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CodesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Codes_code_endDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodes_code_endDate>%s</%sCodes_code_endDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Codes_code_endDate, input_name='Codes_code_endDate'), namespaceprefix_ , eol_))
        if self.Codes_code_metaType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodes_code_metaType>%s</%sCodes_code_metaType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Codes_code_metaType), input_name='Codes_code_metaType')), namespaceprefix_ , eol_))
        if self.Codes_code_startDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodes_code_startDate>%s</%sCodes_code_startDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Codes_code_startDate, input_name='Codes_code_startDate'), namespaceprefix_ , eol_))
        if self.Codes_code_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodes_code_value>%s</%sCodes_code_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Codes_code_value), input_name='Codes_code_value')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Codes_code_endDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Codes_code_endDate = dval_
        elif nodeName_ == 'Codes_code_metaType':
            Codes_code_metaType_ = child_.text
            Codes_code_metaType_ = self.gds_validate_string(Codes_code_metaType_, node, 'Codes_code_metaType')
            self.Codes_code_metaType = Codes_code_metaType_
        elif nodeName_ == 'Codes_code_startDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Codes_code_startDate = dval_
        elif nodeName_ == 'Codes_code_value':
            Codes_code_value_ = child_.text
            Codes_code_value_ = self.gds_validate_string(Codes_code_value_, node, 'Codes_code_value')
            self.Codes_code_value = Codes_code_value_
# end class CodesType


class GeneralInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, assetId=None, assetType=None, lastUpdated=None, name=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.assetId = assetId
        self.assetType = assetType
        self.lastUpdated = lastUpdated
        self.name = name
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralInformationType.subclass:
            return GeneralInformationType.subclass(*args_, **kwargs_)
        else:
            return GeneralInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_assetId(self):
        return self.assetId
    def set_assetId(self, assetId):
        self.assetId = assetId
    def get_assetType(self):
        return self.assetType
    def set_assetType(self, assetType):
        self.assetType = assetType
    def get_lastUpdated(self):
        return self.lastUpdated
    def set_lastUpdated(self, lastUpdated):
        self.lastUpdated = lastUpdated
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def hasContent_(self):
        if (
            self.assetId is not None or
            self.assetType is not None or
            self.lastUpdated is not None or
            self.name is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralInformationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.assetId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sassetId>%s</%sassetId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.assetId), input_name='assetId')), namespaceprefix_ , eol_))
        if self.assetType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sassetType>%s</%sassetType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.assetType), input_name='assetType')), namespaceprefix_ , eol_))
        if self.lastUpdated is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastUpdated>%s</%slastUpdated>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastUpdated), input_name='lastUpdated')), namespaceprefix_ , eol_))
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sname>%s</%sname>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.name), input_name='name')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'assetId':
            assetId_ = child_.text
            assetId_ = self.gds_validate_string(assetId_, node, 'assetId')
            self.assetId = assetId_
        elif nodeName_ == 'assetType':
            assetType_ = child_.text
            assetType_ = self.gds_validate_string(assetType_, node, 'assetType')
            self.assetType = assetType_
        elif nodeName_ == 'lastUpdated':
            lastUpdated_ = child_.text
            lastUpdated_ = self.gds_validate_string(lastUpdated_, node, 'lastUpdated')
            self.lastUpdated = lastUpdated_
        elif nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
# end class GeneralInformationType


class ListingsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Listing_code_endDate=None, Listing_code_metaType=None, Listing_code_startDate=None, Listing_code_value=None, Listing_currency=None, Listing_exchangeId=None, Listing_id=None, Listing_isPrimary=None, Listing_lotSize=None, Listing_name=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(Listing_code_endDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Listing_code_endDate, '%Y-%m-%d').date()
        else:
            initvalue_ = Listing_code_endDate
        self.Listing_code_endDate = initvalue_
        self.Listing_code_metaType = Listing_code_metaType
        if isinstance(Listing_code_startDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Listing_code_startDate, '%Y-%m-%d').date()
        else:
            initvalue_ = Listing_code_startDate
        self.Listing_code_startDate = initvalue_
        self.Listing_code_value = Listing_code_value
        self.Listing_currency = Listing_currency
        self.Listing_exchangeId = Listing_exchangeId
        self.Listing_id = Listing_id
        self.Listing_isPrimary = Listing_isPrimary
        self.Listing_lotSize = Listing_lotSize
        self.Listing_name = Listing_name
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ListingsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ListingsType.subclass:
            return ListingsType.subclass(*args_, **kwargs_)
        else:
            return ListingsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Listing_code_endDate(self):
        return self.Listing_code_endDate
    def set_Listing_code_endDate(self, Listing_code_endDate):
        self.Listing_code_endDate = Listing_code_endDate
    def get_Listing_code_metaType(self):
        return self.Listing_code_metaType
    def set_Listing_code_metaType(self, Listing_code_metaType):
        self.Listing_code_metaType = Listing_code_metaType
    def get_Listing_code_startDate(self):
        return self.Listing_code_startDate
    def set_Listing_code_startDate(self, Listing_code_startDate):
        self.Listing_code_startDate = Listing_code_startDate
    def get_Listing_code_value(self):
        return self.Listing_code_value
    def set_Listing_code_value(self, Listing_code_value):
        self.Listing_code_value = Listing_code_value
    def get_Listing_currency(self):
        return self.Listing_currency
    def set_Listing_currency(self, Listing_currency):
        self.Listing_currency = Listing_currency
    def get_Listing_exchangeId(self):
        return self.Listing_exchangeId
    def set_Listing_exchangeId(self, Listing_exchangeId):
        self.Listing_exchangeId = Listing_exchangeId
    def get_Listing_id(self):
        return self.Listing_id
    def set_Listing_id(self, Listing_id):
        self.Listing_id = Listing_id
    def get_Listing_isPrimary(self):
        return self.Listing_isPrimary
    def set_Listing_isPrimary(self, Listing_isPrimary):
        self.Listing_isPrimary = Listing_isPrimary
    def get_Listing_lotSize(self):
        return self.Listing_lotSize
    def set_Listing_lotSize(self, Listing_lotSize):
        self.Listing_lotSize = Listing_lotSize
    def get_Listing_name(self):
        return self.Listing_name
    def set_Listing_name(self, Listing_name):
        self.Listing_name = Listing_name
    def hasContent_(self):
        if (
            self.Listing_code_endDate is not None or
            self.Listing_code_metaType is not None or
            self.Listing_code_startDate is not None or
            self.Listing_code_value is not None or
            self.Listing_currency is not None or
            self.Listing_exchangeId is not None or
            self.Listing_id is not None or
            self.Listing_isPrimary is not None or
            self.Listing_lotSize is not None or
            self.Listing_name is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ListingsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ListingsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ListingsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ListingsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ListingsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ListingsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Listing_code_endDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListing_code_endDate>%s</%sListing_code_endDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Listing_code_endDate, input_name='Listing_code_endDate'), namespaceprefix_ , eol_))
        if self.Listing_code_metaType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListing_code_metaType>%s</%sListing_code_metaType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Listing_code_metaType), input_name='Listing_code_metaType')), namespaceprefix_ , eol_))
        if self.Listing_code_startDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListing_code_startDate>%s</%sListing_code_startDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Listing_code_startDate, input_name='Listing_code_startDate'), namespaceprefix_ , eol_))
        if self.Listing_code_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListing_code_value>%s</%sListing_code_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Listing_code_value), input_name='Listing_code_value')), namespaceprefix_ , eol_))
        if self.Listing_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListing_currency>%s</%sListing_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Listing_currency), input_name='Listing_currency')), namespaceprefix_ , eol_))
        if self.Listing_exchangeId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListing_exchangeId>%s</%sListing_exchangeId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Listing_exchangeId), input_name='Listing_exchangeId')), namespaceprefix_ , eol_))
        if self.Listing_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListing_id>%s</%sListing_id>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Listing_id), input_name='Listing_id')), namespaceprefix_ , eol_))
        if self.Listing_isPrimary is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListing_isPrimary>%s</%sListing_isPrimary>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Listing_isPrimary), input_name='Listing_isPrimary')), namespaceprefix_ , eol_))
        if self.Listing_lotSize is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListing_lotSize>%s</%sListing_lotSize>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Listing_lotSize), input_name='Listing_lotSize')), namespaceprefix_ , eol_))
        if self.Listing_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListing_name>%s</%sListing_name>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Listing_name), input_name='Listing_name')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Listing_code_endDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Listing_code_endDate = dval_
        elif nodeName_ == 'Listing_code_metaType':
            Listing_code_metaType_ = child_.text
            Listing_code_metaType_ = self.gds_validate_string(Listing_code_metaType_, node, 'Listing_code_metaType')
            self.Listing_code_metaType = Listing_code_metaType_
        elif nodeName_ == 'Listing_code_startDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Listing_code_startDate = dval_
        elif nodeName_ == 'Listing_code_value':
            Listing_code_value_ = child_.text
            Listing_code_value_ = self.gds_validate_string(Listing_code_value_, node, 'Listing_code_value')
            self.Listing_code_value = Listing_code_value_
        elif nodeName_ == 'Listing_currency':
            Listing_currency_ = child_.text
            Listing_currency_ = self.gds_validate_string(Listing_currency_, node, 'Listing_currency')
            self.Listing_currency = Listing_currency_
        elif nodeName_ == 'Listing_exchangeId':
            Listing_exchangeId_ = child_.text
            Listing_exchangeId_ = self.gds_validate_string(Listing_exchangeId_, node, 'Listing_exchangeId')
            self.Listing_exchangeId = Listing_exchangeId_
        elif nodeName_ == 'Listing_id':
            Listing_id_ = child_.text
            Listing_id_ = self.gds_validate_string(Listing_id_, node, 'Listing_id')
            self.Listing_id = Listing_id_
        elif nodeName_ == 'Listing_isPrimary':
            Listing_isPrimary_ = child_.text
            Listing_isPrimary_ = self.gds_validate_string(Listing_isPrimary_, node, 'Listing_isPrimary')
            self.Listing_isPrimary = Listing_isPrimary_
        elif nodeName_ == 'Listing_lotSize':
            Listing_lotSize_ = child_.text
            Listing_lotSize_ = self.gds_validate_string(Listing_lotSize_, node, 'Listing_lotSize')
            self.Listing_lotSize = Listing_lotSize_
        elif nodeName_ == 'Listing_name':
            Listing_name_ = child_.text
            Listing_name_ = self.gds_validate_string(Listing_name_, node, 'Listing_name')
            self.Listing_name = Listing_name_
# end class ListingsType


class CalculationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DATATYPE=None, RANK=None, CALCULATIONID=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DATATYPE = _cast(None, DATATYPE)
        self.RANK = _cast(None, RANK)
        self.CALCULATIONID = _cast(None, CALCULATIONID)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CalculationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CalculationType.subclass:
            return CalculationType.subclass(*args_, **kwargs_)
        else:
            return CalculationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_CALCULATIONID(self):
        return self.CALCULATIONID
    def set_CALCULATIONID(self, CALCULATIONID):
        self.CALCULATIONID = CALCULATIONID
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CalculationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CalculationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CalculationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CalculationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CalculationType'):
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.CALCULATIONID is not None and 'CALCULATIONID' not in already_processed:
            already_processed.add('CALCULATIONID')
            outfile.write(' CALCULATIONID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.CALCULATIONID), input_name='CALCULATIONID')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CalculationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('CALCULATIONID', node)
        if value is not None and 'CALCULATIONID' not in already_processed:
            already_processed.add('CALCULATIONID')
            self.CALCULATIONID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType86.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class CalculationType


class DataDateType86(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, GeneralInformation=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.GeneralInformation = GeneralInformation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType86)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType86.subclass:
            return DataDateType86.subclass(*args_, **kwargs_)
        else:
            return DataDateType86(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_GeneralInformation(self):
        return self.GeneralInformation
    def set_GeneralInformation(self, GeneralInformation):
        self.GeneralInformation = GeneralInformation
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.GeneralInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType86', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType86')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType86')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType86', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType86'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType86', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.GeneralInformation is not None:
            self.GeneralInformation.export(outfile, level, namespaceprefix_, name_='GeneralInformation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'GeneralInformation':
            obj_ = GeneralInformationType87.factory(parent_object_=self)
            obj_.build(child_)
            self.GeneralInformation = obj_
            obj_.original_tagname_ = 'GeneralInformation'
# end class DataDateType86


class GeneralInformationType87(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, calculation_expression=None, calculation_id=None, calculation_lastUpdated=None, calculation_name=None, lastUpdated=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.calculation_expression = calculation_expression
        self.calculation_id = calculation_id
        self.calculation_lastUpdated = calculation_lastUpdated
        self.calculation_name = calculation_name
        self.lastUpdated = lastUpdated
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralInformationType87)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralInformationType87.subclass:
            return GeneralInformationType87.subclass(*args_, **kwargs_)
        else:
            return GeneralInformationType87(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_calculation_expression(self):
        return self.calculation_expression
    def set_calculation_expression(self, calculation_expression):
        self.calculation_expression = calculation_expression
    def get_calculation_id(self):
        return self.calculation_id
    def set_calculation_id(self, calculation_id):
        self.calculation_id = calculation_id
    def get_calculation_lastUpdated(self):
        return self.calculation_lastUpdated
    def set_calculation_lastUpdated(self, calculation_lastUpdated):
        self.calculation_lastUpdated = calculation_lastUpdated
    def get_calculation_name(self):
        return self.calculation_name
    def set_calculation_name(self, calculation_name):
        self.calculation_name = calculation_name
    def get_lastUpdated(self):
        return self.lastUpdated
    def set_lastUpdated(self, lastUpdated):
        self.lastUpdated = lastUpdated
    def hasContent_(self):
        if (
            self.calculation_expression is not None or
            self.calculation_id is not None or
            self.calculation_lastUpdated is not None or
            self.calculation_name is not None or
            self.lastUpdated is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralInformationType87', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralInformationType87')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralInformationType87')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralInformationType87', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralInformationType87'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralInformationType87', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.calculation_expression is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scalculation_expression>%s</%scalculation_expression>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.calculation_expression), input_name='calculation_expression')), namespaceprefix_ , eol_))
        if self.calculation_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scalculation_id>%s</%scalculation_id>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.calculation_id), input_name='calculation_id')), namespaceprefix_ , eol_))
        if self.calculation_lastUpdated is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scalculation_lastUpdated>%s</%scalculation_lastUpdated>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.calculation_lastUpdated), input_name='calculation_lastUpdated')), namespaceprefix_ , eol_))
        if self.calculation_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scalculation_name>%s</%scalculation_name>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.calculation_name), input_name='calculation_name')), namespaceprefix_ , eol_))
        if self.lastUpdated is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastUpdated>%s</%slastUpdated>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastUpdated), input_name='lastUpdated')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'calculation_expression':
            calculation_expression_ = child_.text
            calculation_expression_ = self.gds_validate_string(calculation_expression_, node, 'calculation_expression')
            self.calculation_expression = calculation_expression_
        elif nodeName_ == 'calculation_id':
            calculation_id_ = child_.text
            calculation_id_ = self.gds_validate_string(calculation_id_, node, 'calculation_id')
            self.calculation_id = calculation_id_
        elif nodeName_ == 'calculation_lastUpdated':
            calculation_lastUpdated_ = child_.text
            calculation_lastUpdated_ = self.gds_validate_string(calculation_lastUpdated_, node, 'calculation_lastUpdated')
            self.calculation_lastUpdated = calculation_lastUpdated_
        elif nodeName_ == 'calculation_name':
            calculation_name_ = child_.text
            calculation_name_ = self.gds_validate_string(calculation_name_, node, 'calculation_name')
            self.calculation_name = calculation_name_
        elif nodeName_ == 'lastUpdated':
            lastUpdated_ = child_.text
            lastUpdated_ = self.gds_validate_string(lastUpdated_, node, 'lastUpdated')
            self.lastUpdated = lastUpdated_
# end class GeneralInformationType87


class DividendType88(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DATATYPE=None, RANK=None, ASSETID=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DATATYPE = _cast(None, DATATYPE)
        self.RANK = _cast(None, RANK)
        self.ASSETID = _cast(None, ASSETID)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DividendType88)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DividendType88.subclass:
            return DividendType88.subclass(*args_, **kwargs_)
        else:
            return DividendType88(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_ASSETID(self):
        return self.ASSETID
    def set_ASSETID(self, ASSETID):
        self.ASSETID = ASSETID
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DividendType88', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DividendType88')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DividendType88')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DividendType88', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DividendType88'):
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.ASSETID is not None and 'ASSETID' not in already_processed:
            already_processed.add('ASSETID')
            outfile.write(' ASSETID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ASSETID), input_name='ASSETID')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DividendType88', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('ASSETID', node)
        if value is not None and 'ASSETID' not in already_processed:
            already_processed.add('ASSETID')
            self.ASSETID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType89.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class DividendType88


class DataDateType89(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, CapitalChanges=None, Dividends=None, GeneralInformation=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.CapitalChanges = CapitalChanges
        self.Dividends = Dividends
        self.GeneralInformation = GeneralInformation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType89)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType89.subclass:
            return DataDateType89.subclass(*args_, **kwargs_)
        else:
            return DataDateType89(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CapitalChanges(self):
        return self.CapitalChanges
    def set_CapitalChanges(self, CapitalChanges):
        self.CapitalChanges = CapitalChanges
    def get_Dividends(self):
        return self.Dividends
    def set_Dividends(self, Dividends):
        self.Dividends = Dividends
    def get_GeneralInformation(self):
        return self.GeneralInformation
    def set_GeneralInformation(self, GeneralInformation):
        self.GeneralInformation = GeneralInformation
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.CapitalChanges is not None or
            self.Dividends is not None or
            self.GeneralInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType89', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType89')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType89')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType89', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType89'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType89', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CapitalChanges is not None:
            self.CapitalChanges.export(outfile, level, namespaceprefix_, name_='CapitalChanges', pretty_print=pretty_print)
        if self.Dividends is not None:
            self.Dividends.export(outfile, level, namespaceprefix_, name_='Dividends', pretty_print=pretty_print)
        if self.GeneralInformation is not None:
            self.GeneralInformation.export(outfile, level, namespaceprefix_, name_='GeneralInformation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CapitalChanges':
            obj_ = CapitalChangesType.factory(parent_object_=self)
            obj_.build(child_)
            self.CapitalChanges = obj_
            obj_.original_tagname_ = 'CapitalChanges'
        elif nodeName_ == 'Dividends':
            obj_ = DividendsType90.factory(parent_object_=self)
            obj_.build(child_)
            self.Dividends = obj_
            obj_.original_tagname_ = 'Dividends'
        elif nodeName_ == 'GeneralInformation':
            obj_ = GeneralInformationType91.factory(parent_object_=self)
            obj_.build(child_)
            self.GeneralInformation = obj_
            obj_.original_tagname_ = 'GeneralInformation'
# end class DataDateType89


class CapitalChangesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CapitalChanges_capitalChange_effective=None, CapitalChanges_capitalChange_factor=None, CapitalChanges_capitalChange_key=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.CapitalChanges_capitalChange_effective = CapitalChanges_capitalChange_effective
        self.CapitalChanges_capitalChange_factor = CapitalChanges_capitalChange_factor
        self.CapitalChanges_capitalChange_key = CapitalChanges_capitalChange_key
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CapitalChangesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CapitalChangesType.subclass:
            return CapitalChangesType.subclass(*args_, **kwargs_)
        else:
            return CapitalChangesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CapitalChanges_capitalChange_effective(self):
        return self.CapitalChanges_capitalChange_effective
    def set_CapitalChanges_capitalChange_effective(self, CapitalChanges_capitalChange_effective):
        self.CapitalChanges_capitalChange_effective = CapitalChanges_capitalChange_effective
    def get_CapitalChanges_capitalChange_factor(self):
        return self.CapitalChanges_capitalChange_factor
    def set_CapitalChanges_capitalChange_factor(self, CapitalChanges_capitalChange_factor):
        self.CapitalChanges_capitalChange_factor = CapitalChanges_capitalChange_factor
    def get_CapitalChanges_capitalChange_key(self):
        return self.CapitalChanges_capitalChange_key
    def set_CapitalChanges_capitalChange_key(self, CapitalChanges_capitalChange_key):
        self.CapitalChanges_capitalChange_key = CapitalChanges_capitalChange_key
    def hasContent_(self):
        if (
            self.CapitalChanges_capitalChange_effective is not None or
            self.CapitalChanges_capitalChange_factor is not None or
            self.CapitalChanges_capitalChange_key is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CapitalChangesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CapitalChangesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CapitalChangesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CapitalChangesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CapitalChangesType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CapitalChangesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CapitalChanges_capitalChange_effective is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCapitalChanges_capitalChange_effective>%s</%sCapitalChanges_capitalChange_effective>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CapitalChanges_capitalChange_effective), input_name='CapitalChanges_capitalChange_effective')), namespaceprefix_ , eol_))
        if self.CapitalChanges_capitalChange_factor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCapitalChanges_capitalChange_factor>%s</%sCapitalChanges_capitalChange_factor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CapitalChanges_capitalChange_factor), input_name='CapitalChanges_capitalChange_factor')), namespaceprefix_ , eol_))
        if self.CapitalChanges_capitalChange_key is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCapitalChanges_capitalChange_key>%s</%sCapitalChanges_capitalChange_key>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CapitalChanges_capitalChange_key), input_name='CapitalChanges_capitalChange_key')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CapitalChanges_capitalChange_effective':
            CapitalChanges_capitalChange_effective_ = child_.text
            CapitalChanges_capitalChange_effective_ = self.gds_validate_string(CapitalChanges_capitalChange_effective_, node, 'CapitalChanges_capitalChange_effective')
            self.CapitalChanges_capitalChange_effective = CapitalChanges_capitalChange_effective_
        elif nodeName_ == 'CapitalChanges_capitalChange_factor':
            CapitalChanges_capitalChange_factor_ = child_.text
            CapitalChanges_capitalChange_factor_ = self.gds_validate_string(CapitalChanges_capitalChange_factor_, node, 'CapitalChanges_capitalChange_factor')
            self.CapitalChanges_capitalChange_factor = CapitalChanges_capitalChange_factor_
        elif nodeName_ == 'CapitalChanges_capitalChange_key':
            CapitalChanges_capitalChange_key_ = child_.text
            CapitalChanges_capitalChange_key_ = self.gds_validate_string(CapitalChanges_capitalChange_key_, node, 'CapitalChanges_capitalChange_key')
            self.CapitalChanges_capitalChange_key = CapitalChanges_capitalChange_key_
# end class CapitalChangesType


class DividendsType90(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Dividends_announced=None, Dividends_announcementDate_published=None, Dividends_announcementDate_value=None, Dividends_comment=None, Dividends_count=None, Dividends_dividendType=None, Dividends_exDividendDate_published=None, Dividends_exDividendDate_value=None, Dividends_financialYearId=None, Dividends_form=None, Dividends_grossAmount_currency=None, Dividends_grossAmount_published=None, Dividends_grossAmount_total=None, Dividends_grossAmount_value=None, Dividends_id=None, Dividends_listingId=None, Dividends_payDate_published=None, Dividends_payDate_value=None, Dividends_ratio=None, Dividends_rawGrossAmount_currency=None, Dividends_rawGrossAmount_published=None, Dividends_rawGrossAmount_total=None, Dividends_rawGrossAmount_value=None, Dividends_recordDate_published=None, Dividends_recordDate_value=None, Dividends_reportingCurrency=None, Dividends_scripOptional=None, Dividends_supplementary_type=None, Dividends_taxCodeId=None, Dividends_yearEnd=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Dividends_announced = Dividends_announced
        self.Dividends_announcementDate_published = Dividends_announcementDate_published
        if isinstance(Dividends_announcementDate_value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Dividends_announcementDate_value, '%Y-%m-%d').date()
        else:
            initvalue_ = Dividends_announcementDate_value
        self.Dividends_announcementDate_value = initvalue_
        self.Dividends_comment = Dividends_comment
        self.Dividends_count = Dividends_count
        self.Dividends_dividendType = Dividends_dividendType
        self.Dividends_exDividendDate_published = Dividends_exDividendDate_published
        if isinstance(Dividends_exDividendDate_value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Dividends_exDividendDate_value, '%Y-%m-%d').date()
        else:
            initvalue_ = Dividends_exDividendDate_value
        self.Dividends_exDividendDate_value = initvalue_
        self.Dividends_financialYearId = Dividends_financialYearId
        self.Dividends_form = Dividends_form
        self.Dividends_grossAmount_currency = Dividends_grossAmount_currency
        self.Dividends_grossAmount_published = Dividends_grossAmount_published
        self.Dividends_grossAmount_total = Dividends_grossAmount_total
        self.Dividends_grossAmount_value = Dividends_grossAmount_value
        self.Dividends_id = Dividends_id
        self.Dividends_listingId = Dividends_listingId
        self.Dividends_payDate_published = Dividends_payDate_published
        if isinstance(Dividends_payDate_value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Dividends_payDate_value, '%Y-%m-%d').date()
        else:
            initvalue_ = Dividends_payDate_value
        self.Dividends_payDate_value = initvalue_
        self.Dividends_ratio = Dividends_ratio
        self.Dividends_rawGrossAmount_currency = Dividends_rawGrossAmount_currency
        self.Dividends_rawGrossAmount_published = Dividends_rawGrossAmount_published
        self.Dividends_rawGrossAmount_total = Dividends_rawGrossAmount_total
        self.Dividends_rawGrossAmount_value = Dividends_rawGrossAmount_value
        self.Dividends_recordDate_published = Dividends_recordDate_published
        if isinstance(Dividends_recordDate_value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Dividends_recordDate_value, '%Y-%m-%d').date()
        else:
            initvalue_ = Dividends_recordDate_value
        self.Dividends_recordDate_value = initvalue_
        self.Dividends_reportingCurrency = Dividends_reportingCurrency
        self.Dividends_scripOptional = Dividends_scripOptional
        self.Dividends_supplementary_type = Dividends_supplementary_type
        self.Dividends_taxCodeId = Dividends_taxCodeId
        self.Dividends_yearEnd = Dividends_yearEnd
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DividendsType90)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DividendsType90.subclass:
            return DividendsType90.subclass(*args_, **kwargs_)
        else:
            return DividendsType90(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Dividends_announced(self):
        return self.Dividends_announced
    def set_Dividends_announced(self, Dividends_announced):
        self.Dividends_announced = Dividends_announced
    def get_Dividends_announcementDate_published(self):
        return self.Dividends_announcementDate_published
    def set_Dividends_announcementDate_published(self, Dividends_announcementDate_published):
        self.Dividends_announcementDate_published = Dividends_announcementDate_published
    def get_Dividends_announcementDate_value(self):
        return self.Dividends_announcementDate_value
    def set_Dividends_announcementDate_value(self, Dividends_announcementDate_value):
        self.Dividends_announcementDate_value = Dividends_announcementDate_value
    def get_Dividends_comment(self):
        return self.Dividends_comment
    def set_Dividends_comment(self, Dividends_comment):
        self.Dividends_comment = Dividends_comment
    def get_Dividends_count(self):
        return self.Dividends_count
    def set_Dividends_count(self, Dividends_count):
        self.Dividends_count = Dividends_count
    def get_Dividends_dividendType(self):
        return self.Dividends_dividendType
    def set_Dividends_dividendType(self, Dividends_dividendType):
        self.Dividends_dividendType = Dividends_dividendType
    def get_Dividends_exDividendDate_published(self):
        return self.Dividends_exDividendDate_published
    def set_Dividends_exDividendDate_published(self, Dividends_exDividendDate_published):
        self.Dividends_exDividendDate_published = Dividends_exDividendDate_published
    def get_Dividends_exDividendDate_value(self):
        return self.Dividends_exDividendDate_value
    def set_Dividends_exDividendDate_value(self, Dividends_exDividendDate_value):
        self.Dividends_exDividendDate_value = Dividends_exDividendDate_value
    def get_Dividends_financialYearId(self):
        return self.Dividends_financialYearId
    def set_Dividends_financialYearId(self, Dividends_financialYearId):
        self.Dividends_financialYearId = Dividends_financialYearId
    def get_Dividends_form(self):
        return self.Dividends_form
    def set_Dividends_form(self, Dividends_form):
        self.Dividends_form = Dividends_form
    def get_Dividends_grossAmount_currency(self):
        return self.Dividends_grossAmount_currency
    def set_Dividends_grossAmount_currency(self, Dividends_grossAmount_currency):
        self.Dividends_grossAmount_currency = Dividends_grossAmount_currency
    def get_Dividends_grossAmount_published(self):
        return self.Dividends_grossAmount_published
    def set_Dividends_grossAmount_published(self, Dividends_grossAmount_published):
        self.Dividends_grossAmount_published = Dividends_grossAmount_published
    def get_Dividends_grossAmount_total(self):
        return self.Dividends_grossAmount_total
    def set_Dividends_grossAmount_total(self, Dividends_grossAmount_total):
        self.Dividends_grossAmount_total = Dividends_grossAmount_total
    def get_Dividends_grossAmount_value(self):
        return self.Dividends_grossAmount_value
    def set_Dividends_grossAmount_value(self, Dividends_grossAmount_value):
        self.Dividends_grossAmount_value = Dividends_grossAmount_value
    def get_Dividends_id(self):
        return self.Dividends_id
    def set_Dividends_id(self, Dividends_id):
        self.Dividends_id = Dividends_id
    def get_Dividends_listingId(self):
        return self.Dividends_listingId
    def set_Dividends_listingId(self, Dividends_listingId):
        self.Dividends_listingId = Dividends_listingId
    def get_Dividends_payDate_published(self):
        return self.Dividends_payDate_published
    def set_Dividends_payDate_published(self, Dividends_payDate_published):
        self.Dividends_payDate_published = Dividends_payDate_published
    def get_Dividends_payDate_value(self):
        return self.Dividends_payDate_value
    def set_Dividends_payDate_value(self, Dividends_payDate_value):
        self.Dividends_payDate_value = Dividends_payDate_value
    def get_Dividends_ratio(self):
        return self.Dividends_ratio
    def set_Dividends_ratio(self, Dividends_ratio):
        self.Dividends_ratio = Dividends_ratio
    def get_Dividends_rawGrossAmount_currency(self):
        return self.Dividends_rawGrossAmount_currency
    def set_Dividends_rawGrossAmount_currency(self, Dividends_rawGrossAmount_currency):
        self.Dividends_rawGrossAmount_currency = Dividends_rawGrossAmount_currency
    def get_Dividends_rawGrossAmount_published(self):
        return self.Dividends_rawGrossAmount_published
    def set_Dividends_rawGrossAmount_published(self, Dividends_rawGrossAmount_published):
        self.Dividends_rawGrossAmount_published = Dividends_rawGrossAmount_published
    def get_Dividends_rawGrossAmount_total(self):
        return self.Dividends_rawGrossAmount_total
    def set_Dividends_rawGrossAmount_total(self, Dividends_rawGrossAmount_total):
        self.Dividends_rawGrossAmount_total = Dividends_rawGrossAmount_total
    def get_Dividends_rawGrossAmount_value(self):
        return self.Dividends_rawGrossAmount_value
    def set_Dividends_rawGrossAmount_value(self, Dividends_rawGrossAmount_value):
        self.Dividends_rawGrossAmount_value = Dividends_rawGrossAmount_value
    def get_Dividends_recordDate_published(self):
        return self.Dividends_recordDate_published
    def set_Dividends_recordDate_published(self, Dividends_recordDate_published):
        self.Dividends_recordDate_published = Dividends_recordDate_published
    def get_Dividends_recordDate_value(self):
        return self.Dividends_recordDate_value
    def set_Dividends_recordDate_value(self, Dividends_recordDate_value):
        self.Dividends_recordDate_value = Dividends_recordDate_value
    def get_Dividends_reportingCurrency(self):
        return self.Dividends_reportingCurrency
    def set_Dividends_reportingCurrency(self, Dividends_reportingCurrency):
        self.Dividends_reportingCurrency = Dividends_reportingCurrency
    def get_Dividends_scripOptional(self):
        return self.Dividends_scripOptional
    def set_Dividends_scripOptional(self, Dividends_scripOptional):
        self.Dividends_scripOptional = Dividends_scripOptional
    def get_Dividends_supplementary_type(self):
        return self.Dividends_supplementary_type
    def set_Dividends_supplementary_type(self, Dividends_supplementary_type):
        self.Dividends_supplementary_type = Dividends_supplementary_type
    def get_Dividends_taxCodeId(self):
        return self.Dividends_taxCodeId
    def set_Dividends_taxCodeId(self, Dividends_taxCodeId):
        self.Dividends_taxCodeId = Dividends_taxCodeId
    def get_Dividends_yearEnd(self):
        return self.Dividends_yearEnd
    def set_Dividends_yearEnd(self, Dividends_yearEnd):
        self.Dividends_yearEnd = Dividends_yearEnd
    def hasContent_(self):
        if (
            self.Dividends_announced is not None or
            self.Dividends_announcementDate_published is not None or
            self.Dividends_announcementDate_value is not None or
            self.Dividends_comment is not None or
            self.Dividends_count is not None or
            self.Dividends_dividendType is not None or
            self.Dividends_exDividendDate_published is not None or
            self.Dividends_exDividendDate_value is not None or
            self.Dividends_financialYearId is not None or
            self.Dividends_form is not None or
            self.Dividends_grossAmount_currency is not None or
            self.Dividends_grossAmount_published is not None or
            self.Dividends_grossAmount_total is not None or
            self.Dividends_grossAmount_value is not None or
            self.Dividends_id is not None or
            self.Dividends_listingId is not None or
            self.Dividends_payDate_published is not None or
            self.Dividends_payDate_value is not None or
            self.Dividends_ratio is not None or
            self.Dividends_rawGrossAmount_currency is not None or
            self.Dividends_rawGrossAmount_published is not None or
            self.Dividends_rawGrossAmount_total is not None or
            self.Dividends_rawGrossAmount_value is not None or
            self.Dividends_recordDate_published is not None or
            self.Dividends_recordDate_value is not None or
            self.Dividends_reportingCurrency is not None or
            self.Dividends_scripOptional is not None or
            self.Dividends_supplementary_type is not None or
            self.Dividends_taxCodeId is not None or
            self.Dividends_yearEnd is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DividendsType90', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DividendsType90')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DividendsType90')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DividendsType90', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DividendsType90'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DividendsType90', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Dividends_announced is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_announced>%s</%sDividends_announced>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Dividends_announced), input_name='Dividends_announced')), namespaceprefix_ , eol_))
        if self.Dividends_announcementDate_published is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_announcementDate_published>%s</%sDividends_announcementDate_published>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Dividends_announcementDate_published), input_name='Dividends_announcementDate_published')), namespaceprefix_ , eol_))
        if self.Dividends_announcementDate_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_announcementDate_value>%s</%sDividends_announcementDate_value>%s' % (namespaceprefix_ , self.gds_format_date(self.Dividends_announcementDate_value, input_name='Dividends_announcementDate_value'), namespaceprefix_ , eol_))
        if self.Dividends_comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_comment>%s</%sDividends_comment>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Dividends_comment), input_name='Dividends_comment')), namespaceprefix_ , eol_))
        if self.Dividends_count is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_count>%s</%sDividends_count>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Dividends_count), input_name='Dividends_count')), namespaceprefix_ , eol_))
        if self.Dividends_dividendType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_dividendType>%s</%sDividends_dividendType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Dividends_dividendType), input_name='Dividends_dividendType')), namespaceprefix_ , eol_))
        if self.Dividends_exDividendDate_published is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_exDividendDate_published>%s</%sDividends_exDividendDate_published>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Dividends_exDividendDate_published), input_name='Dividends_exDividendDate_published')), namespaceprefix_ , eol_))
        if self.Dividends_exDividendDate_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_exDividendDate_value>%s</%sDividends_exDividendDate_value>%s' % (namespaceprefix_ , self.gds_format_date(self.Dividends_exDividendDate_value, input_name='Dividends_exDividendDate_value'), namespaceprefix_ , eol_))
        if self.Dividends_financialYearId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_financialYearId>%s</%sDividends_financialYearId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Dividends_financialYearId), input_name='Dividends_financialYearId')), namespaceprefix_ , eol_))
        if self.Dividends_form is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_form>%s</%sDividends_form>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Dividends_form), input_name='Dividends_form')), namespaceprefix_ , eol_))
        if self.Dividends_grossAmount_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_grossAmount_currency>%s</%sDividends_grossAmount_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Dividends_grossAmount_currency), input_name='Dividends_grossAmount_currency')), namespaceprefix_ , eol_))
        if self.Dividends_grossAmount_published is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_grossAmount_published>%s</%sDividends_grossAmount_published>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Dividends_grossAmount_published), input_name='Dividends_grossAmount_published')), namespaceprefix_ , eol_))
        if self.Dividends_grossAmount_total is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_grossAmount_total>%s</%sDividends_grossAmount_total>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Dividends_grossAmount_total), input_name='Dividends_grossAmount_total')), namespaceprefix_ , eol_))
        if self.Dividends_grossAmount_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_grossAmount_value>%s</%sDividends_grossAmount_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Dividends_grossAmount_value), input_name='Dividends_grossAmount_value')), namespaceprefix_ , eol_))
        if self.Dividends_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_id>%s</%sDividends_id>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Dividends_id), input_name='Dividends_id')), namespaceprefix_ , eol_))
        if self.Dividends_listingId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_listingId>%s</%sDividends_listingId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Dividends_listingId), input_name='Dividends_listingId')), namespaceprefix_ , eol_))
        if self.Dividends_payDate_published is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_payDate_published>%s</%sDividends_payDate_published>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Dividends_payDate_published), input_name='Dividends_payDate_published')), namespaceprefix_ , eol_))
        if self.Dividends_payDate_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_payDate_value>%s</%sDividends_payDate_value>%s' % (namespaceprefix_ , self.gds_format_date(self.Dividends_payDate_value, input_name='Dividends_payDate_value'), namespaceprefix_ , eol_))
        if self.Dividends_ratio is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_ratio>%s</%sDividends_ratio>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Dividends_ratio), input_name='Dividends_ratio')), namespaceprefix_ , eol_))
        if self.Dividends_rawGrossAmount_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_rawGrossAmount_currency>%s</%sDividends_rawGrossAmount_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Dividends_rawGrossAmount_currency), input_name='Dividends_rawGrossAmount_currency')), namespaceprefix_ , eol_))
        if self.Dividends_rawGrossAmount_published is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_rawGrossAmount_published>%s</%sDividends_rawGrossAmount_published>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Dividends_rawGrossAmount_published), input_name='Dividends_rawGrossAmount_published')), namespaceprefix_ , eol_))
        if self.Dividends_rawGrossAmount_total is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_rawGrossAmount_total>%s</%sDividends_rawGrossAmount_total>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Dividends_rawGrossAmount_total), input_name='Dividends_rawGrossAmount_total')), namespaceprefix_ , eol_))
        if self.Dividends_rawGrossAmount_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_rawGrossAmount_value>%s</%sDividends_rawGrossAmount_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Dividends_rawGrossAmount_value), input_name='Dividends_rawGrossAmount_value')), namespaceprefix_ , eol_))
        if self.Dividends_recordDate_published is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_recordDate_published>%s</%sDividends_recordDate_published>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Dividends_recordDate_published), input_name='Dividends_recordDate_published')), namespaceprefix_ , eol_))
        if self.Dividends_recordDate_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_recordDate_value>%s</%sDividends_recordDate_value>%s' % (namespaceprefix_ , self.gds_format_date(self.Dividends_recordDate_value, input_name='Dividends_recordDate_value'), namespaceprefix_ , eol_))
        if self.Dividends_reportingCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_reportingCurrency>%s</%sDividends_reportingCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Dividends_reportingCurrency), input_name='Dividends_reportingCurrency')), namespaceprefix_ , eol_))
        if self.Dividends_scripOptional is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_scripOptional>%s</%sDividends_scripOptional>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Dividends_scripOptional), input_name='Dividends_scripOptional')), namespaceprefix_ , eol_))
        if self.Dividends_supplementary_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_supplementary_type>%s</%sDividends_supplementary_type>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Dividends_supplementary_type), input_name='Dividends_supplementary_type')), namespaceprefix_ , eol_))
        if self.Dividends_taxCodeId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_taxCodeId>%s</%sDividends_taxCodeId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Dividends_taxCodeId), input_name='Dividends_taxCodeId')), namespaceprefix_ , eol_))
        if self.Dividends_yearEnd is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividends_yearEnd>%s</%sDividends_yearEnd>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Dividends_yearEnd), input_name='Dividends_yearEnd')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Dividends_announced':
            Dividends_announced_ = child_.text
            Dividends_announced_ = self.gds_validate_string(Dividends_announced_, node, 'Dividends_announced')
            self.Dividends_announced = Dividends_announced_
        elif nodeName_ == 'Dividends_announcementDate_published':
            Dividends_announcementDate_published_ = child_.text
            Dividends_announcementDate_published_ = self.gds_validate_string(Dividends_announcementDate_published_, node, 'Dividends_announcementDate_published')
            self.Dividends_announcementDate_published = Dividends_announcementDate_published_
        elif nodeName_ == 'Dividends_announcementDate_value':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Dividends_announcementDate_value = dval_
        elif nodeName_ == 'Dividends_comment':
            Dividends_comment_ = child_.text
            Dividends_comment_ = self.gds_validate_string(Dividends_comment_, node, 'Dividends_comment')
            self.Dividends_comment = Dividends_comment_
        elif nodeName_ == 'Dividends_count':
            Dividends_count_ = child_.text
            Dividends_count_ = self.gds_validate_string(Dividends_count_, node, 'Dividends_count')
            self.Dividends_count = Dividends_count_
        elif nodeName_ == 'Dividends_dividendType':
            Dividends_dividendType_ = child_.text
            Dividends_dividendType_ = self.gds_validate_string(Dividends_dividendType_, node, 'Dividends_dividendType')
            self.Dividends_dividendType = Dividends_dividendType_
        elif nodeName_ == 'Dividends_exDividendDate_published':
            Dividends_exDividendDate_published_ = child_.text
            Dividends_exDividendDate_published_ = self.gds_validate_string(Dividends_exDividendDate_published_, node, 'Dividends_exDividendDate_published')
            self.Dividends_exDividendDate_published = Dividends_exDividendDate_published_
        elif nodeName_ == 'Dividends_exDividendDate_value':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Dividends_exDividendDate_value = dval_
        elif nodeName_ == 'Dividends_financialYearId':
            Dividends_financialYearId_ = child_.text
            Dividends_financialYearId_ = self.gds_validate_string(Dividends_financialYearId_, node, 'Dividends_financialYearId')
            self.Dividends_financialYearId = Dividends_financialYearId_
        elif nodeName_ == 'Dividends_form':
            Dividends_form_ = child_.text
            Dividends_form_ = self.gds_validate_string(Dividends_form_, node, 'Dividends_form')
            self.Dividends_form = Dividends_form_
        elif nodeName_ == 'Dividends_grossAmount_currency':
            Dividends_grossAmount_currency_ = child_.text
            Dividends_grossAmount_currency_ = self.gds_validate_string(Dividends_grossAmount_currency_, node, 'Dividends_grossAmount_currency')
            self.Dividends_grossAmount_currency = Dividends_grossAmount_currency_
        elif nodeName_ == 'Dividends_grossAmount_published':
            Dividends_grossAmount_published_ = child_.text
            Dividends_grossAmount_published_ = self.gds_validate_string(Dividends_grossAmount_published_, node, 'Dividends_grossAmount_published')
            self.Dividends_grossAmount_published = Dividends_grossAmount_published_
        elif nodeName_ == 'Dividends_grossAmount_total':
            Dividends_grossAmount_total_ = child_.text
            Dividends_grossAmount_total_ = self.gds_validate_string(Dividends_grossAmount_total_, node, 'Dividends_grossAmount_total')
            self.Dividends_grossAmount_total = Dividends_grossAmount_total_
        elif nodeName_ == 'Dividends_grossAmount_value':
            Dividends_grossAmount_value_ = child_.text
            Dividends_grossAmount_value_ = self.gds_validate_string(Dividends_grossAmount_value_, node, 'Dividends_grossAmount_value')
            self.Dividends_grossAmount_value = Dividends_grossAmount_value_
        elif nodeName_ == 'Dividends_id':
            Dividends_id_ = child_.text
            Dividends_id_ = self.gds_validate_string(Dividends_id_, node, 'Dividends_id')
            self.Dividends_id = Dividends_id_
        elif nodeName_ == 'Dividends_listingId':
            Dividends_listingId_ = child_.text
            Dividends_listingId_ = self.gds_validate_string(Dividends_listingId_, node, 'Dividends_listingId')
            self.Dividends_listingId = Dividends_listingId_
        elif nodeName_ == 'Dividends_payDate_published':
            Dividends_payDate_published_ = child_.text
            Dividends_payDate_published_ = self.gds_validate_string(Dividends_payDate_published_, node, 'Dividends_payDate_published')
            self.Dividends_payDate_published = Dividends_payDate_published_
        elif nodeName_ == 'Dividends_payDate_value':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Dividends_payDate_value = dval_
        elif nodeName_ == 'Dividends_ratio':
            Dividends_ratio_ = child_.text
            Dividends_ratio_ = self.gds_validate_string(Dividends_ratio_, node, 'Dividends_ratio')
            self.Dividends_ratio = Dividends_ratio_
        elif nodeName_ == 'Dividends_rawGrossAmount_currency':
            Dividends_rawGrossAmount_currency_ = child_.text
            Dividends_rawGrossAmount_currency_ = self.gds_validate_string(Dividends_rawGrossAmount_currency_, node, 'Dividends_rawGrossAmount_currency')
            self.Dividends_rawGrossAmount_currency = Dividends_rawGrossAmount_currency_
        elif nodeName_ == 'Dividends_rawGrossAmount_published':
            Dividends_rawGrossAmount_published_ = child_.text
            Dividends_rawGrossAmount_published_ = self.gds_validate_string(Dividends_rawGrossAmount_published_, node, 'Dividends_rawGrossAmount_published')
            self.Dividends_rawGrossAmount_published = Dividends_rawGrossAmount_published_
        elif nodeName_ == 'Dividends_rawGrossAmount_total':
            Dividends_rawGrossAmount_total_ = child_.text
            Dividends_rawGrossAmount_total_ = self.gds_validate_string(Dividends_rawGrossAmount_total_, node, 'Dividends_rawGrossAmount_total')
            self.Dividends_rawGrossAmount_total = Dividends_rawGrossAmount_total_
        elif nodeName_ == 'Dividends_rawGrossAmount_value':
            Dividends_rawGrossAmount_value_ = child_.text
            Dividends_rawGrossAmount_value_ = self.gds_validate_string(Dividends_rawGrossAmount_value_, node, 'Dividends_rawGrossAmount_value')
            self.Dividends_rawGrossAmount_value = Dividends_rawGrossAmount_value_
        elif nodeName_ == 'Dividends_recordDate_published':
            Dividends_recordDate_published_ = child_.text
            Dividends_recordDate_published_ = self.gds_validate_string(Dividends_recordDate_published_, node, 'Dividends_recordDate_published')
            self.Dividends_recordDate_published = Dividends_recordDate_published_
        elif nodeName_ == 'Dividends_recordDate_value':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Dividends_recordDate_value = dval_
        elif nodeName_ == 'Dividends_reportingCurrency':
            Dividends_reportingCurrency_ = child_.text
            Dividends_reportingCurrency_ = self.gds_validate_string(Dividends_reportingCurrency_, node, 'Dividends_reportingCurrency')
            self.Dividends_reportingCurrency = Dividends_reportingCurrency_
        elif nodeName_ == 'Dividends_scripOptional':
            Dividends_scripOptional_ = child_.text
            Dividends_scripOptional_ = self.gds_validate_string(Dividends_scripOptional_, node, 'Dividends_scripOptional')
            self.Dividends_scripOptional = Dividends_scripOptional_
        elif nodeName_ == 'Dividends_supplementary_type':
            Dividends_supplementary_type_ = child_.text
            Dividends_supplementary_type_ = self.gds_validate_string(Dividends_supplementary_type_, node, 'Dividends_supplementary_type')
            self.Dividends_supplementary_type = Dividends_supplementary_type_
        elif nodeName_ == 'Dividends_taxCodeId':
            Dividends_taxCodeId_ = child_.text
            Dividends_taxCodeId_ = self.gds_validate_string(Dividends_taxCodeId_, node, 'Dividends_taxCodeId')
            self.Dividends_taxCodeId = Dividends_taxCodeId_
        elif nodeName_ == 'Dividends_yearEnd':
            Dividends_yearEnd_ = child_.text
            Dividends_yearEnd_ = self.gds_validate_string(Dividends_yearEnd_, node, 'Dividends_yearEnd')
            self.Dividends_yearEnd = Dividends_yearEnd_
# end class DividendsType90


class GeneralInformationType91(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, assetId=None, comment=None, lastUpdated=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.assetId = assetId
        self.comment = comment
        self.lastUpdated = lastUpdated
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralInformationType91)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralInformationType91.subclass:
            return GeneralInformationType91.subclass(*args_, **kwargs_)
        else:
            return GeneralInformationType91(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_assetId(self):
        return self.assetId
    def set_assetId(self, assetId):
        self.assetId = assetId
    def get_comment(self):
        return self.comment
    def set_comment(self, comment):
        self.comment = comment
    def get_lastUpdated(self):
        return self.lastUpdated
    def set_lastUpdated(self, lastUpdated):
        self.lastUpdated = lastUpdated
    def hasContent_(self):
        if (
            self.assetId is not None or
            self.comment is not None or
            self.lastUpdated is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralInformationType91', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralInformationType91')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralInformationType91')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralInformationType91', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralInformationType91'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralInformationType91', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.assetId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sassetId>%s</%sassetId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.assetId), input_name='assetId')), namespaceprefix_ , eol_))
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.comment), input_name='comment')), namespaceprefix_ , eol_))
        if self.lastUpdated is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastUpdated>%s</%slastUpdated>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastUpdated), input_name='lastUpdated')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'assetId':
            assetId_ = child_.text
            assetId_ = self.gds_validate_string(assetId_, node, 'assetId')
            self.assetId = assetId_
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
        elif nodeName_ == 'lastUpdated':
            lastUpdated_ = child_.text
            lastUpdated_ = self.gds_validate_string(lastUpdated_, node, 'lastUpdated')
            self.lastUpdated = lastUpdated_
# end class GeneralInformationType91


class ETPEncyclopaediaType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DATATYPE=None, RANK=None, ASSETID=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DATATYPE = _cast(None, DATATYPE)
        self.RANK = _cast(None, RANK)
        self.ASSETID = _cast(None, ASSETID)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ETPEncyclopaediaType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ETPEncyclopaediaType.subclass:
            return ETPEncyclopaediaType.subclass(*args_, **kwargs_)
        else:
            return ETPEncyclopaediaType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_ASSETID(self):
        return self.ASSETID
    def set_ASSETID(self, ASSETID):
        self.ASSETID = ASSETID
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ETPEncyclopaediaType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ETPEncyclopaediaType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ETPEncyclopaediaType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ETPEncyclopaediaType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ETPEncyclopaediaType'):
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.ASSETID is not None and 'ASSETID' not in already_processed:
            already_processed.add('ASSETID')
            outfile.write(' ASSETID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ASSETID), input_name='ASSETID')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ETPEncyclopaediaType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('ASSETID', node)
        if value is not None and 'ASSETID' not in already_processed:
            already_processed.add('ASSETID')
            self.ASSETID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType92.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class ETPEncyclopaediaType


class DataDateType92(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, BenchmarkInformation=None, Classification=None, CreationRedemption=None, DividendInformation=None, FeesandExpenses=None, FutureExchanges=None, GeneralInformation=None, LegalInformation=None, ListingInformation=None, ManagementandStructure=None, ServiceProviders=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.BenchmarkInformation = BenchmarkInformation
        self.Classification = Classification
        self.CreationRedemption = CreationRedemption
        self.DividendInformation = DividendInformation
        self.FeesandExpenses = FeesandExpenses
        self.FutureExchanges = FutureExchanges
        self.GeneralInformation = GeneralInformation
        self.LegalInformation = LegalInformation
        self.ListingInformation = ListingInformation
        self.ManagementandStructure = ManagementandStructure
        self.ServiceProviders = ServiceProviders
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType92)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType92.subclass:
            return DataDateType92.subclass(*args_, **kwargs_)
        else:
            return DataDateType92(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BenchmarkInformation(self):
        return self.BenchmarkInformation
    def set_BenchmarkInformation(self, BenchmarkInformation):
        self.BenchmarkInformation = BenchmarkInformation
    def get_Classification(self):
        return self.Classification
    def set_Classification(self, Classification):
        self.Classification = Classification
    def get_CreationRedemption(self):
        return self.CreationRedemption
    def set_CreationRedemption(self, CreationRedemption):
        self.CreationRedemption = CreationRedemption
    def get_DividendInformation(self):
        return self.DividendInformation
    def set_DividendInformation(self, DividendInformation):
        self.DividendInformation = DividendInformation
    def get_FeesandExpenses(self):
        return self.FeesandExpenses
    def set_FeesandExpenses(self, FeesandExpenses):
        self.FeesandExpenses = FeesandExpenses
    def get_FutureExchanges(self):
        return self.FutureExchanges
    def set_FutureExchanges(self, FutureExchanges):
        self.FutureExchanges = FutureExchanges
    def get_GeneralInformation(self):
        return self.GeneralInformation
    def set_GeneralInformation(self, GeneralInformation):
        self.GeneralInformation = GeneralInformation
    def get_LegalInformation(self):
        return self.LegalInformation
    def set_LegalInformation(self, LegalInformation):
        self.LegalInformation = LegalInformation
    def get_ListingInformation(self):
        return self.ListingInformation
    def set_ListingInformation(self, ListingInformation):
        self.ListingInformation = ListingInformation
    def get_ManagementandStructure(self):
        return self.ManagementandStructure
    def set_ManagementandStructure(self, ManagementandStructure):
        self.ManagementandStructure = ManagementandStructure
    def get_ServiceProviders(self):
        return self.ServiceProviders
    def set_ServiceProviders(self, ServiceProviders):
        self.ServiceProviders = ServiceProviders
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.BenchmarkInformation is not None or
            self.Classification is not None or
            self.CreationRedemption is not None or
            self.DividendInformation is not None or
            self.FeesandExpenses is not None or
            self.FutureExchanges is not None or
            self.GeneralInformation is not None or
            self.LegalInformation is not None or
            self.ListingInformation is not None or
            self.ManagementandStructure is not None or
            self.ServiceProviders is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType92', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType92')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType92')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType92', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType92'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType92', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BenchmarkInformation is not None:
            self.BenchmarkInformation.export(outfile, level, namespaceprefix_, name_='BenchmarkInformation', pretty_print=pretty_print)
        if self.Classification is not None:
            self.Classification.export(outfile, level, namespaceprefix_, name_='Classification', pretty_print=pretty_print)
        if self.CreationRedemption is not None:
            self.CreationRedemption.export(outfile, level, namespaceprefix_, name_='CreationRedemption', pretty_print=pretty_print)
        if self.DividendInformation is not None:
            self.DividendInformation.export(outfile, level, namespaceprefix_, name_='DividendInformation', pretty_print=pretty_print)
        if self.FeesandExpenses is not None:
            self.FeesandExpenses.export(outfile, level, namespaceprefix_, name_='FeesandExpenses', pretty_print=pretty_print)
        if self.FutureExchanges is not None:
            self.FutureExchanges.export(outfile, level, namespaceprefix_, name_='FutureExchanges', pretty_print=pretty_print)
        if self.GeneralInformation is not None:
            self.GeneralInformation.export(outfile, level, namespaceprefix_, name_='GeneralInformation', pretty_print=pretty_print)
        if self.LegalInformation is not None:
            self.LegalInformation.export(outfile, level, namespaceprefix_, name_='LegalInformation', pretty_print=pretty_print)
        if self.ListingInformation is not None:
            self.ListingInformation.export(outfile, level, namespaceprefix_, name_='ListingInformation', pretty_print=pretty_print)
        if self.ManagementandStructure is not None:
            self.ManagementandStructure.export(outfile, level, namespaceprefix_, name_='ManagementandStructure', pretty_print=pretty_print)
        if self.ServiceProviders is not None:
            self.ServiceProviders.export(outfile, level, namespaceprefix_, name_='ServiceProviders', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BenchmarkInformation':
            obj_ = BenchmarkInformationType.factory(parent_object_=self)
            obj_.build(child_)
            self.BenchmarkInformation = obj_
            obj_.original_tagname_ = 'BenchmarkInformation'
        elif nodeName_ == 'Classification':
            obj_ = ClassificationType.factory(parent_object_=self)
            obj_.build(child_)
            self.Classification = obj_
            obj_.original_tagname_ = 'Classification'
        elif nodeName_ == 'CreationRedemption':
            obj_ = CreationRedemptionType.factory(parent_object_=self)
            obj_.build(child_)
            self.CreationRedemption = obj_
            obj_.original_tagname_ = 'CreationRedemption'
        elif nodeName_ == 'DividendInformation':
            obj_ = DividendInformationType.factory(parent_object_=self)
            obj_.build(child_)
            self.DividendInformation = obj_
            obj_.original_tagname_ = 'DividendInformation'
        elif nodeName_ == 'FeesandExpenses':
            obj_ = FeesandExpensesType.factory(parent_object_=self)
            obj_.build(child_)
            self.FeesandExpenses = obj_
            obj_.original_tagname_ = 'FeesandExpenses'
        elif nodeName_ == 'FutureExchanges':
            obj_ = FutureExchangesType.factory(parent_object_=self)
            obj_.build(child_)
            self.FutureExchanges = obj_
            obj_.original_tagname_ = 'FutureExchanges'
        elif nodeName_ == 'GeneralInformation':
            obj_ = GeneralInformationType93.factory(parent_object_=self)
            obj_.build(child_)
            self.GeneralInformation = obj_
            obj_.original_tagname_ = 'GeneralInformation'
        elif nodeName_ == 'LegalInformation':
            obj_ = LegalInformationType.factory(parent_object_=self)
            obj_.build(child_)
            self.LegalInformation = obj_
            obj_.original_tagname_ = 'LegalInformation'
        elif nodeName_ == 'ListingInformation':
            obj_ = ListingInformationType.factory(parent_object_=self)
            obj_.build(child_)
            self.ListingInformation = obj_
            obj_.original_tagname_ = 'ListingInformation'
        elif nodeName_ == 'ManagementandStructure':
            obj_ = ManagementandStructureType.factory(parent_object_=self)
            obj_.build(child_)
            self.ManagementandStructure = obj_
            obj_.original_tagname_ = 'ManagementandStructure'
        elif nodeName_ == 'ServiceProviders':
            obj_ = ServiceProvidersType.factory(parent_object_=self)
            obj_.build(child_)
            self.ServiceProviders = obj_
            obj_.original_tagname_ = 'ServiceProviders'
# end class DataDateType92


class BenchmarkInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Benchmark_assetId=None, Benchmark_clusterId=None, Benchmark_currency=None, Benchmark_family=None, Benchmark_instrumentId=None, Benchmark_isCustom=None, Benchmark_isHeaderOnly=None, Benchmark_isLeveraged=None, Benchmark_leverage=None, Benchmark_name=None, Benchmark_position=None, Benchmark_rebalanceFrequency=None, Benchmark_rebalanceNotes=None, Benchmark_return=None, Benchmark_underlyingRIC=None, Benchmark_weightingMethodology=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Benchmark_assetId = Benchmark_assetId
        self.Benchmark_clusterId = Benchmark_clusterId
        self.Benchmark_currency = Benchmark_currency
        self.Benchmark_family = Benchmark_family
        self.Benchmark_instrumentId = Benchmark_instrumentId
        self.Benchmark_isCustom = Benchmark_isCustom
        self.Benchmark_isHeaderOnly = Benchmark_isHeaderOnly
        self.Benchmark_isLeveraged = Benchmark_isLeveraged
        self.Benchmark_leverage = Benchmark_leverage
        self.Benchmark_name = Benchmark_name
        self.Benchmark_position = Benchmark_position
        self.Benchmark_rebalanceFrequency = Benchmark_rebalanceFrequency
        self.Benchmark_rebalanceNotes = Benchmark_rebalanceNotes
        self.Benchmark_return = Benchmark_return
        self.Benchmark_underlyingRIC = Benchmark_underlyingRIC
        self.Benchmark_weightingMethodology = Benchmark_weightingMethodology
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BenchmarkInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BenchmarkInformationType.subclass:
            return BenchmarkInformationType.subclass(*args_, **kwargs_)
        else:
            return BenchmarkInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Benchmark_assetId(self):
        return self.Benchmark_assetId
    def set_Benchmark_assetId(self, Benchmark_assetId):
        self.Benchmark_assetId = Benchmark_assetId
    def get_Benchmark_clusterId(self):
        return self.Benchmark_clusterId
    def set_Benchmark_clusterId(self, Benchmark_clusterId):
        self.Benchmark_clusterId = Benchmark_clusterId
    def get_Benchmark_currency(self):
        return self.Benchmark_currency
    def set_Benchmark_currency(self, Benchmark_currency):
        self.Benchmark_currency = Benchmark_currency
    def get_Benchmark_family(self):
        return self.Benchmark_family
    def set_Benchmark_family(self, Benchmark_family):
        self.Benchmark_family = Benchmark_family
    def get_Benchmark_instrumentId(self):
        return self.Benchmark_instrumentId
    def set_Benchmark_instrumentId(self, Benchmark_instrumentId):
        self.Benchmark_instrumentId = Benchmark_instrumentId
    def get_Benchmark_isCustom(self):
        return self.Benchmark_isCustom
    def set_Benchmark_isCustom(self, Benchmark_isCustom):
        self.Benchmark_isCustom = Benchmark_isCustom
    def get_Benchmark_isHeaderOnly(self):
        return self.Benchmark_isHeaderOnly
    def set_Benchmark_isHeaderOnly(self, Benchmark_isHeaderOnly):
        self.Benchmark_isHeaderOnly = Benchmark_isHeaderOnly
    def get_Benchmark_isLeveraged(self):
        return self.Benchmark_isLeveraged
    def set_Benchmark_isLeveraged(self, Benchmark_isLeveraged):
        self.Benchmark_isLeveraged = Benchmark_isLeveraged
    def get_Benchmark_leverage(self):
        return self.Benchmark_leverage
    def set_Benchmark_leverage(self, Benchmark_leverage):
        self.Benchmark_leverage = Benchmark_leverage
    def get_Benchmark_name(self):
        return self.Benchmark_name
    def set_Benchmark_name(self, Benchmark_name):
        self.Benchmark_name = Benchmark_name
    def get_Benchmark_position(self):
        return self.Benchmark_position
    def set_Benchmark_position(self, Benchmark_position):
        self.Benchmark_position = Benchmark_position
    def get_Benchmark_rebalanceFrequency(self):
        return self.Benchmark_rebalanceFrequency
    def set_Benchmark_rebalanceFrequency(self, Benchmark_rebalanceFrequency):
        self.Benchmark_rebalanceFrequency = Benchmark_rebalanceFrequency
    def get_Benchmark_rebalanceNotes(self):
        return self.Benchmark_rebalanceNotes
    def set_Benchmark_rebalanceNotes(self, Benchmark_rebalanceNotes):
        self.Benchmark_rebalanceNotes = Benchmark_rebalanceNotes
    def get_Benchmark_return(self):
        return self.Benchmark_return
    def set_Benchmark_return(self, Benchmark_return):
        self.Benchmark_return = Benchmark_return
    def get_Benchmark_underlyingRIC(self):
        return self.Benchmark_underlyingRIC
    def set_Benchmark_underlyingRIC(self, Benchmark_underlyingRIC):
        self.Benchmark_underlyingRIC = Benchmark_underlyingRIC
    def get_Benchmark_weightingMethodology(self):
        return self.Benchmark_weightingMethodology
    def set_Benchmark_weightingMethodology(self, Benchmark_weightingMethodology):
        self.Benchmark_weightingMethodology = Benchmark_weightingMethodology
    def hasContent_(self):
        if (
            self.Benchmark_assetId is not None or
            self.Benchmark_clusterId is not None or
            self.Benchmark_currency is not None or
            self.Benchmark_family is not None or
            self.Benchmark_instrumentId is not None or
            self.Benchmark_isCustom is not None or
            self.Benchmark_isHeaderOnly is not None or
            self.Benchmark_isLeveraged is not None or
            self.Benchmark_leverage is not None or
            self.Benchmark_name is not None or
            self.Benchmark_position is not None or
            self.Benchmark_rebalanceFrequency is not None or
            self.Benchmark_rebalanceNotes is not None or
            self.Benchmark_return is not None or
            self.Benchmark_underlyingRIC is not None or
            self.Benchmark_weightingMethodology is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BenchmarkInformationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BenchmarkInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BenchmarkInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BenchmarkInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BenchmarkInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BenchmarkInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Benchmark_assetId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBenchmark_assetId>%s</%sBenchmark_assetId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Benchmark_assetId), input_name='Benchmark_assetId')), namespaceprefix_ , eol_))
        if self.Benchmark_clusterId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBenchmark_clusterId>%s</%sBenchmark_clusterId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Benchmark_clusterId), input_name='Benchmark_clusterId')), namespaceprefix_ , eol_))
        if self.Benchmark_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBenchmark_currency>%s</%sBenchmark_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Benchmark_currency), input_name='Benchmark_currency')), namespaceprefix_ , eol_))
        if self.Benchmark_family is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBenchmark_family>%s</%sBenchmark_family>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Benchmark_family), input_name='Benchmark_family')), namespaceprefix_ , eol_))
        if self.Benchmark_instrumentId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBenchmark_instrumentId>%s</%sBenchmark_instrumentId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Benchmark_instrumentId), input_name='Benchmark_instrumentId')), namespaceprefix_ , eol_))
        if self.Benchmark_isCustom is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBenchmark_isCustom>%s</%sBenchmark_isCustom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Benchmark_isCustom), input_name='Benchmark_isCustom')), namespaceprefix_ , eol_))
        if self.Benchmark_isHeaderOnly is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBenchmark_isHeaderOnly>%s</%sBenchmark_isHeaderOnly>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Benchmark_isHeaderOnly), input_name='Benchmark_isHeaderOnly')), namespaceprefix_ , eol_))
        if self.Benchmark_isLeveraged is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBenchmark_isLeveraged>%s</%sBenchmark_isLeveraged>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Benchmark_isLeveraged), input_name='Benchmark_isLeveraged')), namespaceprefix_ , eol_))
        if self.Benchmark_leverage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBenchmark_leverage>%s</%sBenchmark_leverage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Benchmark_leverage), input_name='Benchmark_leverage')), namespaceprefix_ , eol_))
        if self.Benchmark_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBenchmark_name>%s</%sBenchmark_name>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Benchmark_name), input_name='Benchmark_name')), namespaceprefix_ , eol_))
        if self.Benchmark_position is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBenchmark_position>%s</%sBenchmark_position>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Benchmark_position), input_name='Benchmark_position')), namespaceprefix_ , eol_))
        if self.Benchmark_rebalanceFrequency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBenchmark_rebalanceFrequency>%s</%sBenchmark_rebalanceFrequency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Benchmark_rebalanceFrequency), input_name='Benchmark_rebalanceFrequency')), namespaceprefix_ , eol_))
        if self.Benchmark_rebalanceNotes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBenchmark_rebalanceNotes>%s</%sBenchmark_rebalanceNotes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Benchmark_rebalanceNotes), input_name='Benchmark_rebalanceNotes')), namespaceprefix_ , eol_))
        if self.Benchmark_return is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBenchmark_return>%s</%sBenchmark_return>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Benchmark_return), input_name='Benchmark_return')), namespaceprefix_ , eol_))
        if self.Benchmark_underlyingRIC is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBenchmark_underlyingRIC>%s</%sBenchmark_underlyingRIC>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Benchmark_underlyingRIC), input_name='Benchmark_underlyingRIC')), namespaceprefix_ , eol_))
        if self.Benchmark_weightingMethodology is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBenchmark_weightingMethodology>%s</%sBenchmark_weightingMethodology>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Benchmark_weightingMethodology), input_name='Benchmark_weightingMethodology')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Benchmark_assetId':
            Benchmark_assetId_ = child_.text
            Benchmark_assetId_ = self.gds_validate_string(Benchmark_assetId_, node, 'Benchmark_assetId')
            self.Benchmark_assetId = Benchmark_assetId_
        elif nodeName_ == 'Benchmark_clusterId':
            Benchmark_clusterId_ = child_.text
            Benchmark_clusterId_ = self.gds_validate_string(Benchmark_clusterId_, node, 'Benchmark_clusterId')
            self.Benchmark_clusterId = Benchmark_clusterId_
        elif nodeName_ == 'Benchmark_currency':
            Benchmark_currency_ = child_.text
            Benchmark_currency_ = self.gds_validate_string(Benchmark_currency_, node, 'Benchmark_currency')
            self.Benchmark_currency = Benchmark_currency_
        elif nodeName_ == 'Benchmark_family':
            Benchmark_family_ = child_.text
            Benchmark_family_ = self.gds_validate_string(Benchmark_family_, node, 'Benchmark_family')
            self.Benchmark_family = Benchmark_family_
        elif nodeName_ == 'Benchmark_instrumentId':
            Benchmark_instrumentId_ = child_.text
            Benchmark_instrumentId_ = self.gds_validate_string(Benchmark_instrumentId_, node, 'Benchmark_instrumentId')
            self.Benchmark_instrumentId = Benchmark_instrumentId_
        elif nodeName_ == 'Benchmark_isCustom':
            Benchmark_isCustom_ = child_.text
            Benchmark_isCustom_ = self.gds_validate_string(Benchmark_isCustom_, node, 'Benchmark_isCustom')
            self.Benchmark_isCustom = Benchmark_isCustom_
        elif nodeName_ == 'Benchmark_isHeaderOnly':
            Benchmark_isHeaderOnly_ = child_.text
            Benchmark_isHeaderOnly_ = self.gds_validate_string(Benchmark_isHeaderOnly_, node, 'Benchmark_isHeaderOnly')
            self.Benchmark_isHeaderOnly = Benchmark_isHeaderOnly_
        elif nodeName_ == 'Benchmark_isLeveraged':
            Benchmark_isLeveraged_ = child_.text
            Benchmark_isLeveraged_ = self.gds_validate_string(Benchmark_isLeveraged_, node, 'Benchmark_isLeveraged')
            self.Benchmark_isLeveraged = Benchmark_isLeveraged_
        elif nodeName_ == 'Benchmark_leverage':
            Benchmark_leverage_ = child_.text
            Benchmark_leverage_ = self.gds_validate_string(Benchmark_leverage_, node, 'Benchmark_leverage')
            self.Benchmark_leverage = Benchmark_leverage_
        elif nodeName_ == 'Benchmark_name':
            Benchmark_name_ = child_.text
            Benchmark_name_ = self.gds_validate_string(Benchmark_name_, node, 'Benchmark_name')
            self.Benchmark_name = Benchmark_name_
        elif nodeName_ == 'Benchmark_position':
            Benchmark_position_ = child_.text
            Benchmark_position_ = self.gds_validate_string(Benchmark_position_, node, 'Benchmark_position')
            self.Benchmark_position = Benchmark_position_
        elif nodeName_ == 'Benchmark_rebalanceFrequency':
            Benchmark_rebalanceFrequency_ = child_.text
            Benchmark_rebalanceFrequency_ = self.gds_validate_string(Benchmark_rebalanceFrequency_, node, 'Benchmark_rebalanceFrequency')
            self.Benchmark_rebalanceFrequency = Benchmark_rebalanceFrequency_
        elif nodeName_ == 'Benchmark_rebalanceNotes':
            Benchmark_rebalanceNotes_ = child_.text
            Benchmark_rebalanceNotes_ = self.gds_validate_string(Benchmark_rebalanceNotes_, node, 'Benchmark_rebalanceNotes')
            self.Benchmark_rebalanceNotes = Benchmark_rebalanceNotes_
        elif nodeName_ == 'Benchmark_return':
            Benchmark_return_ = child_.text
            Benchmark_return_ = self.gds_validate_string(Benchmark_return_, node, 'Benchmark_return')
            self.Benchmark_return = Benchmark_return_
        elif nodeName_ == 'Benchmark_underlyingRIC':
            Benchmark_underlyingRIC_ = child_.text
            Benchmark_underlyingRIC_ = self.gds_validate_string(Benchmark_underlyingRIC_, node, 'Benchmark_underlyingRIC')
            self.Benchmark_underlyingRIC = Benchmark_underlyingRIC_
        elif nodeName_ == 'Benchmark_weightingMethodology':
            Benchmark_weightingMethodology_ = child_.text
            Benchmark_weightingMethodology_ = self.gds_validate_string(Benchmark_weightingMethodology_, node, 'Benchmark_weightingMethodology')
            self.Benchmark_weightingMethodology = Benchmark_weightingMethodology_
# end class BenchmarkInformationType


class ClassificationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Classification_assetClassName=None, Classification_economicDevelopment=None, Classification_focusRegion=None, Classification_geographicExposure=None, Classification_geographicExposureType=None, Classification_primaryListingRegion=None, Classification_strategyType=None, Classification_subGroup1=None, Classification_subGroup2=None, Classification_subGroup3=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Classification_assetClassName = Classification_assetClassName
        self.Classification_economicDevelopment = Classification_economicDevelopment
        self.Classification_focusRegion = Classification_focusRegion
        self.Classification_geographicExposure = Classification_geographicExposure
        self.Classification_geographicExposureType = Classification_geographicExposureType
        self.Classification_primaryListingRegion = Classification_primaryListingRegion
        self.Classification_strategyType = Classification_strategyType
        self.Classification_subGroup1 = Classification_subGroup1
        self.Classification_subGroup2 = Classification_subGroup2
        self.Classification_subGroup3 = Classification_subGroup3
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClassificationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClassificationType.subclass:
            return ClassificationType.subclass(*args_, **kwargs_)
        else:
            return ClassificationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Classification_assetClassName(self):
        return self.Classification_assetClassName
    def set_Classification_assetClassName(self, Classification_assetClassName):
        self.Classification_assetClassName = Classification_assetClassName
    def get_Classification_economicDevelopment(self):
        return self.Classification_economicDevelopment
    def set_Classification_economicDevelopment(self, Classification_economicDevelopment):
        self.Classification_economicDevelopment = Classification_economicDevelopment
    def get_Classification_focusRegion(self):
        return self.Classification_focusRegion
    def set_Classification_focusRegion(self, Classification_focusRegion):
        self.Classification_focusRegion = Classification_focusRegion
    def get_Classification_geographicExposure(self):
        return self.Classification_geographicExposure
    def set_Classification_geographicExposure(self, Classification_geographicExposure):
        self.Classification_geographicExposure = Classification_geographicExposure
    def get_Classification_geographicExposureType(self):
        return self.Classification_geographicExposureType
    def set_Classification_geographicExposureType(self, Classification_geographicExposureType):
        self.Classification_geographicExposureType = Classification_geographicExposureType
    def get_Classification_primaryListingRegion(self):
        return self.Classification_primaryListingRegion
    def set_Classification_primaryListingRegion(self, Classification_primaryListingRegion):
        self.Classification_primaryListingRegion = Classification_primaryListingRegion
    def get_Classification_strategyType(self):
        return self.Classification_strategyType
    def set_Classification_strategyType(self, Classification_strategyType):
        self.Classification_strategyType = Classification_strategyType
    def get_Classification_subGroup1(self):
        return self.Classification_subGroup1
    def set_Classification_subGroup1(self, Classification_subGroup1):
        self.Classification_subGroup1 = Classification_subGroup1
    def get_Classification_subGroup2(self):
        return self.Classification_subGroup2
    def set_Classification_subGroup2(self, Classification_subGroup2):
        self.Classification_subGroup2 = Classification_subGroup2
    def get_Classification_subGroup3(self):
        return self.Classification_subGroup3
    def set_Classification_subGroup3(self, Classification_subGroup3):
        self.Classification_subGroup3 = Classification_subGroup3
    def hasContent_(self):
        if (
            self.Classification_assetClassName is not None or
            self.Classification_economicDevelopment is not None or
            self.Classification_focusRegion is not None or
            self.Classification_geographicExposure is not None or
            self.Classification_geographicExposureType is not None or
            self.Classification_primaryListingRegion is not None or
            self.Classification_strategyType is not None or
            self.Classification_subGroup1 is not None or
            self.Classification_subGroup2 is not None or
            self.Classification_subGroup3 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ClassificationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClassificationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ClassificationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ClassificationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ClassificationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ClassificationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Classification_assetClassName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassification_assetClassName>%s</%sClassification_assetClassName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Classification_assetClassName), input_name='Classification_assetClassName')), namespaceprefix_ , eol_))
        if self.Classification_economicDevelopment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassification_economicDevelopment>%s</%sClassification_economicDevelopment>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Classification_economicDevelopment), input_name='Classification_economicDevelopment')), namespaceprefix_ , eol_))
        if self.Classification_focusRegion is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassification_focusRegion>%s</%sClassification_focusRegion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Classification_focusRegion), input_name='Classification_focusRegion')), namespaceprefix_ , eol_))
        if self.Classification_geographicExposure is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassification_geographicExposure>%s</%sClassification_geographicExposure>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Classification_geographicExposure), input_name='Classification_geographicExposure')), namespaceprefix_ , eol_))
        if self.Classification_geographicExposureType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassification_geographicExposureType>%s</%sClassification_geographicExposureType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Classification_geographicExposureType), input_name='Classification_geographicExposureType')), namespaceprefix_ , eol_))
        if self.Classification_primaryListingRegion is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassification_primaryListingRegion>%s</%sClassification_primaryListingRegion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Classification_primaryListingRegion), input_name='Classification_primaryListingRegion')), namespaceprefix_ , eol_))
        if self.Classification_strategyType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassification_strategyType>%s</%sClassification_strategyType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Classification_strategyType), input_name='Classification_strategyType')), namespaceprefix_ , eol_))
        if self.Classification_subGroup1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassification_subGroup1>%s</%sClassification_subGroup1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Classification_subGroup1), input_name='Classification_subGroup1')), namespaceprefix_ , eol_))
        if self.Classification_subGroup2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassification_subGroup2>%s</%sClassification_subGroup2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Classification_subGroup2), input_name='Classification_subGroup2')), namespaceprefix_ , eol_))
        if self.Classification_subGroup3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassification_subGroup3>%s</%sClassification_subGroup3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Classification_subGroup3), input_name='Classification_subGroup3')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Classification_assetClassName':
            Classification_assetClassName_ = child_.text
            Classification_assetClassName_ = self.gds_validate_string(Classification_assetClassName_, node, 'Classification_assetClassName')
            self.Classification_assetClassName = Classification_assetClassName_
        elif nodeName_ == 'Classification_economicDevelopment':
            Classification_economicDevelopment_ = child_.text
            Classification_economicDevelopment_ = self.gds_validate_string(Classification_economicDevelopment_, node, 'Classification_economicDevelopment')
            self.Classification_economicDevelopment = Classification_economicDevelopment_
        elif nodeName_ == 'Classification_focusRegion':
            Classification_focusRegion_ = child_.text
            Classification_focusRegion_ = self.gds_validate_string(Classification_focusRegion_, node, 'Classification_focusRegion')
            self.Classification_focusRegion = Classification_focusRegion_
        elif nodeName_ == 'Classification_geographicExposure':
            Classification_geographicExposure_ = child_.text
            Classification_geographicExposure_ = self.gds_validate_string(Classification_geographicExposure_, node, 'Classification_geographicExposure')
            self.Classification_geographicExposure = Classification_geographicExposure_
        elif nodeName_ == 'Classification_geographicExposureType':
            Classification_geographicExposureType_ = child_.text
            Classification_geographicExposureType_ = self.gds_validate_string(Classification_geographicExposureType_, node, 'Classification_geographicExposureType')
            self.Classification_geographicExposureType = Classification_geographicExposureType_
        elif nodeName_ == 'Classification_primaryListingRegion':
            Classification_primaryListingRegion_ = child_.text
            Classification_primaryListingRegion_ = self.gds_validate_string(Classification_primaryListingRegion_, node, 'Classification_primaryListingRegion')
            self.Classification_primaryListingRegion = Classification_primaryListingRegion_
        elif nodeName_ == 'Classification_strategyType':
            Classification_strategyType_ = child_.text
            Classification_strategyType_ = self.gds_validate_string(Classification_strategyType_, node, 'Classification_strategyType')
            self.Classification_strategyType = Classification_strategyType_
        elif nodeName_ == 'Classification_subGroup1':
            Classification_subGroup1_ = child_.text
            Classification_subGroup1_ = self.gds_validate_string(Classification_subGroup1_, node, 'Classification_subGroup1')
            self.Classification_subGroup1 = Classification_subGroup1_
        elif nodeName_ == 'Classification_subGroup2':
            Classification_subGroup2_ = child_.text
            Classification_subGroup2_ = self.gds_validate_string(Classification_subGroup2_, node, 'Classification_subGroup2')
            self.Classification_subGroup2 = Classification_subGroup2_
        elif nodeName_ == 'Classification_subGroup3':
            Classification_subGroup3_ = child_.text
            Classification_subGroup3_ = self.gds_validate_string(Classification_subGroup3_, node, 'Classification_subGroup3')
            self.Classification_subGroup3 = Classification_subGroup3_
# end class ClassificationType


class CreationRedemptionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AuthorisedParticipants_authorisedParticipant_name=None, CreateRedeem_baseValue=None, CreateRedeem_clearingProcess=None, CreateRedeem_currency=None, CreateRedeem_customCutOffTime=None, CreateRedeem_cutOffTimeOffset=None, CreateRedeem_cutOffTimeZone=None, CreateRedeem_deliveryMethod_method=None, CreateRedeem_deliveryMethod_option=None, CreateRedeem_executionPriceNotification=None, CreateRedeem_feePerProspectus=None, CreateRedeem_feeType=None, CreateRedeem_method=None, CreateRedeem_minimumBlockSize=None, CreateRedeem_notes=None, CreateRedeem_option=None, CreateRedeem_regularCutOffTime=None, CreateRedeem_settlementPeriod=None, CreateRedeem_transactionFee_currency=None, CreateRedeem_transactionFee_value=None, CreateRedeem_type=None, CreateRedeem_unitSize=None, CreateRedeem_value=None, CreateRedeem_variableCost=None, CreateRedeem_variableCostUnitType=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.AuthorisedParticipants_authorisedParticipant_name = AuthorisedParticipants_authorisedParticipant_name
        self.CreateRedeem_baseValue = CreateRedeem_baseValue
        self.CreateRedeem_clearingProcess = CreateRedeem_clearingProcess
        self.CreateRedeem_currency = CreateRedeem_currency
        self.CreateRedeem_customCutOffTime = CreateRedeem_customCutOffTime
        self.CreateRedeem_cutOffTimeOffset = CreateRedeem_cutOffTimeOffset
        self.CreateRedeem_cutOffTimeZone = CreateRedeem_cutOffTimeZone
        self.CreateRedeem_deliveryMethod_method = CreateRedeem_deliveryMethod_method
        self.CreateRedeem_deliveryMethod_option = CreateRedeem_deliveryMethod_option
        self.CreateRedeem_executionPriceNotification = CreateRedeem_executionPriceNotification
        self.CreateRedeem_feePerProspectus = CreateRedeem_feePerProspectus
        self.CreateRedeem_feeType = CreateRedeem_feeType
        self.CreateRedeem_method = CreateRedeem_method
        self.CreateRedeem_minimumBlockSize = CreateRedeem_minimumBlockSize
        self.CreateRedeem_notes = CreateRedeem_notes
        self.CreateRedeem_option = CreateRedeem_option
        self.CreateRedeem_regularCutOffTime = CreateRedeem_regularCutOffTime
        self.CreateRedeem_settlementPeriod = CreateRedeem_settlementPeriod
        self.CreateRedeem_transactionFee_currency = CreateRedeem_transactionFee_currency
        self.CreateRedeem_transactionFee_value = CreateRedeem_transactionFee_value
        self.CreateRedeem_type = CreateRedeem_type
        self.CreateRedeem_unitSize = CreateRedeem_unitSize
        self.CreateRedeem_value = CreateRedeem_value
        self.CreateRedeem_variableCost = CreateRedeem_variableCost
        self.CreateRedeem_variableCostUnitType = CreateRedeem_variableCostUnitType
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CreationRedemptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CreationRedemptionType.subclass:
            return CreationRedemptionType.subclass(*args_, **kwargs_)
        else:
            return CreationRedemptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AuthorisedParticipants_authorisedParticipant_name(self):
        return self.AuthorisedParticipants_authorisedParticipant_name
    def set_AuthorisedParticipants_authorisedParticipant_name(self, AuthorisedParticipants_authorisedParticipant_name):
        self.AuthorisedParticipants_authorisedParticipant_name = AuthorisedParticipants_authorisedParticipant_name
    def get_CreateRedeem_baseValue(self):
        return self.CreateRedeem_baseValue
    def set_CreateRedeem_baseValue(self, CreateRedeem_baseValue):
        self.CreateRedeem_baseValue = CreateRedeem_baseValue
    def get_CreateRedeem_clearingProcess(self):
        return self.CreateRedeem_clearingProcess
    def set_CreateRedeem_clearingProcess(self, CreateRedeem_clearingProcess):
        self.CreateRedeem_clearingProcess = CreateRedeem_clearingProcess
    def get_CreateRedeem_currency(self):
        return self.CreateRedeem_currency
    def set_CreateRedeem_currency(self, CreateRedeem_currency):
        self.CreateRedeem_currency = CreateRedeem_currency
    def get_CreateRedeem_customCutOffTime(self):
        return self.CreateRedeem_customCutOffTime
    def set_CreateRedeem_customCutOffTime(self, CreateRedeem_customCutOffTime):
        self.CreateRedeem_customCutOffTime = CreateRedeem_customCutOffTime
    def get_CreateRedeem_cutOffTimeOffset(self):
        return self.CreateRedeem_cutOffTimeOffset
    def set_CreateRedeem_cutOffTimeOffset(self, CreateRedeem_cutOffTimeOffset):
        self.CreateRedeem_cutOffTimeOffset = CreateRedeem_cutOffTimeOffset
    def get_CreateRedeem_cutOffTimeZone(self):
        return self.CreateRedeem_cutOffTimeZone
    def set_CreateRedeem_cutOffTimeZone(self, CreateRedeem_cutOffTimeZone):
        self.CreateRedeem_cutOffTimeZone = CreateRedeem_cutOffTimeZone
    def get_CreateRedeem_deliveryMethod_method(self):
        return self.CreateRedeem_deliveryMethod_method
    def set_CreateRedeem_deliveryMethod_method(self, CreateRedeem_deliveryMethod_method):
        self.CreateRedeem_deliveryMethod_method = CreateRedeem_deliveryMethod_method
    def get_CreateRedeem_deliveryMethod_option(self):
        return self.CreateRedeem_deliveryMethod_option
    def set_CreateRedeem_deliveryMethod_option(self, CreateRedeem_deliveryMethod_option):
        self.CreateRedeem_deliveryMethod_option = CreateRedeem_deliveryMethod_option
    def get_CreateRedeem_executionPriceNotification(self):
        return self.CreateRedeem_executionPriceNotification
    def set_CreateRedeem_executionPriceNotification(self, CreateRedeem_executionPriceNotification):
        self.CreateRedeem_executionPriceNotification = CreateRedeem_executionPriceNotification
    def get_CreateRedeem_feePerProspectus(self):
        return self.CreateRedeem_feePerProspectus
    def set_CreateRedeem_feePerProspectus(self, CreateRedeem_feePerProspectus):
        self.CreateRedeem_feePerProspectus = CreateRedeem_feePerProspectus
    def get_CreateRedeem_feeType(self):
        return self.CreateRedeem_feeType
    def set_CreateRedeem_feeType(self, CreateRedeem_feeType):
        self.CreateRedeem_feeType = CreateRedeem_feeType
    def get_CreateRedeem_method(self):
        return self.CreateRedeem_method
    def set_CreateRedeem_method(self, CreateRedeem_method):
        self.CreateRedeem_method = CreateRedeem_method
    def get_CreateRedeem_minimumBlockSize(self):
        return self.CreateRedeem_minimumBlockSize
    def set_CreateRedeem_minimumBlockSize(self, CreateRedeem_minimumBlockSize):
        self.CreateRedeem_minimumBlockSize = CreateRedeem_minimumBlockSize
    def get_CreateRedeem_notes(self):
        return self.CreateRedeem_notes
    def set_CreateRedeem_notes(self, CreateRedeem_notes):
        self.CreateRedeem_notes = CreateRedeem_notes
    def get_CreateRedeem_option(self):
        return self.CreateRedeem_option
    def set_CreateRedeem_option(self, CreateRedeem_option):
        self.CreateRedeem_option = CreateRedeem_option
    def get_CreateRedeem_regularCutOffTime(self):
        return self.CreateRedeem_regularCutOffTime
    def set_CreateRedeem_regularCutOffTime(self, CreateRedeem_regularCutOffTime):
        self.CreateRedeem_regularCutOffTime = CreateRedeem_regularCutOffTime
    def get_CreateRedeem_settlementPeriod(self):
        return self.CreateRedeem_settlementPeriod
    def set_CreateRedeem_settlementPeriod(self, CreateRedeem_settlementPeriod):
        self.CreateRedeem_settlementPeriod = CreateRedeem_settlementPeriod
    def get_CreateRedeem_transactionFee_currency(self):
        return self.CreateRedeem_transactionFee_currency
    def set_CreateRedeem_transactionFee_currency(self, CreateRedeem_transactionFee_currency):
        self.CreateRedeem_transactionFee_currency = CreateRedeem_transactionFee_currency
    def get_CreateRedeem_transactionFee_value(self):
        return self.CreateRedeem_transactionFee_value
    def set_CreateRedeem_transactionFee_value(self, CreateRedeem_transactionFee_value):
        self.CreateRedeem_transactionFee_value = CreateRedeem_transactionFee_value
    def get_CreateRedeem_type(self):
        return self.CreateRedeem_type
    def set_CreateRedeem_type(self, CreateRedeem_type):
        self.CreateRedeem_type = CreateRedeem_type
    def get_CreateRedeem_unitSize(self):
        return self.CreateRedeem_unitSize
    def set_CreateRedeem_unitSize(self, CreateRedeem_unitSize):
        self.CreateRedeem_unitSize = CreateRedeem_unitSize
    def get_CreateRedeem_value(self):
        return self.CreateRedeem_value
    def set_CreateRedeem_value(self, CreateRedeem_value):
        self.CreateRedeem_value = CreateRedeem_value
    def get_CreateRedeem_variableCost(self):
        return self.CreateRedeem_variableCost
    def set_CreateRedeem_variableCost(self, CreateRedeem_variableCost):
        self.CreateRedeem_variableCost = CreateRedeem_variableCost
    def get_CreateRedeem_variableCostUnitType(self):
        return self.CreateRedeem_variableCostUnitType
    def set_CreateRedeem_variableCostUnitType(self, CreateRedeem_variableCostUnitType):
        self.CreateRedeem_variableCostUnitType = CreateRedeem_variableCostUnitType
    def hasContent_(self):
        if (
            self.AuthorisedParticipants_authorisedParticipant_name is not None or
            self.CreateRedeem_baseValue is not None or
            self.CreateRedeem_clearingProcess is not None or
            self.CreateRedeem_currency is not None or
            self.CreateRedeem_customCutOffTime is not None or
            self.CreateRedeem_cutOffTimeOffset is not None or
            self.CreateRedeem_cutOffTimeZone is not None or
            self.CreateRedeem_deliveryMethod_method is not None or
            self.CreateRedeem_deliveryMethod_option is not None or
            self.CreateRedeem_executionPriceNotification is not None or
            self.CreateRedeem_feePerProspectus is not None or
            self.CreateRedeem_feeType is not None or
            self.CreateRedeem_method is not None or
            self.CreateRedeem_minimumBlockSize is not None or
            self.CreateRedeem_notes is not None or
            self.CreateRedeem_option is not None or
            self.CreateRedeem_regularCutOffTime is not None or
            self.CreateRedeem_settlementPeriod is not None or
            self.CreateRedeem_transactionFee_currency is not None or
            self.CreateRedeem_transactionFee_value is not None or
            self.CreateRedeem_type is not None or
            self.CreateRedeem_unitSize is not None or
            self.CreateRedeem_value is not None or
            self.CreateRedeem_variableCost is not None or
            self.CreateRedeem_variableCostUnitType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CreationRedemptionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CreationRedemptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CreationRedemptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CreationRedemptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CreationRedemptionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CreationRedemptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AuthorisedParticipants_authorisedParticipant_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthorisedParticipants_authorisedParticipant_name>%s</%sAuthorisedParticipants_authorisedParticipant_name>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AuthorisedParticipants_authorisedParticipant_name), input_name='AuthorisedParticipants_authorisedParticipant_name')), namespaceprefix_ , eol_))
        if self.CreateRedeem_baseValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreateRedeem_baseValue>%s</%sCreateRedeem_baseValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreateRedeem_baseValue), input_name='CreateRedeem_baseValue')), namespaceprefix_ , eol_))
        if self.CreateRedeem_clearingProcess is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreateRedeem_clearingProcess>%s</%sCreateRedeem_clearingProcess>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreateRedeem_clearingProcess), input_name='CreateRedeem_clearingProcess')), namespaceprefix_ , eol_))
        if self.CreateRedeem_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreateRedeem_currency>%s</%sCreateRedeem_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreateRedeem_currency), input_name='CreateRedeem_currency')), namespaceprefix_ , eol_))
        if self.CreateRedeem_customCutOffTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreateRedeem_customCutOffTime>%s</%sCreateRedeem_customCutOffTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreateRedeem_customCutOffTime), input_name='CreateRedeem_customCutOffTime')), namespaceprefix_ , eol_))
        if self.CreateRedeem_cutOffTimeOffset is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreateRedeem_cutOffTimeOffset>%s</%sCreateRedeem_cutOffTimeOffset>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreateRedeem_cutOffTimeOffset), input_name='CreateRedeem_cutOffTimeOffset')), namespaceprefix_ , eol_))
        if self.CreateRedeem_cutOffTimeZone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreateRedeem_cutOffTimeZone>%s</%sCreateRedeem_cutOffTimeZone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreateRedeem_cutOffTimeZone), input_name='CreateRedeem_cutOffTimeZone')), namespaceprefix_ , eol_))
        if self.CreateRedeem_deliveryMethod_method is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreateRedeem_deliveryMethod_method>%s</%sCreateRedeem_deliveryMethod_method>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreateRedeem_deliveryMethod_method), input_name='CreateRedeem_deliveryMethod_method')), namespaceprefix_ , eol_))
        if self.CreateRedeem_deliveryMethod_option is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreateRedeem_deliveryMethod_option>%s</%sCreateRedeem_deliveryMethod_option>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreateRedeem_deliveryMethod_option), input_name='CreateRedeem_deliveryMethod_option')), namespaceprefix_ , eol_))
        if self.CreateRedeem_executionPriceNotification is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreateRedeem_executionPriceNotification>%s</%sCreateRedeem_executionPriceNotification>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreateRedeem_executionPriceNotification), input_name='CreateRedeem_executionPriceNotification')), namespaceprefix_ , eol_))
        if self.CreateRedeem_feePerProspectus is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreateRedeem_feePerProspectus>%s</%sCreateRedeem_feePerProspectus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreateRedeem_feePerProspectus), input_name='CreateRedeem_feePerProspectus')), namespaceprefix_ , eol_))
        if self.CreateRedeem_feeType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreateRedeem_feeType>%s</%sCreateRedeem_feeType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreateRedeem_feeType), input_name='CreateRedeem_feeType')), namespaceprefix_ , eol_))
        if self.CreateRedeem_method is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreateRedeem_method>%s</%sCreateRedeem_method>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreateRedeem_method), input_name='CreateRedeem_method')), namespaceprefix_ , eol_))
        if self.CreateRedeem_minimumBlockSize is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreateRedeem_minimumBlockSize>%s</%sCreateRedeem_minimumBlockSize>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreateRedeem_minimumBlockSize), input_name='CreateRedeem_minimumBlockSize')), namespaceprefix_ , eol_))
        if self.CreateRedeem_notes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreateRedeem_notes>%s</%sCreateRedeem_notes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreateRedeem_notes), input_name='CreateRedeem_notes')), namespaceprefix_ , eol_))
        if self.CreateRedeem_option is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreateRedeem_option>%s</%sCreateRedeem_option>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreateRedeem_option), input_name='CreateRedeem_option')), namespaceprefix_ , eol_))
        if self.CreateRedeem_regularCutOffTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreateRedeem_regularCutOffTime>%s</%sCreateRedeem_regularCutOffTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreateRedeem_regularCutOffTime), input_name='CreateRedeem_regularCutOffTime')), namespaceprefix_ , eol_))
        if self.CreateRedeem_settlementPeriod is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreateRedeem_settlementPeriod>%s</%sCreateRedeem_settlementPeriod>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreateRedeem_settlementPeriod), input_name='CreateRedeem_settlementPeriod')), namespaceprefix_ , eol_))
        if self.CreateRedeem_transactionFee_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreateRedeem_transactionFee_currency>%s</%sCreateRedeem_transactionFee_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreateRedeem_transactionFee_currency), input_name='CreateRedeem_transactionFee_currency')), namespaceprefix_ , eol_))
        if self.CreateRedeem_transactionFee_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreateRedeem_transactionFee_value>%s</%sCreateRedeem_transactionFee_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreateRedeem_transactionFee_value), input_name='CreateRedeem_transactionFee_value')), namespaceprefix_ , eol_))
        if self.CreateRedeem_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreateRedeem_type>%s</%sCreateRedeem_type>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreateRedeem_type), input_name='CreateRedeem_type')), namespaceprefix_ , eol_))
        if self.CreateRedeem_unitSize is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreateRedeem_unitSize>%s</%sCreateRedeem_unitSize>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreateRedeem_unitSize), input_name='CreateRedeem_unitSize')), namespaceprefix_ , eol_))
        if self.CreateRedeem_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreateRedeem_value>%s</%sCreateRedeem_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreateRedeem_value), input_name='CreateRedeem_value')), namespaceprefix_ , eol_))
        if self.CreateRedeem_variableCost is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreateRedeem_variableCost>%s</%sCreateRedeem_variableCost>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreateRedeem_variableCost), input_name='CreateRedeem_variableCost')), namespaceprefix_ , eol_))
        if self.CreateRedeem_variableCostUnitType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreateRedeem_variableCostUnitType>%s</%sCreateRedeem_variableCostUnitType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreateRedeem_variableCostUnitType), input_name='CreateRedeem_variableCostUnitType')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AuthorisedParticipants_authorisedParticipant_name':
            AuthorisedParticipants_authorisedParticipant_name_ = child_.text
            AuthorisedParticipants_authorisedParticipant_name_ = self.gds_validate_string(AuthorisedParticipants_authorisedParticipant_name_, node, 'AuthorisedParticipants_authorisedParticipant_name')
            self.AuthorisedParticipants_authorisedParticipant_name = AuthorisedParticipants_authorisedParticipant_name_
        elif nodeName_ == 'CreateRedeem_baseValue':
            CreateRedeem_baseValue_ = child_.text
            CreateRedeem_baseValue_ = self.gds_validate_string(CreateRedeem_baseValue_, node, 'CreateRedeem_baseValue')
            self.CreateRedeem_baseValue = CreateRedeem_baseValue_
        elif nodeName_ == 'CreateRedeem_clearingProcess':
            CreateRedeem_clearingProcess_ = child_.text
            CreateRedeem_clearingProcess_ = self.gds_validate_string(CreateRedeem_clearingProcess_, node, 'CreateRedeem_clearingProcess')
            self.CreateRedeem_clearingProcess = CreateRedeem_clearingProcess_
        elif nodeName_ == 'CreateRedeem_currency':
            CreateRedeem_currency_ = child_.text
            CreateRedeem_currency_ = self.gds_validate_string(CreateRedeem_currency_, node, 'CreateRedeem_currency')
            self.CreateRedeem_currency = CreateRedeem_currency_
        elif nodeName_ == 'CreateRedeem_customCutOffTime':
            CreateRedeem_customCutOffTime_ = child_.text
            CreateRedeem_customCutOffTime_ = self.gds_validate_string(CreateRedeem_customCutOffTime_, node, 'CreateRedeem_customCutOffTime')
            self.CreateRedeem_customCutOffTime = CreateRedeem_customCutOffTime_
        elif nodeName_ == 'CreateRedeem_cutOffTimeOffset':
            CreateRedeem_cutOffTimeOffset_ = child_.text
            CreateRedeem_cutOffTimeOffset_ = self.gds_validate_string(CreateRedeem_cutOffTimeOffset_, node, 'CreateRedeem_cutOffTimeOffset')
            self.CreateRedeem_cutOffTimeOffset = CreateRedeem_cutOffTimeOffset_
        elif nodeName_ == 'CreateRedeem_cutOffTimeZone':
            CreateRedeem_cutOffTimeZone_ = child_.text
            CreateRedeem_cutOffTimeZone_ = self.gds_validate_string(CreateRedeem_cutOffTimeZone_, node, 'CreateRedeem_cutOffTimeZone')
            self.CreateRedeem_cutOffTimeZone = CreateRedeem_cutOffTimeZone_
        elif nodeName_ == 'CreateRedeem_deliveryMethod_method':
            CreateRedeem_deliveryMethod_method_ = child_.text
            CreateRedeem_deliveryMethod_method_ = self.gds_validate_string(CreateRedeem_deliveryMethod_method_, node, 'CreateRedeem_deliveryMethod_method')
            self.CreateRedeem_deliveryMethod_method = CreateRedeem_deliveryMethod_method_
        elif nodeName_ == 'CreateRedeem_deliveryMethod_option':
            CreateRedeem_deliveryMethod_option_ = child_.text
            CreateRedeem_deliveryMethod_option_ = self.gds_validate_string(CreateRedeem_deliveryMethod_option_, node, 'CreateRedeem_deliveryMethod_option')
            self.CreateRedeem_deliveryMethod_option = CreateRedeem_deliveryMethod_option_
        elif nodeName_ == 'CreateRedeem_executionPriceNotification':
            CreateRedeem_executionPriceNotification_ = child_.text
            CreateRedeem_executionPriceNotification_ = self.gds_validate_string(CreateRedeem_executionPriceNotification_, node, 'CreateRedeem_executionPriceNotification')
            self.CreateRedeem_executionPriceNotification = CreateRedeem_executionPriceNotification_
        elif nodeName_ == 'CreateRedeem_feePerProspectus':
            CreateRedeem_feePerProspectus_ = child_.text
            CreateRedeem_feePerProspectus_ = self.gds_validate_string(CreateRedeem_feePerProspectus_, node, 'CreateRedeem_feePerProspectus')
            self.CreateRedeem_feePerProspectus = CreateRedeem_feePerProspectus_
        elif nodeName_ == 'CreateRedeem_feeType':
            CreateRedeem_feeType_ = child_.text
            CreateRedeem_feeType_ = self.gds_validate_string(CreateRedeem_feeType_, node, 'CreateRedeem_feeType')
            self.CreateRedeem_feeType = CreateRedeem_feeType_
        elif nodeName_ == 'CreateRedeem_method':
            CreateRedeem_method_ = child_.text
            CreateRedeem_method_ = self.gds_validate_string(CreateRedeem_method_, node, 'CreateRedeem_method')
            self.CreateRedeem_method = CreateRedeem_method_
        elif nodeName_ == 'CreateRedeem_minimumBlockSize':
            CreateRedeem_minimumBlockSize_ = child_.text
            CreateRedeem_minimumBlockSize_ = self.gds_validate_string(CreateRedeem_minimumBlockSize_, node, 'CreateRedeem_minimumBlockSize')
            self.CreateRedeem_minimumBlockSize = CreateRedeem_minimumBlockSize_
        elif nodeName_ == 'CreateRedeem_notes':
            CreateRedeem_notes_ = child_.text
            CreateRedeem_notes_ = self.gds_validate_string(CreateRedeem_notes_, node, 'CreateRedeem_notes')
            self.CreateRedeem_notes = CreateRedeem_notes_
        elif nodeName_ == 'CreateRedeem_option':
            CreateRedeem_option_ = child_.text
            CreateRedeem_option_ = self.gds_validate_string(CreateRedeem_option_, node, 'CreateRedeem_option')
            self.CreateRedeem_option = CreateRedeem_option_
        elif nodeName_ == 'CreateRedeem_regularCutOffTime':
            CreateRedeem_regularCutOffTime_ = child_.text
            CreateRedeem_regularCutOffTime_ = self.gds_validate_string(CreateRedeem_regularCutOffTime_, node, 'CreateRedeem_regularCutOffTime')
            self.CreateRedeem_regularCutOffTime = CreateRedeem_regularCutOffTime_
        elif nodeName_ == 'CreateRedeem_settlementPeriod':
            CreateRedeem_settlementPeriod_ = child_.text
            CreateRedeem_settlementPeriod_ = self.gds_validate_string(CreateRedeem_settlementPeriod_, node, 'CreateRedeem_settlementPeriod')
            self.CreateRedeem_settlementPeriod = CreateRedeem_settlementPeriod_
        elif nodeName_ == 'CreateRedeem_transactionFee_currency':
            CreateRedeem_transactionFee_currency_ = child_.text
            CreateRedeem_transactionFee_currency_ = self.gds_validate_string(CreateRedeem_transactionFee_currency_, node, 'CreateRedeem_transactionFee_currency')
            self.CreateRedeem_transactionFee_currency = CreateRedeem_transactionFee_currency_
        elif nodeName_ == 'CreateRedeem_transactionFee_value':
            CreateRedeem_transactionFee_value_ = child_.text
            CreateRedeem_transactionFee_value_ = self.gds_validate_string(CreateRedeem_transactionFee_value_, node, 'CreateRedeem_transactionFee_value')
            self.CreateRedeem_transactionFee_value = CreateRedeem_transactionFee_value_
        elif nodeName_ == 'CreateRedeem_type':
            CreateRedeem_type_ = child_.text
            CreateRedeem_type_ = self.gds_validate_string(CreateRedeem_type_, node, 'CreateRedeem_type')
            self.CreateRedeem_type = CreateRedeem_type_
        elif nodeName_ == 'CreateRedeem_unitSize':
            CreateRedeem_unitSize_ = child_.text
            CreateRedeem_unitSize_ = self.gds_validate_string(CreateRedeem_unitSize_, node, 'CreateRedeem_unitSize')
            self.CreateRedeem_unitSize = CreateRedeem_unitSize_
        elif nodeName_ == 'CreateRedeem_value':
            CreateRedeem_value_ = child_.text
            CreateRedeem_value_ = self.gds_validate_string(CreateRedeem_value_, node, 'CreateRedeem_value')
            self.CreateRedeem_value = CreateRedeem_value_
        elif nodeName_ == 'CreateRedeem_variableCost':
            CreateRedeem_variableCost_ = child_.text
            CreateRedeem_variableCost_ = self.gds_validate_string(CreateRedeem_variableCost_, node, 'CreateRedeem_variableCost')
            self.CreateRedeem_variableCost = CreateRedeem_variableCost_
        elif nodeName_ == 'CreateRedeem_variableCostUnitType':
            CreateRedeem_variableCostUnitType_ = child_.text
            CreateRedeem_variableCostUnitType_ = self.gds_validate_string(CreateRedeem_variableCostUnitType_, node, 'CreateRedeem_variableCostUnitType')
            self.CreateRedeem_variableCostUnitType = CreateRedeem_variableCostUnitType_
# end class CreationRedemptionType


class DividendInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Info_dividendFrequency=None, Info_dividendNotes=None, Info_isDividendReinvested=None, Info_useOfIncome=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Info_dividendFrequency = Info_dividendFrequency
        self.Info_dividendNotes = Info_dividendNotes
        self.Info_isDividendReinvested = Info_isDividendReinvested
        self.Info_useOfIncome = Info_useOfIncome
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DividendInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DividendInformationType.subclass:
            return DividendInformationType.subclass(*args_, **kwargs_)
        else:
            return DividendInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Info_dividendFrequency(self):
        return self.Info_dividendFrequency
    def set_Info_dividendFrequency(self, Info_dividendFrequency):
        self.Info_dividendFrequency = Info_dividendFrequency
    def get_Info_dividendNotes(self):
        return self.Info_dividendNotes
    def set_Info_dividendNotes(self, Info_dividendNotes):
        self.Info_dividendNotes = Info_dividendNotes
    def get_Info_isDividendReinvested(self):
        return self.Info_isDividendReinvested
    def set_Info_isDividendReinvested(self, Info_isDividendReinvested):
        self.Info_isDividendReinvested = Info_isDividendReinvested
    def get_Info_useOfIncome(self):
        return self.Info_useOfIncome
    def set_Info_useOfIncome(self, Info_useOfIncome):
        self.Info_useOfIncome = Info_useOfIncome
    def hasContent_(self):
        if (
            self.Info_dividendFrequency is not None or
            self.Info_dividendNotes is not None or
            self.Info_isDividendReinvested is not None or
            self.Info_useOfIncome is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DividendInformationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DividendInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DividendInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DividendInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DividendInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DividendInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Info_dividendFrequency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_dividendFrequency>%s</%sInfo_dividendFrequency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_dividendFrequency), input_name='Info_dividendFrequency')), namespaceprefix_ , eol_))
        if self.Info_dividendNotes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_dividendNotes>%s</%sInfo_dividendNotes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_dividendNotes), input_name='Info_dividendNotes')), namespaceprefix_ , eol_))
        if self.Info_isDividendReinvested is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_isDividendReinvested>%s</%sInfo_isDividendReinvested>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_isDividendReinvested), input_name='Info_isDividendReinvested')), namespaceprefix_ , eol_))
        if self.Info_useOfIncome is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_useOfIncome>%s</%sInfo_useOfIncome>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_useOfIncome), input_name='Info_useOfIncome')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Info_dividendFrequency':
            Info_dividendFrequency_ = child_.text
            Info_dividendFrequency_ = self.gds_validate_string(Info_dividendFrequency_, node, 'Info_dividendFrequency')
            self.Info_dividendFrequency = Info_dividendFrequency_
        elif nodeName_ == 'Info_dividendNotes':
            Info_dividendNotes_ = child_.text
            Info_dividendNotes_ = self.gds_validate_string(Info_dividendNotes_, node, 'Info_dividendNotes')
            self.Info_dividendNotes = Info_dividendNotes_
        elif nodeName_ == 'Info_isDividendReinvested':
            Info_isDividendReinvested_ = child_.text
            Info_isDividendReinvested_ = self.gds_validate_string(Info_isDividendReinvested_, node, 'Info_isDividendReinvested')
            self.Info_isDividendReinvested = Info_isDividendReinvested_
        elif nodeName_ == 'Info_useOfIncome':
            Info_useOfIncome_ = child_.text
            Info_useOfIncome_ = self.gds_validate_string(Info_useOfIncome_, node, 'Info_useOfIncome')
            self.Info_useOfIncome = Info_useOfIncome_
# end class DividendInformationType


class FeesandExpensesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Info_acquiredFeesandExpenses=None, Info_distributionFee=None, Info_feeWaiversandExpenses=None, Info_grossTER=None, Info_hasEntryFees=None, Info_hasExitFees=None, Info_managementFee=None, Info_netTER=None, Info_otherExpenses=None, Info_performanceFees=None, Info_subAdvisorFee=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Info_acquiredFeesandExpenses = Info_acquiredFeesandExpenses
        self.Info_distributionFee = Info_distributionFee
        self.Info_feeWaiversandExpenses = Info_feeWaiversandExpenses
        self.Info_grossTER = Info_grossTER
        self.Info_hasEntryFees = Info_hasEntryFees
        self.Info_hasExitFees = Info_hasExitFees
        self.Info_managementFee = Info_managementFee
        self.Info_netTER = Info_netTER
        self.Info_otherExpenses = Info_otherExpenses
        self.Info_performanceFees = Info_performanceFees
        self.Info_subAdvisorFee = Info_subAdvisorFee
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FeesandExpensesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FeesandExpensesType.subclass:
            return FeesandExpensesType.subclass(*args_, **kwargs_)
        else:
            return FeesandExpensesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Info_acquiredFeesandExpenses(self):
        return self.Info_acquiredFeesandExpenses
    def set_Info_acquiredFeesandExpenses(self, Info_acquiredFeesandExpenses):
        self.Info_acquiredFeesandExpenses = Info_acquiredFeesandExpenses
    def get_Info_distributionFee(self):
        return self.Info_distributionFee
    def set_Info_distributionFee(self, Info_distributionFee):
        self.Info_distributionFee = Info_distributionFee
    def get_Info_feeWaiversandExpenses(self):
        return self.Info_feeWaiversandExpenses
    def set_Info_feeWaiversandExpenses(self, Info_feeWaiversandExpenses):
        self.Info_feeWaiversandExpenses = Info_feeWaiversandExpenses
    def get_Info_grossTER(self):
        return self.Info_grossTER
    def set_Info_grossTER(self, Info_grossTER):
        self.Info_grossTER = Info_grossTER
    def get_Info_hasEntryFees(self):
        return self.Info_hasEntryFees
    def set_Info_hasEntryFees(self, Info_hasEntryFees):
        self.Info_hasEntryFees = Info_hasEntryFees
    def get_Info_hasExitFees(self):
        return self.Info_hasExitFees
    def set_Info_hasExitFees(self, Info_hasExitFees):
        self.Info_hasExitFees = Info_hasExitFees
    def get_Info_managementFee(self):
        return self.Info_managementFee
    def set_Info_managementFee(self, Info_managementFee):
        self.Info_managementFee = Info_managementFee
    def get_Info_netTER(self):
        return self.Info_netTER
    def set_Info_netTER(self, Info_netTER):
        self.Info_netTER = Info_netTER
    def get_Info_otherExpenses(self):
        return self.Info_otherExpenses
    def set_Info_otherExpenses(self, Info_otherExpenses):
        self.Info_otherExpenses = Info_otherExpenses
    def get_Info_performanceFees(self):
        return self.Info_performanceFees
    def set_Info_performanceFees(self, Info_performanceFees):
        self.Info_performanceFees = Info_performanceFees
    def get_Info_subAdvisorFee(self):
        return self.Info_subAdvisorFee
    def set_Info_subAdvisorFee(self, Info_subAdvisorFee):
        self.Info_subAdvisorFee = Info_subAdvisorFee
    def hasContent_(self):
        if (
            self.Info_acquiredFeesandExpenses is not None or
            self.Info_distributionFee is not None or
            self.Info_feeWaiversandExpenses is not None or
            self.Info_grossTER is not None or
            self.Info_hasEntryFees is not None or
            self.Info_hasExitFees is not None or
            self.Info_managementFee is not None or
            self.Info_netTER is not None or
            self.Info_otherExpenses is not None or
            self.Info_performanceFees is not None or
            self.Info_subAdvisorFee is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FeesandExpensesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FeesandExpensesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FeesandExpensesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FeesandExpensesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FeesandExpensesType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FeesandExpensesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Info_acquiredFeesandExpenses is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_acquiredFeesandExpenses>%s</%sInfo_acquiredFeesandExpenses>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_acquiredFeesandExpenses), input_name='Info_acquiredFeesandExpenses')), namespaceprefix_ , eol_))
        if self.Info_distributionFee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_distributionFee>%s</%sInfo_distributionFee>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_distributionFee), input_name='Info_distributionFee')), namespaceprefix_ , eol_))
        if self.Info_feeWaiversandExpenses is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_feeWaiversandExpenses>%s</%sInfo_feeWaiversandExpenses>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_feeWaiversandExpenses), input_name='Info_feeWaiversandExpenses')), namespaceprefix_ , eol_))
        if self.Info_grossTER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_grossTER>%s</%sInfo_grossTER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_grossTER), input_name='Info_grossTER')), namespaceprefix_ , eol_))
        if self.Info_hasEntryFees is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_hasEntryFees>%s</%sInfo_hasEntryFees>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_hasEntryFees), input_name='Info_hasEntryFees')), namespaceprefix_ , eol_))
        if self.Info_hasExitFees is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_hasExitFees>%s</%sInfo_hasExitFees>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_hasExitFees), input_name='Info_hasExitFees')), namespaceprefix_ , eol_))
        if self.Info_managementFee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_managementFee>%s</%sInfo_managementFee>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_managementFee), input_name='Info_managementFee')), namespaceprefix_ , eol_))
        if self.Info_netTER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_netTER>%s</%sInfo_netTER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_netTER), input_name='Info_netTER')), namespaceprefix_ , eol_))
        if self.Info_otherExpenses is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_otherExpenses>%s</%sInfo_otherExpenses>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_otherExpenses), input_name='Info_otherExpenses')), namespaceprefix_ , eol_))
        if self.Info_performanceFees is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_performanceFees>%s</%sInfo_performanceFees>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_performanceFees), input_name='Info_performanceFees')), namespaceprefix_ , eol_))
        if self.Info_subAdvisorFee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_subAdvisorFee>%s</%sInfo_subAdvisorFee>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_subAdvisorFee), input_name='Info_subAdvisorFee')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Info_acquiredFeesandExpenses':
            Info_acquiredFeesandExpenses_ = child_.text
            Info_acquiredFeesandExpenses_ = self.gds_validate_string(Info_acquiredFeesandExpenses_, node, 'Info_acquiredFeesandExpenses')
            self.Info_acquiredFeesandExpenses = Info_acquiredFeesandExpenses_
        elif nodeName_ == 'Info_distributionFee':
            Info_distributionFee_ = child_.text
            Info_distributionFee_ = self.gds_validate_string(Info_distributionFee_, node, 'Info_distributionFee')
            self.Info_distributionFee = Info_distributionFee_
        elif nodeName_ == 'Info_feeWaiversandExpenses':
            Info_feeWaiversandExpenses_ = child_.text
            Info_feeWaiversandExpenses_ = self.gds_validate_string(Info_feeWaiversandExpenses_, node, 'Info_feeWaiversandExpenses')
            self.Info_feeWaiversandExpenses = Info_feeWaiversandExpenses_
        elif nodeName_ == 'Info_grossTER':
            Info_grossTER_ = child_.text
            Info_grossTER_ = self.gds_validate_string(Info_grossTER_, node, 'Info_grossTER')
            self.Info_grossTER = Info_grossTER_
        elif nodeName_ == 'Info_hasEntryFees':
            Info_hasEntryFees_ = child_.text
            Info_hasEntryFees_ = self.gds_validate_string(Info_hasEntryFees_, node, 'Info_hasEntryFees')
            self.Info_hasEntryFees = Info_hasEntryFees_
        elif nodeName_ == 'Info_hasExitFees':
            Info_hasExitFees_ = child_.text
            Info_hasExitFees_ = self.gds_validate_string(Info_hasExitFees_, node, 'Info_hasExitFees')
            self.Info_hasExitFees = Info_hasExitFees_
        elif nodeName_ == 'Info_managementFee':
            Info_managementFee_ = child_.text
            Info_managementFee_ = self.gds_validate_string(Info_managementFee_, node, 'Info_managementFee')
            self.Info_managementFee = Info_managementFee_
        elif nodeName_ == 'Info_netTER':
            Info_netTER_ = child_.text
            Info_netTER_ = self.gds_validate_string(Info_netTER_, node, 'Info_netTER')
            self.Info_netTER = Info_netTER_
        elif nodeName_ == 'Info_otherExpenses':
            Info_otherExpenses_ = child_.text
            Info_otherExpenses_ = self.gds_validate_string(Info_otherExpenses_, node, 'Info_otherExpenses')
            self.Info_otherExpenses = Info_otherExpenses_
        elif nodeName_ == 'Info_performanceFees':
            Info_performanceFees_ = child_.text
            Info_performanceFees_ = self.gds_validate_string(Info_performanceFees_, node, 'Info_performanceFees')
            self.Info_performanceFees = Info_performanceFees_
        elif nodeName_ == 'Info_subAdvisorFee':
            Info_subAdvisorFee_ = child_.text
            Info_subAdvisorFee_ = self.gds_validate_string(Info_subAdvisorFee_, node, 'Info_subAdvisorFee')
            self.Info_subAdvisorFee = Info_subAdvisorFee_
# end class FeesandExpensesType


class FutureExchangesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FutureExchanges_futureExchange_currency=None, FutureExchanges_futureExchange_exchangeId=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.FutureExchanges_futureExchange_currency = FutureExchanges_futureExchange_currency
        self.FutureExchanges_futureExchange_exchangeId = FutureExchanges_futureExchange_exchangeId
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FutureExchangesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FutureExchangesType.subclass:
            return FutureExchangesType.subclass(*args_, **kwargs_)
        else:
            return FutureExchangesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FutureExchanges_futureExchange_currency(self):
        return self.FutureExchanges_futureExchange_currency
    def set_FutureExchanges_futureExchange_currency(self, FutureExchanges_futureExchange_currency):
        self.FutureExchanges_futureExchange_currency = FutureExchanges_futureExchange_currency
    def get_FutureExchanges_futureExchange_exchangeId(self):
        return self.FutureExchanges_futureExchange_exchangeId
    def set_FutureExchanges_futureExchange_exchangeId(self, FutureExchanges_futureExchange_exchangeId):
        self.FutureExchanges_futureExchange_exchangeId = FutureExchanges_futureExchange_exchangeId
    def hasContent_(self):
        if (
            self.FutureExchanges_futureExchange_currency is not None or
            self.FutureExchanges_futureExchange_exchangeId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FutureExchangesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FutureExchangesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FutureExchangesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FutureExchangesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FutureExchangesType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FutureExchangesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FutureExchanges_futureExchange_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFutureExchanges_futureExchange_currency>%s</%sFutureExchanges_futureExchange_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FutureExchanges_futureExchange_currency), input_name='FutureExchanges_futureExchange_currency')), namespaceprefix_ , eol_))
        if self.FutureExchanges_futureExchange_exchangeId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFutureExchanges_futureExchange_exchangeId>%s</%sFutureExchanges_futureExchange_exchangeId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FutureExchanges_futureExchange_exchangeId), input_name='FutureExchanges_futureExchange_exchangeId')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FutureExchanges_futureExchange_currency':
            FutureExchanges_futureExchange_currency_ = child_.text
            FutureExchanges_futureExchange_currency_ = self.gds_validate_string(FutureExchanges_futureExchange_currency_, node, 'FutureExchanges_futureExchange_currency')
            self.FutureExchanges_futureExchange_currency = FutureExchanges_futureExchange_currency_
        elif nodeName_ == 'FutureExchanges_futureExchange_exchangeId':
            FutureExchanges_futureExchange_exchangeId_ = child_.text
            FutureExchanges_futureExchange_exchangeId_ = self.gds_validate_string(FutureExchanges_futureExchange_exchangeId_, node, 'FutureExchanges_futureExchange_exchangeId')
            self.FutureExchanges_futureExchange_exchangeId = FutureExchanges_futureExchange_exchangeId_
# end class FutureExchangesType


class GeneralInformationType93(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, assetId=None, Info_description=None, Info_family=None, Info_fiscalYearEnd=None, Info_isCustom=None, Info_launchDate=None, Info_leverage=None, Info_managementStructure=None, Info_name=None, Info_portfolioTurnover=None, Info_productGrouping=None, Info_productGroupingId=None, Info_reportingFrequency=None, Info_returnType=None, lastUpdated=None, Listings_listing_id=None, Structure_fundStructure=None, Structure_trust=None, Structure_type=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.assetId = assetId
        self.Info_description = Info_description
        self.Info_family = Info_family
        self.Info_fiscalYearEnd = Info_fiscalYearEnd
        self.Info_isCustom = Info_isCustom
        if isinstance(Info_launchDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Info_launchDate, '%Y-%m-%d').date()
        else:
            initvalue_ = Info_launchDate
        self.Info_launchDate = initvalue_
        self.Info_leverage = Info_leverage
        self.Info_managementStructure = Info_managementStructure
        self.Info_name = Info_name
        self.Info_portfolioTurnover = Info_portfolioTurnover
        self.Info_productGrouping = Info_productGrouping
        self.Info_productGroupingId = Info_productGroupingId
        self.Info_reportingFrequency = Info_reportingFrequency
        self.Info_returnType = Info_returnType
        self.lastUpdated = lastUpdated
        self.Listings_listing_id = Listings_listing_id
        self.Structure_fundStructure = Structure_fundStructure
        self.Structure_trust = Structure_trust
        self.Structure_type = Structure_type
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralInformationType93)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralInformationType93.subclass:
            return GeneralInformationType93.subclass(*args_, **kwargs_)
        else:
            return GeneralInformationType93(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_assetId(self):
        return self.assetId
    def set_assetId(self, assetId):
        self.assetId = assetId
    def get_Info_description(self):
        return self.Info_description
    def set_Info_description(self, Info_description):
        self.Info_description = Info_description
    def get_Info_family(self):
        return self.Info_family
    def set_Info_family(self, Info_family):
        self.Info_family = Info_family
    def get_Info_fiscalYearEnd(self):
        return self.Info_fiscalYearEnd
    def set_Info_fiscalYearEnd(self, Info_fiscalYearEnd):
        self.Info_fiscalYearEnd = Info_fiscalYearEnd
    def get_Info_isCustom(self):
        return self.Info_isCustom
    def set_Info_isCustom(self, Info_isCustom):
        self.Info_isCustom = Info_isCustom
    def get_Info_launchDate(self):
        return self.Info_launchDate
    def set_Info_launchDate(self, Info_launchDate):
        self.Info_launchDate = Info_launchDate
    def get_Info_leverage(self):
        return self.Info_leverage
    def set_Info_leverage(self, Info_leverage):
        self.Info_leverage = Info_leverage
    def get_Info_managementStructure(self):
        return self.Info_managementStructure
    def set_Info_managementStructure(self, Info_managementStructure):
        self.Info_managementStructure = Info_managementStructure
    def get_Info_name(self):
        return self.Info_name
    def set_Info_name(self, Info_name):
        self.Info_name = Info_name
    def get_Info_portfolioTurnover(self):
        return self.Info_portfolioTurnover
    def set_Info_portfolioTurnover(self, Info_portfolioTurnover):
        self.Info_portfolioTurnover = Info_portfolioTurnover
    def get_Info_productGrouping(self):
        return self.Info_productGrouping
    def set_Info_productGrouping(self, Info_productGrouping):
        self.Info_productGrouping = Info_productGrouping
    def get_Info_productGroupingId(self):
        return self.Info_productGroupingId
    def set_Info_productGroupingId(self, Info_productGroupingId):
        self.Info_productGroupingId = Info_productGroupingId
    def get_Info_reportingFrequency(self):
        return self.Info_reportingFrequency
    def set_Info_reportingFrequency(self, Info_reportingFrequency):
        self.Info_reportingFrequency = Info_reportingFrequency
    def get_Info_returnType(self):
        return self.Info_returnType
    def set_Info_returnType(self, Info_returnType):
        self.Info_returnType = Info_returnType
    def get_lastUpdated(self):
        return self.lastUpdated
    def set_lastUpdated(self, lastUpdated):
        self.lastUpdated = lastUpdated
    def get_Listings_listing_id(self):
        return self.Listings_listing_id
    def set_Listings_listing_id(self, Listings_listing_id):
        self.Listings_listing_id = Listings_listing_id
    def get_Structure_fundStructure(self):
        return self.Structure_fundStructure
    def set_Structure_fundStructure(self, Structure_fundStructure):
        self.Structure_fundStructure = Structure_fundStructure
    def get_Structure_trust(self):
        return self.Structure_trust
    def set_Structure_trust(self, Structure_trust):
        self.Structure_trust = Structure_trust
    def get_Structure_type(self):
        return self.Structure_type
    def set_Structure_type(self, Structure_type):
        self.Structure_type = Structure_type
    def hasContent_(self):
        if (
            self.assetId is not None or
            self.Info_description is not None or
            self.Info_family is not None or
            self.Info_fiscalYearEnd is not None or
            self.Info_isCustom is not None or
            self.Info_launchDate is not None or
            self.Info_leverage is not None or
            self.Info_managementStructure is not None or
            self.Info_name is not None or
            self.Info_portfolioTurnover is not None or
            self.Info_productGrouping is not None or
            self.Info_productGroupingId is not None or
            self.Info_reportingFrequency is not None or
            self.Info_returnType is not None or
            self.lastUpdated is not None or
            self.Listings_listing_id is not None or
            self.Structure_fundStructure is not None or
            self.Structure_trust is not None or
            self.Structure_type is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralInformationType93', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralInformationType93')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralInformationType93')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralInformationType93', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralInformationType93'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralInformationType93', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.assetId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sassetId>%s</%sassetId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.assetId), input_name='assetId')), namespaceprefix_ , eol_))
        if self.Info_description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_description>%s</%sInfo_description>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_description), input_name='Info_description')), namespaceprefix_ , eol_))
        if self.Info_family is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_family>%s</%sInfo_family>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_family), input_name='Info_family')), namespaceprefix_ , eol_))
        if self.Info_fiscalYearEnd is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_fiscalYearEnd>%s</%sInfo_fiscalYearEnd>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_fiscalYearEnd), input_name='Info_fiscalYearEnd')), namespaceprefix_ , eol_))
        if self.Info_isCustom is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_isCustom>%s</%sInfo_isCustom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_isCustom), input_name='Info_isCustom')), namespaceprefix_ , eol_))
        if self.Info_launchDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_launchDate>%s</%sInfo_launchDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Info_launchDate, input_name='Info_launchDate'), namespaceprefix_ , eol_))
        if self.Info_leverage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_leverage>%s</%sInfo_leverage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_leverage), input_name='Info_leverage')), namespaceprefix_ , eol_))
        if self.Info_managementStructure is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_managementStructure>%s</%sInfo_managementStructure>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_managementStructure), input_name='Info_managementStructure')), namespaceprefix_ , eol_))
        if self.Info_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_name>%s</%sInfo_name>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_name), input_name='Info_name')), namespaceprefix_ , eol_))
        if self.Info_portfolioTurnover is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_portfolioTurnover>%s</%sInfo_portfolioTurnover>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_portfolioTurnover), input_name='Info_portfolioTurnover')), namespaceprefix_ , eol_))
        if self.Info_productGrouping is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_productGrouping>%s</%sInfo_productGrouping>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_productGrouping), input_name='Info_productGrouping')), namespaceprefix_ , eol_))
        if self.Info_productGroupingId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_productGroupingId>%s</%sInfo_productGroupingId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_productGroupingId), input_name='Info_productGroupingId')), namespaceprefix_ , eol_))
        if self.Info_reportingFrequency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_reportingFrequency>%s</%sInfo_reportingFrequency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_reportingFrequency), input_name='Info_reportingFrequency')), namespaceprefix_ , eol_))
        if self.Info_returnType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_returnType>%s</%sInfo_returnType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_returnType), input_name='Info_returnType')), namespaceprefix_ , eol_))
        if self.lastUpdated is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastUpdated>%s</%slastUpdated>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastUpdated), input_name='lastUpdated')), namespaceprefix_ , eol_))
        if self.Listings_listing_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListings_listing_id>%s</%sListings_listing_id>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Listings_listing_id), input_name='Listings_listing_id')), namespaceprefix_ , eol_))
        if self.Structure_fundStructure is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStructure_fundStructure>%s</%sStructure_fundStructure>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Structure_fundStructure), input_name='Structure_fundStructure')), namespaceprefix_ , eol_))
        if self.Structure_trust is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStructure_trust>%s</%sStructure_trust>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Structure_trust), input_name='Structure_trust')), namespaceprefix_ , eol_))
        if self.Structure_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStructure_type>%s</%sStructure_type>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Structure_type), input_name='Structure_type')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'assetId':
            assetId_ = child_.text
            assetId_ = self.gds_validate_string(assetId_, node, 'assetId')
            self.assetId = assetId_
        elif nodeName_ == 'Info_description':
            Info_description_ = child_.text
            Info_description_ = self.gds_validate_string(Info_description_, node, 'Info_description')
            self.Info_description = Info_description_
        elif nodeName_ == 'Info_family':
            Info_family_ = child_.text
            Info_family_ = self.gds_validate_string(Info_family_, node, 'Info_family')
            self.Info_family = Info_family_
        elif nodeName_ == 'Info_fiscalYearEnd':
            Info_fiscalYearEnd_ = child_.text
            Info_fiscalYearEnd_ = self.gds_validate_string(Info_fiscalYearEnd_, node, 'Info_fiscalYearEnd')
            self.Info_fiscalYearEnd = Info_fiscalYearEnd_
        elif nodeName_ == 'Info_isCustom':
            Info_isCustom_ = child_.text
            Info_isCustom_ = self.gds_validate_string(Info_isCustom_, node, 'Info_isCustom')
            self.Info_isCustom = Info_isCustom_
        elif nodeName_ == 'Info_launchDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Info_launchDate = dval_
        elif nodeName_ == 'Info_leverage':
            Info_leverage_ = child_.text
            Info_leverage_ = self.gds_validate_string(Info_leverage_, node, 'Info_leverage')
            self.Info_leverage = Info_leverage_
        elif nodeName_ == 'Info_managementStructure':
            Info_managementStructure_ = child_.text
            Info_managementStructure_ = self.gds_validate_string(Info_managementStructure_, node, 'Info_managementStructure')
            self.Info_managementStructure = Info_managementStructure_
        elif nodeName_ == 'Info_name':
            Info_name_ = child_.text
            Info_name_ = self.gds_validate_string(Info_name_, node, 'Info_name')
            self.Info_name = Info_name_
        elif nodeName_ == 'Info_portfolioTurnover':
            Info_portfolioTurnover_ = child_.text
            Info_portfolioTurnover_ = self.gds_validate_string(Info_portfolioTurnover_, node, 'Info_portfolioTurnover')
            self.Info_portfolioTurnover = Info_portfolioTurnover_
        elif nodeName_ == 'Info_productGrouping':
            Info_productGrouping_ = child_.text
            Info_productGrouping_ = self.gds_validate_string(Info_productGrouping_, node, 'Info_productGrouping')
            self.Info_productGrouping = Info_productGrouping_
        elif nodeName_ == 'Info_productGroupingId':
            Info_productGroupingId_ = child_.text
            Info_productGroupingId_ = self.gds_validate_string(Info_productGroupingId_, node, 'Info_productGroupingId')
            self.Info_productGroupingId = Info_productGroupingId_
        elif nodeName_ == 'Info_reportingFrequency':
            Info_reportingFrequency_ = child_.text
            Info_reportingFrequency_ = self.gds_validate_string(Info_reportingFrequency_, node, 'Info_reportingFrequency')
            self.Info_reportingFrequency = Info_reportingFrequency_
        elif nodeName_ == 'Info_returnType':
            Info_returnType_ = child_.text
            Info_returnType_ = self.gds_validate_string(Info_returnType_, node, 'Info_returnType')
            self.Info_returnType = Info_returnType_
        elif nodeName_ == 'lastUpdated':
            lastUpdated_ = child_.text
            lastUpdated_ = self.gds_validate_string(lastUpdated_, node, 'lastUpdated')
            self.lastUpdated = lastUpdated_
        elif nodeName_ == 'Listings_listing_id':
            Listings_listing_id_ = child_.text
            Listings_listing_id_ = self.gds_validate_string(Listings_listing_id_, node, 'Listings_listing_id')
            self.Listings_listing_id = Listings_listing_id_
        elif nodeName_ == 'Structure_fundStructure':
            Structure_fundStructure_ = child_.text
            Structure_fundStructure_ = self.gds_validate_string(Structure_fundStructure_, node, 'Structure_fundStructure')
            self.Structure_fundStructure = Structure_fundStructure_
        elif nodeName_ == 'Structure_trust':
            Structure_trust_ = child_.text
            Structure_trust_ = self.gds_validate_string(Structure_trust_, node, 'Structure_trust')
            self.Structure_trust = Structure_trust_
        elif nodeName_ == 'Structure_type':
            Structure_type_ = child_.text
            Structure_type_ = self.gds_validate_string(Structure_type_, node, 'Structure_type')
            self.Structure_type = Structure_type_
# end class GeneralInformationType93


class LegalInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CreateRedeemCommon_minimumPurchase=None, Info_distributesK1=None, Info_isCGTEligible=None, Info_isDeferredSettlementService=None, Info_isISA=None, Info_isPEA=None, Info_isSIPP=None, Info_isTwelveD=None, Info_pricingFrequency=None, Info_taxDomicility=None, Info_uCITSType=None, Info_ukDistributorStatus=None, Info_ukReportingFundStatus=None, Info_valuationOffset=None, Info_valuationTime=None, Info_valuationTimeZone=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.CreateRedeemCommon_minimumPurchase = CreateRedeemCommon_minimumPurchase
        self.Info_distributesK1 = Info_distributesK1
        self.Info_isCGTEligible = Info_isCGTEligible
        self.Info_isDeferredSettlementService = Info_isDeferredSettlementService
        self.Info_isISA = Info_isISA
        self.Info_isPEA = Info_isPEA
        self.Info_isSIPP = Info_isSIPP
        self.Info_isTwelveD = Info_isTwelveD
        self.Info_pricingFrequency = Info_pricingFrequency
        self.Info_taxDomicility = Info_taxDomicility
        self.Info_uCITSType = Info_uCITSType
        self.Info_ukDistributorStatus = Info_ukDistributorStatus
        self.Info_ukReportingFundStatus = Info_ukReportingFundStatus
        self.Info_valuationOffset = Info_valuationOffset
        self.Info_valuationTime = Info_valuationTime
        self.Info_valuationTimeZone = Info_valuationTimeZone
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LegalInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LegalInformationType.subclass:
            return LegalInformationType.subclass(*args_, **kwargs_)
        else:
            return LegalInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CreateRedeemCommon_minimumPurchase(self):
        return self.CreateRedeemCommon_minimumPurchase
    def set_CreateRedeemCommon_minimumPurchase(self, CreateRedeemCommon_minimumPurchase):
        self.CreateRedeemCommon_minimumPurchase = CreateRedeemCommon_minimumPurchase
    def get_Info_distributesK1(self):
        return self.Info_distributesK1
    def set_Info_distributesK1(self, Info_distributesK1):
        self.Info_distributesK1 = Info_distributesK1
    def get_Info_isCGTEligible(self):
        return self.Info_isCGTEligible
    def set_Info_isCGTEligible(self, Info_isCGTEligible):
        self.Info_isCGTEligible = Info_isCGTEligible
    def get_Info_isDeferredSettlementService(self):
        return self.Info_isDeferredSettlementService
    def set_Info_isDeferredSettlementService(self, Info_isDeferredSettlementService):
        self.Info_isDeferredSettlementService = Info_isDeferredSettlementService
    def get_Info_isISA(self):
        return self.Info_isISA
    def set_Info_isISA(self, Info_isISA):
        self.Info_isISA = Info_isISA
    def get_Info_isPEA(self):
        return self.Info_isPEA
    def set_Info_isPEA(self, Info_isPEA):
        self.Info_isPEA = Info_isPEA
    def get_Info_isSIPP(self):
        return self.Info_isSIPP
    def set_Info_isSIPP(self, Info_isSIPP):
        self.Info_isSIPP = Info_isSIPP
    def get_Info_isTwelveD(self):
        return self.Info_isTwelveD
    def set_Info_isTwelveD(self, Info_isTwelveD):
        self.Info_isTwelveD = Info_isTwelveD
    def get_Info_pricingFrequency(self):
        return self.Info_pricingFrequency
    def set_Info_pricingFrequency(self, Info_pricingFrequency):
        self.Info_pricingFrequency = Info_pricingFrequency
    def get_Info_taxDomicility(self):
        return self.Info_taxDomicility
    def set_Info_taxDomicility(self, Info_taxDomicility):
        self.Info_taxDomicility = Info_taxDomicility
    def get_Info_uCITSType(self):
        return self.Info_uCITSType
    def set_Info_uCITSType(self, Info_uCITSType):
        self.Info_uCITSType = Info_uCITSType
    def get_Info_ukDistributorStatus(self):
        return self.Info_ukDistributorStatus
    def set_Info_ukDistributorStatus(self, Info_ukDistributorStatus):
        self.Info_ukDistributorStatus = Info_ukDistributorStatus
    def get_Info_ukReportingFundStatus(self):
        return self.Info_ukReportingFundStatus
    def set_Info_ukReportingFundStatus(self, Info_ukReportingFundStatus):
        self.Info_ukReportingFundStatus = Info_ukReportingFundStatus
    def get_Info_valuationOffset(self):
        return self.Info_valuationOffset
    def set_Info_valuationOffset(self, Info_valuationOffset):
        self.Info_valuationOffset = Info_valuationOffset
    def get_Info_valuationTime(self):
        return self.Info_valuationTime
    def set_Info_valuationTime(self, Info_valuationTime):
        self.Info_valuationTime = Info_valuationTime
    def get_Info_valuationTimeZone(self):
        return self.Info_valuationTimeZone
    def set_Info_valuationTimeZone(self, Info_valuationTimeZone):
        self.Info_valuationTimeZone = Info_valuationTimeZone
    def hasContent_(self):
        if (
            self.CreateRedeemCommon_minimumPurchase is not None or
            self.Info_distributesK1 is not None or
            self.Info_isCGTEligible is not None or
            self.Info_isDeferredSettlementService is not None or
            self.Info_isISA is not None or
            self.Info_isPEA is not None or
            self.Info_isSIPP is not None or
            self.Info_isTwelveD is not None or
            self.Info_pricingFrequency is not None or
            self.Info_taxDomicility is not None or
            self.Info_uCITSType is not None or
            self.Info_ukDistributorStatus is not None or
            self.Info_ukReportingFundStatus is not None or
            self.Info_valuationOffset is not None or
            self.Info_valuationTime is not None or
            self.Info_valuationTimeZone is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LegalInformationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LegalInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LegalInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LegalInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LegalInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LegalInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CreateRedeemCommon_minimumPurchase is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreateRedeemCommon_minimumPurchase>%s</%sCreateRedeemCommon_minimumPurchase>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreateRedeemCommon_minimumPurchase), input_name='CreateRedeemCommon_minimumPurchase')), namespaceprefix_ , eol_))
        if self.Info_distributesK1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_distributesK1>%s</%sInfo_distributesK1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_distributesK1), input_name='Info_distributesK1')), namespaceprefix_ , eol_))
        if self.Info_isCGTEligible is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_isCGTEligible>%s</%sInfo_isCGTEligible>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_isCGTEligible), input_name='Info_isCGTEligible')), namespaceprefix_ , eol_))
        if self.Info_isDeferredSettlementService is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_isDeferredSettlementService>%s</%sInfo_isDeferredSettlementService>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_isDeferredSettlementService), input_name='Info_isDeferredSettlementService')), namespaceprefix_ , eol_))
        if self.Info_isISA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_isISA>%s</%sInfo_isISA>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_isISA), input_name='Info_isISA')), namespaceprefix_ , eol_))
        if self.Info_isPEA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_isPEA>%s</%sInfo_isPEA>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_isPEA), input_name='Info_isPEA')), namespaceprefix_ , eol_))
        if self.Info_isSIPP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_isSIPP>%s</%sInfo_isSIPP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_isSIPP), input_name='Info_isSIPP')), namespaceprefix_ , eol_))
        if self.Info_isTwelveD is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_isTwelveD>%s</%sInfo_isTwelveD>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_isTwelveD), input_name='Info_isTwelveD')), namespaceprefix_ , eol_))
        if self.Info_pricingFrequency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_pricingFrequency>%s</%sInfo_pricingFrequency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_pricingFrequency), input_name='Info_pricingFrequency')), namespaceprefix_ , eol_))
        if self.Info_taxDomicility is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_taxDomicility>%s</%sInfo_taxDomicility>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_taxDomicility), input_name='Info_taxDomicility')), namespaceprefix_ , eol_))
        if self.Info_uCITSType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_uCITSType>%s</%sInfo_uCITSType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_uCITSType), input_name='Info_uCITSType')), namespaceprefix_ , eol_))
        if self.Info_ukDistributorStatus is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_ukDistributorStatus>%s</%sInfo_ukDistributorStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_ukDistributorStatus), input_name='Info_ukDistributorStatus')), namespaceprefix_ , eol_))
        if self.Info_ukReportingFundStatus is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_ukReportingFundStatus>%s</%sInfo_ukReportingFundStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_ukReportingFundStatus), input_name='Info_ukReportingFundStatus')), namespaceprefix_ , eol_))
        if self.Info_valuationOffset is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_valuationOffset>%s</%sInfo_valuationOffset>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_valuationOffset), input_name='Info_valuationOffset')), namespaceprefix_ , eol_))
        if self.Info_valuationTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_valuationTime>%s</%sInfo_valuationTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_valuationTime), input_name='Info_valuationTime')), namespaceprefix_ , eol_))
        if self.Info_valuationTimeZone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_valuationTimeZone>%s</%sInfo_valuationTimeZone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_valuationTimeZone), input_name='Info_valuationTimeZone')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CreateRedeemCommon_minimumPurchase':
            CreateRedeemCommon_minimumPurchase_ = child_.text
            CreateRedeemCommon_minimumPurchase_ = self.gds_validate_string(CreateRedeemCommon_minimumPurchase_, node, 'CreateRedeemCommon_minimumPurchase')
            self.CreateRedeemCommon_minimumPurchase = CreateRedeemCommon_minimumPurchase_
        elif nodeName_ == 'Info_distributesK1':
            Info_distributesK1_ = child_.text
            Info_distributesK1_ = self.gds_validate_string(Info_distributesK1_, node, 'Info_distributesK1')
            self.Info_distributesK1 = Info_distributesK1_
        elif nodeName_ == 'Info_isCGTEligible':
            Info_isCGTEligible_ = child_.text
            Info_isCGTEligible_ = self.gds_validate_string(Info_isCGTEligible_, node, 'Info_isCGTEligible')
            self.Info_isCGTEligible = Info_isCGTEligible_
        elif nodeName_ == 'Info_isDeferredSettlementService':
            Info_isDeferredSettlementService_ = child_.text
            Info_isDeferredSettlementService_ = self.gds_validate_string(Info_isDeferredSettlementService_, node, 'Info_isDeferredSettlementService')
            self.Info_isDeferredSettlementService = Info_isDeferredSettlementService_
        elif nodeName_ == 'Info_isISA':
            Info_isISA_ = child_.text
            Info_isISA_ = self.gds_validate_string(Info_isISA_, node, 'Info_isISA')
            self.Info_isISA = Info_isISA_
        elif nodeName_ == 'Info_isPEA':
            Info_isPEA_ = child_.text
            Info_isPEA_ = self.gds_validate_string(Info_isPEA_, node, 'Info_isPEA')
            self.Info_isPEA = Info_isPEA_
        elif nodeName_ == 'Info_isSIPP':
            Info_isSIPP_ = child_.text
            Info_isSIPP_ = self.gds_validate_string(Info_isSIPP_, node, 'Info_isSIPP')
            self.Info_isSIPP = Info_isSIPP_
        elif nodeName_ == 'Info_isTwelveD':
            Info_isTwelveD_ = child_.text
            Info_isTwelveD_ = self.gds_validate_string(Info_isTwelveD_, node, 'Info_isTwelveD')
            self.Info_isTwelveD = Info_isTwelveD_
        elif nodeName_ == 'Info_pricingFrequency':
            Info_pricingFrequency_ = child_.text
            Info_pricingFrequency_ = self.gds_validate_string(Info_pricingFrequency_, node, 'Info_pricingFrequency')
            self.Info_pricingFrequency = Info_pricingFrequency_
        elif nodeName_ == 'Info_taxDomicility':
            Info_taxDomicility_ = child_.text
            Info_taxDomicility_ = self.gds_validate_string(Info_taxDomicility_, node, 'Info_taxDomicility')
            self.Info_taxDomicility = Info_taxDomicility_
        elif nodeName_ == 'Info_uCITSType':
            Info_uCITSType_ = child_.text
            Info_uCITSType_ = self.gds_validate_string(Info_uCITSType_, node, 'Info_uCITSType')
            self.Info_uCITSType = Info_uCITSType_
        elif nodeName_ == 'Info_ukDistributorStatus':
            Info_ukDistributorStatus_ = child_.text
            Info_ukDistributorStatus_ = self.gds_validate_string(Info_ukDistributorStatus_, node, 'Info_ukDistributorStatus')
            self.Info_ukDistributorStatus = Info_ukDistributorStatus_
        elif nodeName_ == 'Info_ukReportingFundStatus':
            Info_ukReportingFundStatus_ = child_.text
            Info_ukReportingFundStatus_ = self.gds_validate_string(Info_ukReportingFundStatus_, node, 'Info_ukReportingFundStatus')
            self.Info_ukReportingFundStatus = Info_ukReportingFundStatus_
        elif nodeName_ == 'Info_valuationOffset':
            Info_valuationOffset_ = child_.text
            Info_valuationOffset_ = self.gds_validate_string(Info_valuationOffset_, node, 'Info_valuationOffset')
            self.Info_valuationOffset = Info_valuationOffset_
        elif nodeName_ == 'Info_valuationTime':
            Info_valuationTime_ = child_.text
            Info_valuationTime_ = self.gds_validate_string(Info_valuationTime_, node, 'Info_valuationTime')
            self.Info_valuationTime = Info_valuationTime_
        elif nodeName_ == 'Info_valuationTimeZone':
            Info_valuationTimeZone_ = child_.text
            Info_valuationTimeZone_ = self.gds_validate_string(Info_valuationTimeZone_, node, 'Info_valuationTimeZone')
            self.Info_valuationTimeZone = Info_valuationTimeZone_
# end class LegalInformationType


class ListingInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Info_hasShort=None, Info_isMarginable=None, Info_listingDuplicity=None, Info_optionPositionLimit=None, MarketMakers_marketMaker_isLead=None, MarketMakers_marketMaker_name=None, OptionExchanges_optionExchange_currency=None, OptionExchanges_optionExchange_exchangeId=None, Structure_country=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Info_hasShort = Info_hasShort
        self.Info_isMarginable = Info_isMarginable
        self.Info_listingDuplicity = Info_listingDuplicity
        self.Info_optionPositionLimit = Info_optionPositionLimit
        self.MarketMakers_marketMaker_isLead = MarketMakers_marketMaker_isLead
        self.MarketMakers_marketMaker_name = MarketMakers_marketMaker_name
        self.OptionExchanges_optionExchange_currency = OptionExchanges_optionExchange_currency
        self.OptionExchanges_optionExchange_exchangeId = OptionExchanges_optionExchange_exchangeId
        self.Structure_country = Structure_country
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ListingInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ListingInformationType.subclass:
            return ListingInformationType.subclass(*args_, **kwargs_)
        else:
            return ListingInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Info_hasShort(self):
        return self.Info_hasShort
    def set_Info_hasShort(self, Info_hasShort):
        self.Info_hasShort = Info_hasShort
    def get_Info_isMarginable(self):
        return self.Info_isMarginable
    def set_Info_isMarginable(self, Info_isMarginable):
        self.Info_isMarginable = Info_isMarginable
    def get_Info_listingDuplicity(self):
        return self.Info_listingDuplicity
    def set_Info_listingDuplicity(self, Info_listingDuplicity):
        self.Info_listingDuplicity = Info_listingDuplicity
    def get_Info_optionPositionLimit(self):
        return self.Info_optionPositionLimit
    def set_Info_optionPositionLimit(self, Info_optionPositionLimit):
        self.Info_optionPositionLimit = Info_optionPositionLimit
    def get_MarketMakers_marketMaker_isLead(self):
        return self.MarketMakers_marketMaker_isLead
    def set_MarketMakers_marketMaker_isLead(self, MarketMakers_marketMaker_isLead):
        self.MarketMakers_marketMaker_isLead = MarketMakers_marketMaker_isLead
    def get_MarketMakers_marketMaker_name(self):
        return self.MarketMakers_marketMaker_name
    def set_MarketMakers_marketMaker_name(self, MarketMakers_marketMaker_name):
        self.MarketMakers_marketMaker_name = MarketMakers_marketMaker_name
    def get_OptionExchanges_optionExchange_currency(self):
        return self.OptionExchanges_optionExchange_currency
    def set_OptionExchanges_optionExchange_currency(self, OptionExchanges_optionExchange_currency):
        self.OptionExchanges_optionExchange_currency = OptionExchanges_optionExchange_currency
    def get_OptionExchanges_optionExchange_exchangeId(self):
        return self.OptionExchanges_optionExchange_exchangeId
    def set_OptionExchanges_optionExchange_exchangeId(self, OptionExchanges_optionExchange_exchangeId):
        self.OptionExchanges_optionExchange_exchangeId = OptionExchanges_optionExchange_exchangeId
    def get_Structure_country(self):
        return self.Structure_country
    def set_Structure_country(self, Structure_country):
        self.Structure_country = Structure_country
    def hasContent_(self):
        if (
            self.Info_hasShort is not None or
            self.Info_isMarginable is not None or
            self.Info_listingDuplicity is not None or
            self.Info_optionPositionLimit is not None or
            self.MarketMakers_marketMaker_isLead is not None or
            self.MarketMakers_marketMaker_name is not None or
            self.OptionExchanges_optionExchange_currency is not None or
            self.OptionExchanges_optionExchange_exchangeId is not None or
            self.Structure_country is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ListingInformationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ListingInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ListingInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ListingInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ListingInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ListingInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Info_hasShort is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_hasShort>%s</%sInfo_hasShort>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_hasShort), input_name='Info_hasShort')), namespaceprefix_ , eol_))
        if self.Info_isMarginable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_isMarginable>%s</%sInfo_isMarginable>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_isMarginable), input_name='Info_isMarginable')), namespaceprefix_ , eol_))
        if self.Info_listingDuplicity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_listingDuplicity>%s</%sInfo_listingDuplicity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_listingDuplicity), input_name='Info_listingDuplicity')), namespaceprefix_ , eol_))
        if self.Info_optionPositionLimit is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_optionPositionLimit>%s</%sInfo_optionPositionLimit>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_optionPositionLimit), input_name='Info_optionPositionLimit')), namespaceprefix_ , eol_))
        if self.MarketMakers_marketMaker_isLead is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarketMakers_marketMaker_isLead>%s</%sMarketMakers_marketMaker_isLead>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarketMakers_marketMaker_isLead), input_name='MarketMakers_marketMaker_isLead')), namespaceprefix_ , eol_))
        if self.MarketMakers_marketMaker_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarketMakers_marketMaker_name>%s</%sMarketMakers_marketMaker_name>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarketMakers_marketMaker_name), input_name='MarketMakers_marketMaker_name')), namespaceprefix_ , eol_))
        if self.OptionExchanges_optionExchange_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptionExchanges_optionExchange_currency>%s</%sOptionExchanges_optionExchange_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OptionExchanges_optionExchange_currency), input_name='OptionExchanges_optionExchange_currency')), namespaceprefix_ , eol_))
        if self.OptionExchanges_optionExchange_exchangeId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptionExchanges_optionExchange_exchangeId>%s</%sOptionExchanges_optionExchange_exchangeId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OptionExchanges_optionExchange_exchangeId), input_name='OptionExchanges_optionExchange_exchangeId')), namespaceprefix_ , eol_))
        if self.Structure_country is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStructure_country>%s</%sStructure_country>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Structure_country), input_name='Structure_country')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Info_hasShort':
            Info_hasShort_ = child_.text
            Info_hasShort_ = self.gds_validate_string(Info_hasShort_, node, 'Info_hasShort')
            self.Info_hasShort = Info_hasShort_
        elif nodeName_ == 'Info_isMarginable':
            Info_isMarginable_ = child_.text
            Info_isMarginable_ = self.gds_validate_string(Info_isMarginable_, node, 'Info_isMarginable')
            self.Info_isMarginable = Info_isMarginable_
        elif nodeName_ == 'Info_listingDuplicity':
            Info_listingDuplicity_ = child_.text
            Info_listingDuplicity_ = self.gds_validate_string(Info_listingDuplicity_, node, 'Info_listingDuplicity')
            self.Info_listingDuplicity = Info_listingDuplicity_
        elif nodeName_ == 'Info_optionPositionLimit':
            Info_optionPositionLimit_ = child_.text
            Info_optionPositionLimit_ = self.gds_validate_string(Info_optionPositionLimit_, node, 'Info_optionPositionLimit')
            self.Info_optionPositionLimit = Info_optionPositionLimit_
        elif nodeName_ == 'MarketMakers_marketMaker_isLead':
            MarketMakers_marketMaker_isLead_ = child_.text
            MarketMakers_marketMaker_isLead_ = self.gds_validate_string(MarketMakers_marketMaker_isLead_, node, 'MarketMakers_marketMaker_isLead')
            self.MarketMakers_marketMaker_isLead = MarketMakers_marketMaker_isLead_
        elif nodeName_ == 'MarketMakers_marketMaker_name':
            MarketMakers_marketMaker_name_ = child_.text
            MarketMakers_marketMaker_name_ = self.gds_validate_string(MarketMakers_marketMaker_name_, node, 'MarketMakers_marketMaker_name')
            self.MarketMakers_marketMaker_name = MarketMakers_marketMaker_name_
        elif nodeName_ == 'OptionExchanges_optionExchange_currency':
            OptionExchanges_optionExchange_currency_ = child_.text
            OptionExchanges_optionExchange_currency_ = self.gds_validate_string(OptionExchanges_optionExchange_currency_, node, 'OptionExchanges_optionExchange_currency')
            self.OptionExchanges_optionExchange_currency = OptionExchanges_optionExchange_currency_
        elif nodeName_ == 'OptionExchanges_optionExchange_exchangeId':
            OptionExchanges_optionExchange_exchangeId_ = child_.text
            OptionExchanges_optionExchange_exchangeId_ = self.gds_validate_string(OptionExchanges_optionExchange_exchangeId_, node, 'OptionExchanges_optionExchange_exchangeId')
            self.OptionExchanges_optionExchange_exchangeId = OptionExchanges_optionExchange_exchangeId_
        elif nodeName_ == 'Structure_country':
            Structure_country_ = child_.text
            Structure_country_ = self.gds_validate_string(Structure_country_, node, 'Structure_country')
            self.Structure_country = Structure_country_
# end class ListingInformationType


class ManagementandStructureType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Info_baseCurrency=None, Info_holdingType=None, Info_holdsDerivatives=None, Info_isCallable=None, Info_isCounterPartyRisk=None, Info_isCurrencyHedged=None, Info_isHeaderOnly=None, Info_isLeveraged=None, Info_position=None, Info_rebalanceFrequency=None, Info_weightingMethodology=None, Lending_agent=None, Lending_isActive=None, Lending_pctSecuritiesLendingRebated=None, Structure_collateralEligibilityLevel=None, Structure_registration_country=None, Structure_swapCounterparty=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Info_baseCurrency = Info_baseCurrency
        self.Info_holdingType = Info_holdingType
        self.Info_holdsDerivatives = Info_holdsDerivatives
        self.Info_isCallable = Info_isCallable
        self.Info_isCounterPartyRisk = Info_isCounterPartyRisk
        self.Info_isCurrencyHedged = Info_isCurrencyHedged
        self.Info_isHeaderOnly = Info_isHeaderOnly
        self.Info_isLeveraged = Info_isLeveraged
        self.Info_position = Info_position
        self.Info_rebalanceFrequency = Info_rebalanceFrequency
        self.Info_weightingMethodology = Info_weightingMethodology
        self.Lending_agent = Lending_agent
        self.Lending_isActive = Lending_isActive
        self.Lending_pctSecuritiesLendingRebated = Lending_pctSecuritiesLendingRebated
        self.Structure_collateralEligibilityLevel = Structure_collateralEligibilityLevel
        self.Structure_registration_country = Structure_registration_country
        self.Structure_swapCounterparty = Structure_swapCounterparty
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ManagementandStructureType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ManagementandStructureType.subclass:
            return ManagementandStructureType.subclass(*args_, **kwargs_)
        else:
            return ManagementandStructureType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Info_baseCurrency(self):
        return self.Info_baseCurrency
    def set_Info_baseCurrency(self, Info_baseCurrency):
        self.Info_baseCurrency = Info_baseCurrency
    def get_Info_holdingType(self):
        return self.Info_holdingType
    def set_Info_holdingType(self, Info_holdingType):
        self.Info_holdingType = Info_holdingType
    def get_Info_holdsDerivatives(self):
        return self.Info_holdsDerivatives
    def set_Info_holdsDerivatives(self, Info_holdsDerivatives):
        self.Info_holdsDerivatives = Info_holdsDerivatives
    def get_Info_isCallable(self):
        return self.Info_isCallable
    def set_Info_isCallable(self, Info_isCallable):
        self.Info_isCallable = Info_isCallable
    def get_Info_isCounterPartyRisk(self):
        return self.Info_isCounterPartyRisk
    def set_Info_isCounterPartyRisk(self, Info_isCounterPartyRisk):
        self.Info_isCounterPartyRisk = Info_isCounterPartyRisk
    def get_Info_isCurrencyHedged(self):
        return self.Info_isCurrencyHedged
    def set_Info_isCurrencyHedged(self, Info_isCurrencyHedged):
        self.Info_isCurrencyHedged = Info_isCurrencyHedged
    def get_Info_isHeaderOnly(self):
        return self.Info_isHeaderOnly
    def set_Info_isHeaderOnly(self, Info_isHeaderOnly):
        self.Info_isHeaderOnly = Info_isHeaderOnly
    def get_Info_isLeveraged(self):
        return self.Info_isLeveraged
    def set_Info_isLeveraged(self, Info_isLeveraged):
        self.Info_isLeveraged = Info_isLeveraged
    def get_Info_position(self):
        return self.Info_position
    def set_Info_position(self, Info_position):
        self.Info_position = Info_position
    def get_Info_rebalanceFrequency(self):
        return self.Info_rebalanceFrequency
    def set_Info_rebalanceFrequency(self, Info_rebalanceFrequency):
        self.Info_rebalanceFrequency = Info_rebalanceFrequency
    def get_Info_weightingMethodology(self):
        return self.Info_weightingMethodology
    def set_Info_weightingMethodology(self, Info_weightingMethodology):
        self.Info_weightingMethodology = Info_weightingMethodology
    def get_Lending_agent(self):
        return self.Lending_agent
    def set_Lending_agent(self, Lending_agent):
        self.Lending_agent = Lending_agent
    def get_Lending_isActive(self):
        return self.Lending_isActive
    def set_Lending_isActive(self, Lending_isActive):
        self.Lending_isActive = Lending_isActive
    def get_Lending_pctSecuritiesLendingRebated(self):
        return self.Lending_pctSecuritiesLendingRebated
    def set_Lending_pctSecuritiesLendingRebated(self, Lending_pctSecuritiesLendingRebated):
        self.Lending_pctSecuritiesLendingRebated = Lending_pctSecuritiesLendingRebated
    def get_Structure_collateralEligibilityLevel(self):
        return self.Structure_collateralEligibilityLevel
    def set_Structure_collateralEligibilityLevel(self, Structure_collateralEligibilityLevel):
        self.Structure_collateralEligibilityLevel = Structure_collateralEligibilityLevel
    def get_Structure_registration_country(self):
        return self.Structure_registration_country
    def set_Structure_registration_country(self, Structure_registration_country):
        self.Structure_registration_country = Structure_registration_country
    def get_Structure_swapCounterparty(self):
        return self.Structure_swapCounterparty
    def set_Structure_swapCounterparty(self, Structure_swapCounterparty):
        self.Structure_swapCounterparty = Structure_swapCounterparty
    def hasContent_(self):
        if (
            self.Info_baseCurrency is not None or
            self.Info_holdingType is not None or
            self.Info_holdsDerivatives is not None or
            self.Info_isCallable is not None or
            self.Info_isCounterPartyRisk is not None or
            self.Info_isCurrencyHedged is not None or
            self.Info_isHeaderOnly is not None or
            self.Info_isLeveraged is not None or
            self.Info_position is not None or
            self.Info_rebalanceFrequency is not None or
            self.Info_weightingMethodology is not None or
            self.Lending_agent is not None or
            self.Lending_isActive is not None or
            self.Lending_pctSecuritiesLendingRebated is not None or
            self.Structure_collateralEligibilityLevel is not None or
            self.Structure_registration_country is not None or
            self.Structure_swapCounterparty is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ManagementandStructureType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ManagementandStructureType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ManagementandStructureType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ManagementandStructureType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ManagementandStructureType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ManagementandStructureType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Info_baseCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_baseCurrency>%s</%sInfo_baseCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_baseCurrency), input_name='Info_baseCurrency')), namespaceprefix_ , eol_))
        if self.Info_holdingType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_holdingType>%s</%sInfo_holdingType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_holdingType), input_name='Info_holdingType')), namespaceprefix_ , eol_))
        if self.Info_holdsDerivatives is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_holdsDerivatives>%s</%sInfo_holdsDerivatives>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_holdsDerivatives), input_name='Info_holdsDerivatives')), namespaceprefix_ , eol_))
        if self.Info_isCallable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_isCallable>%s</%sInfo_isCallable>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_isCallable), input_name='Info_isCallable')), namespaceprefix_ , eol_))
        if self.Info_isCounterPartyRisk is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_isCounterPartyRisk>%s</%sInfo_isCounterPartyRisk>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_isCounterPartyRisk), input_name='Info_isCounterPartyRisk')), namespaceprefix_ , eol_))
        if self.Info_isCurrencyHedged is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_isCurrencyHedged>%s</%sInfo_isCurrencyHedged>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_isCurrencyHedged), input_name='Info_isCurrencyHedged')), namespaceprefix_ , eol_))
        if self.Info_isHeaderOnly is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_isHeaderOnly>%s</%sInfo_isHeaderOnly>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_isHeaderOnly), input_name='Info_isHeaderOnly')), namespaceprefix_ , eol_))
        if self.Info_isLeveraged is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_isLeveraged>%s</%sInfo_isLeveraged>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_isLeveraged), input_name='Info_isLeveraged')), namespaceprefix_ , eol_))
        if self.Info_position is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_position>%s</%sInfo_position>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_position), input_name='Info_position')), namespaceprefix_ , eol_))
        if self.Info_rebalanceFrequency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_rebalanceFrequency>%s</%sInfo_rebalanceFrequency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_rebalanceFrequency), input_name='Info_rebalanceFrequency')), namespaceprefix_ , eol_))
        if self.Info_weightingMethodology is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_weightingMethodology>%s</%sInfo_weightingMethodology>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_weightingMethodology), input_name='Info_weightingMethodology')), namespaceprefix_ , eol_))
        if self.Lending_agent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLending_agent>%s</%sLending_agent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Lending_agent), input_name='Lending_agent')), namespaceprefix_ , eol_))
        if self.Lending_isActive is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLending_isActive>%s</%sLending_isActive>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Lending_isActive), input_name='Lending_isActive')), namespaceprefix_ , eol_))
        if self.Lending_pctSecuritiesLendingRebated is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLending_pctSecuritiesLendingRebated>%s</%sLending_pctSecuritiesLendingRebated>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Lending_pctSecuritiesLendingRebated), input_name='Lending_pctSecuritiesLendingRebated')), namespaceprefix_ , eol_))
        if self.Structure_collateralEligibilityLevel is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStructure_collateralEligibilityLevel>%s</%sStructure_collateralEligibilityLevel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Structure_collateralEligibilityLevel), input_name='Structure_collateralEligibilityLevel')), namespaceprefix_ , eol_))
        if self.Structure_registration_country is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStructure_registration_country>%s</%sStructure_registration_country>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Structure_registration_country), input_name='Structure_registration_country')), namespaceprefix_ , eol_))
        if self.Structure_swapCounterparty is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStructure_swapCounterparty>%s</%sStructure_swapCounterparty>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Structure_swapCounterparty), input_name='Structure_swapCounterparty')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Info_baseCurrency':
            Info_baseCurrency_ = child_.text
            Info_baseCurrency_ = self.gds_validate_string(Info_baseCurrency_, node, 'Info_baseCurrency')
            self.Info_baseCurrency = Info_baseCurrency_
        elif nodeName_ == 'Info_holdingType':
            Info_holdingType_ = child_.text
            Info_holdingType_ = self.gds_validate_string(Info_holdingType_, node, 'Info_holdingType')
            self.Info_holdingType = Info_holdingType_
        elif nodeName_ == 'Info_holdsDerivatives':
            Info_holdsDerivatives_ = child_.text
            Info_holdsDerivatives_ = self.gds_validate_string(Info_holdsDerivatives_, node, 'Info_holdsDerivatives')
            self.Info_holdsDerivatives = Info_holdsDerivatives_
        elif nodeName_ == 'Info_isCallable':
            Info_isCallable_ = child_.text
            Info_isCallable_ = self.gds_validate_string(Info_isCallable_, node, 'Info_isCallable')
            self.Info_isCallable = Info_isCallable_
        elif nodeName_ == 'Info_isCounterPartyRisk':
            Info_isCounterPartyRisk_ = child_.text
            Info_isCounterPartyRisk_ = self.gds_validate_string(Info_isCounterPartyRisk_, node, 'Info_isCounterPartyRisk')
            self.Info_isCounterPartyRisk = Info_isCounterPartyRisk_
        elif nodeName_ == 'Info_isCurrencyHedged':
            Info_isCurrencyHedged_ = child_.text
            Info_isCurrencyHedged_ = self.gds_validate_string(Info_isCurrencyHedged_, node, 'Info_isCurrencyHedged')
            self.Info_isCurrencyHedged = Info_isCurrencyHedged_
        elif nodeName_ == 'Info_isHeaderOnly':
            Info_isHeaderOnly_ = child_.text
            Info_isHeaderOnly_ = self.gds_validate_string(Info_isHeaderOnly_, node, 'Info_isHeaderOnly')
            self.Info_isHeaderOnly = Info_isHeaderOnly_
        elif nodeName_ == 'Info_isLeveraged':
            Info_isLeveraged_ = child_.text
            Info_isLeveraged_ = self.gds_validate_string(Info_isLeveraged_, node, 'Info_isLeveraged')
            self.Info_isLeveraged = Info_isLeveraged_
        elif nodeName_ == 'Info_position':
            Info_position_ = child_.text
            Info_position_ = self.gds_validate_string(Info_position_, node, 'Info_position')
            self.Info_position = Info_position_
        elif nodeName_ == 'Info_rebalanceFrequency':
            Info_rebalanceFrequency_ = child_.text
            Info_rebalanceFrequency_ = self.gds_validate_string(Info_rebalanceFrequency_, node, 'Info_rebalanceFrequency')
            self.Info_rebalanceFrequency = Info_rebalanceFrequency_
        elif nodeName_ == 'Info_weightingMethodology':
            Info_weightingMethodology_ = child_.text
            Info_weightingMethodology_ = self.gds_validate_string(Info_weightingMethodology_, node, 'Info_weightingMethodology')
            self.Info_weightingMethodology = Info_weightingMethodology_
        elif nodeName_ == 'Lending_agent':
            Lending_agent_ = child_.text
            Lending_agent_ = self.gds_validate_string(Lending_agent_, node, 'Lending_agent')
            self.Lending_agent = Lending_agent_
        elif nodeName_ == 'Lending_isActive':
            Lending_isActive_ = child_.text
            Lending_isActive_ = self.gds_validate_string(Lending_isActive_, node, 'Lending_isActive')
            self.Lending_isActive = Lending_isActive_
        elif nodeName_ == 'Lending_pctSecuritiesLendingRebated':
            Lending_pctSecuritiesLendingRebated_ = child_.text
            Lending_pctSecuritiesLendingRebated_ = self.gds_validate_string(Lending_pctSecuritiesLendingRebated_, node, 'Lending_pctSecuritiesLendingRebated')
            self.Lending_pctSecuritiesLendingRebated = Lending_pctSecuritiesLendingRebated_
        elif nodeName_ == 'Structure_collateralEligibilityLevel':
            Structure_collateralEligibilityLevel_ = child_.text
            Structure_collateralEligibilityLevel_ = self.gds_validate_string(Structure_collateralEligibilityLevel_, node, 'Structure_collateralEligibilityLevel')
            self.Structure_collateralEligibilityLevel = Structure_collateralEligibilityLevel_
        elif nodeName_ == 'Structure_registration_country':
            Structure_registration_country_ = child_.text
            Structure_registration_country_ = self.gds_validate_string(Structure_registration_country_, node, 'Structure_registration_country')
            self.Structure_registration_country = Structure_registration_country_
        elif nodeName_ == 'Structure_swapCounterparty':
            Structure_swapCounterparty_ = child_.text
            Structure_swapCounterparty_ = self.gds_validate_string(Structure_swapCounterparty_, node, 'Structure_swapCounterparty')
            self.Structure_swapCounterparty = Structure_swapCounterparty_
# end class ManagementandStructureType


class ServiceProvidersType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Info_sponsor=None, Structure_custodian=None, Structure_distributionAgent=None, Structure_fundAccountant=None, Structure_fundAdministrator=None, Structure_fundAuditor=None, Structure_fundManager=None, Structure_guarantor=None, Structure_investmentAdvisor=None, Structure_subInvestmentAdvisor=None, Structure_transferAgent=None, Structure_trustee=None, Structure_valuationAgent=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Info_sponsor = Info_sponsor
        self.Structure_custodian = Structure_custodian
        self.Structure_distributionAgent = Structure_distributionAgent
        self.Structure_fundAccountant = Structure_fundAccountant
        self.Structure_fundAdministrator = Structure_fundAdministrator
        self.Structure_fundAuditor = Structure_fundAuditor
        self.Structure_fundManager = Structure_fundManager
        self.Structure_guarantor = Structure_guarantor
        self.Structure_investmentAdvisor = Structure_investmentAdvisor
        self.Structure_subInvestmentAdvisor = Structure_subInvestmentAdvisor
        self.Structure_transferAgent = Structure_transferAgent
        self.Structure_trustee = Structure_trustee
        self.Structure_valuationAgent = Structure_valuationAgent
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceProvidersType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceProvidersType.subclass:
            return ServiceProvidersType.subclass(*args_, **kwargs_)
        else:
            return ServiceProvidersType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Info_sponsor(self):
        return self.Info_sponsor
    def set_Info_sponsor(self, Info_sponsor):
        self.Info_sponsor = Info_sponsor
    def get_Structure_custodian(self):
        return self.Structure_custodian
    def set_Structure_custodian(self, Structure_custodian):
        self.Structure_custodian = Structure_custodian
    def get_Structure_distributionAgent(self):
        return self.Structure_distributionAgent
    def set_Structure_distributionAgent(self, Structure_distributionAgent):
        self.Structure_distributionAgent = Structure_distributionAgent
    def get_Structure_fundAccountant(self):
        return self.Structure_fundAccountant
    def set_Structure_fundAccountant(self, Structure_fundAccountant):
        self.Structure_fundAccountant = Structure_fundAccountant
    def get_Structure_fundAdministrator(self):
        return self.Structure_fundAdministrator
    def set_Structure_fundAdministrator(self, Structure_fundAdministrator):
        self.Structure_fundAdministrator = Structure_fundAdministrator
    def get_Structure_fundAuditor(self):
        return self.Structure_fundAuditor
    def set_Structure_fundAuditor(self, Structure_fundAuditor):
        self.Structure_fundAuditor = Structure_fundAuditor
    def get_Structure_fundManager(self):
        return self.Structure_fundManager
    def set_Structure_fundManager(self, Structure_fundManager):
        self.Structure_fundManager = Structure_fundManager
    def get_Structure_guarantor(self):
        return self.Structure_guarantor
    def set_Structure_guarantor(self, Structure_guarantor):
        self.Structure_guarantor = Structure_guarantor
    def get_Structure_investmentAdvisor(self):
        return self.Structure_investmentAdvisor
    def set_Structure_investmentAdvisor(self, Structure_investmentAdvisor):
        self.Structure_investmentAdvisor = Structure_investmentAdvisor
    def get_Structure_subInvestmentAdvisor(self):
        return self.Structure_subInvestmentAdvisor
    def set_Structure_subInvestmentAdvisor(self, Structure_subInvestmentAdvisor):
        self.Structure_subInvestmentAdvisor = Structure_subInvestmentAdvisor
    def get_Structure_transferAgent(self):
        return self.Structure_transferAgent
    def set_Structure_transferAgent(self, Structure_transferAgent):
        self.Structure_transferAgent = Structure_transferAgent
    def get_Structure_trustee(self):
        return self.Structure_trustee
    def set_Structure_trustee(self, Structure_trustee):
        self.Structure_trustee = Structure_trustee
    def get_Structure_valuationAgent(self):
        return self.Structure_valuationAgent
    def set_Structure_valuationAgent(self, Structure_valuationAgent):
        self.Structure_valuationAgent = Structure_valuationAgent
    def hasContent_(self):
        if (
            self.Info_sponsor is not None or
            self.Structure_custodian is not None or
            self.Structure_distributionAgent is not None or
            self.Structure_fundAccountant is not None or
            self.Structure_fundAdministrator is not None or
            self.Structure_fundAuditor is not None or
            self.Structure_fundManager is not None or
            self.Structure_guarantor is not None or
            self.Structure_investmentAdvisor is not None or
            self.Structure_subInvestmentAdvisor is not None or
            self.Structure_transferAgent is not None or
            self.Structure_trustee is not None or
            self.Structure_valuationAgent is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ServiceProvidersType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ServiceProvidersType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ServiceProvidersType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ServiceProvidersType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ServiceProvidersType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ServiceProvidersType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Info_sponsor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfo_sponsor>%s</%sInfo_sponsor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Info_sponsor), input_name='Info_sponsor')), namespaceprefix_ , eol_))
        if self.Structure_custodian is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStructure_custodian>%s</%sStructure_custodian>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Structure_custodian), input_name='Structure_custodian')), namespaceprefix_ , eol_))
        if self.Structure_distributionAgent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStructure_distributionAgent>%s</%sStructure_distributionAgent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Structure_distributionAgent), input_name='Structure_distributionAgent')), namespaceprefix_ , eol_))
        if self.Structure_fundAccountant is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStructure_fundAccountant>%s</%sStructure_fundAccountant>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Structure_fundAccountant), input_name='Structure_fundAccountant')), namespaceprefix_ , eol_))
        if self.Structure_fundAdministrator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStructure_fundAdministrator>%s</%sStructure_fundAdministrator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Structure_fundAdministrator), input_name='Structure_fundAdministrator')), namespaceprefix_ , eol_))
        if self.Structure_fundAuditor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStructure_fundAuditor>%s</%sStructure_fundAuditor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Structure_fundAuditor), input_name='Structure_fundAuditor')), namespaceprefix_ , eol_))
        if self.Structure_fundManager is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStructure_fundManager>%s</%sStructure_fundManager>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Structure_fundManager), input_name='Structure_fundManager')), namespaceprefix_ , eol_))
        if self.Structure_guarantor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStructure_guarantor>%s</%sStructure_guarantor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Structure_guarantor), input_name='Structure_guarantor')), namespaceprefix_ , eol_))
        if self.Structure_investmentAdvisor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStructure_investmentAdvisor>%s</%sStructure_investmentAdvisor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Structure_investmentAdvisor), input_name='Structure_investmentAdvisor')), namespaceprefix_ , eol_))
        if self.Structure_subInvestmentAdvisor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStructure_subInvestmentAdvisor>%s</%sStructure_subInvestmentAdvisor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Structure_subInvestmentAdvisor), input_name='Structure_subInvestmentAdvisor')), namespaceprefix_ , eol_))
        if self.Structure_transferAgent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStructure_transferAgent>%s</%sStructure_transferAgent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Structure_transferAgent), input_name='Structure_transferAgent')), namespaceprefix_ , eol_))
        if self.Structure_trustee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStructure_trustee>%s</%sStructure_trustee>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Structure_trustee), input_name='Structure_trustee')), namespaceprefix_ , eol_))
        if self.Structure_valuationAgent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStructure_valuationAgent>%s</%sStructure_valuationAgent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Structure_valuationAgent), input_name='Structure_valuationAgent')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Info_sponsor':
            Info_sponsor_ = child_.text
            Info_sponsor_ = self.gds_validate_string(Info_sponsor_, node, 'Info_sponsor')
            self.Info_sponsor = Info_sponsor_
        elif nodeName_ == 'Structure_custodian':
            Structure_custodian_ = child_.text
            Structure_custodian_ = self.gds_validate_string(Structure_custodian_, node, 'Structure_custodian')
            self.Structure_custodian = Structure_custodian_
        elif nodeName_ == 'Structure_distributionAgent':
            Structure_distributionAgent_ = child_.text
            Structure_distributionAgent_ = self.gds_validate_string(Structure_distributionAgent_, node, 'Structure_distributionAgent')
            self.Structure_distributionAgent = Structure_distributionAgent_
        elif nodeName_ == 'Structure_fundAccountant':
            Structure_fundAccountant_ = child_.text
            Structure_fundAccountant_ = self.gds_validate_string(Structure_fundAccountant_, node, 'Structure_fundAccountant')
            self.Structure_fundAccountant = Structure_fundAccountant_
        elif nodeName_ == 'Structure_fundAdministrator':
            Structure_fundAdministrator_ = child_.text
            Structure_fundAdministrator_ = self.gds_validate_string(Structure_fundAdministrator_, node, 'Structure_fundAdministrator')
            self.Structure_fundAdministrator = Structure_fundAdministrator_
        elif nodeName_ == 'Structure_fundAuditor':
            Structure_fundAuditor_ = child_.text
            Structure_fundAuditor_ = self.gds_validate_string(Structure_fundAuditor_, node, 'Structure_fundAuditor')
            self.Structure_fundAuditor = Structure_fundAuditor_
        elif nodeName_ == 'Structure_fundManager':
            Structure_fundManager_ = child_.text
            Structure_fundManager_ = self.gds_validate_string(Structure_fundManager_, node, 'Structure_fundManager')
            self.Structure_fundManager = Structure_fundManager_
        elif nodeName_ == 'Structure_guarantor':
            Structure_guarantor_ = child_.text
            Structure_guarantor_ = self.gds_validate_string(Structure_guarantor_, node, 'Structure_guarantor')
            self.Structure_guarantor = Structure_guarantor_
        elif nodeName_ == 'Structure_investmentAdvisor':
            Structure_investmentAdvisor_ = child_.text
            Structure_investmentAdvisor_ = self.gds_validate_string(Structure_investmentAdvisor_, node, 'Structure_investmentAdvisor')
            self.Structure_investmentAdvisor = Structure_investmentAdvisor_
        elif nodeName_ == 'Structure_subInvestmentAdvisor':
            Structure_subInvestmentAdvisor_ = child_.text
            Structure_subInvestmentAdvisor_ = self.gds_validate_string(Structure_subInvestmentAdvisor_, node, 'Structure_subInvestmentAdvisor')
            self.Structure_subInvestmentAdvisor = Structure_subInvestmentAdvisor_
        elif nodeName_ == 'Structure_transferAgent':
            Structure_transferAgent_ = child_.text
            Structure_transferAgent_ = self.gds_validate_string(Structure_transferAgent_, node, 'Structure_transferAgent')
            self.Structure_transferAgent = Structure_transferAgent_
        elif nodeName_ == 'Structure_trustee':
            Structure_trustee_ = child_.text
            Structure_trustee_ = self.gds_validate_string(Structure_trustee_, node, 'Structure_trustee')
            self.Structure_trustee = Structure_trustee_
        elif nodeName_ == 'Structure_valuationAgent':
            Structure_valuationAgent_ = child_.text
            Structure_valuationAgent_ = self.gds_validate_string(Structure_valuationAgent_, node, 'Structure_valuationAgent')
            self.Structure_valuationAgent = Structure_valuationAgent_
# end class ServiceProvidersType


class ETPCompositionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DATATYPE=None, RANK=None, ASSETID=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DATATYPE = _cast(None, DATATYPE)
        self.RANK = _cast(None, RANK)
        self.ASSETID = _cast(None, ASSETID)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ETPCompositionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ETPCompositionType.subclass:
            return ETPCompositionType.subclass(*args_, **kwargs_)
        else:
            return ETPCompositionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_ASSETID(self):
        return self.ASSETID
    def set_ASSETID(self, ASSETID):
        self.ASSETID = ASSETID
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ETPCompositionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ETPCompositionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ETPCompositionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ETPCompositionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ETPCompositionType'):
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.ASSETID is not None and 'ASSETID' not in already_processed:
            already_processed.add('ASSETID')
            outfile.write(' ASSETID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ASSETID), input_name='ASSETID')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ETPCompositionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('ASSETID', node)
        if value is not None and 'ASSETID' not in already_processed:
            already_processed.add('ASSETID')
            self.ASSETID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType94.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class ETPCompositionType


class DataDateType94(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, Basket=None, Constituents=None, ExchangeRates=None, GeneralInformation=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.Basket = Basket
        self.Constituents = Constituents
        self.ExchangeRates = ExchangeRates
        self.GeneralInformation = GeneralInformation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType94)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType94.subclass:
            return DataDateType94.subclass(*args_, **kwargs_)
        else:
            return DataDateType94(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Basket(self):
        return self.Basket
    def set_Basket(self, Basket):
        self.Basket = Basket
    def get_Constituents(self):
        return self.Constituents
    def set_Constituents(self, Constituents):
        self.Constituents = Constituents
    def get_ExchangeRates(self):
        return self.ExchangeRates
    def set_ExchangeRates(self, ExchangeRates):
        self.ExchangeRates = ExchangeRates
    def get_GeneralInformation(self):
        return self.GeneralInformation
    def set_GeneralInformation(self, GeneralInformation):
        self.GeneralInformation = GeneralInformation
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.Basket is not None or
            self.Constituents is not None or
            self.ExchangeRates is not None or
            self.GeneralInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType94', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType94')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType94')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType94', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType94'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType94', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Basket is not None:
            self.Basket.export(outfile, level, namespaceprefix_, name_='Basket', pretty_print=pretty_print)
        if self.Constituents is not None:
            self.Constituents.export(outfile, level, namespaceprefix_, name_='Constituents', pretty_print=pretty_print)
        if self.ExchangeRates is not None:
            self.ExchangeRates.export(outfile, level, namespaceprefix_, name_='ExchangeRates', pretty_print=pretty_print)
        if self.GeneralInformation is not None:
            self.GeneralInformation.export(outfile, level, namespaceprefix_, name_='GeneralInformation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Basket':
            obj_ = BasketType95.factory(parent_object_=self)
            obj_.build(child_)
            self.Basket = obj_
            obj_.original_tagname_ = 'Basket'
        elif nodeName_ == 'Constituents':
            obj_ = ConstituentsType96.factory(parent_object_=self)
            obj_.build(child_)
            self.Constituents = obj_
            obj_.original_tagname_ = 'Constituents'
        elif nodeName_ == 'ExchangeRates':
            obj_ = ExchangeRatesType.factory(parent_object_=self)
            obj_.build(child_)
            self.ExchangeRates = obj_
            obj_.original_tagname_ = 'ExchangeRates'
        elif nodeName_ == 'GeneralInformation':
            obj_ = GeneralInformationType97.factory(parent_object_=self)
            obj_.build(child_)
            self.GeneralInformation = obj_
            obj_.original_tagname_ = 'GeneralInformation'
# end class DataDateType94


class BasketType95(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Baskets_accruedDividend_currency=None, Baskets_accruedDividend_value=None, Baskets_adjustmentFactor=None, Baskets_assetId=None, Baskets_baseFx=None, Baskets_basingConstant=None, Baskets_basketType=None, Baskets_calculated_currency=None, Baskets_calculated_value=None, Baskets_calculationId=None, Baskets_constituentCount=None, Baskets_currency=None, Baskets_date=None, Baskets_divisor=None, Baskets_estimatedCash_currency=None, Baskets_estimatedCash_value=None, Baskets_filter=None, Baskets_filterName=None, Baskets_id=None, Baskets_name=None, Baskets_netAssetValue_currency=None, Baskets_netAssetValue_value=None, Baskets_official_currency=None, Baskets_official_value=None, Baskets_position_calculationId=None, Baskets_timeSeries=None, Baskets_totalCash_currency=None, Baskets_totalCash_value=None, Baskets_type=None, Baskets_value=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Baskets_accruedDividend_currency = Baskets_accruedDividend_currency
        self.Baskets_accruedDividend_value = Baskets_accruedDividend_value
        self.Baskets_adjustmentFactor = Baskets_adjustmentFactor
        self.Baskets_assetId = Baskets_assetId
        self.Baskets_baseFx = Baskets_baseFx
        self.Baskets_basingConstant = Baskets_basingConstant
        self.Baskets_basketType = Baskets_basketType
        self.Baskets_calculated_currency = Baskets_calculated_currency
        self.Baskets_calculated_value = Baskets_calculated_value
        self.Baskets_calculationId = Baskets_calculationId
        self.Baskets_constituentCount = Baskets_constituentCount
        self.Baskets_currency = Baskets_currency
        if isinstance(Baskets_date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Baskets_date, '%Y-%m-%d').date()
        else:
            initvalue_ = Baskets_date
        self.Baskets_date = initvalue_
        self.Baskets_divisor = Baskets_divisor
        self.Baskets_estimatedCash_currency = Baskets_estimatedCash_currency
        self.Baskets_estimatedCash_value = Baskets_estimatedCash_value
        self.Baskets_filter = Baskets_filter
        self.Baskets_filterName = Baskets_filterName
        self.Baskets_id = Baskets_id
        self.Baskets_name = Baskets_name
        self.Baskets_netAssetValue_currency = Baskets_netAssetValue_currency
        self.Baskets_netAssetValue_value = Baskets_netAssetValue_value
        self.Baskets_official_currency = Baskets_official_currency
        self.Baskets_official_value = Baskets_official_value
        self.Baskets_position_calculationId = Baskets_position_calculationId
        self.Baskets_timeSeries = Baskets_timeSeries
        self.Baskets_totalCash_currency = Baskets_totalCash_currency
        self.Baskets_totalCash_value = Baskets_totalCash_value
        self.Baskets_type = Baskets_type
        self.Baskets_value = Baskets_value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BasketType95)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BasketType95.subclass:
            return BasketType95.subclass(*args_, **kwargs_)
        else:
            return BasketType95(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Baskets_accruedDividend_currency(self):
        return self.Baskets_accruedDividend_currency
    def set_Baskets_accruedDividend_currency(self, Baskets_accruedDividend_currency):
        self.Baskets_accruedDividend_currency = Baskets_accruedDividend_currency
    def get_Baskets_accruedDividend_value(self):
        return self.Baskets_accruedDividend_value
    def set_Baskets_accruedDividend_value(self, Baskets_accruedDividend_value):
        self.Baskets_accruedDividend_value = Baskets_accruedDividend_value
    def get_Baskets_adjustmentFactor(self):
        return self.Baskets_adjustmentFactor
    def set_Baskets_adjustmentFactor(self, Baskets_adjustmentFactor):
        self.Baskets_adjustmentFactor = Baskets_adjustmentFactor
    def get_Baskets_assetId(self):
        return self.Baskets_assetId
    def set_Baskets_assetId(self, Baskets_assetId):
        self.Baskets_assetId = Baskets_assetId
    def get_Baskets_baseFx(self):
        return self.Baskets_baseFx
    def set_Baskets_baseFx(self, Baskets_baseFx):
        self.Baskets_baseFx = Baskets_baseFx
    def get_Baskets_basingConstant(self):
        return self.Baskets_basingConstant
    def set_Baskets_basingConstant(self, Baskets_basingConstant):
        self.Baskets_basingConstant = Baskets_basingConstant
    def get_Baskets_basketType(self):
        return self.Baskets_basketType
    def set_Baskets_basketType(self, Baskets_basketType):
        self.Baskets_basketType = Baskets_basketType
    def get_Baskets_calculated_currency(self):
        return self.Baskets_calculated_currency
    def set_Baskets_calculated_currency(self, Baskets_calculated_currency):
        self.Baskets_calculated_currency = Baskets_calculated_currency
    def get_Baskets_calculated_value(self):
        return self.Baskets_calculated_value
    def set_Baskets_calculated_value(self, Baskets_calculated_value):
        self.Baskets_calculated_value = Baskets_calculated_value
    def get_Baskets_calculationId(self):
        return self.Baskets_calculationId
    def set_Baskets_calculationId(self, Baskets_calculationId):
        self.Baskets_calculationId = Baskets_calculationId
    def get_Baskets_constituentCount(self):
        return self.Baskets_constituentCount
    def set_Baskets_constituentCount(self, Baskets_constituentCount):
        self.Baskets_constituentCount = Baskets_constituentCount
    def get_Baskets_currency(self):
        return self.Baskets_currency
    def set_Baskets_currency(self, Baskets_currency):
        self.Baskets_currency = Baskets_currency
    def get_Baskets_date(self):
        return self.Baskets_date
    def set_Baskets_date(self, Baskets_date):
        self.Baskets_date = Baskets_date
    def get_Baskets_divisor(self):
        return self.Baskets_divisor
    def set_Baskets_divisor(self, Baskets_divisor):
        self.Baskets_divisor = Baskets_divisor
    def get_Baskets_estimatedCash_currency(self):
        return self.Baskets_estimatedCash_currency
    def set_Baskets_estimatedCash_currency(self, Baskets_estimatedCash_currency):
        self.Baskets_estimatedCash_currency = Baskets_estimatedCash_currency
    def get_Baskets_estimatedCash_value(self):
        return self.Baskets_estimatedCash_value
    def set_Baskets_estimatedCash_value(self, Baskets_estimatedCash_value):
        self.Baskets_estimatedCash_value = Baskets_estimatedCash_value
    def get_Baskets_filter(self):
        return self.Baskets_filter
    def set_Baskets_filter(self, Baskets_filter):
        self.Baskets_filter = Baskets_filter
    def get_Baskets_filterName(self):
        return self.Baskets_filterName
    def set_Baskets_filterName(self, Baskets_filterName):
        self.Baskets_filterName = Baskets_filterName
    def get_Baskets_id(self):
        return self.Baskets_id
    def set_Baskets_id(self, Baskets_id):
        self.Baskets_id = Baskets_id
    def get_Baskets_name(self):
        return self.Baskets_name
    def set_Baskets_name(self, Baskets_name):
        self.Baskets_name = Baskets_name
    def get_Baskets_netAssetValue_currency(self):
        return self.Baskets_netAssetValue_currency
    def set_Baskets_netAssetValue_currency(self, Baskets_netAssetValue_currency):
        self.Baskets_netAssetValue_currency = Baskets_netAssetValue_currency
    def get_Baskets_netAssetValue_value(self):
        return self.Baskets_netAssetValue_value
    def set_Baskets_netAssetValue_value(self, Baskets_netAssetValue_value):
        self.Baskets_netAssetValue_value = Baskets_netAssetValue_value
    def get_Baskets_official_currency(self):
        return self.Baskets_official_currency
    def set_Baskets_official_currency(self, Baskets_official_currency):
        self.Baskets_official_currency = Baskets_official_currency
    def get_Baskets_official_value(self):
        return self.Baskets_official_value
    def set_Baskets_official_value(self, Baskets_official_value):
        self.Baskets_official_value = Baskets_official_value
    def get_Baskets_position_calculationId(self):
        return self.Baskets_position_calculationId
    def set_Baskets_position_calculationId(self, Baskets_position_calculationId):
        self.Baskets_position_calculationId = Baskets_position_calculationId
    def get_Baskets_timeSeries(self):
        return self.Baskets_timeSeries
    def set_Baskets_timeSeries(self, Baskets_timeSeries):
        self.Baskets_timeSeries = Baskets_timeSeries
    def get_Baskets_totalCash_currency(self):
        return self.Baskets_totalCash_currency
    def set_Baskets_totalCash_currency(self, Baskets_totalCash_currency):
        self.Baskets_totalCash_currency = Baskets_totalCash_currency
    def get_Baskets_totalCash_value(self):
        return self.Baskets_totalCash_value
    def set_Baskets_totalCash_value(self, Baskets_totalCash_value):
        self.Baskets_totalCash_value = Baskets_totalCash_value
    def get_Baskets_type(self):
        return self.Baskets_type
    def set_Baskets_type(self, Baskets_type):
        self.Baskets_type = Baskets_type
    def get_Baskets_value(self):
        return self.Baskets_value
    def set_Baskets_value(self, Baskets_value):
        self.Baskets_value = Baskets_value
    def hasContent_(self):
        if (
            self.Baskets_accruedDividend_currency is not None or
            self.Baskets_accruedDividend_value is not None or
            self.Baskets_adjustmentFactor is not None or
            self.Baskets_assetId is not None or
            self.Baskets_baseFx is not None or
            self.Baskets_basingConstant is not None or
            self.Baskets_basketType is not None or
            self.Baskets_calculated_currency is not None or
            self.Baskets_calculated_value is not None or
            self.Baskets_calculationId is not None or
            self.Baskets_constituentCount is not None or
            self.Baskets_currency is not None or
            self.Baskets_date is not None or
            self.Baskets_divisor is not None or
            self.Baskets_estimatedCash_currency is not None or
            self.Baskets_estimatedCash_value is not None or
            self.Baskets_filter is not None or
            self.Baskets_filterName is not None or
            self.Baskets_id is not None or
            self.Baskets_name is not None or
            self.Baskets_netAssetValue_currency is not None or
            self.Baskets_netAssetValue_value is not None or
            self.Baskets_official_currency is not None or
            self.Baskets_official_value is not None or
            self.Baskets_position_calculationId is not None or
            self.Baskets_timeSeries is not None or
            self.Baskets_totalCash_currency is not None or
            self.Baskets_totalCash_value is not None or
            self.Baskets_type is not None or
            self.Baskets_value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BasketType95', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BasketType95')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BasketType95')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BasketType95', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BasketType95'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BasketType95', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Baskets_accruedDividend_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_accruedDividend_currency>%s</%sBaskets_accruedDividend_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_accruedDividend_currency), input_name='Baskets_accruedDividend_currency')), namespaceprefix_ , eol_))
        if self.Baskets_accruedDividend_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_accruedDividend_value>%s</%sBaskets_accruedDividend_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_accruedDividend_value), input_name='Baskets_accruedDividend_value')), namespaceprefix_ , eol_))
        if self.Baskets_adjustmentFactor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_adjustmentFactor>%s</%sBaskets_adjustmentFactor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_adjustmentFactor), input_name='Baskets_adjustmentFactor')), namespaceprefix_ , eol_))
        if self.Baskets_assetId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_assetId>%s</%sBaskets_assetId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_assetId), input_name='Baskets_assetId')), namespaceprefix_ , eol_))
        if self.Baskets_baseFx is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_baseFx>%s</%sBaskets_baseFx>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_baseFx), input_name='Baskets_baseFx')), namespaceprefix_ , eol_))
        if self.Baskets_basingConstant is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_basingConstant>%s</%sBaskets_basingConstant>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_basingConstant), input_name='Baskets_basingConstant')), namespaceprefix_ , eol_))
        if self.Baskets_basketType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_basketType>%s</%sBaskets_basketType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_basketType), input_name='Baskets_basketType')), namespaceprefix_ , eol_))
        if self.Baskets_calculated_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_calculated_currency>%s</%sBaskets_calculated_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_calculated_currency), input_name='Baskets_calculated_currency')), namespaceprefix_ , eol_))
        if self.Baskets_calculated_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_calculated_value>%s</%sBaskets_calculated_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_calculated_value), input_name='Baskets_calculated_value')), namespaceprefix_ , eol_))
        if self.Baskets_calculationId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_calculationId>%s</%sBaskets_calculationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_calculationId), input_name='Baskets_calculationId')), namespaceprefix_ , eol_))
        if self.Baskets_constituentCount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_constituentCount>%s</%sBaskets_constituentCount>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_constituentCount), input_name='Baskets_constituentCount')), namespaceprefix_ , eol_))
        if self.Baskets_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_currency>%s</%sBaskets_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_currency), input_name='Baskets_currency')), namespaceprefix_ , eol_))
        if self.Baskets_date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_date>%s</%sBaskets_date>%s' % (namespaceprefix_ , self.gds_format_date(self.Baskets_date, input_name='Baskets_date'), namespaceprefix_ , eol_))
        if self.Baskets_divisor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_divisor>%s</%sBaskets_divisor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_divisor), input_name='Baskets_divisor')), namespaceprefix_ , eol_))
        if self.Baskets_estimatedCash_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_estimatedCash_currency>%s</%sBaskets_estimatedCash_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_estimatedCash_currency), input_name='Baskets_estimatedCash_currency')), namespaceprefix_ , eol_))
        if self.Baskets_estimatedCash_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_estimatedCash_value>%s</%sBaskets_estimatedCash_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_estimatedCash_value), input_name='Baskets_estimatedCash_value')), namespaceprefix_ , eol_))
        if self.Baskets_filter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_filter>%s</%sBaskets_filter>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_filter), input_name='Baskets_filter')), namespaceprefix_ , eol_))
        if self.Baskets_filterName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_filterName>%s</%sBaskets_filterName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_filterName), input_name='Baskets_filterName')), namespaceprefix_ , eol_))
        if self.Baskets_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_id>%s</%sBaskets_id>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_id), input_name='Baskets_id')), namespaceprefix_ , eol_))
        if self.Baskets_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_name>%s</%sBaskets_name>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_name), input_name='Baskets_name')), namespaceprefix_ , eol_))
        if self.Baskets_netAssetValue_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_netAssetValue_currency>%s</%sBaskets_netAssetValue_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_netAssetValue_currency), input_name='Baskets_netAssetValue_currency')), namespaceprefix_ , eol_))
        if self.Baskets_netAssetValue_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_netAssetValue_value>%s</%sBaskets_netAssetValue_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_netAssetValue_value), input_name='Baskets_netAssetValue_value')), namespaceprefix_ , eol_))
        if self.Baskets_official_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_official_currency>%s</%sBaskets_official_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_official_currency), input_name='Baskets_official_currency')), namespaceprefix_ , eol_))
        if self.Baskets_official_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_official_value>%s</%sBaskets_official_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_official_value), input_name='Baskets_official_value')), namespaceprefix_ , eol_))
        if self.Baskets_position_calculationId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_position_calculationId>%s</%sBaskets_position_calculationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_position_calculationId), input_name='Baskets_position_calculationId')), namespaceprefix_ , eol_))
        if self.Baskets_timeSeries is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_timeSeries>%s</%sBaskets_timeSeries>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_timeSeries), input_name='Baskets_timeSeries')), namespaceprefix_ , eol_))
        if self.Baskets_totalCash_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_totalCash_currency>%s</%sBaskets_totalCash_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_totalCash_currency), input_name='Baskets_totalCash_currency')), namespaceprefix_ , eol_))
        if self.Baskets_totalCash_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_totalCash_value>%s</%sBaskets_totalCash_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_totalCash_value), input_name='Baskets_totalCash_value')), namespaceprefix_ , eol_))
        if self.Baskets_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_type>%s</%sBaskets_type>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_type), input_name='Baskets_type')), namespaceprefix_ , eol_))
        if self.Baskets_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaskets_value>%s</%sBaskets_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Baskets_value), input_name='Baskets_value')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Baskets_accruedDividend_currency':
            Baskets_accruedDividend_currency_ = child_.text
            Baskets_accruedDividend_currency_ = self.gds_validate_string(Baskets_accruedDividend_currency_, node, 'Baskets_accruedDividend_currency')
            self.Baskets_accruedDividend_currency = Baskets_accruedDividend_currency_
        elif nodeName_ == 'Baskets_accruedDividend_value':
            Baskets_accruedDividend_value_ = child_.text
            Baskets_accruedDividend_value_ = self.gds_validate_string(Baskets_accruedDividend_value_, node, 'Baskets_accruedDividend_value')
            self.Baskets_accruedDividend_value = Baskets_accruedDividend_value_
        elif nodeName_ == 'Baskets_adjustmentFactor':
            Baskets_adjustmentFactor_ = child_.text
            Baskets_adjustmentFactor_ = self.gds_validate_string(Baskets_adjustmentFactor_, node, 'Baskets_adjustmentFactor')
            self.Baskets_adjustmentFactor = Baskets_adjustmentFactor_
        elif nodeName_ == 'Baskets_assetId':
            Baskets_assetId_ = child_.text
            Baskets_assetId_ = self.gds_validate_string(Baskets_assetId_, node, 'Baskets_assetId')
            self.Baskets_assetId = Baskets_assetId_
        elif nodeName_ == 'Baskets_baseFx':
            Baskets_baseFx_ = child_.text
            Baskets_baseFx_ = self.gds_validate_string(Baskets_baseFx_, node, 'Baskets_baseFx')
            self.Baskets_baseFx = Baskets_baseFx_
        elif nodeName_ == 'Baskets_basingConstant':
            Baskets_basingConstant_ = child_.text
            Baskets_basingConstant_ = self.gds_validate_string(Baskets_basingConstant_, node, 'Baskets_basingConstant')
            self.Baskets_basingConstant = Baskets_basingConstant_
        elif nodeName_ == 'Baskets_basketType':
            Baskets_basketType_ = child_.text
            Baskets_basketType_ = self.gds_validate_string(Baskets_basketType_, node, 'Baskets_basketType')
            self.Baskets_basketType = Baskets_basketType_
        elif nodeName_ == 'Baskets_calculated_currency':
            Baskets_calculated_currency_ = child_.text
            Baskets_calculated_currency_ = self.gds_validate_string(Baskets_calculated_currency_, node, 'Baskets_calculated_currency')
            self.Baskets_calculated_currency = Baskets_calculated_currency_
        elif nodeName_ == 'Baskets_calculated_value':
            Baskets_calculated_value_ = child_.text
            Baskets_calculated_value_ = self.gds_validate_string(Baskets_calculated_value_, node, 'Baskets_calculated_value')
            self.Baskets_calculated_value = Baskets_calculated_value_
        elif nodeName_ == 'Baskets_calculationId':
            Baskets_calculationId_ = child_.text
            Baskets_calculationId_ = self.gds_validate_string(Baskets_calculationId_, node, 'Baskets_calculationId')
            self.Baskets_calculationId = Baskets_calculationId_
        elif nodeName_ == 'Baskets_constituentCount':
            Baskets_constituentCount_ = child_.text
            Baskets_constituentCount_ = self.gds_validate_string(Baskets_constituentCount_, node, 'Baskets_constituentCount')
            self.Baskets_constituentCount = Baskets_constituentCount_
        elif nodeName_ == 'Baskets_currency':
            Baskets_currency_ = child_.text
            Baskets_currency_ = self.gds_validate_string(Baskets_currency_, node, 'Baskets_currency')
            self.Baskets_currency = Baskets_currency_
        elif nodeName_ == 'Baskets_date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Baskets_date = dval_
        elif nodeName_ == 'Baskets_divisor':
            Baskets_divisor_ = child_.text
            Baskets_divisor_ = self.gds_validate_string(Baskets_divisor_, node, 'Baskets_divisor')
            self.Baskets_divisor = Baskets_divisor_
        elif nodeName_ == 'Baskets_estimatedCash_currency':
            Baskets_estimatedCash_currency_ = child_.text
            Baskets_estimatedCash_currency_ = self.gds_validate_string(Baskets_estimatedCash_currency_, node, 'Baskets_estimatedCash_currency')
            self.Baskets_estimatedCash_currency = Baskets_estimatedCash_currency_
        elif nodeName_ == 'Baskets_estimatedCash_value':
            Baskets_estimatedCash_value_ = child_.text
            Baskets_estimatedCash_value_ = self.gds_validate_string(Baskets_estimatedCash_value_, node, 'Baskets_estimatedCash_value')
            self.Baskets_estimatedCash_value = Baskets_estimatedCash_value_
        elif nodeName_ == 'Baskets_filter':
            Baskets_filter_ = child_.text
            Baskets_filter_ = self.gds_validate_string(Baskets_filter_, node, 'Baskets_filter')
            self.Baskets_filter = Baskets_filter_
        elif nodeName_ == 'Baskets_filterName':
            Baskets_filterName_ = child_.text
            Baskets_filterName_ = self.gds_validate_string(Baskets_filterName_, node, 'Baskets_filterName')
            self.Baskets_filterName = Baskets_filterName_
        elif nodeName_ == 'Baskets_id':
            Baskets_id_ = child_.text
            Baskets_id_ = self.gds_validate_string(Baskets_id_, node, 'Baskets_id')
            self.Baskets_id = Baskets_id_
        elif nodeName_ == 'Baskets_name':
            Baskets_name_ = child_.text
            Baskets_name_ = self.gds_validate_string(Baskets_name_, node, 'Baskets_name')
            self.Baskets_name = Baskets_name_
        elif nodeName_ == 'Baskets_netAssetValue_currency':
            Baskets_netAssetValue_currency_ = child_.text
            Baskets_netAssetValue_currency_ = self.gds_validate_string(Baskets_netAssetValue_currency_, node, 'Baskets_netAssetValue_currency')
            self.Baskets_netAssetValue_currency = Baskets_netAssetValue_currency_
        elif nodeName_ == 'Baskets_netAssetValue_value':
            Baskets_netAssetValue_value_ = child_.text
            Baskets_netAssetValue_value_ = self.gds_validate_string(Baskets_netAssetValue_value_, node, 'Baskets_netAssetValue_value')
            self.Baskets_netAssetValue_value = Baskets_netAssetValue_value_
        elif nodeName_ == 'Baskets_official_currency':
            Baskets_official_currency_ = child_.text
            Baskets_official_currency_ = self.gds_validate_string(Baskets_official_currency_, node, 'Baskets_official_currency')
            self.Baskets_official_currency = Baskets_official_currency_
        elif nodeName_ == 'Baskets_official_value':
            Baskets_official_value_ = child_.text
            Baskets_official_value_ = self.gds_validate_string(Baskets_official_value_, node, 'Baskets_official_value')
            self.Baskets_official_value = Baskets_official_value_
        elif nodeName_ == 'Baskets_position_calculationId':
            Baskets_position_calculationId_ = child_.text
            Baskets_position_calculationId_ = self.gds_validate_string(Baskets_position_calculationId_, node, 'Baskets_position_calculationId')
            self.Baskets_position_calculationId = Baskets_position_calculationId_
        elif nodeName_ == 'Baskets_timeSeries':
            Baskets_timeSeries_ = child_.text
            Baskets_timeSeries_ = self.gds_validate_string(Baskets_timeSeries_, node, 'Baskets_timeSeries')
            self.Baskets_timeSeries = Baskets_timeSeries_
        elif nodeName_ == 'Baskets_totalCash_currency':
            Baskets_totalCash_currency_ = child_.text
            Baskets_totalCash_currency_ = self.gds_validate_string(Baskets_totalCash_currency_, node, 'Baskets_totalCash_currency')
            self.Baskets_totalCash_currency = Baskets_totalCash_currency_
        elif nodeName_ == 'Baskets_totalCash_value':
            Baskets_totalCash_value_ = child_.text
            Baskets_totalCash_value_ = self.gds_validate_string(Baskets_totalCash_value_, node, 'Baskets_totalCash_value')
            self.Baskets_totalCash_value = Baskets_totalCash_value_
        elif nodeName_ == 'Baskets_type':
            Baskets_type_ = child_.text
            Baskets_type_ = self.gds_validate_string(Baskets_type_, node, 'Baskets_type')
            self.Baskets_type = Baskets_type_
        elif nodeName_ == 'Baskets_value':
            Baskets_value_ = child_.text
            Baskets_value_ = self.gds_validate_string(Baskets_value_, node, 'Baskets_value')
            self.Baskets_value = Baskets_value_
# end class BasketType95


class ConstituentsType96(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Constituents_assetId=None, Constituents_filter=None, Constituents_isSuspended=None, Constituents_listingId=None, Constituents_multiplier=None, Constituents_price_currency=None, Constituents_price_value=None, Constituents_regularDividend_currency=None, Constituents_regularDividend_value=None, Constituents_type=None, Constituents_units=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Constituents_assetId = Constituents_assetId
        self.Constituents_filter = Constituents_filter
        self.Constituents_isSuspended = Constituents_isSuspended
        self.Constituents_listingId = Constituents_listingId
        self.Constituents_multiplier = Constituents_multiplier
        self.Constituents_price_currency = Constituents_price_currency
        self.Constituents_price_value = Constituents_price_value
        self.Constituents_regularDividend_currency = Constituents_regularDividend_currency
        self.Constituents_regularDividend_value = Constituents_regularDividend_value
        self.Constituents_type = Constituents_type
        self.Constituents_units = Constituents_units
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ConstituentsType96)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ConstituentsType96.subclass:
            return ConstituentsType96.subclass(*args_, **kwargs_)
        else:
            return ConstituentsType96(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Constituents_assetId(self):
        return self.Constituents_assetId
    def set_Constituents_assetId(self, Constituents_assetId):
        self.Constituents_assetId = Constituents_assetId
    def get_Constituents_filter(self):
        return self.Constituents_filter
    def set_Constituents_filter(self, Constituents_filter):
        self.Constituents_filter = Constituents_filter
    def get_Constituents_isSuspended(self):
        return self.Constituents_isSuspended
    def set_Constituents_isSuspended(self, Constituents_isSuspended):
        self.Constituents_isSuspended = Constituents_isSuspended
    def get_Constituents_listingId(self):
        return self.Constituents_listingId
    def set_Constituents_listingId(self, Constituents_listingId):
        self.Constituents_listingId = Constituents_listingId
    def get_Constituents_multiplier(self):
        return self.Constituents_multiplier
    def set_Constituents_multiplier(self, Constituents_multiplier):
        self.Constituents_multiplier = Constituents_multiplier
    def get_Constituents_price_currency(self):
        return self.Constituents_price_currency
    def set_Constituents_price_currency(self, Constituents_price_currency):
        self.Constituents_price_currency = Constituents_price_currency
    def get_Constituents_price_value(self):
        return self.Constituents_price_value
    def set_Constituents_price_value(self, Constituents_price_value):
        self.Constituents_price_value = Constituents_price_value
    def get_Constituents_regularDividend_currency(self):
        return self.Constituents_regularDividend_currency
    def set_Constituents_regularDividend_currency(self, Constituents_regularDividend_currency):
        self.Constituents_regularDividend_currency = Constituents_regularDividend_currency
    def get_Constituents_regularDividend_value(self):
        return self.Constituents_regularDividend_value
    def set_Constituents_regularDividend_value(self, Constituents_regularDividend_value):
        self.Constituents_regularDividend_value = Constituents_regularDividend_value
    def get_Constituents_type(self):
        return self.Constituents_type
    def set_Constituents_type(self, Constituents_type):
        self.Constituents_type = Constituents_type
    def get_Constituents_units(self):
        return self.Constituents_units
    def set_Constituents_units(self, Constituents_units):
        self.Constituents_units = Constituents_units
    def hasContent_(self):
        if (
            self.Constituents_assetId is not None or
            self.Constituents_filter is not None or
            self.Constituents_isSuspended is not None or
            self.Constituents_listingId is not None or
            self.Constituents_multiplier is not None or
            self.Constituents_price_currency is not None or
            self.Constituents_price_value is not None or
            self.Constituents_regularDividend_currency is not None or
            self.Constituents_regularDividend_value is not None or
            self.Constituents_type is not None or
            self.Constituents_units is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConstituentsType96', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ConstituentsType96')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ConstituentsType96')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ConstituentsType96', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ConstituentsType96'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConstituentsType96', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Constituents_assetId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_assetId>%s</%sConstituents_assetId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_assetId), input_name='Constituents_assetId')), namespaceprefix_ , eol_))
        if self.Constituents_filter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_filter>%s</%sConstituents_filter>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_filter), input_name='Constituents_filter')), namespaceprefix_ , eol_))
        if self.Constituents_isSuspended is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_isSuspended>%s</%sConstituents_isSuspended>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_isSuspended), input_name='Constituents_isSuspended')), namespaceprefix_ , eol_))
        if self.Constituents_listingId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_listingId>%s</%sConstituents_listingId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_listingId), input_name='Constituents_listingId')), namespaceprefix_ , eol_))
        if self.Constituents_multiplier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_multiplier>%s</%sConstituents_multiplier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_multiplier), input_name='Constituents_multiplier')), namespaceprefix_ , eol_))
        if self.Constituents_price_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_price_currency>%s</%sConstituents_price_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_price_currency), input_name='Constituents_price_currency')), namespaceprefix_ , eol_))
        if self.Constituents_price_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_price_value>%s</%sConstituents_price_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_price_value), input_name='Constituents_price_value')), namespaceprefix_ , eol_))
        if self.Constituents_regularDividend_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_regularDividend_currency>%s</%sConstituents_regularDividend_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_regularDividend_currency), input_name='Constituents_regularDividend_currency')), namespaceprefix_ , eol_))
        if self.Constituents_regularDividend_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_regularDividend_value>%s</%sConstituents_regularDividend_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_regularDividend_value), input_name='Constituents_regularDividend_value')), namespaceprefix_ , eol_))
        if self.Constituents_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_type>%s</%sConstituents_type>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_type), input_name='Constituents_type')), namespaceprefix_ , eol_))
        if self.Constituents_units is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_units>%s</%sConstituents_units>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_units), input_name='Constituents_units')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Constituents_assetId':
            Constituents_assetId_ = child_.text
            Constituents_assetId_ = self.gds_validate_string(Constituents_assetId_, node, 'Constituents_assetId')
            self.Constituents_assetId = Constituents_assetId_
        elif nodeName_ == 'Constituents_filter':
            Constituents_filter_ = child_.text
            Constituents_filter_ = self.gds_validate_string(Constituents_filter_, node, 'Constituents_filter')
            self.Constituents_filter = Constituents_filter_
        elif nodeName_ == 'Constituents_isSuspended':
            Constituents_isSuspended_ = child_.text
            Constituents_isSuspended_ = self.gds_validate_string(Constituents_isSuspended_, node, 'Constituents_isSuspended')
            self.Constituents_isSuspended = Constituents_isSuspended_
        elif nodeName_ == 'Constituents_listingId':
            Constituents_listingId_ = child_.text
            Constituents_listingId_ = self.gds_validate_string(Constituents_listingId_, node, 'Constituents_listingId')
            self.Constituents_listingId = Constituents_listingId_
        elif nodeName_ == 'Constituents_multiplier':
            Constituents_multiplier_ = child_.text
            Constituents_multiplier_ = self.gds_validate_string(Constituents_multiplier_, node, 'Constituents_multiplier')
            self.Constituents_multiplier = Constituents_multiplier_
        elif nodeName_ == 'Constituents_price_currency':
            Constituents_price_currency_ = child_.text
            Constituents_price_currency_ = self.gds_validate_string(Constituents_price_currency_, node, 'Constituents_price_currency')
            self.Constituents_price_currency = Constituents_price_currency_
        elif nodeName_ == 'Constituents_price_value':
            Constituents_price_value_ = child_.text
            Constituents_price_value_ = self.gds_validate_string(Constituents_price_value_, node, 'Constituents_price_value')
            self.Constituents_price_value = Constituents_price_value_
        elif nodeName_ == 'Constituents_regularDividend_currency':
            Constituents_regularDividend_currency_ = child_.text
            Constituents_regularDividend_currency_ = self.gds_validate_string(Constituents_regularDividend_currency_, node, 'Constituents_regularDividend_currency')
            self.Constituents_regularDividend_currency = Constituents_regularDividend_currency_
        elif nodeName_ == 'Constituents_regularDividend_value':
            Constituents_regularDividend_value_ = child_.text
            Constituents_regularDividend_value_ = self.gds_validate_string(Constituents_regularDividend_value_, node, 'Constituents_regularDividend_value')
            self.Constituents_regularDividend_value = Constituents_regularDividend_value_
        elif nodeName_ == 'Constituents_type':
            Constituents_type_ = child_.text
            Constituents_type_ = self.gds_validate_string(Constituents_type_, node, 'Constituents_type')
            self.Constituents_type = Constituents_type_
        elif nodeName_ == 'Constituents_units':
            Constituents_units_ = child_.text
            Constituents_units_ = self.gds_validate_string(Constituents_units_, node, 'Constituents_units')
            self.Constituents_units = Constituents_units_
# end class ConstituentsType96


class ExchangeRatesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ExchangeRates_count=None, ExchangeRates_from=None, ExchangeRates_to=None, ExchangeRates_tradingDate=None, ExchangeRates_value=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ExchangeRates_count = ExchangeRates_count
        self.ExchangeRates_from = ExchangeRates_from
        self.ExchangeRates_to = ExchangeRates_to
        if isinstance(ExchangeRates_tradingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ExchangeRates_tradingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ExchangeRates_tradingDate
        self.ExchangeRates_tradingDate = initvalue_
        self.ExchangeRates_value = ExchangeRates_value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExchangeRatesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExchangeRatesType.subclass:
            return ExchangeRatesType.subclass(*args_, **kwargs_)
        else:
            return ExchangeRatesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ExchangeRates_count(self):
        return self.ExchangeRates_count
    def set_ExchangeRates_count(self, ExchangeRates_count):
        self.ExchangeRates_count = ExchangeRates_count
    def get_ExchangeRates_from(self):
        return self.ExchangeRates_from
    def set_ExchangeRates_from(self, ExchangeRates_from):
        self.ExchangeRates_from = ExchangeRates_from
    def get_ExchangeRates_to(self):
        return self.ExchangeRates_to
    def set_ExchangeRates_to(self, ExchangeRates_to):
        self.ExchangeRates_to = ExchangeRates_to
    def get_ExchangeRates_tradingDate(self):
        return self.ExchangeRates_tradingDate
    def set_ExchangeRates_tradingDate(self, ExchangeRates_tradingDate):
        self.ExchangeRates_tradingDate = ExchangeRates_tradingDate
    def get_ExchangeRates_value(self):
        return self.ExchangeRates_value
    def set_ExchangeRates_value(self, ExchangeRates_value):
        self.ExchangeRates_value = ExchangeRates_value
    def hasContent_(self):
        if (
            self.ExchangeRates_count is not None or
            self.ExchangeRates_from is not None or
            self.ExchangeRates_to is not None or
            self.ExchangeRates_tradingDate is not None or
            self.ExchangeRates_value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExchangeRatesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExchangeRatesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ExchangeRatesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ExchangeRatesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ExchangeRatesType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExchangeRatesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ExchangeRates_count is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExchangeRates_count>%s</%sExchangeRates_count>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExchangeRates_count), input_name='ExchangeRates_count')), namespaceprefix_ , eol_))
        if self.ExchangeRates_from is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExchangeRates_from>%s</%sExchangeRates_from>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExchangeRates_from), input_name='ExchangeRates_from')), namespaceprefix_ , eol_))
        if self.ExchangeRates_to is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExchangeRates_to>%s</%sExchangeRates_to>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExchangeRates_to), input_name='ExchangeRates_to')), namespaceprefix_ , eol_))
        if self.ExchangeRates_tradingDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExchangeRates_tradingDate>%s</%sExchangeRates_tradingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ExchangeRates_tradingDate, input_name='ExchangeRates_tradingDate'), namespaceprefix_ , eol_))
        if self.ExchangeRates_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExchangeRates_value>%s</%sExchangeRates_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExchangeRates_value), input_name='ExchangeRates_value')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ExchangeRates_count':
            ExchangeRates_count_ = child_.text
            ExchangeRates_count_ = self.gds_validate_string(ExchangeRates_count_, node, 'ExchangeRates_count')
            self.ExchangeRates_count = ExchangeRates_count_
        elif nodeName_ == 'ExchangeRates_from':
            ExchangeRates_from_ = child_.text
            ExchangeRates_from_ = self.gds_validate_string(ExchangeRates_from_, node, 'ExchangeRates_from')
            self.ExchangeRates_from = ExchangeRates_from_
        elif nodeName_ == 'ExchangeRates_to':
            ExchangeRates_to_ = child_.text
            ExchangeRates_to_ = self.gds_validate_string(ExchangeRates_to_, node, 'ExchangeRates_to')
            self.ExchangeRates_to = ExchangeRates_to_
        elif nodeName_ == 'ExchangeRates_tradingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ExchangeRates_tradingDate = dval_
        elif nodeName_ == 'ExchangeRates_value':
            ExchangeRates_value_ = child_.text
            ExchangeRates_value_ = self.gds_validate_string(ExchangeRates_value_, node, 'ExchangeRates_value')
            self.ExchangeRates_value = ExchangeRates_value_
# end class ExchangeRatesType


class GeneralInformationType97(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, assetId=None, assetsUnderManagement=None, assetType=None, baseCurrency=None, clusterId=None, creationUnitSize=None, daysInYear=None, indexProviderId=None, isDataValidated=None, isHoliday=None, lastUpdated=None, leverage=None, name=None, netDailyAssetFlow=None, PerCreationUnit_accruedDividend_currency=None, PerCreationUnit_accruedDividend_value=None, PerCreationUnit_exDividendPaid_currency=None, PerCreationUnit_exDividendPaid_value=None, PerCreationUnit_exDividendRecieved_currency=None, PerCreationUnit_exDividendRecieved_value=None, PerCreationUnit_income_currency=None, PerCreationUnit_income_value=None, PerCreationUnit_managementFee_currency=None, PerCreationUnit_managementFee_value=None, PerCreationUnit_netAssetValue_currency=None, PerCreationUnit_netAssetValue_value=None, PerCreationUnit_providerBalancingCash_currency=None, PerCreationUnit_providerBalancingCash_value=None, PerCreationUnit_providerEstimatedCash_currency=None, PerCreationUnit_providerEstimatedCash_value=None, PerCreationUnit_totalEscrow_currency=None, PerCreationUnit_totalEscrow_value=None, PerCreationUnit_totalExcludedAssets_currency=None, PerCreationUnit_totalExcludedAssets_value=None, PerShare_exDividendPaid_currency=None, PerShare_exDividendPaid_value=None, PerShare_exDividendRecieved_currency=None, PerShare_exDividendRecieved_value=None, PerShare_income_currency=None, PerShare_income_value=None, PerShare_previousNetAssetValuePerShareCalculated_currency=None, PerShare_previousNetAssetValuePerShareCalculated_value=None, pricingDate=None, returnType=None, sharesOutstanding=None, tradeDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.assetId = assetId
        self.assetsUnderManagement = assetsUnderManagement
        self.assetType = assetType
        self.baseCurrency = baseCurrency
        self.clusterId = clusterId
        self.creationUnitSize = creationUnitSize
        self.daysInYear = daysInYear
        self.indexProviderId = indexProviderId
        self.isDataValidated = isDataValidated
        self.isHoliday = isHoliday
        self.lastUpdated = lastUpdated
        self.leverage = leverage
        self.name = name
        self.netDailyAssetFlow = netDailyAssetFlow
        self.PerCreationUnit_accruedDividend_currency = PerCreationUnit_accruedDividend_currency
        self.PerCreationUnit_accruedDividend_value = PerCreationUnit_accruedDividend_value
        self.PerCreationUnit_exDividendPaid_currency = PerCreationUnit_exDividendPaid_currency
        self.PerCreationUnit_exDividendPaid_value = PerCreationUnit_exDividendPaid_value
        self.PerCreationUnit_exDividendRecieved_currency = PerCreationUnit_exDividendRecieved_currency
        self.PerCreationUnit_exDividendRecieved_value = PerCreationUnit_exDividendRecieved_value
        self.PerCreationUnit_income_currency = PerCreationUnit_income_currency
        self.PerCreationUnit_income_value = PerCreationUnit_income_value
        self.PerCreationUnit_managementFee_currency = PerCreationUnit_managementFee_currency
        self.PerCreationUnit_managementFee_value = PerCreationUnit_managementFee_value
        self.PerCreationUnit_netAssetValue_currency = PerCreationUnit_netAssetValue_currency
        self.PerCreationUnit_netAssetValue_value = PerCreationUnit_netAssetValue_value
        self.PerCreationUnit_providerBalancingCash_currency = PerCreationUnit_providerBalancingCash_currency
        self.PerCreationUnit_providerBalancingCash_value = PerCreationUnit_providerBalancingCash_value
        self.PerCreationUnit_providerEstimatedCash_currency = PerCreationUnit_providerEstimatedCash_currency
        self.PerCreationUnit_providerEstimatedCash_value = PerCreationUnit_providerEstimatedCash_value
        self.PerCreationUnit_totalEscrow_currency = PerCreationUnit_totalEscrow_currency
        self.PerCreationUnit_totalEscrow_value = PerCreationUnit_totalEscrow_value
        self.PerCreationUnit_totalExcludedAssets_currency = PerCreationUnit_totalExcludedAssets_currency
        self.PerCreationUnit_totalExcludedAssets_value = PerCreationUnit_totalExcludedAssets_value
        self.PerShare_exDividendPaid_currency = PerShare_exDividendPaid_currency
        self.PerShare_exDividendPaid_value = PerShare_exDividendPaid_value
        self.PerShare_exDividendRecieved_currency = PerShare_exDividendRecieved_currency
        self.PerShare_exDividendRecieved_value = PerShare_exDividendRecieved_value
        self.PerShare_income_currency = PerShare_income_currency
        self.PerShare_income_value = PerShare_income_value
        self.PerShare_previousNetAssetValuePerShareCalculated_currency = PerShare_previousNetAssetValuePerShareCalculated_currency
        self.PerShare_previousNetAssetValuePerShareCalculated_value = PerShare_previousNetAssetValuePerShareCalculated_value
        if isinstance(pricingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(pricingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = pricingDate
        self.pricingDate = initvalue_
        self.returnType = returnType
        self.sharesOutstanding = sharesOutstanding
        if isinstance(tradeDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(tradeDate, '%Y-%m-%d').date()
        else:
            initvalue_ = tradeDate
        self.tradeDate = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralInformationType97)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralInformationType97.subclass:
            return GeneralInformationType97.subclass(*args_, **kwargs_)
        else:
            return GeneralInformationType97(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_assetId(self):
        return self.assetId
    def set_assetId(self, assetId):
        self.assetId = assetId
    def get_assetsUnderManagement(self):
        return self.assetsUnderManagement
    def set_assetsUnderManagement(self, assetsUnderManagement):
        self.assetsUnderManagement = assetsUnderManagement
    def get_assetType(self):
        return self.assetType
    def set_assetType(self, assetType):
        self.assetType = assetType
    def get_baseCurrency(self):
        return self.baseCurrency
    def set_baseCurrency(self, baseCurrency):
        self.baseCurrency = baseCurrency
    def get_clusterId(self):
        return self.clusterId
    def set_clusterId(self, clusterId):
        self.clusterId = clusterId
    def get_creationUnitSize(self):
        return self.creationUnitSize
    def set_creationUnitSize(self, creationUnitSize):
        self.creationUnitSize = creationUnitSize
    def get_daysInYear(self):
        return self.daysInYear
    def set_daysInYear(self, daysInYear):
        self.daysInYear = daysInYear
    def get_indexProviderId(self):
        return self.indexProviderId
    def set_indexProviderId(self, indexProviderId):
        self.indexProviderId = indexProviderId
    def get_isDataValidated(self):
        return self.isDataValidated
    def set_isDataValidated(self, isDataValidated):
        self.isDataValidated = isDataValidated
    def get_isHoliday(self):
        return self.isHoliday
    def set_isHoliday(self, isHoliday):
        self.isHoliday = isHoliday
    def get_lastUpdated(self):
        return self.lastUpdated
    def set_lastUpdated(self, lastUpdated):
        self.lastUpdated = lastUpdated
    def get_leverage(self):
        return self.leverage
    def set_leverage(self, leverage):
        self.leverage = leverage
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_netDailyAssetFlow(self):
        return self.netDailyAssetFlow
    def set_netDailyAssetFlow(self, netDailyAssetFlow):
        self.netDailyAssetFlow = netDailyAssetFlow
    def get_PerCreationUnit_accruedDividend_currency(self):
        return self.PerCreationUnit_accruedDividend_currency
    def set_PerCreationUnit_accruedDividend_currency(self, PerCreationUnit_accruedDividend_currency):
        self.PerCreationUnit_accruedDividend_currency = PerCreationUnit_accruedDividend_currency
    def get_PerCreationUnit_accruedDividend_value(self):
        return self.PerCreationUnit_accruedDividend_value
    def set_PerCreationUnit_accruedDividend_value(self, PerCreationUnit_accruedDividend_value):
        self.PerCreationUnit_accruedDividend_value = PerCreationUnit_accruedDividend_value
    def get_PerCreationUnit_exDividendPaid_currency(self):
        return self.PerCreationUnit_exDividendPaid_currency
    def set_PerCreationUnit_exDividendPaid_currency(self, PerCreationUnit_exDividendPaid_currency):
        self.PerCreationUnit_exDividendPaid_currency = PerCreationUnit_exDividendPaid_currency
    def get_PerCreationUnit_exDividendPaid_value(self):
        return self.PerCreationUnit_exDividendPaid_value
    def set_PerCreationUnit_exDividendPaid_value(self, PerCreationUnit_exDividendPaid_value):
        self.PerCreationUnit_exDividendPaid_value = PerCreationUnit_exDividendPaid_value
    def get_PerCreationUnit_exDividendRecieved_currency(self):
        return self.PerCreationUnit_exDividendRecieved_currency
    def set_PerCreationUnit_exDividendRecieved_currency(self, PerCreationUnit_exDividendRecieved_currency):
        self.PerCreationUnit_exDividendRecieved_currency = PerCreationUnit_exDividendRecieved_currency
    def get_PerCreationUnit_exDividendRecieved_value(self):
        return self.PerCreationUnit_exDividendRecieved_value
    def set_PerCreationUnit_exDividendRecieved_value(self, PerCreationUnit_exDividendRecieved_value):
        self.PerCreationUnit_exDividendRecieved_value = PerCreationUnit_exDividendRecieved_value
    def get_PerCreationUnit_income_currency(self):
        return self.PerCreationUnit_income_currency
    def set_PerCreationUnit_income_currency(self, PerCreationUnit_income_currency):
        self.PerCreationUnit_income_currency = PerCreationUnit_income_currency
    def get_PerCreationUnit_income_value(self):
        return self.PerCreationUnit_income_value
    def set_PerCreationUnit_income_value(self, PerCreationUnit_income_value):
        self.PerCreationUnit_income_value = PerCreationUnit_income_value
    def get_PerCreationUnit_managementFee_currency(self):
        return self.PerCreationUnit_managementFee_currency
    def set_PerCreationUnit_managementFee_currency(self, PerCreationUnit_managementFee_currency):
        self.PerCreationUnit_managementFee_currency = PerCreationUnit_managementFee_currency
    def get_PerCreationUnit_managementFee_value(self):
        return self.PerCreationUnit_managementFee_value
    def set_PerCreationUnit_managementFee_value(self, PerCreationUnit_managementFee_value):
        self.PerCreationUnit_managementFee_value = PerCreationUnit_managementFee_value
    def get_PerCreationUnit_netAssetValue_currency(self):
        return self.PerCreationUnit_netAssetValue_currency
    def set_PerCreationUnit_netAssetValue_currency(self, PerCreationUnit_netAssetValue_currency):
        self.PerCreationUnit_netAssetValue_currency = PerCreationUnit_netAssetValue_currency
    def get_PerCreationUnit_netAssetValue_value(self):
        return self.PerCreationUnit_netAssetValue_value
    def set_PerCreationUnit_netAssetValue_value(self, PerCreationUnit_netAssetValue_value):
        self.PerCreationUnit_netAssetValue_value = PerCreationUnit_netAssetValue_value
    def get_PerCreationUnit_providerBalancingCash_currency(self):
        return self.PerCreationUnit_providerBalancingCash_currency
    def set_PerCreationUnit_providerBalancingCash_currency(self, PerCreationUnit_providerBalancingCash_currency):
        self.PerCreationUnit_providerBalancingCash_currency = PerCreationUnit_providerBalancingCash_currency
    def get_PerCreationUnit_providerBalancingCash_value(self):
        return self.PerCreationUnit_providerBalancingCash_value
    def set_PerCreationUnit_providerBalancingCash_value(self, PerCreationUnit_providerBalancingCash_value):
        self.PerCreationUnit_providerBalancingCash_value = PerCreationUnit_providerBalancingCash_value
    def get_PerCreationUnit_providerEstimatedCash_currency(self):
        return self.PerCreationUnit_providerEstimatedCash_currency
    def set_PerCreationUnit_providerEstimatedCash_currency(self, PerCreationUnit_providerEstimatedCash_currency):
        self.PerCreationUnit_providerEstimatedCash_currency = PerCreationUnit_providerEstimatedCash_currency
    def get_PerCreationUnit_providerEstimatedCash_value(self):
        return self.PerCreationUnit_providerEstimatedCash_value
    def set_PerCreationUnit_providerEstimatedCash_value(self, PerCreationUnit_providerEstimatedCash_value):
        self.PerCreationUnit_providerEstimatedCash_value = PerCreationUnit_providerEstimatedCash_value
    def get_PerCreationUnit_totalEscrow_currency(self):
        return self.PerCreationUnit_totalEscrow_currency
    def set_PerCreationUnit_totalEscrow_currency(self, PerCreationUnit_totalEscrow_currency):
        self.PerCreationUnit_totalEscrow_currency = PerCreationUnit_totalEscrow_currency
    def get_PerCreationUnit_totalEscrow_value(self):
        return self.PerCreationUnit_totalEscrow_value
    def set_PerCreationUnit_totalEscrow_value(self, PerCreationUnit_totalEscrow_value):
        self.PerCreationUnit_totalEscrow_value = PerCreationUnit_totalEscrow_value
    def get_PerCreationUnit_totalExcludedAssets_currency(self):
        return self.PerCreationUnit_totalExcludedAssets_currency
    def set_PerCreationUnit_totalExcludedAssets_currency(self, PerCreationUnit_totalExcludedAssets_currency):
        self.PerCreationUnit_totalExcludedAssets_currency = PerCreationUnit_totalExcludedAssets_currency
    def get_PerCreationUnit_totalExcludedAssets_value(self):
        return self.PerCreationUnit_totalExcludedAssets_value
    def set_PerCreationUnit_totalExcludedAssets_value(self, PerCreationUnit_totalExcludedAssets_value):
        self.PerCreationUnit_totalExcludedAssets_value = PerCreationUnit_totalExcludedAssets_value
    def get_PerShare_exDividendPaid_currency(self):
        return self.PerShare_exDividendPaid_currency
    def set_PerShare_exDividendPaid_currency(self, PerShare_exDividendPaid_currency):
        self.PerShare_exDividendPaid_currency = PerShare_exDividendPaid_currency
    def get_PerShare_exDividendPaid_value(self):
        return self.PerShare_exDividendPaid_value
    def set_PerShare_exDividendPaid_value(self, PerShare_exDividendPaid_value):
        self.PerShare_exDividendPaid_value = PerShare_exDividendPaid_value
    def get_PerShare_exDividendRecieved_currency(self):
        return self.PerShare_exDividendRecieved_currency
    def set_PerShare_exDividendRecieved_currency(self, PerShare_exDividendRecieved_currency):
        self.PerShare_exDividendRecieved_currency = PerShare_exDividendRecieved_currency
    def get_PerShare_exDividendRecieved_value(self):
        return self.PerShare_exDividendRecieved_value
    def set_PerShare_exDividendRecieved_value(self, PerShare_exDividendRecieved_value):
        self.PerShare_exDividendRecieved_value = PerShare_exDividendRecieved_value
    def get_PerShare_income_currency(self):
        return self.PerShare_income_currency
    def set_PerShare_income_currency(self, PerShare_income_currency):
        self.PerShare_income_currency = PerShare_income_currency
    def get_PerShare_income_value(self):
        return self.PerShare_income_value
    def set_PerShare_income_value(self, PerShare_income_value):
        self.PerShare_income_value = PerShare_income_value
    def get_PerShare_previousNetAssetValuePerShareCalculated_currency(self):
        return self.PerShare_previousNetAssetValuePerShareCalculated_currency
    def set_PerShare_previousNetAssetValuePerShareCalculated_currency(self, PerShare_previousNetAssetValuePerShareCalculated_currency):
        self.PerShare_previousNetAssetValuePerShareCalculated_currency = PerShare_previousNetAssetValuePerShareCalculated_currency
    def get_PerShare_previousNetAssetValuePerShareCalculated_value(self):
        return self.PerShare_previousNetAssetValuePerShareCalculated_value
    def set_PerShare_previousNetAssetValuePerShareCalculated_value(self, PerShare_previousNetAssetValuePerShareCalculated_value):
        self.PerShare_previousNetAssetValuePerShareCalculated_value = PerShare_previousNetAssetValuePerShareCalculated_value
    def get_pricingDate(self):
        return self.pricingDate
    def set_pricingDate(self, pricingDate):
        self.pricingDate = pricingDate
    def get_returnType(self):
        return self.returnType
    def set_returnType(self, returnType):
        self.returnType = returnType
    def get_sharesOutstanding(self):
        return self.sharesOutstanding
    def set_sharesOutstanding(self, sharesOutstanding):
        self.sharesOutstanding = sharesOutstanding
    def get_tradeDate(self):
        return self.tradeDate
    def set_tradeDate(self, tradeDate):
        self.tradeDate = tradeDate
    def hasContent_(self):
        if (
            self.assetId is not None or
            self.assetsUnderManagement is not None or
            self.assetType is not None or
            self.baseCurrency is not None or
            self.clusterId is not None or
            self.creationUnitSize is not None or
            self.daysInYear is not None or
            self.indexProviderId is not None or
            self.isDataValidated is not None or
            self.isHoliday is not None or
            self.lastUpdated is not None or
            self.leverage is not None or
            self.name is not None or
            self.netDailyAssetFlow is not None or
            self.PerCreationUnit_accruedDividend_currency is not None or
            self.PerCreationUnit_accruedDividend_value is not None or
            self.PerCreationUnit_exDividendPaid_currency is not None or
            self.PerCreationUnit_exDividendPaid_value is not None or
            self.PerCreationUnit_exDividendRecieved_currency is not None or
            self.PerCreationUnit_exDividendRecieved_value is not None or
            self.PerCreationUnit_income_currency is not None or
            self.PerCreationUnit_income_value is not None or
            self.PerCreationUnit_managementFee_currency is not None or
            self.PerCreationUnit_managementFee_value is not None or
            self.PerCreationUnit_netAssetValue_currency is not None or
            self.PerCreationUnit_netAssetValue_value is not None or
            self.PerCreationUnit_providerBalancingCash_currency is not None or
            self.PerCreationUnit_providerBalancingCash_value is not None or
            self.PerCreationUnit_providerEstimatedCash_currency is not None or
            self.PerCreationUnit_providerEstimatedCash_value is not None or
            self.PerCreationUnit_totalEscrow_currency is not None or
            self.PerCreationUnit_totalEscrow_value is not None or
            self.PerCreationUnit_totalExcludedAssets_currency is not None or
            self.PerCreationUnit_totalExcludedAssets_value is not None or
            self.PerShare_exDividendPaid_currency is not None or
            self.PerShare_exDividendPaid_value is not None or
            self.PerShare_exDividendRecieved_currency is not None or
            self.PerShare_exDividendRecieved_value is not None or
            self.PerShare_income_currency is not None or
            self.PerShare_income_value is not None or
            self.PerShare_previousNetAssetValuePerShareCalculated_currency is not None or
            self.PerShare_previousNetAssetValuePerShareCalculated_value is not None or
            self.pricingDate is not None or
            self.returnType is not None or
            self.sharesOutstanding is not None or
            self.tradeDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralInformationType97', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralInformationType97')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralInformationType97')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralInformationType97', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralInformationType97'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralInformationType97', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.assetId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sassetId>%s</%sassetId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.assetId), input_name='assetId')), namespaceprefix_ , eol_))
        if self.assetsUnderManagement is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sassetsUnderManagement>%s</%sassetsUnderManagement>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.assetsUnderManagement), input_name='assetsUnderManagement')), namespaceprefix_ , eol_))
        if self.assetType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sassetType>%s</%sassetType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.assetType), input_name='assetType')), namespaceprefix_ , eol_))
        if self.baseCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbaseCurrency>%s</%sbaseCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.baseCurrency), input_name='baseCurrency')), namespaceprefix_ , eol_))
        if self.clusterId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sclusterId>%s</%sclusterId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.clusterId), input_name='clusterId')), namespaceprefix_ , eol_))
        if self.creationUnitSize is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%screationUnitSize>%s</%screationUnitSize>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.creationUnitSize), input_name='creationUnitSize')), namespaceprefix_ , eol_))
        if self.daysInYear is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdaysInYear>%s</%sdaysInYear>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.daysInYear), input_name='daysInYear')), namespaceprefix_ , eol_))
        if self.indexProviderId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sindexProviderId>%s</%sindexProviderId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.indexProviderId), input_name='indexProviderId')), namespaceprefix_ , eol_))
        if self.isDataValidated is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sisDataValidated>%s</%sisDataValidated>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.isDataValidated), input_name='isDataValidated')), namespaceprefix_ , eol_))
        if self.isHoliday is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sisHoliday>%s</%sisHoliday>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.isHoliday), input_name='isHoliday')), namespaceprefix_ , eol_))
        if self.lastUpdated is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastUpdated>%s</%slastUpdated>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastUpdated), input_name='lastUpdated')), namespaceprefix_ , eol_))
        if self.leverage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sleverage>%s</%sleverage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.leverage), input_name='leverage')), namespaceprefix_ , eol_))
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sname>%s</%sname>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.name), input_name='name')), namespaceprefix_ , eol_))
        if self.netDailyAssetFlow is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snetDailyAssetFlow>%s</%snetDailyAssetFlow>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.netDailyAssetFlow), input_name='netDailyAssetFlow')), namespaceprefix_ , eol_))
        if self.PerCreationUnit_accruedDividend_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerCreationUnit_accruedDividend_currency>%s</%sPerCreationUnit_accruedDividend_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerCreationUnit_accruedDividend_currency), input_name='PerCreationUnit_accruedDividend_currency')), namespaceprefix_ , eol_))
        if self.PerCreationUnit_accruedDividend_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerCreationUnit_accruedDividend_value>%s</%sPerCreationUnit_accruedDividend_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerCreationUnit_accruedDividend_value), input_name='PerCreationUnit_accruedDividend_value')), namespaceprefix_ , eol_))
        if self.PerCreationUnit_exDividendPaid_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerCreationUnit_exDividendPaid_currency>%s</%sPerCreationUnit_exDividendPaid_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerCreationUnit_exDividendPaid_currency), input_name='PerCreationUnit_exDividendPaid_currency')), namespaceprefix_ , eol_))
        if self.PerCreationUnit_exDividendPaid_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerCreationUnit_exDividendPaid_value>%s</%sPerCreationUnit_exDividendPaid_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerCreationUnit_exDividendPaid_value), input_name='PerCreationUnit_exDividendPaid_value')), namespaceprefix_ , eol_))
        if self.PerCreationUnit_exDividendRecieved_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerCreationUnit_exDividendRecieved_currency>%s</%sPerCreationUnit_exDividendRecieved_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerCreationUnit_exDividendRecieved_currency), input_name='PerCreationUnit_exDividendRecieved_currency')), namespaceprefix_ , eol_))
        if self.PerCreationUnit_exDividendRecieved_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerCreationUnit_exDividendRecieved_value>%s</%sPerCreationUnit_exDividendRecieved_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerCreationUnit_exDividendRecieved_value), input_name='PerCreationUnit_exDividendRecieved_value')), namespaceprefix_ , eol_))
        if self.PerCreationUnit_income_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerCreationUnit_income_currency>%s</%sPerCreationUnit_income_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerCreationUnit_income_currency), input_name='PerCreationUnit_income_currency')), namespaceprefix_ , eol_))
        if self.PerCreationUnit_income_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerCreationUnit_income_value>%s</%sPerCreationUnit_income_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerCreationUnit_income_value), input_name='PerCreationUnit_income_value')), namespaceprefix_ , eol_))
        if self.PerCreationUnit_managementFee_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerCreationUnit_managementFee_currency>%s</%sPerCreationUnit_managementFee_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerCreationUnit_managementFee_currency), input_name='PerCreationUnit_managementFee_currency')), namespaceprefix_ , eol_))
        if self.PerCreationUnit_managementFee_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerCreationUnit_managementFee_value>%s</%sPerCreationUnit_managementFee_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerCreationUnit_managementFee_value), input_name='PerCreationUnit_managementFee_value')), namespaceprefix_ , eol_))
        if self.PerCreationUnit_netAssetValue_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerCreationUnit_netAssetValue_currency>%s</%sPerCreationUnit_netAssetValue_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerCreationUnit_netAssetValue_currency), input_name='PerCreationUnit_netAssetValue_currency')), namespaceprefix_ , eol_))
        if self.PerCreationUnit_netAssetValue_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerCreationUnit_netAssetValue_value>%s</%sPerCreationUnit_netAssetValue_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerCreationUnit_netAssetValue_value), input_name='PerCreationUnit_netAssetValue_value')), namespaceprefix_ , eol_))
        if self.PerCreationUnit_providerBalancingCash_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerCreationUnit_providerBalancingCash_currency>%s</%sPerCreationUnit_providerBalancingCash_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerCreationUnit_providerBalancingCash_currency), input_name='PerCreationUnit_providerBalancingCash_currency')), namespaceprefix_ , eol_))
        if self.PerCreationUnit_providerBalancingCash_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerCreationUnit_providerBalancingCash_value>%s</%sPerCreationUnit_providerBalancingCash_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerCreationUnit_providerBalancingCash_value), input_name='PerCreationUnit_providerBalancingCash_value')), namespaceprefix_ , eol_))
        if self.PerCreationUnit_providerEstimatedCash_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerCreationUnit_providerEstimatedCash_currency>%s</%sPerCreationUnit_providerEstimatedCash_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerCreationUnit_providerEstimatedCash_currency), input_name='PerCreationUnit_providerEstimatedCash_currency')), namespaceprefix_ , eol_))
        if self.PerCreationUnit_providerEstimatedCash_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerCreationUnit_providerEstimatedCash_value>%s</%sPerCreationUnit_providerEstimatedCash_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerCreationUnit_providerEstimatedCash_value), input_name='PerCreationUnit_providerEstimatedCash_value')), namespaceprefix_ , eol_))
        if self.PerCreationUnit_totalEscrow_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerCreationUnit_totalEscrow_currency>%s</%sPerCreationUnit_totalEscrow_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerCreationUnit_totalEscrow_currency), input_name='PerCreationUnit_totalEscrow_currency')), namespaceprefix_ , eol_))
        if self.PerCreationUnit_totalEscrow_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerCreationUnit_totalEscrow_value>%s</%sPerCreationUnit_totalEscrow_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerCreationUnit_totalEscrow_value), input_name='PerCreationUnit_totalEscrow_value')), namespaceprefix_ , eol_))
        if self.PerCreationUnit_totalExcludedAssets_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerCreationUnit_totalExcludedAssets_currency>%s</%sPerCreationUnit_totalExcludedAssets_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerCreationUnit_totalExcludedAssets_currency), input_name='PerCreationUnit_totalExcludedAssets_currency')), namespaceprefix_ , eol_))
        if self.PerCreationUnit_totalExcludedAssets_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerCreationUnit_totalExcludedAssets_value>%s</%sPerCreationUnit_totalExcludedAssets_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerCreationUnit_totalExcludedAssets_value), input_name='PerCreationUnit_totalExcludedAssets_value')), namespaceprefix_ , eol_))
        if self.PerShare_exDividendPaid_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerShare_exDividendPaid_currency>%s</%sPerShare_exDividendPaid_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerShare_exDividendPaid_currency), input_name='PerShare_exDividendPaid_currency')), namespaceprefix_ , eol_))
        if self.PerShare_exDividendPaid_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerShare_exDividendPaid_value>%s</%sPerShare_exDividendPaid_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerShare_exDividendPaid_value), input_name='PerShare_exDividendPaid_value')), namespaceprefix_ , eol_))
        if self.PerShare_exDividendRecieved_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerShare_exDividendRecieved_currency>%s</%sPerShare_exDividendRecieved_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerShare_exDividendRecieved_currency), input_name='PerShare_exDividendRecieved_currency')), namespaceprefix_ , eol_))
        if self.PerShare_exDividendRecieved_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerShare_exDividendRecieved_value>%s</%sPerShare_exDividendRecieved_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerShare_exDividendRecieved_value), input_name='PerShare_exDividendRecieved_value')), namespaceprefix_ , eol_))
        if self.PerShare_income_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerShare_income_currency>%s</%sPerShare_income_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerShare_income_currency), input_name='PerShare_income_currency')), namespaceprefix_ , eol_))
        if self.PerShare_income_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerShare_income_value>%s</%sPerShare_income_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerShare_income_value), input_name='PerShare_income_value')), namespaceprefix_ , eol_))
        if self.PerShare_previousNetAssetValuePerShareCalculated_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerShare_previousNetAssetValuePerShareCalculated_currency>%s</%sPerShare_previousNetAssetValuePerShareCalculated_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerShare_previousNetAssetValuePerShareCalculated_currency), input_name='PerShare_previousNetAssetValuePerShareCalculated_currency')), namespaceprefix_ , eol_))
        if self.PerShare_previousNetAssetValuePerShareCalculated_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerShare_previousNetAssetValuePerShareCalculated_value>%s</%sPerShare_previousNetAssetValuePerShareCalculated_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerShare_previousNetAssetValuePerShareCalculated_value), input_name='PerShare_previousNetAssetValuePerShareCalculated_value')), namespaceprefix_ , eol_))
        if self.pricingDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spricingDate>%s</%spricingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.pricingDate, input_name='pricingDate'), namespaceprefix_ , eol_))
        if self.returnType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreturnType>%s</%sreturnType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.returnType), input_name='returnType')), namespaceprefix_ , eol_))
        if self.sharesOutstanding is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssharesOutstanding>%s</%ssharesOutstanding>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.sharesOutstanding), input_name='sharesOutstanding')), namespaceprefix_ , eol_))
        if self.tradeDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stradeDate>%s</%stradeDate>%s' % (namespaceprefix_ , self.gds_format_date(self.tradeDate, input_name='tradeDate'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'assetId':
            assetId_ = child_.text
            assetId_ = self.gds_validate_string(assetId_, node, 'assetId')
            self.assetId = assetId_
        elif nodeName_ == 'assetsUnderManagement':
            assetsUnderManagement_ = child_.text
            assetsUnderManagement_ = self.gds_validate_string(assetsUnderManagement_, node, 'assetsUnderManagement')
            self.assetsUnderManagement = assetsUnderManagement_
        elif nodeName_ == 'assetType':
            assetType_ = child_.text
            assetType_ = self.gds_validate_string(assetType_, node, 'assetType')
            self.assetType = assetType_
        elif nodeName_ == 'baseCurrency':
            baseCurrency_ = child_.text
            baseCurrency_ = self.gds_validate_string(baseCurrency_, node, 'baseCurrency')
            self.baseCurrency = baseCurrency_
        elif nodeName_ == 'clusterId':
            clusterId_ = child_.text
            clusterId_ = self.gds_validate_string(clusterId_, node, 'clusterId')
            self.clusterId = clusterId_
        elif nodeName_ == 'creationUnitSize':
            creationUnitSize_ = child_.text
            creationUnitSize_ = self.gds_validate_string(creationUnitSize_, node, 'creationUnitSize')
            self.creationUnitSize = creationUnitSize_
        elif nodeName_ == 'daysInYear':
            daysInYear_ = child_.text
            daysInYear_ = self.gds_validate_string(daysInYear_, node, 'daysInYear')
            self.daysInYear = daysInYear_
        elif nodeName_ == 'indexProviderId':
            indexProviderId_ = child_.text
            indexProviderId_ = self.gds_validate_string(indexProviderId_, node, 'indexProviderId')
            self.indexProviderId = indexProviderId_
        elif nodeName_ == 'isDataValidated':
            isDataValidated_ = child_.text
            isDataValidated_ = self.gds_validate_string(isDataValidated_, node, 'isDataValidated')
            self.isDataValidated = isDataValidated_
        elif nodeName_ == 'isHoliday':
            isHoliday_ = child_.text
            isHoliday_ = self.gds_validate_string(isHoliday_, node, 'isHoliday')
            self.isHoliday = isHoliday_
        elif nodeName_ == 'lastUpdated':
            lastUpdated_ = child_.text
            lastUpdated_ = self.gds_validate_string(lastUpdated_, node, 'lastUpdated')
            self.lastUpdated = lastUpdated_
        elif nodeName_ == 'leverage':
            leverage_ = child_.text
            leverage_ = self.gds_validate_string(leverage_, node, 'leverage')
            self.leverage = leverage_
        elif nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
        elif nodeName_ == 'netDailyAssetFlow':
            netDailyAssetFlow_ = child_.text
            netDailyAssetFlow_ = self.gds_validate_string(netDailyAssetFlow_, node, 'netDailyAssetFlow')
            self.netDailyAssetFlow = netDailyAssetFlow_
        elif nodeName_ == 'PerCreationUnit_accruedDividend_currency':
            PerCreationUnit_accruedDividend_currency_ = child_.text
            PerCreationUnit_accruedDividend_currency_ = self.gds_validate_string(PerCreationUnit_accruedDividend_currency_, node, 'PerCreationUnit_accruedDividend_currency')
            self.PerCreationUnit_accruedDividend_currency = PerCreationUnit_accruedDividend_currency_
        elif nodeName_ == 'PerCreationUnit_accruedDividend_value':
            PerCreationUnit_accruedDividend_value_ = child_.text
            PerCreationUnit_accruedDividend_value_ = self.gds_validate_string(PerCreationUnit_accruedDividend_value_, node, 'PerCreationUnit_accruedDividend_value')
            self.PerCreationUnit_accruedDividend_value = PerCreationUnit_accruedDividend_value_
        elif nodeName_ == 'PerCreationUnit_exDividendPaid_currency':
            PerCreationUnit_exDividendPaid_currency_ = child_.text
            PerCreationUnit_exDividendPaid_currency_ = self.gds_validate_string(PerCreationUnit_exDividendPaid_currency_, node, 'PerCreationUnit_exDividendPaid_currency')
            self.PerCreationUnit_exDividendPaid_currency = PerCreationUnit_exDividendPaid_currency_
        elif nodeName_ == 'PerCreationUnit_exDividendPaid_value':
            PerCreationUnit_exDividendPaid_value_ = child_.text
            PerCreationUnit_exDividendPaid_value_ = self.gds_validate_string(PerCreationUnit_exDividendPaid_value_, node, 'PerCreationUnit_exDividendPaid_value')
            self.PerCreationUnit_exDividendPaid_value = PerCreationUnit_exDividendPaid_value_
        elif nodeName_ == 'PerCreationUnit_exDividendRecieved_currency':
            PerCreationUnit_exDividendRecieved_currency_ = child_.text
            PerCreationUnit_exDividendRecieved_currency_ = self.gds_validate_string(PerCreationUnit_exDividendRecieved_currency_, node, 'PerCreationUnit_exDividendRecieved_currency')
            self.PerCreationUnit_exDividendRecieved_currency = PerCreationUnit_exDividendRecieved_currency_
        elif nodeName_ == 'PerCreationUnit_exDividendRecieved_value':
            PerCreationUnit_exDividendRecieved_value_ = child_.text
            PerCreationUnit_exDividendRecieved_value_ = self.gds_validate_string(PerCreationUnit_exDividendRecieved_value_, node, 'PerCreationUnit_exDividendRecieved_value')
            self.PerCreationUnit_exDividendRecieved_value = PerCreationUnit_exDividendRecieved_value_
        elif nodeName_ == 'PerCreationUnit_income_currency':
            PerCreationUnit_income_currency_ = child_.text
            PerCreationUnit_income_currency_ = self.gds_validate_string(PerCreationUnit_income_currency_, node, 'PerCreationUnit_income_currency')
            self.PerCreationUnit_income_currency = PerCreationUnit_income_currency_
        elif nodeName_ == 'PerCreationUnit_income_value':
            PerCreationUnit_income_value_ = child_.text
            PerCreationUnit_income_value_ = self.gds_validate_string(PerCreationUnit_income_value_, node, 'PerCreationUnit_income_value')
            self.PerCreationUnit_income_value = PerCreationUnit_income_value_
        elif nodeName_ == 'PerCreationUnit_managementFee_currency':
            PerCreationUnit_managementFee_currency_ = child_.text
            PerCreationUnit_managementFee_currency_ = self.gds_validate_string(PerCreationUnit_managementFee_currency_, node, 'PerCreationUnit_managementFee_currency')
            self.PerCreationUnit_managementFee_currency = PerCreationUnit_managementFee_currency_
        elif nodeName_ == 'PerCreationUnit_managementFee_value':
            PerCreationUnit_managementFee_value_ = child_.text
            PerCreationUnit_managementFee_value_ = self.gds_validate_string(PerCreationUnit_managementFee_value_, node, 'PerCreationUnit_managementFee_value')
            self.PerCreationUnit_managementFee_value = PerCreationUnit_managementFee_value_
        elif nodeName_ == 'PerCreationUnit_netAssetValue_currency':
            PerCreationUnit_netAssetValue_currency_ = child_.text
            PerCreationUnit_netAssetValue_currency_ = self.gds_validate_string(PerCreationUnit_netAssetValue_currency_, node, 'PerCreationUnit_netAssetValue_currency')
            self.PerCreationUnit_netAssetValue_currency = PerCreationUnit_netAssetValue_currency_
        elif nodeName_ == 'PerCreationUnit_netAssetValue_value':
            PerCreationUnit_netAssetValue_value_ = child_.text
            PerCreationUnit_netAssetValue_value_ = self.gds_validate_string(PerCreationUnit_netAssetValue_value_, node, 'PerCreationUnit_netAssetValue_value')
            self.PerCreationUnit_netAssetValue_value = PerCreationUnit_netAssetValue_value_
        elif nodeName_ == 'PerCreationUnit_providerBalancingCash_currency':
            PerCreationUnit_providerBalancingCash_currency_ = child_.text
            PerCreationUnit_providerBalancingCash_currency_ = self.gds_validate_string(PerCreationUnit_providerBalancingCash_currency_, node, 'PerCreationUnit_providerBalancingCash_currency')
            self.PerCreationUnit_providerBalancingCash_currency = PerCreationUnit_providerBalancingCash_currency_
        elif nodeName_ == 'PerCreationUnit_providerBalancingCash_value':
            PerCreationUnit_providerBalancingCash_value_ = child_.text
            PerCreationUnit_providerBalancingCash_value_ = self.gds_validate_string(PerCreationUnit_providerBalancingCash_value_, node, 'PerCreationUnit_providerBalancingCash_value')
            self.PerCreationUnit_providerBalancingCash_value = PerCreationUnit_providerBalancingCash_value_
        elif nodeName_ == 'PerCreationUnit_providerEstimatedCash_currency':
            PerCreationUnit_providerEstimatedCash_currency_ = child_.text
            PerCreationUnit_providerEstimatedCash_currency_ = self.gds_validate_string(PerCreationUnit_providerEstimatedCash_currency_, node, 'PerCreationUnit_providerEstimatedCash_currency')
            self.PerCreationUnit_providerEstimatedCash_currency = PerCreationUnit_providerEstimatedCash_currency_
        elif nodeName_ == 'PerCreationUnit_providerEstimatedCash_value':
            PerCreationUnit_providerEstimatedCash_value_ = child_.text
            PerCreationUnit_providerEstimatedCash_value_ = self.gds_validate_string(PerCreationUnit_providerEstimatedCash_value_, node, 'PerCreationUnit_providerEstimatedCash_value')
            self.PerCreationUnit_providerEstimatedCash_value = PerCreationUnit_providerEstimatedCash_value_
        elif nodeName_ == 'PerCreationUnit_totalEscrow_currency':
            PerCreationUnit_totalEscrow_currency_ = child_.text
            PerCreationUnit_totalEscrow_currency_ = self.gds_validate_string(PerCreationUnit_totalEscrow_currency_, node, 'PerCreationUnit_totalEscrow_currency')
            self.PerCreationUnit_totalEscrow_currency = PerCreationUnit_totalEscrow_currency_
        elif nodeName_ == 'PerCreationUnit_totalEscrow_value':
            PerCreationUnit_totalEscrow_value_ = child_.text
            PerCreationUnit_totalEscrow_value_ = self.gds_validate_string(PerCreationUnit_totalEscrow_value_, node, 'PerCreationUnit_totalEscrow_value')
            self.PerCreationUnit_totalEscrow_value = PerCreationUnit_totalEscrow_value_
        elif nodeName_ == 'PerCreationUnit_totalExcludedAssets_currency':
            PerCreationUnit_totalExcludedAssets_currency_ = child_.text
            PerCreationUnit_totalExcludedAssets_currency_ = self.gds_validate_string(PerCreationUnit_totalExcludedAssets_currency_, node, 'PerCreationUnit_totalExcludedAssets_currency')
            self.PerCreationUnit_totalExcludedAssets_currency = PerCreationUnit_totalExcludedAssets_currency_
        elif nodeName_ == 'PerCreationUnit_totalExcludedAssets_value':
            PerCreationUnit_totalExcludedAssets_value_ = child_.text
            PerCreationUnit_totalExcludedAssets_value_ = self.gds_validate_string(PerCreationUnit_totalExcludedAssets_value_, node, 'PerCreationUnit_totalExcludedAssets_value')
            self.PerCreationUnit_totalExcludedAssets_value = PerCreationUnit_totalExcludedAssets_value_
        elif nodeName_ == 'PerShare_exDividendPaid_currency':
            PerShare_exDividendPaid_currency_ = child_.text
            PerShare_exDividendPaid_currency_ = self.gds_validate_string(PerShare_exDividendPaid_currency_, node, 'PerShare_exDividendPaid_currency')
            self.PerShare_exDividendPaid_currency = PerShare_exDividendPaid_currency_
        elif nodeName_ == 'PerShare_exDividendPaid_value':
            PerShare_exDividendPaid_value_ = child_.text
            PerShare_exDividendPaid_value_ = self.gds_validate_string(PerShare_exDividendPaid_value_, node, 'PerShare_exDividendPaid_value')
            self.PerShare_exDividendPaid_value = PerShare_exDividendPaid_value_
        elif nodeName_ == 'PerShare_exDividendRecieved_currency':
            PerShare_exDividendRecieved_currency_ = child_.text
            PerShare_exDividendRecieved_currency_ = self.gds_validate_string(PerShare_exDividendRecieved_currency_, node, 'PerShare_exDividendRecieved_currency')
            self.PerShare_exDividendRecieved_currency = PerShare_exDividendRecieved_currency_
        elif nodeName_ == 'PerShare_exDividendRecieved_value':
            PerShare_exDividendRecieved_value_ = child_.text
            PerShare_exDividendRecieved_value_ = self.gds_validate_string(PerShare_exDividendRecieved_value_, node, 'PerShare_exDividendRecieved_value')
            self.PerShare_exDividendRecieved_value = PerShare_exDividendRecieved_value_
        elif nodeName_ == 'PerShare_income_currency':
            PerShare_income_currency_ = child_.text
            PerShare_income_currency_ = self.gds_validate_string(PerShare_income_currency_, node, 'PerShare_income_currency')
            self.PerShare_income_currency = PerShare_income_currency_
        elif nodeName_ == 'PerShare_income_value':
            PerShare_income_value_ = child_.text
            PerShare_income_value_ = self.gds_validate_string(PerShare_income_value_, node, 'PerShare_income_value')
            self.PerShare_income_value = PerShare_income_value_
        elif nodeName_ == 'PerShare_previousNetAssetValuePerShareCalculated_currency':
            PerShare_previousNetAssetValuePerShareCalculated_currency_ = child_.text
            PerShare_previousNetAssetValuePerShareCalculated_currency_ = self.gds_validate_string(PerShare_previousNetAssetValuePerShareCalculated_currency_, node, 'PerShare_previousNetAssetValuePerShareCalculated_currency')
            self.PerShare_previousNetAssetValuePerShareCalculated_currency = PerShare_previousNetAssetValuePerShareCalculated_currency_
        elif nodeName_ == 'PerShare_previousNetAssetValuePerShareCalculated_value':
            PerShare_previousNetAssetValuePerShareCalculated_value_ = child_.text
            PerShare_previousNetAssetValuePerShareCalculated_value_ = self.gds_validate_string(PerShare_previousNetAssetValuePerShareCalculated_value_, node, 'PerShare_previousNetAssetValuePerShareCalculated_value')
            self.PerShare_previousNetAssetValuePerShareCalculated_value = PerShare_previousNetAssetValuePerShareCalculated_value_
        elif nodeName_ == 'pricingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.pricingDate = dval_
        elif nodeName_ == 'returnType':
            returnType_ = child_.text
            returnType_ = self.gds_validate_string(returnType_, node, 'returnType')
            self.returnType = returnType_
        elif nodeName_ == 'sharesOutstanding':
            sharesOutstanding_ = child_.text
            sharesOutstanding_ = self.gds_validate_string(sharesOutstanding_, node, 'sharesOutstanding')
            self.sharesOutstanding = sharesOutstanding_
        elif nodeName_ == 'tradeDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.tradeDate = dval_
# end class GeneralInformationType97


class ExchangeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DATATYPE=None, RANK=None, EXCHANGEID=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DATATYPE = _cast(None, DATATYPE)
        self.RANK = _cast(None, RANK)
        self.EXCHANGEID = _cast(None, EXCHANGEID)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExchangeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExchangeType.subclass:
            return ExchangeType.subclass(*args_, **kwargs_)
        else:
            return ExchangeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_EXCHANGEID(self):
        return self.EXCHANGEID
    def set_EXCHANGEID(self, EXCHANGEID):
        self.EXCHANGEID = EXCHANGEID
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExchangeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExchangeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ExchangeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ExchangeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ExchangeType'):
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.EXCHANGEID is not None and 'EXCHANGEID' not in already_processed:
            already_processed.add('EXCHANGEID')
            outfile.write(' EXCHANGEID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.EXCHANGEID), input_name='EXCHANGEID')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExchangeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('EXCHANGEID', node)
        if value is not None and 'EXCHANGEID' not in already_processed:
            already_processed.add('EXCHANGEID')
            self.EXCHANGEID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType98.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class ExchangeType


class DataDateType98(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, GeneralInformation=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.GeneralInformation = GeneralInformation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType98)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType98.subclass:
            return DataDateType98.subclass(*args_, **kwargs_)
        else:
            return DataDateType98(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_GeneralInformation(self):
        return self.GeneralInformation
    def set_GeneralInformation(self, GeneralInformation):
        self.GeneralInformation = GeneralInformation
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.GeneralInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType98', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType98')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType98')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType98', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType98'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType98', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.GeneralInformation is not None:
            self.GeneralInformation.export(outfile, level, namespaceprefix_, name_='GeneralInformation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'GeneralInformation':
            obj_ = GeneralInformationType99.factory(parent_object_=self)
            obj_.build(child_)
            self.GeneralInformation = obj_
            obj_.original_tagname_ = 'GeneralInformation'
# end class DataDateType98


class GeneralInformationType99(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, address=None, code=None, contact=None, country=None, exchangeId=None, name=None, region=None, telephone=None, web=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.address = address
        self.code = code
        self.contact = contact
        self.country = country
        self.exchangeId = exchangeId
        self.name = name
        self.region = region
        self.telephone = telephone
        self.web = web
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralInformationType99)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralInformationType99.subclass:
            return GeneralInformationType99.subclass(*args_, **kwargs_)
        else:
            return GeneralInformationType99(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def get_code(self):
        return self.code
    def set_code(self, code):
        self.code = code
    def get_contact(self):
        return self.contact
    def set_contact(self, contact):
        self.contact = contact
    def get_country(self):
        return self.country
    def set_country(self, country):
        self.country = country
    def get_exchangeId(self):
        return self.exchangeId
    def set_exchangeId(self, exchangeId):
        self.exchangeId = exchangeId
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_region(self):
        return self.region
    def set_region(self, region):
        self.region = region
    def get_telephone(self):
        return self.telephone
    def set_telephone(self, telephone):
        self.telephone = telephone
    def get_web(self):
        return self.web
    def set_web(self, web):
        self.web = web
    def hasContent_(self):
        if (
            self.address is not None or
            self.code is not None or
            self.contact is not None or
            self.country is not None or
            self.exchangeId is not None or
            self.name is not None or
            self.region is not None or
            self.telephone is not None or
            self.web is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralInformationType99', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralInformationType99')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralInformationType99')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralInformationType99', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralInformationType99'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralInformationType99', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.address is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saddress>%s</%saddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.address), input_name='address')), namespaceprefix_ , eol_))
        if self.code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scode>%s</%scode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.code), input_name='code')), namespaceprefix_ , eol_))
        if self.contact is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontact>%s</%scontact>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.contact), input_name='contact')), namespaceprefix_ , eol_))
        if self.country is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountry>%s</%scountry>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.country), input_name='country')), namespaceprefix_ , eol_))
        if self.exchangeId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sexchangeId>%s</%sexchangeId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.exchangeId), input_name='exchangeId')), namespaceprefix_ , eol_))
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sname>%s</%sname>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.name), input_name='name')), namespaceprefix_ , eol_))
        if self.region is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sregion>%s</%sregion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.region), input_name='region')), namespaceprefix_ , eol_))
        if self.telephone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stelephone>%s</%stelephone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.telephone), input_name='telephone')), namespaceprefix_ , eol_))
        if self.web is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sweb>%s</%sweb>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.web), input_name='web')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'address':
            address_ = child_.text
            address_ = self.gds_validate_string(address_, node, 'address')
            self.address = address_
        elif nodeName_ == 'code':
            code_ = child_.text
            code_ = self.gds_validate_string(code_, node, 'code')
            self.code = code_
        elif nodeName_ == 'contact':
            contact_ = child_.text
            contact_ = self.gds_validate_string(contact_, node, 'contact')
            self.contact = contact_
        elif nodeName_ == 'country':
            country_ = child_.text
            country_ = self.gds_validate_string(country_, node, 'country')
            self.country = country_
        elif nodeName_ == 'exchangeId':
            exchangeId_ = child_.text
            exchangeId_ = self.gds_validate_string(exchangeId_, node, 'exchangeId')
            self.exchangeId = exchangeId_
        elif nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
        elif nodeName_ == 'region':
            region_ = child_.text
            region_ = self.gds_validate_string(region_, node, 'region')
            self.region = region_
        elif nodeName_ == 'telephone':
            telephone_ = child_.text
            telephone_ = self.gds_validate_string(telephone_, node, 'telephone')
            self.telephone = telephone_
        elif nodeName_ == 'web':
            web_ = child_.text
            web_ = self.gds_validate_string(web_, node, 'web')
            self.web = web_
# end class GeneralInformationType99


class ClusterType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DATATYPE=None, RANK=None, CLUSTERID=None, INSID=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DATATYPE = _cast(None, DATATYPE)
        self.RANK = _cast(None, RANK)
        self.CLUSTERID = _cast(None, CLUSTERID)
        self.INSID = _cast(None, INSID)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClusterType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClusterType.subclass:
            return ClusterType.subclass(*args_, **kwargs_)
        else:
            return ClusterType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_CLUSTERID(self):
        return self.CLUSTERID
    def set_CLUSTERID(self, CLUSTERID):
        self.CLUSTERID = CLUSTERID
    def get_INSID(self):
        return self.INSID
    def set_INSID(self, INSID):
        self.INSID = INSID
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ClusterType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClusterType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ClusterType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ClusterType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ClusterType'):
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.CLUSTERID is not None and 'CLUSTERID' not in already_processed:
            already_processed.add('CLUSTERID')
            outfile.write(' CLUSTERID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.CLUSTERID), input_name='CLUSTERID')), ))
        if self.INSID is not None and 'INSID' not in already_processed:
            already_processed.add('INSID')
            outfile.write(' INSID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.INSID), input_name='INSID')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ClusterType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('CLUSTERID', node)
        if value is not None and 'CLUSTERID' not in already_processed:
            already_processed.add('CLUSTERID')
            self.CLUSTERID = value
        value = find_attr_value_('INSID', node)
        if value is not None and 'INSID' not in already_processed:
            already_processed.add('INSID')
            self.INSID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType100.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class ClusterType


class DataDateType100(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, Constituents=None, ExchangeRates=None, GeneralInformation=None, Instruments=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.Constituents = Constituents
        self.ExchangeRates = ExchangeRates
        self.GeneralInformation = GeneralInformation
        self.Instruments = Instruments
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType100)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType100.subclass:
            return DataDateType100.subclass(*args_, **kwargs_)
        else:
            return DataDateType100(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Constituents(self):
        return self.Constituents
    def set_Constituents(self, Constituents):
        self.Constituents = Constituents
    def get_ExchangeRates(self):
        return self.ExchangeRates
    def set_ExchangeRates(self, ExchangeRates):
        self.ExchangeRates = ExchangeRates
    def get_GeneralInformation(self):
        return self.GeneralInformation
    def set_GeneralInformation(self, GeneralInformation):
        self.GeneralInformation = GeneralInformation
    def get_Instruments(self):
        return self.Instruments
    def set_Instruments(self, Instruments):
        self.Instruments = Instruments
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.Constituents is not None or
            self.ExchangeRates is not None or
            self.GeneralInformation is not None or
            self.Instruments is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType100', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType100')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType100')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType100', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType100'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType100', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Constituents is not None:
            self.Constituents.export(outfile, level, namespaceprefix_, name_='Constituents', pretty_print=pretty_print)
        if self.ExchangeRates is not None:
            self.ExchangeRates.export(outfile, level, namespaceprefix_, name_='ExchangeRates', pretty_print=pretty_print)
        if self.GeneralInformation is not None:
            self.GeneralInformation.export(outfile, level, namespaceprefix_, name_='GeneralInformation', pretty_print=pretty_print)
        if self.Instruments is not None:
            self.Instruments.export(outfile, level, namespaceprefix_, name_='Instruments', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Constituents':
            obj_ = ConstituentsType101.factory(parent_object_=self)
            obj_.build(child_)
            self.Constituents = obj_
            obj_.original_tagname_ = 'Constituents'
        elif nodeName_ == 'ExchangeRates':
            obj_ = ExchangeRatesType102.factory(parent_object_=self)
            obj_.build(child_)
            self.ExchangeRates = obj_
            obj_.original_tagname_ = 'ExchangeRates'
        elif nodeName_ == 'GeneralInformation':
            obj_ = GeneralInformationType103.factory(parent_object_=self)
            obj_.build(child_)
            self.GeneralInformation = obj_
            obj_.original_tagname_ = 'GeneralInformation'
        elif nodeName_ == 'Instruments':
            obj_ = InstrumentsType.factory(parent_object_=self)
            obj_.build(child_)
            self.Instruments = obj_
            obj_.original_tagname_ = 'Instruments'
# end class DataDateType100


class ConstituentsType101(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Constituents_adjustmentFactor=None, Constituents_assetId=None, Constituents_basingConstant=None, Constituents_count=None, Constituents_endDate=None, Constituents_filter=None, Constituents_freeFloat=None, Constituents_isSuspended=None, Constituents_listingId=None, Constituents_netRegularDividend_currency=None, Constituents_netRegularDividend_value=None, Constituents_previousPrice_currency=None, Constituents_previousPrice_value=None, Constituents_price_currency=None, Constituents_price_value=None, Constituents_regularDividend_currency=None, Constituents_regularDividend_value=None, Constituents_specialDividend_currency=None, Constituents_specialDividend_value=None, Constituents_startDate=None, Constituents_type=None, Constituents_units=None, Constituents_unitsType=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Constituents_adjustmentFactor = Constituents_adjustmentFactor
        self.Constituents_assetId = Constituents_assetId
        self.Constituents_basingConstant = Constituents_basingConstant
        self.Constituents_count = Constituents_count
        if isinstance(Constituents_endDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Constituents_endDate, '%Y-%m-%d').date()
        else:
            initvalue_ = Constituents_endDate
        self.Constituents_endDate = initvalue_
        self.Constituents_filter = Constituents_filter
        self.Constituents_freeFloat = Constituents_freeFloat
        self.Constituents_isSuspended = Constituents_isSuspended
        self.Constituents_listingId = Constituents_listingId
        self.Constituents_netRegularDividend_currency = Constituents_netRegularDividend_currency
        self.Constituents_netRegularDividend_value = Constituents_netRegularDividend_value
        self.Constituents_previousPrice_currency = Constituents_previousPrice_currency
        self.Constituents_previousPrice_value = Constituents_previousPrice_value
        self.Constituents_price_currency = Constituents_price_currency
        self.Constituents_price_value = Constituents_price_value
        self.Constituents_regularDividend_currency = Constituents_regularDividend_currency
        self.Constituents_regularDividend_value = Constituents_regularDividend_value
        self.Constituents_specialDividend_currency = Constituents_specialDividend_currency
        self.Constituents_specialDividend_value = Constituents_specialDividend_value
        if isinstance(Constituents_startDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Constituents_startDate, '%Y-%m-%d').date()
        else:
            initvalue_ = Constituents_startDate
        self.Constituents_startDate = initvalue_
        self.Constituents_type = Constituents_type
        self.Constituents_units = Constituents_units
        self.Constituents_unitsType = Constituents_unitsType
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ConstituentsType101)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ConstituentsType101.subclass:
            return ConstituentsType101.subclass(*args_, **kwargs_)
        else:
            return ConstituentsType101(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Constituents_adjustmentFactor(self):
        return self.Constituents_adjustmentFactor
    def set_Constituents_adjustmentFactor(self, Constituents_adjustmentFactor):
        self.Constituents_adjustmentFactor = Constituents_adjustmentFactor
    def get_Constituents_assetId(self):
        return self.Constituents_assetId
    def set_Constituents_assetId(self, Constituents_assetId):
        self.Constituents_assetId = Constituents_assetId
    def get_Constituents_basingConstant(self):
        return self.Constituents_basingConstant
    def set_Constituents_basingConstant(self, Constituents_basingConstant):
        self.Constituents_basingConstant = Constituents_basingConstant
    def get_Constituents_count(self):
        return self.Constituents_count
    def set_Constituents_count(self, Constituents_count):
        self.Constituents_count = Constituents_count
    def get_Constituents_endDate(self):
        return self.Constituents_endDate
    def set_Constituents_endDate(self, Constituents_endDate):
        self.Constituents_endDate = Constituents_endDate
    def get_Constituents_filter(self):
        return self.Constituents_filter
    def set_Constituents_filter(self, Constituents_filter):
        self.Constituents_filter = Constituents_filter
    def get_Constituents_freeFloat(self):
        return self.Constituents_freeFloat
    def set_Constituents_freeFloat(self, Constituents_freeFloat):
        self.Constituents_freeFloat = Constituents_freeFloat
    def get_Constituents_isSuspended(self):
        return self.Constituents_isSuspended
    def set_Constituents_isSuspended(self, Constituents_isSuspended):
        self.Constituents_isSuspended = Constituents_isSuspended
    def get_Constituents_listingId(self):
        return self.Constituents_listingId
    def set_Constituents_listingId(self, Constituents_listingId):
        self.Constituents_listingId = Constituents_listingId
    def get_Constituents_netRegularDividend_currency(self):
        return self.Constituents_netRegularDividend_currency
    def set_Constituents_netRegularDividend_currency(self, Constituents_netRegularDividend_currency):
        self.Constituents_netRegularDividend_currency = Constituents_netRegularDividend_currency
    def get_Constituents_netRegularDividend_value(self):
        return self.Constituents_netRegularDividend_value
    def set_Constituents_netRegularDividend_value(self, Constituents_netRegularDividend_value):
        self.Constituents_netRegularDividend_value = Constituents_netRegularDividend_value
    def get_Constituents_previousPrice_currency(self):
        return self.Constituents_previousPrice_currency
    def set_Constituents_previousPrice_currency(self, Constituents_previousPrice_currency):
        self.Constituents_previousPrice_currency = Constituents_previousPrice_currency
    def get_Constituents_previousPrice_value(self):
        return self.Constituents_previousPrice_value
    def set_Constituents_previousPrice_value(self, Constituents_previousPrice_value):
        self.Constituents_previousPrice_value = Constituents_previousPrice_value
    def get_Constituents_price_currency(self):
        return self.Constituents_price_currency
    def set_Constituents_price_currency(self, Constituents_price_currency):
        self.Constituents_price_currency = Constituents_price_currency
    def get_Constituents_price_value(self):
        return self.Constituents_price_value
    def set_Constituents_price_value(self, Constituents_price_value):
        self.Constituents_price_value = Constituents_price_value
    def get_Constituents_regularDividend_currency(self):
        return self.Constituents_regularDividend_currency
    def set_Constituents_regularDividend_currency(self, Constituents_regularDividend_currency):
        self.Constituents_regularDividend_currency = Constituents_regularDividend_currency
    def get_Constituents_regularDividend_value(self):
        return self.Constituents_regularDividend_value
    def set_Constituents_regularDividend_value(self, Constituents_regularDividend_value):
        self.Constituents_regularDividend_value = Constituents_regularDividend_value
    def get_Constituents_specialDividend_currency(self):
        return self.Constituents_specialDividend_currency
    def set_Constituents_specialDividend_currency(self, Constituents_specialDividend_currency):
        self.Constituents_specialDividend_currency = Constituents_specialDividend_currency
    def get_Constituents_specialDividend_value(self):
        return self.Constituents_specialDividend_value
    def set_Constituents_specialDividend_value(self, Constituents_specialDividend_value):
        self.Constituents_specialDividend_value = Constituents_specialDividend_value
    def get_Constituents_startDate(self):
        return self.Constituents_startDate
    def set_Constituents_startDate(self, Constituents_startDate):
        self.Constituents_startDate = Constituents_startDate
    def get_Constituents_type(self):
        return self.Constituents_type
    def set_Constituents_type(self, Constituents_type):
        self.Constituents_type = Constituents_type
    def get_Constituents_units(self):
        return self.Constituents_units
    def set_Constituents_units(self, Constituents_units):
        self.Constituents_units = Constituents_units
    def get_Constituents_unitsType(self):
        return self.Constituents_unitsType
    def set_Constituents_unitsType(self, Constituents_unitsType):
        self.Constituents_unitsType = Constituents_unitsType
    def hasContent_(self):
        if (
            self.Constituents_adjustmentFactor is not None or
            self.Constituents_assetId is not None or
            self.Constituents_basingConstant is not None or
            self.Constituents_count is not None or
            self.Constituents_endDate is not None or
            self.Constituents_filter is not None or
            self.Constituents_freeFloat is not None or
            self.Constituents_isSuspended is not None or
            self.Constituents_listingId is not None or
            self.Constituents_netRegularDividend_currency is not None or
            self.Constituents_netRegularDividend_value is not None or
            self.Constituents_previousPrice_currency is not None or
            self.Constituents_previousPrice_value is not None or
            self.Constituents_price_currency is not None or
            self.Constituents_price_value is not None or
            self.Constituents_regularDividend_currency is not None or
            self.Constituents_regularDividend_value is not None or
            self.Constituents_specialDividend_currency is not None or
            self.Constituents_specialDividend_value is not None or
            self.Constituents_startDate is not None or
            self.Constituents_type is not None or
            self.Constituents_units is not None or
            self.Constituents_unitsType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConstituentsType101', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ConstituentsType101')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ConstituentsType101')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ConstituentsType101', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ConstituentsType101'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConstituentsType101', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Constituents_adjustmentFactor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_adjustmentFactor>%s</%sConstituents_adjustmentFactor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_adjustmentFactor), input_name='Constituents_adjustmentFactor')), namespaceprefix_ , eol_))
        if self.Constituents_assetId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_assetId>%s</%sConstituents_assetId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_assetId), input_name='Constituents_assetId')), namespaceprefix_ , eol_))
        if self.Constituents_basingConstant is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_basingConstant>%s</%sConstituents_basingConstant>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_basingConstant), input_name='Constituents_basingConstant')), namespaceprefix_ , eol_))
        if self.Constituents_count is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_count>%s</%sConstituents_count>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_count), input_name='Constituents_count')), namespaceprefix_ , eol_))
        if self.Constituents_endDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_endDate>%s</%sConstituents_endDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Constituents_endDate, input_name='Constituents_endDate'), namespaceprefix_ , eol_))
        if self.Constituents_filter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_filter>%s</%sConstituents_filter>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_filter), input_name='Constituents_filter')), namespaceprefix_ , eol_))
        if self.Constituents_freeFloat is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_freeFloat>%s</%sConstituents_freeFloat>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_freeFloat), input_name='Constituents_freeFloat')), namespaceprefix_ , eol_))
        if self.Constituents_isSuspended is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_isSuspended>%s</%sConstituents_isSuspended>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_isSuspended), input_name='Constituents_isSuspended')), namespaceprefix_ , eol_))
        if self.Constituents_listingId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_listingId>%s</%sConstituents_listingId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_listingId), input_name='Constituents_listingId')), namespaceprefix_ , eol_))
        if self.Constituents_netRegularDividend_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_netRegularDividend_currency>%s</%sConstituents_netRegularDividend_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_netRegularDividend_currency), input_name='Constituents_netRegularDividend_currency')), namespaceprefix_ , eol_))
        if self.Constituents_netRegularDividend_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_netRegularDividend_value>%s</%sConstituents_netRegularDividend_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_netRegularDividend_value), input_name='Constituents_netRegularDividend_value')), namespaceprefix_ , eol_))
        if self.Constituents_previousPrice_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_previousPrice_currency>%s</%sConstituents_previousPrice_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_previousPrice_currency), input_name='Constituents_previousPrice_currency')), namespaceprefix_ , eol_))
        if self.Constituents_previousPrice_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_previousPrice_value>%s</%sConstituents_previousPrice_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_previousPrice_value), input_name='Constituents_previousPrice_value')), namespaceprefix_ , eol_))
        if self.Constituents_price_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_price_currency>%s</%sConstituents_price_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_price_currency), input_name='Constituents_price_currency')), namespaceprefix_ , eol_))
        if self.Constituents_price_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_price_value>%s</%sConstituents_price_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_price_value), input_name='Constituents_price_value')), namespaceprefix_ , eol_))
        if self.Constituents_regularDividend_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_regularDividend_currency>%s</%sConstituents_regularDividend_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_regularDividend_currency), input_name='Constituents_regularDividend_currency')), namespaceprefix_ , eol_))
        if self.Constituents_regularDividend_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_regularDividend_value>%s</%sConstituents_regularDividend_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_regularDividend_value), input_name='Constituents_regularDividend_value')), namespaceprefix_ , eol_))
        if self.Constituents_specialDividend_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_specialDividend_currency>%s</%sConstituents_specialDividend_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_specialDividend_currency), input_name='Constituents_specialDividend_currency')), namespaceprefix_ , eol_))
        if self.Constituents_specialDividend_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_specialDividend_value>%s</%sConstituents_specialDividend_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_specialDividend_value), input_name='Constituents_specialDividend_value')), namespaceprefix_ , eol_))
        if self.Constituents_startDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_startDate>%s</%sConstituents_startDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Constituents_startDate, input_name='Constituents_startDate'), namespaceprefix_ , eol_))
        if self.Constituents_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_type>%s</%sConstituents_type>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_type), input_name='Constituents_type')), namespaceprefix_ , eol_))
        if self.Constituents_units is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_units>%s</%sConstituents_units>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_units), input_name='Constituents_units')), namespaceprefix_ , eol_))
        if self.Constituents_unitsType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConstituents_unitsType>%s</%sConstituents_unitsType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Constituents_unitsType), input_name='Constituents_unitsType')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Constituents_adjustmentFactor':
            Constituents_adjustmentFactor_ = child_.text
            Constituents_adjustmentFactor_ = self.gds_validate_string(Constituents_adjustmentFactor_, node, 'Constituents_adjustmentFactor')
            self.Constituents_adjustmentFactor = Constituents_adjustmentFactor_
        elif nodeName_ == 'Constituents_assetId':
            Constituents_assetId_ = child_.text
            Constituents_assetId_ = self.gds_validate_string(Constituents_assetId_, node, 'Constituents_assetId')
            self.Constituents_assetId = Constituents_assetId_
        elif nodeName_ == 'Constituents_basingConstant':
            Constituents_basingConstant_ = child_.text
            Constituents_basingConstant_ = self.gds_validate_string(Constituents_basingConstant_, node, 'Constituents_basingConstant')
            self.Constituents_basingConstant = Constituents_basingConstant_
        elif nodeName_ == 'Constituents_count':
            Constituents_count_ = child_.text
            Constituents_count_ = self.gds_validate_string(Constituents_count_, node, 'Constituents_count')
            self.Constituents_count = Constituents_count_
        elif nodeName_ == 'Constituents_endDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Constituents_endDate = dval_
        elif nodeName_ == 'Constituents_filter':
            Constituents_filter_ = child_.text
            Constituents_filter_ = self.gds_validate_string(Constituents_filter_, node, 'Constituents_filter')
            self.Constituents_filter = Constituents_filter_
        elif nodeName_ == 'Constituents_freeFloat':
            Constituents_freeFloat_ = child_.text
            Constituents_freeFloat_ = self.gds_validate_string(Constituents_freeFloat_, node, 'Constituents_freeFloat')
            self.Constituents_freeFloat = Constituents_freeFloat_
        elif nodeName_ == 'Constituents_isSuspended':
            Constituents_isSuspended_ = child_.text
            Constituents_isSuspended_ = self.gds_validate_string(Constituents_isSuspended_, node, 'Constituents_isSuspended')
            self.Constituents_isSuspended = Constituents_isSuspended_
        elif nodeName_ == 'Constituents_listingId':
            Constituents_listingId_ = child_.text
            Constituents_listingId_ = self.gds_validate_string(Constituents_listingId_, node, 'Constituents_listingId')
            self.Constituents_listingId = Constituents_listingId_
        elif nodeName_ == 'Constituents_netRegularDividend_currency':
            Constituents_netRegularDividend_currency_ = child_.text
            Constituents_netRegularDividend_currency_ = self.gds_validate_string(Constituents_netRegularDividend_currency_, node, 'Constituents_netRegularDividend_currency')
            self.Constituents_netRegularDividend_currency = Constituents_netRegularDividend_currency_
        elif nodeName_ == 'Constituents_netRegularDividend_value':
            Constituents_netRegularDividend_value_ = child_.text
            Constituents_netRegularDividend_value_ = self.gds_validate_string(Constituents_netRegularDividend_value_, node, 'Constituents_netRegularDividend_value')
            self.Constituents_netRegularDividend_value = Constituents_netRegularDividend_value_
        elif nodeName_ == 'Constituents_previousPrice_currency':
            Constituents_previousPrice_currency_ = child_.text
            Constituents_previousPrice_currency_ = self.gds_validate_string(Constituents_previousPrice_currency_, node, 'Constituents_previousPrice_currency')
            self.Constituents_previousPrice_currency = Constituents_previousPrice_currency_
        elif nodeName_ == 'Constituents_previousPrice_value':
            Constituents_previousPrice_value_ = child_.text
            Constituents_previousPrice_value_ = self.gds_validate_string(Constituents_previousPrice_value_, node, 'Constituents_previousPrice_value')
            self.Constituents_previousPrice_value = Constituents_previousPrice_value_
        elif nodeName_ == 'Constituents_price_currency':
            Constituents_price_currency_ = child_.text
            Constituents_price_currency_ = self.gds_validate_string(Constituents_price_currency_, node, 'Constituents_price_currency')
            self.Constituents_price_currency = Constituents_price_currency_
        elif nodeName_ == 'Constituents_price_value':
            Constituents_price_value_ = child_.text
            Constituents_price_value_ = self.gds_validate_string(Constituents_price_value_, node, 'Constituents_price_value')
            self.Constituents_price_value = Constituents_price_value_
        elif nodeName_ == 'Constituents_regularDividend_currency':
            Constituents_regularDividend_currency_ = child_.text
            Constituents_regularDividend_currency_ = self.gds_validate_string(Constituents_regularDividend_currency_, node, 'Constituents_regularDividend_currency')
            self.Constituents_regularDividend_currency = Constituents_regularDividend_currency_
        elif nodeName_ == 'Constituents_regularDividend_value':
            Constituents_regularDividend_value_ = child_.text
            Constituents_regularDividend_value_ = self.gds_validate_string(Constituents_regularDividend_value_, node, 'Constituents_regularDividend_value')
            self.Constituents_regularDividend_value = Constituents_regularDividend_value_
        elif nodeName_ == 'Constituents_specialDividend_currency':
            Constituents_specialDividend_currency_ = child_.text
            Constituents_specialDividend_currency_ = self.gds_validate_string(Constituents_specialDividend_currency_, node, 'Constituents_specialDividend_currency')
            self.Constituents_specialDividend_currency = Constituents_specialDividend_currency_
        elif nodeName_ == 'Constituents_specialDividend_value':
            Constituents_specialDividend_value_ = child_.text
            Constituents_specialDividend_value_ = self.gds_validate_string(Constituents_specialDividend_value_, node, 'Constituents_specialDividend_value')
            self.Constituents_specialDividend_value = Constituents_specialDividend_value_
        elif nodeName_ == 'Constituents_startDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Constituents_startDate = dval_
        elif nodeName_ == 'Constituents_type':
            Constituents_type_ = child_.text
            Constituents_type_ = self.gds_validate_string(Constituents_type_, node, 'Constituents_type')
            self.Constituents_type = Constituents_type_
        elif nodeName_ == 'Constituents_units':
            Constituents_units_ = child_.text
            Constituents_units_ = self.gds_validate_string(Constituents_units_, node, 'Constituents_units')
            self.Constituents_units = Constituents_units_
        elif nodeName_ == 'Constituents_unitsType':
            Constituents_unitsType_ = child_.text
            Constituents_unitsType_ = self.gds_validate_string(Constituents_unitsType_, node, 'Constituents_unitsType')
            self.Constituents_unitsType = Constituents_unitsType_
# end class ConstituentsType101


class ExchangeRatesType102(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ExchangeRates_from=None, ExchangeRates_to=None, ExchangeRates_tradingDate=None, ExchangeRates_value=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ExchangeRates_from = ExchangeRates_from
        self.ExchangeRates_to = ExchangeRates_to
        if isinstance(ExchangeRates_tradingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ExchangeRates_tradingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ExchangeRates_tradingDate
        self.ExchangeRates_tradingDate = initvalue_
        self.ExchangeRates_value = ExchangeRates_value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExchangeRatesType102)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExchangeRatesType102.subclass:
            return ExchangeRatesType102.subclass(*args_, **kwargs_)
        else:
            return ExchangeRatesType102(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ExchangeRates_from(self):
        return self.ExchangeRates_from
    def set_ExchangeRates_from(self, ExchangeRates_from):
        self.ExchangeRates_from = ExchangeRates_from
    def get_ExchangeRates_to(self):
        return self.ExchangeRates_to
    def set_ExchangeRates_to(self, ExchangeRates_to):
        self.ExchangeRates_to = ExchangeRates_to
    def get_ExchangeRates_tradingDate(self):
        return self.ExchangeRates_tradingDate
    def set_ExchangeRates_tradingDate(self, ExchangeRates_tradingDate):
        self.ExchangeRates_tradingDate = ExchangeRates_tradingDate
    def get_ExchangeRates_value(self):
        return self.ExchangeRates_value
    def set_ExchangeRates_value(self, ExchangeRates_value):
        self.ExchangeRates_value = ExchangeRates_value
    def hasContent_(self):
        if (
            self.ExchangeRates_from is not None or
            self.ExchangeRates_to is not None or
            self.ExchangeRates_tradingDate is not None or
            self.ExchangeRates_value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExchangeRatesType102', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExchangeRatesType102')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ExchangeRatesType102')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ExchangeRatesType102', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ExchangeRatesType102'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExchangeRatesType102', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ExchangeRates_from is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExchangeRates_from>%s</%sExchangeRates_from>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExchangeRates_from), input_name='ExchangeRates_from')), namespaceprefix_ , eol_))
        if self.ExchangeRates_to is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExchangeRates_to>%s</%sExchangeRates_to>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExchangeRates_to), input_name='ExchangeRates_to')), namespaceprefix_ , eol_))
        if self.ExchangeRates_tradingDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExchangeRates_tradingDate>%s</%sExchangeRates_tradingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ExchangeRates_tradingDate, input_name='ExchangeRates_tradingDate'), namespaceprefix_ , eol_))
        if self.ExchangeRates_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExchangeRates_value>%s</%sExchangeRates_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExchangeRates_value), input_name='ExchangeRates_value')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ExchangeRates_from':
            ExchangeRates_from_ = child_.text
            ExchangeRates_from_ = self.gds_validate_string(ExchangeRates_from_, node, 'ExchangeRates_from')
            self.ExchangeRates_from = ExchangeRates_from_
        elif nodeName_ == 'ExchangeRates_to':
            ExchangeRates_to_ = child_.text
            ExchangeRates_to_ = self.gds_validate_string(ExchangeRates_to_, node, 'ExchangeRates_to')
            self.ExchangeRates_to = ExchangeRates_to_
        elif nodeName_ == 'ExchangeRates_tradingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ExchangeRates_tradingDate = dval_
        elif nodeName_ == 'ExchangeRates_value':
            ExchangeRates_value_ = child_.text
            ExchangeRates_value_ = self.gds_validate_string(ExchangeRates_value_, node, 'ExchangeRates_value')
            self.ExchangeRates_value = ExchangeRates_value_
# end class ExchangeRatesType102


class GeneralInformationType103(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, clusterDate=None, daysInYear=None, id=None, indexProviderId=None, lastUpdated=None, message=None, name=None, rebalanceFrequency=None, rebalanceNotes=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(clusterDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(clusterDate, '%Y-%m-%d').date()
        else:
            initvalue_ = clusterDate
        self.clusterDate = initvalue_
        self.daysInYear = daysInYear
        self.id = id
        self.indexProviderId = indexProviderId
        self.lastUpdated = lastUpdated
        self.message = message
        self.name = name
        self.rebalanceFrequency = rebalanceFrequency
        self.rebalanceNotes = rebalanceNotes
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralInformationType103)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralInformationType103.subclass:
            return GeneralInformationType103.subclass(*args_, **kwargs_)
        else:
            return GeneralInformationType103(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_clusterDate(self):
        return self.clusterDate
    def set_clusterDate(self, clusterDate):
        self.clusterDate = clusterDate
    def get_daysInYear(self):
        return self.daysInYear
    def set_daysInYear(self, daysInYear):
        self.daysInYear = daysInYear
    def get_id(self):
        return self.id
    def set_id(self, id):
        self.id = id
    def get_indexProviderId(self):
        return self.indexProviderId
    def set_indexProviderId(self, indexProviderId):
        self.indexProviderId = indexProviderId
    def get_lastUpdated(self):
        return self.lastUpdated
    def set_lastUpdated(self, lastUpdated):
        self.lastUpdated = lastUpdated
    def get_message(self):
        return self.message
    def set_message(self, message):
        self.message = message
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_rebalanceFrequency(self):
        return self.rebalanceFrequency
    def set_rebalanceFrequency(self, rebalanceFrequency):
        self.rebalanceFrequency = rebalanceFrequency
    def get_rebalanceNotes(self):
        return self.rebalanceNotes
    def set_rebalanceNotes(self, rebalanceNotes):
        self.rebalanceNotes = rebalanceNotes
    def hasContent_(self):
        if (
            self.clusterDate is not None or
            self.daysInYear is not None or
            self.id is not None or
            self.indexProviderId is not None or
            self.lastUpdated is not None or
            self.message is not None or
            self.name is not None or
            self.rebalanceFrequency is not None or
            self.rebalanceNotes is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralInformationType103', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralInformationType103')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralInformationType103')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralInformationType103', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralInformationType103'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralInformationType103', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.clusterDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sclusterDate>%s</%sclusterDate>%s' % (namespaceprefix_ , self.gds_format_date(self.clusterDate, input_name='clusterDate'), namespaceprefix_ , eol_))
        if self.daysInYear is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdaysInYear>%s</%sdaysInYear>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.daysInYear), input_name='daysInYear')), namespaceprefix_ , eol_))
        if self.id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sid>%s</%sid>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.id), input_name='id')), namespaceprefix_ , eol_))
        if self.indexProviderId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sindexProviderId>%s</%sindexProviderId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.indexProviderId), input_name='indexProviderId')), namespaceprefix_ , eol_))
        if self.lastUpdated is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastUpdated>%s</%slastUpdated>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastUpdated), input_name='lastUpdated')), namespaceprefix_ , eol_))
        if self.message is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smessage>%s</%smessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.message), input_name='message')), namespaceprefix_ , eol_))
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sname>%s</%sname>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.name), input_name='name')), namespaceprefix_ , eol_))
        if self.rebalanceFrequency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srebalanceFrequency>%s</%srebalanceFrequency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.rebalanceFrequency), input_name='rebalanceFrequency')), namespaceprefix_ , eol_))
        if self.rebalanceNotes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srebalanceNotes>%s</%srebalanceNotes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.rebalanceNotes), input_name='rebalanceNotes')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'clusterDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.clusterDate = dval_
        elif nodeName_ == 'daysInYear':
            daysInYear_ = child_.text
            daysInYear_ = self.gds_validate_string(daysInYear_, node, 'daysInYear')
            self.daysInYear = daysInYear_
        elif nodeName_ == 'id':
            id_ = child_.text
            id_ = self.gds_validate_string(id_, node, 'id')
            self.id = id_
        elif nodeName_ == 'indexProviderId':
            indexProviderId_ = child_.text
            indexProviderId_ = self.gds_validate_string(indexProviderId_, node, 'indexProviderId')
            self.indexProviderId = indexProviderId_
        elif nodeName_ == 'lastUpdated':
            lastUpdated_ = child_.text
            lastUpdated_ = self.gds_validate_string(lastUpdated_, node, 'lastUpdated')
            self.lastUpdated = lastUpdated_
        elif nodeName_ == 'message':
            message_ = child_.text
            message_ = self.gds_validate_string(message_, node, 'message')
            self.message = message_
        elif nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
        elif nodeName_ == 'rebalanceFrequency':
            rebalanceFrequency_ = child_.text
            rebalanceFrequency_ = self.gds_validate_string(rebalanceFrequency_, node, 'rebalanceFrequency')
            self.rebalanceFrequency = rebalanceFrequency_
        elif nodeName_ == 'rebalanceNotes':
            rebalanceNotes_ = child_.text
            rebalanceNotes_ = self.gds_validate_string(rebalanceNotes_, node, 'rebalanceNotes')
            self.rebalanceNotes = rebalanceNotes_
# end class GeneralInformationType103


class InstrumentsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Instruments_assetId=None, Instruments_calculationId=None, Instruments_currency=None, Instruments_filter=None, Instruments_filterName=None, Instruments_id=None, Instruments_interest=None, Instruments_name=None, Instruments_nameExtended=None, Instruments_position_adjustmentFactor=None, Instruments_position_baseFx=None, Instruments_position_basingConstant=None, Instruments_position_calculationId=None, Instruments_position_constituentCount=None, Instruments_position_date=None, Instruments_position_divisor=None, Instruments_position_id=None, Instruments_position_previousAdjustmentFactor=None, Instruments_position_previousBasingConstant=None, Instruments_position_previousDivisor=None, Instruments_position_previousValue=None, Instruments_position_timeSeries=None, Instruments_position_type=None, Instruments_position_value=None, Instruments_referenceInstrumentId=None, Instruments_returnType=None, Instruments_type=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Instruments_assetId = Instruments_assetId
        self.Instruments_calculationId = Instruments_calculationId
        self.Instruments_currency = Instruments_currency
        self.Instruments_filter = Instruments_filter
        self.Instruments_filterName = Instruments_filterName
        self.Instruments_id = Instruments_id
        self.Instruments_interest = Instruments_interest
        self.Instruments_name = Instruments_name
        self.Instruments_nameExtended = Instruments_nameExtended
        self.Instruments_position_adjustmentFactor = Instruments_position_adjustmentFactor
        self.Instruments_position_baseFx = Instruments_position_baseFx
        self.Instruments_position_basingConstant = Instruments_position_basingConstant
        self.Instruments_position_calculationId = Instruments_position_calculationId
        self.Instruments_position_constituentCount = Instruments_position_constituentCount
        if isinstance(Instruments_position_date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Instruments_position_date, '%Y-%m-%d').date()
        else:
            initvalue_ = Instruments_position_date
        self.Instruments_position_date = initvalue_
        self.Instruments_position_divisor = Instruments_position_divisor
        self.Instruments_position_id = Instruments_position_id
        self.Instruments_position_previousAdjustmentFactor = Instruments_position_previousAdjustmentFactor
        self.Instruments_position_previousBasingConstant = Instruments_position_previousBasingConstant
        self.Instruments_position_previousDivisor = Instruments_position_previousDivisor
        self.Instruments_position_previousValue = Instruments_position_previousValue
        self.Instruments_position_timeSeries = Instruments_position_timeSeries
        self.Instruments_position_type = Instruments_position_type
        self.Instruments_position_value = Instruments_position_value
        self.Instruments_referenceInstrumentId = Instruments_referenceInstrumentId
        self.Instruments_returnType = Instruments_returnType
        self.Instruments_type = Instruments_type
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InstrumentsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InstrumentsType.subclass:
            return InstrumentsType.subclass(*args_, **kwargs_)
        else:
            return InstrumentsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Instruments_assetId(self):
        return self.Instruments_assetId
    def set_Instruments_assetId(self, Instruments_assetId):
        self.Instruments_assetId = Instruments_assetId
    def get_Instruments_calculationId(self):
        return self.Instruments_calculationId
    def set_Instruments_calculationId(self, Instruments_calculationId):
        self.Instruments_calculationId = Instruments_calculationId
    def get_Instruments_currency(self):
        return self.Instruments_currency
    def set_Instruments_currency(self, Instruments_currency):
        self.Instruments_currency = Instruments_currency
    def get_Instruments_filter(self):
        return self.Instruments_filter
    def set_Instruments_filter(self, Instruments_filter):
        self.Instruments_filter = Instruments_filter
    def get_Instruments_filterName(self):
        return self.Instruments_filterName
    def set_Instruments_filterName(self, Instruments_filterName):
        self.Instruments_filterName = Instruments_filterName
    def get_Instruments_id(self):
        return self.Instruments_id
    def set_Instruments_id(self, Instruments_id):
        self.Instruments_id = Instruments_id
    def get_Instruments_interest(self):
        return self.Instruments_interest
    def set_Instruments_interest(self, Instruments_interest):
        self.Instruments_interest = Instruments_interest
    def get_Instruments_name(self):
        return self.Instruments_name
    def set_Instruments_name(self, Instruments_name):
        self.Instruments_name = Instruments_name
    def get_Instruments_nameExtended(self):
        return self.Instruments_nameExtended
    def set_Instruments_nameExtended(self, Instruments_nameExtended):
        self.Instruments_nameExtended = Instruments_nameExtended
    def get_Instruments_position_adjustmentFactor(self):
        return self.Instruments_position_adjustmentFactor
    def set_Instruments_position_adjustmentFactor(self, Instruments_position_adjustmentFactor):
        self.Instruments_position_adjustmentFactor = Instruments_position_adjustmentFactor
    def get_Instruments_position_baseFx(self):
        return self.Instruments_position_baseFx
    def set_Instruments_position_baseFx(self, Instruments_position_baseFx):
        self.Instruments_position_baseFx = Instruments_position_baseFx
    def get_Instruments_position_basingConstant(self):
        return self.Instruments_position_basingConstant
    def set_Instruments_position_basingConstant(self, Instruments_position_basingConstant):
        self.Instruments_position_basingConstant = Instruments_position_basingConstant
    def get_Instruments_position_calculationId(self):
        return self.Instruments_position_calculationId
    def set_Instruments_position_calculationId(self, Instruments_position_calculationId):
        self.Instruments_position_calculationId = Instruments_position_calculationId
    def get_Instruments_position_constituentCount(self):
        return self.Instruments_position_constituentCount
    def set_Instruments_position_constituentCount(self, Instruments_position_constituentCount):
        self.Instruments_position_constituentCount = Instruments_position_constituentCount
    def get_Instruments_position_date(self):
        return self.Instruments_position_date
    def set_Instruments_position_date(self, Instruments_position_date):
        self.Instruments_position_date = Instruments_position_date
    def get_Instruments_position_divisor(self):
        return self.Instruments_position_divisor
    def set_Instruments_position_divisor(self, Instruments_position_divisor):
        self.Instruments_position_divisor = Instruments_position_divisor
    def get_Instruments_position_id(self):
        return self.Instruments_position_id
    def set_Instruments_position_id(self, Instruments_position_id):
        self.Instruments_position_id = Instruments_position_id
    def get_Instruments_position_previousAdjustmentFactor(self):
        return self.Instruments_position_previousAdjustmentFactor
    def set_Instruments_position_previousAdjustmentFactor(self, Instruments_position_previousAdjustmentFactor):
        self.Instruments_position_previousAdjustmentFactor = Instruments_position_previousAdjustmentFactor
    def get_Instruments_position_previousBasingConstant(self):
        return self.Instruments_position_previousBasingConstant
    def set_Instruments_position_previousBasingConstant(self, Instruments_position_previousBasingConstant):
        self.Instruments_position_previousBasingConstant = Instruments_position_previousBasingConstant
    def get_Instruments_position_previousDivisor(self):
        return self.Instruments_position_previousDivisor
    def set_Instruments_position_previousDivisor(self, Instruments_position_previousDivisor):
        self.Instruments_position_previousDivisor = Instruments_position_previousDivisor
    def get_Instruments_position_previousValue(self):
        return self.Instruments_position_previousValue
    def set_Instruments_position_previousValue(self, Instruments_position_previousValue):
        self.Instruments_position_previousValue = Instruments_position_previousValue
    def get_Instruments_position_timeSeries(self):
        return self.Instruments_position_timeSeries
    def set_Instruments_position_timeSeries(self, Instruments_position_timeSeries):
        self.Instruments_position_timeSeries = Instruments_position_timeSeries
    def get_Instruments_position_type(self):
        return self.Instruments_position_type
    def set_Instruments_position_type(self, Instruments_position_type):
        self.Instruments_position_type = Instruments_position_type
    def get_Instruments_position_value(self):
        return self.Instruments_position_value
    def set_Instruments_position_value(self, Instruments_position_value):
        self.Instruments_position_value = Instruments_position_value
    def get_Instruments_referenceInstrumentId(self):
        return self.Instruments_referenceInstrumentId
    def set_Instruments_referenceInstrumentId(self, Instruments_referenceInstrumentId):
        self.Instruments_referenceInstrumentId = Instruments_referenceInstrumentId
    def get_Instruments_returnType(self):
        return self.Instruments_returnType
    def set_Instruments_returnType(self, Instruments_returnType):
        self.Instruments_returnType = Instruments_returnType
    def get_Instruments_type(self):
        return self.Instruments_type
    def set_Instruments_type(self, Instruments_type):
        self.Instruments_type = Instruments_type
    def hasContent_(self):
        if (
            self.Instruments_assetId is not None or
            self.Instruments_calculationId is not None or
            self.Instruments_currency is not None or
            self.Instruments_filter is not None or
            self.Instruments_filterName is not None or
            self.Instruments_id is not None or
            self.Instruments_interest is not None or
            self.Instruments_name is not None or
            self.Instruments_nameExtended is not None or
            self.Instruments_position_adjustmentFactor is not None or
            self.Instruments_position_baseFx is not None or
            self.Instruments_position_basingConstant is not None or
            self.Instruments_position_calculationId is not None or
            self.Instruments_position_constituentCount is not None or
            self.Instruments_position_date is not None or
            self.Instruments_position_divisor is not None or
            self.Instruments_position_id is not None or
            self.Instruments_position_previousAdjustmentFactor is not None or
            self.Instruments_position_previousBasingConstant is not None or
            self.Instruments_position_previousDivisor is not None or
            self.Instruments_position_previousValue is not None or
            self.Instruments_position_timeSeries is not None or
            self.Instruments_position_type is not None or
            self.Instruments_position_value is not None or
            self.Instruments_referenceInstrumentId is not None or
            self.Instruments_returnType is not None or
            self.Instruments_type is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InstrumentsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InstrumentsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InstrumentsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InstrumentsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Instruments_assetId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstruments_assetId>%s</%sInstruments_assetId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Instruments_assetId), input_name='Instruments_assetId')), namespaceprefix_ , eol_))
        if self.Instruments_calculationId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstruments_calculationId>%s</%sInstruments_calculationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Instruments_calculationId), input_name='Instruments_calculationId')), namespaceprefix_ , eol_))
        if self.Instruments_currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstruments_currency>%s</%sInstruments_currency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Instruments_currency), input_name='Instruments_currency')), namespaceprefix_ , eol_))
        if self.Instruments_filter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstruments_filter>%s</%sInstruments_filter>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Instruments_filter), input_name='Instruments_filter')), namespaceprefix_ , eol_))
        if self.Instruments_filterName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstruments_filterName>%s</%sInstruments_filterName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Instruments_filterName), input_name='Instruments_filterName')), namespaceprefix_ , eol_))
        if self.Instruments_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstruments_id>%s</%sInstruments_id>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Instruments_id), input_name='Instruments_id')), namespaceprefix_ , eol_))
        if self.Instruments_interest is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstruments_interest>%s</%sInstruments_interest>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Instruments_interest), input_name='Instruments_interest')), namespaceprefix_ , eol_))
        if self.Instruments_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstruments_name>%s</%sInstruments_name>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Instruments_name), input_name='Instruments_name')), namespaceprefix_ , eol_))
        if self.Instruments_nameExtended is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstruments_nameExtended>%s</%sInstruments_nameExtended>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Instruments_nameExtended), input_name='Instruments_nameExtended')), namespaceprefix_ , eol_))
        if self.Instruments_position_adjustmentFactor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstruments_position_adjustmentFactor>%s</%sInstruments_position_adjustmentFactor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Instruments_position_adjustmentFactor), input_name='Instruments_position_adjustmentFactor')), namespaceprefix_ , eol_))
        if self.Instruments_position_baseFx is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstruments_position_baseFx>%s</%sInstruments_position_baseFx>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Instruments_position_baseFx), input_name='Instruments_position_baseFx')), namespaceprefix_ , eol_))
        if self.Instruments_position_basingConstant is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstruments_position_basingConstant>%s</%sInstruments_position_basingConstant>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Instruments_position_basingConstant), input_name='Instruments_position_basingConstant')), namespaceprefix_ , eol_))
        if self.Instruments_position_calculationId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstruments_position_calculationId>%s</%sInstruments_position_calculationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Instruments_position_calculationId), input_name='Instruments_position_calculationId')), namespaceprefix_ , eol_))
        if self.Instruments_position_constituentCount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstruments_position_constituentCount>%s</%sInstruments_position_constituentCount>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Instruments_position_constituentCount), input_name='Instruments_position_constituentCount')), namespaceprefix_ , eol_))
        if self.Instruments_position_date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstruments_position_date>%s</%sInstruments_position_date>%s' % (namespaceprefix_ , self.gds_format_date(self.Instruments_position_date, input_name='Instruments_position_date'), namespaceprefix_ , eol_))
        if self.Instruments_position_divisor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstruments_position_divisor>%s</%sInstruments_position_divisor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Instruments_position_divisor), input_name='Instruments_position_divisor')), namespaceprefix_ , eol_))
        if self.Instruments_position_id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstruments_position_id>%s</%sInstruments_position_id>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Instruments_position_id), input_name='Instruments_position_id')), namespaceprefix_ , eol_))
        if self.Instruments_position_previousAdjustmentFactor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstruments_position_previousAdjustmentFactor>%s</%sInstruments_position_previousAdjustmentFactor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Instruments_position_previousAdjustmentFactor), input_name='Instruments_position_previousAdjustmentFactor')), namespaceprefix_ , eol_))
        if self.Instruments_position_previousBasingConstant is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstruments_position_previousBasingConstant>%s</%sInstruments_position_previousBasingConstant>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Instruments_position_previousBasingConstant), input_name='Instruments_position_previousBasingConstant')), namespaceprefix_ , eol_))
        if self.Instruments_position_previousDivisor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstruments_position_previousDivisor>%s</%sInstruments_position_previousDivisor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Instruments_position_previousDivisor), input_name='Instruments_position_previousDivisor')), namespaceprefix_ , eol_))
        if self.Instruments_position_previousValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstruments_position_previousValue>%s</%sInstruments_position_previousValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Instruments_position_previousValue), input_name='Instruments_position_previousValue')), namespaceprefix_ , eol_))
        if self.Instruments_position_timeSeries is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstruments_position_timeSeries>%s</%sInstruments_position_timeSeries>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Instruments_position_timeSeries), input_name='Instruments_position_timeSeries')), namespaceprefix_ , eol_))
        if self.Instruments_position_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstruments_position_type>%s</%sInstruments_position_type>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Instruments_position_type), input_name='Instruments_position_type')), namespaceprefix_ , eol_))
        if self.Instruments_position_value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstruments_position_value>%s</%sInstruments_position_value>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Instruments_position_value), input_name='Instruments_position_value')), namespaceprefix_ , eol_))
        if self.Instruments_referenceInstrumentId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstruments_referenceInstrumentId>%s</%sInstruments_referenceInstrumentId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Instruments_referenceInstrumentId), input_name='Instruments_referenceInstrumentId')), namespaceprefix_ , eol_))
        if self.Instruments_returnType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstruments_returnType>%s</%sInstruments_returnType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Instruments_returnType), input_name='Instruments_returnType')), namespaceprefix_ , eol_))
        if self.Instruments_type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstruments_type>%s</%sInstruments_type>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Instruments_type), input_name='Instruments_type')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Instruments_assetId':
            Instruments_assetId_ = child_.text
            Instruments_assetId_ = self.gds_validate_string(Instruments_assetId_, node, 'Instruments_assetId')
            self.Instruments_assetId = Instruments_assetId_
        elif nodeName_ == 'Instruments_calculationId':
            Instruments_calculationId_ = child_.text
            Instruments_calculationId_ = self.gds_validate_string(Instruments_calculationId_, node, 'Instruments_calculationId')
            self.Instruments_calculationId = Instruments_calculationId_
        elif nodeName_ == 'Instruments_currency':
            Instruments_currency_ = child_.text
            Instruments_currency_ = self.gds_validate_string(Instruments_currency_, node, 'Instruments_currency')
            self.Instruments_currency = Instruments_currency_
        elif nodeName_ == 'Instruments_filter':
            Instruments_filter_ = child_.text
            Instruments_filter_ = self.gds_validate_string(Instruments_filter_, node, 'Instruments_filter')
            self.Instruments_filter = Instruments_filter_
        elif nodeName_ == 'Instruments_filterName':
            Instruments_filterName_ = child_.text
            Instruments_filterName_ = self.gds_validate_string(Instruments_filterName_, node, 'Instruments_filterName')
            self.Instruments_filterName = Instruments_filterName_
        elif nodeName_ == 'Instruments_id':
            Instruments_id_ = child_.text
            Instruments_id_ = self.gds_validate_string(Instruments_id_, node, 'Instruments_id')
            self.Instruments_id = Instruments_id_
        elif nodeName_ == 'Instruments_interest':
            Instruments_interest_ = child_.text
            Instruments_interest_ = self.gds_validate_string(Instruments_interest_, node, 'Instruments_interest')
            self.Instruments_interest = Instruments_interest_
        elif nodeName_ == 'Instruments_name':
            Instruments_name_ = child_.text
            Instruments_name_ = self.gds_validate_string(Instruments_name_, node, 'Instruments_name')
            self.Instruments_name = Instruments_name_
        elif nodeName_ == 'Instruments_nameExtended':
            Instruments_nameExtended_ = child_.text
            Instruments_nameExtended_ = self.gds_validate_string(Instruments_nameExtended_, node, 'Instruments_nameExtended')
            self.Instruments_nameExtended = Instruments_nameExtended_
        elif nodeName_ == 'Instruments_position_adjustmentFactor':
            Instruments_position_adjustmentFactor_ = child_.text
            Instruments_position_adjustmentFactor_ = self.gds_validate_string(Instruments_position_adjustmentFactor_, node, 'Instruments_position_adjustmentFactor')
            self.Instruments_position_adjustmentFactor = Instruments_position_adjustmentFactor_
        elif nodeName_ == 'Instruments_position_baseFx':
            Instruments_position_baseFx_ = child_.text
            Instruments_position_baseFx_ = self.gds_validate_string(Instruments_position_baseFx_, node, 'Instruments_position_baseFx')
            self.Instruments_position_baseFx = Instruments_position_baseFx_
        elif nodeName_ == 'Instruments_position_basingConstant':
            Instruments_position_basingConstant_ = child_.text
            Instruments_position_basingConstant_ = self.gds_validate_string(Instruments_position_basingConstant_, node, 'Instruments_position_basingConstant')
            self.Instruments_position_basingConstant = Instruments_position_basingConstant_
        elif nodeName_ == 'Instruments_position_calculationId':
            Instruments_position_calculationId_ = child_.text
            Instruments_position_calculationId_ = self.gds_validate_string(Instruments_position_calculationId_, node, 'Instruments_position_calculationId')
            self.Instruments_position_calculationId = Instruments_position_calculationId_
        elif nodeName_ == 'Instruments_position_constituentCount':
            Instruments_position_constituentCount_ = child_.text
            Instruments_position_constituentCount_ = self.gds_validate_string(Instruments_position_constituentCount_, node, 'Instruments_position_constituentCount')
            self.Instruments_position_constituentCount = Instruments_position_constituentCount_
        elif nodeName_ == 'Instruments_position_date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Instruments_position_date = dval_
        elif nodeName_ == 'Instruments_position_divisor':
            Instruments_position_divisor_ = child_.text
            Instruments_position_divisor_ = self.gds_validate_string(Instruments_position_divisor_, node, 'Instruments_position_divisor')
            self.Instruments_position_divisor = Instruments_position_divisor_
        elif nodeName_ == 'Instruments_position_id':
            Instruments_position_id_ = child_.text
            Instruments_position_id_ = self.gds_validate_string(Instruments_position_id_, node, 'Instruments_position_id')
            self.Instruments_position_id = Instruments_position_id_
        elif nodeName_ == 'Instruments_position_previousAdjustmentFactor':
            Instruments_position_previousAdjustmentFactor_ = child_.text
            Instruments_position_previousAdjustmentFactor_ = self.gds_validate_string(Instruments_position_previousAdjustmentFactor_, node, 'Instruments_position_previousAdjustmentFactor')
            self.Instruments_position_previousAdjustmentFactor = Instruments_position_previousAdjustmentFactor_
        elif nodeName_ == 'Instruments_position_previousBasingConstant':
            Instruments_position_previousBasingConstant_ = child_.text
            Instruments_position_previousBasingConstant_ = self.gds_validate_string(Instruments_position_previousBasingConstant_, node, 'Instruments_position_previousBasingConstant')
            self.Instruments_position_previousBasingConstant = Instruments_position_previousBasingConstant_
        elif nodeName_ == 'Instruments_position_previousDivisor':
            Instruments_position_previousDivisor_ = child_.text
            Instruments_position_previousDivisor_ = self.gds_validate_string(Instruments_position_previousDivisor_, node, 'Instruments_position_previousDivisor')
            self.Instruments_position_previousDivisor = Instruments_position_previousDivisor_
        elif nodeName_ == 'Instruments_position_previousValue':
            Instruments_position_previousValue_ = child_.text
            Instruments_position_previousValue_ = self.gds_validate_string(Instruments_position_previousValue_, node, 'Instruments_position_previousValue')
            self.Instruments_position_previousValue = Instruments_position_previousValue_
        elif nodeName_ == 'Instruments_position_timeSeries':
            Instruments_position_timeSeries_ = child_.text
            Instruments_position_timeSeries_ = self.gds_validate_string(Instruments_position_timeSeries_, node, 'Instruments_position_timeSeries')
            self.Instruments_position_timeSeries = Instruments_position_timeSeries_
        elif nodeName_ == 'Instruments_position_type':
            Instruments_position_type_ = child_.text
            Instruments_position_type_ = self.gds_validate_string(Instruments_position_type_, node, 'Instruments_position_type')
            self.Instruments_position_type = Instruments_position_type_
        elif nodeName_ == 'Instruments_position_value':
            Instruments_position_value_ = child_.text
            Instruments_position_value_ = self.gds_validate_string(Instruments_position_value_, node, 'Instruments_position_value')
            self.Instruments_position_value = Instruments_position_value_
        elif nodeName_ == 'Instruments_referenceInstrumentId':
            Instruments_referenceInstrumentId_ = child_.text
            Instruments_referenceInstrumentId_ = self.gds_validate_string(Instruments_referenceInstrumentId_, node, 'Instruments_referenceInstrumentId')
            self.Instruments_referenceInstrumentId = Instruments_referenceInstrumentId_
        elif nodeName_ == 'Instruments_returnType':
            Instruments_returnType_ = child_.text
            Instruments_returnType_ = self.gds_validate_string(Instruments_returnType_, node, 'Instruments_returnType')
            self.Instruments_returnType = Instruments_returnType_
        elif nodeName_ == 'Instruments_type':
            Instruments_type_ = child_.text
            Instruments_type_ = self.gds_validate_string(Instruments_type_, node, 'Instruments_type')
            self.Instruments_type = Instruments_type_
# end class InstrumentsType


class InstrumentSummaryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DATATYPE=None, RANK=None, SEARCHCODE=None, SEARCHTYPE=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DATATYPE = _cast(None, DATATYPE)
        self.RANK = _cast(None, RANK)
        self.SEARCHCODE = _cast(None, SEARCHCODE)
        self.SEARCHTYPE = _cast(None, SEARCHTYPE)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InstrumentSummaryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InstrumentSummaryType.subclass:
            return InstrumentSummaryType.subclass(*args_, **kwargs_)
        else:
            return InstrumentSummaryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_SEARCHCODE(self):
        return self.SEARCHCODE
    def set_SEARCHCODE(self, SEARCHCODE):
        self.SEARCHCODE = SEARCHCODE
    def get_SEARCHTYPE(self):
        return self.SEARCHTYPE
    def set_SEARCHTYPE(self, SEARCHTYPE):
        self.SEARCHTYPE = SEARCHTYPE
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentSummaryType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InstrumentSummaryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InstrumentSummaryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InstrumentSummaryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InstrumentSummaryType'):
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.SEARCHCODE is not None and 'SEARCHCODE' not in already_processed:
            already_processed.add('SEARCHCODE')
            outfile.write(' SEARCHCODE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SEARCHCODE), input_name='SEARCHCODE')), ))
        if self.SEARCHTYPE is not None and 'SEARCHTYPE' not in already_processed:
            already_processed.add('SEARCHTYPE')
            outfile.write(' SEARCHTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.SEARCHTYPE), input_name='SEARCHTYPE')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentSummaryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('SEARCHCODE', node)
        if value is not None and 'SEARCHCODE' not in already_processed:
            already_processed.add('SEARCHCODE')
            self.SEARCHCODE = value
        value = find_attr_value_('SEARCHTYPE', node)
        if value is not None and 'SEARCHTYPE' not in already_processed:
            already_processed.add('SEARCHTYPE')
            self.SEARCHTYPE = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType104.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class InstrumentSummaryType


class DataDateType104(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType104)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType104.subclass:
            return DataDateType104.subclass(*args_, **kwargs_)
        else:
            return DataDateType104(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType104', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType104')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType104')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType104', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType104'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType104', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType105.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType104


class GeneralType105(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Search_clusterId=None, Search_clusterName=None, Search_codeType=None, Search_codeValue=None, Search_count=None, Search_instrumentId=None, Search_instrumentName=None, Search_ISIN=None, Search_ticker=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Search_clusterId = Search_clusterId
        self.Search_clusterName = Search_clusterName
        self.Search_codeType = Search_codeType
        self.Search_codeValue = Search_codeValue
        self.Search_count = Search_count
        self.Search_instrumentId = Search_instrumentId
        self.Search_instrumentName = Search_instrumentName
        self.Search_ISIN = Search_ISIN
        self.Search_ticker = Search_ticker
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType105)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType105.subclass:
            return GeneralType105.subclass(*args_, **kwargs_)
        else:
            return GeneralType105(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Search_clusterId(self):
        return self.Search_clusterId
    def set_Search_clusterId(self, Search_clusterId):
        self.Search_clusterId = Search_clusterId
    def get_Search_clusterName(self):
        return self.Search_clusterName
    def set_Search_clusterName(self, Search_clusterName):
        self.Search_clusterName = Search_clusterName
    def get_Search_codeType(self):
        return self.Search_codeType
    def set_Search_codeType(self, Search_codeType):
        self.Search_codeType = Search_codeType
    def get_Search_codeValue(self):
        return self.Search_codeValue
    def set_Search_codeValue(self, Search_codeValue):
        self.Search_codeValue = Search_codeValue
    def get_Search_count(self):
        return self.Search_count
    def set_Search_count(self, Search_count):
        self.Search_count = Search_count
    def get_Search_instrumentId(self):
        return self.Search_instrumentId
    def set_Search_instrumentId(self, Search_instrumentId):
        self.Search_instrumentId = Search_instrumentId
    def get_Search_instrumentName(self):
        return self.Search_instrumentName
    def set_Search_instrumentName(self, Search_instrumentName):
        self.Search_instrumentName = Search_instrumentName
    def get_Search_ISIN(self):
        return self.Search_ISIN
    def set_Search_ISIN(self, Search_ISIN):
        self.Search_ISIN = Search_ISIN
    def get_Search_ticker(self):
        return self.Search_ticker
    def set_Search_ticker(self, Search_ticker):
        self.Search_ticker = Search_ticker
    def hasContent_(self):
        if (
            self.Search_clusterId is not None or
            self.Search_clusterName is not None or
            self.Search_codeType is not None or
            self.Search_codeValue is not None or
            self.Search_count is not None or
            self.Search_instrumentId is not None or
            self.Search_instrumentName is not None or
            self.Search_ISIN is not None or
            self.Search_ticker is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType105', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType105')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType105')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType105', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType105'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType105', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Search_clusterId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSearch_clusterId>%s</%sSearch_clusterId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Search_clusterId), input_name='Search_clusterId')), namespaceprefix_ , eol_))
        if self.Search_clusterName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSearch_clusterName>%s</%sSearch_clusterName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Search_clusterName), input_name='Search_clusterName')), namespaceprefix_ , eol_))
        if self.Search_codeType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSearch_codeType>%s</%sSearch_codeType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Search_codeType), input_name='Search_codeType')), namespaceprefix_ , eol_))
        if self.Search_codeValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSearch_codeValue>%s</%sSearch_codeValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Search_codeValue), input_name='Search_codeValue')), namespaceprefix_ , eol_))
        if self.Search_count is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSearch_count>%s</%sSearch_count>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Search_count), input_name='Search_count')), namespaceprefix_ , eol_))
        if self.Search_instrumentId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSearch_instrumentId>%s</%sSearch_instrumentId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Search_instrumentId), input_name='Search_instrumentId')), namespaceprefix_ , eol_))
        if self.Search_instrumentName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSearch_instrumentName>%s</%sSearch_instrumentName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Search_instrumentName), input_name='Search_instrumentName')), namespaceprefix_ , eol_))
        if self.Search_ISIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSearch_ISIN>%s</%sSearch_ISIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Search_ISIN), input_name='Search_ISIN')), namespaceprefix_ , eol_))
        if self.Search_ticker is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSearch_ticker>%s</%sSearch_ticker>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Search_ticker), input_name='Search_ticker')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Search_clusterId':
            Search_clusterId_ = child_.text
            Search_clusterId_ = self.gds_validate_string(Search_clusterId_, node, 'Search_clusterId')
            self.Search_clusterId = Search_clusterId_
        elif nodeName_ == 'Search_clusterName':
            Search_clusterName_ = child_.text
            Search_clusterName_ = self.gds_validate_string(Search_clusterName_, node, 'Search_clusterName')
            self.Search_clusterName = Search_clusterName_
        elif nodeName_ == 'Search_codeType':
            Search_codeType_ = child_.text
            Search_codeType_ = self.gds_validate_string(Search_codeType_, node, 'Search_codeType')
            self.Search_codeType = Search_codeType_
        elif nodeName_ == 'Search_codeValue':
            Search_codeValue_ = child_.text
            Search_codeValue_ = self.gds_validate_string(Search_codeValue_, node, 'Search_codeValue')
            self.Search_codeValue = Search_codeValue_
        elif nodeName_ == 'Search_count':
            Search_count_ = child_.text
            Search_count_ = self.gds_validate_string(Search_count_, node, 'Search_count')
            self.Search_count = Search_count_
        elif nodeName_ == 'Search_instrumentId':
            Search_instrumentId_ = child_.text
            Search_instrumentId_ = self.gds_validate_string(Search_instrumentId_, node, 'Search_instrumentId')
            self.Search_instrumentId = Search_instrumentId_
        elif nodeName_ == 'Search_instrumentName':
            Search_instrumentName_ = child_.text
            Search_instrumentName_ = self.gds_validate_string(Search_instrumentName_, node, 'Search_instrumentName')
            self.Search_instrumentName = Search_instrumentName_
        elif nodeName_ == 'Search_ISIN':
            Search_ISIN_ = child_.text
            Search_ISIN_ = self.gds_validate_string(Search_ISIN_, node, 'Search_ISIN')
            self.Search_ISIN = Search_ISIN_
        elif nodeName_ == 'Search_ticker':
            Search_ticker_ = child_.text
            Search_ticker_ = self.gds_validate_string(Search_ticker_, node, 'Search_ticker')
            self.Search_ticker = Search_ticker_
# end class GeneralType105


class StockType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DATATYPE=None, RANK=None, ASSETID=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DATATYPE = _cast(None, DATATYPE)
        self.RANK = _cast(None, RANK)
        self.ASSETID = _cast(None, ASSETID)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StockType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StockType.subclass:
            return StockType.subclass(*args_, **kwargs_)
        else:
            return StockType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_ASSETID(self):
        return self.ASSETID
    def set_ASSETID(self, ASSETID):
        self.ASSETID = ASSETID
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='StockType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StockType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='StockType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='StockType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='StockType'):
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.ASSETID is not None and 'ASSETID' not in already_processed:
            already_processed.add('ASSETID')
            outfile.write(' ASSETID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ASSETID), input_name='ASSETID')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='StockType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('ASSETID', node)
        if value is not None and 'ASSETID' not in already_processed:
            already_processed.add('ASSETID')
            self.ASSETID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType106.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class StockType


class DataDateType106(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, CapitalChanges=None, Company=None, GeneralInformation=None, TaxCodes=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.CapitalChanges = CapitalChanges
        self.Company = Company
        self.GeneralInformation = GeneralInformation
        self.TaxCodes = TaxCodes
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType106)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType106.subclass:
            return DataDateType106.subclass(*args_, **kwargs_)
        else:
            return DataDateType106(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CapitalChanges(self):
        return self.CapitalChanges
    def set_CapitalChanges(self, CapitalChanges):
        self.CapitalChanges = CapitalChanges
    def get_Company(self):
        return self.Company
    def set_Company(self, Company):
        self.Company = Company
    def get_GeneralInformation(self):
        return self.GeneralInformation
    def set_GeneralInformation(self, GeneralInformation):
        self.GeneralInformation = GeneralInformation
    def get_TaxCodes(self):
        return self.TaxCodes
    def set_TaxCodes(self, TaxCodes):
        self.TaxCodes = TaxCodes
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.CapitalChanges is not None or
            self.Company is not None or
            self.GeneralInformation is not None or
            self.TaxCodes is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType106', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType106')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType106')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType106', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType106'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType106', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CapitalChanges is not None:
            self.CapitalChanges.export(outfile, level, namespaceprefix_, name_='CapitalChanges', pretty_print=pretty_print)
        if self.Company is not None:
            self.Company.export(outfile, level, namespaceprefix_, name_='Company', pretty_print=pretty_print)
        if self.GeneralInformation is not None:
            self.GeneralInformation.export(outfile, level, namespaceprefix_, name_='GeneralInformation', pretty_print=pretty_print)
        if self.TaxCodes is not None:
            self.TaxCodes.export(outfile, level, namespaceprefix_, name_='TaxCodes', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CapitalChanges':
            obj_ = CapitalChangesType107.factory(parent_object_=self)
            obj_.build(child_)
            self.CapitalChanges = obj_
            obj_.original_tagname_ = 'CapitalChanges'
        elif nodeName_ == 'Company':
            obj_ = CompanyType.factory(parent_object_=self)
            obj_.build(child_)
            self.Company = obj_
            obj_.original_tagname_ = 'Company'
        elif nodeName_ == 'GeneralInformation':
            obj_ = GeneralInformationType108.factory(parent_object_=self)
            obj_.build(child_)
            self.GeneralInformation = obj_
            obj_.original_tagname_ = 'GeneralInformation'
        elif nodeName_ == 'TaxCodes':
            obj_ = TaxCodesType.factory(parent_object_=self)
            obj_.build(child_)
            self.TaxCodes = obj_
            obj_.original_tagname_ = 'TaxCodes'
# end class DataDateType106


class CapitalChangesType107(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CapitalChanges_capitalChange_effective=None, CapitalChanges_capitalChange_factor=None, CapitalChanges_capitalChange_key=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.CapitalChanges_capitalChange_effective = CapitalChanges_capitalChange_effective
        self.CapitalChanges_capitalChange_factor = CapitalChanges_capitalChange_factor
        self.CapitalChanges_capitalChange_key = CapitalChanges_capitalChange_key
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CapitalChangesType107)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CapitalChangesType107.subclass:
            return CapitalChangesType107.subclass(*args_, **kwargs_)
        else:
            return CapitalChangesType107(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CapitalChanges_capitalChange_effective(self):
        return self.CapitalChanges_capitalChange_effective
    def set_CapitalChanges_capitalChange_effective(self, CapitalChanges_capitalChange_effective):
        self.CapitalChanges_capitalChange_effective = CapitalChanges_capitalChange_effective
    def get_CapitalChanges_capitalChange_factor(self):
        return self.CapitalChanges_capitalChange_factor
    def set_CapitalChanges_capitalChange_factor(self, CapitalChanges_capitalChange_factor):
        self.CapitalChanges_capitalChange_factor = CapitalChanges_capitalChange_factor
    def get_CapitalChanges_capitalChange_key(self):
        return self.CapitalChanges_capitalChange_key
    def set_CapitalChanges_capitalChange_key(self, CapitalChanges_capitalChange_key):
        self.CapitalChanges_capitalChange_key = CapitalChanges_capitalChange_key
    def hasContent_(self):
        if (
            self.CapitalChanges_capitalChange_effective is not None or
            self.CapitalChanges_capitalChange_factor is not None or
            self.CapitalChanges_capitalChange_key is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CapitalChangesType107', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CapitalChangesType107')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CapitalChangesType107')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CapitalChangesType107', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CapitalChangesType107'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CapitalChangesType107', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CapitalChanges_capitalChange_effective is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCapitalChanges_capitalChange_effective>%s</%sCapitalChanges_capitalChange_effective>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CapitalChanges_capitalChange_effective), input_name='CapitalChanges_capitalChange_effective')), namespaceprefix_ , eol_))
        if self.CapitalChanges_capitalChange_factor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCapitalChanges_capitalChange_factor>%s</%sCapitalChanges_capitalChange_factor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CapitalChanges_capitalChange_factor), input_name='CapitalChanges_capitalChange_factor')), namespaceprefix_ , eol_))
        if self.CapitalChanges_capitalChange_key is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCapitalChanges_capitalChange_key>%s</%sCapitalChanges_capitalChange_key>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CapitalChanges_capitalChange_key), input_name='CapitalChanges_capitalChange_key')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CapitalChanges_capitalChange_effective':
            CapitalChanges_capitalChange_effective_ = child_.text
            CapitalChanges_capitalChange_effective_ = self.gds_validate_string(CapitalChanges_capitalChange_effective_, node, 'CapitalChanges_capitalChange_effective')
            self.CapitalChanges_capitalChange_effective = CapitalChanges_capitalChange_effective_
        elif nodeName_ == 'CapitalChanges_capitalChange_factor':
            CapitalChanges_capitalChange_factor_ = child_.text
            CapitalChanges_capitalChange_factor_ = self.gds_validate_string(CapitalChanges_capitalChange_factor_, node, 'CapitalChanges_capitalChange_factor')
            self.CapitalChanges_capitalChange_factor = CapitalChanges_capitalChange_factor_
        elif nodeName_ == 'CapitalChanges_capitalChange_key':
            CapitalChanges_capitalChange_key_ = child_.text
            CapitalChanges_capitalChange_key_ = self.gds_validate_string(CapitalChanges_capitalChange_key_, node, 'CapitalChanges_capitalChange_key')
            self.CapitalChanges_capitalChange_key = CapitalChanges_capitalChange_key_
# end class CapitalChangesType107


class CompanyType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, address=None, city=None, contact=None, email=None, fax=None, id=None, name=None, reportingCurrency=None, telephone=None, www=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.address = address
        self.city = city
        self.contact = contact
        self.email = email
        self.fax = fax
        self.id = id
        self.name = name
        self.reportingCurrency = reportingCurrency
        self.telephone = telephone
        self.www = www
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CompanyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CompanyType.subclass:
            return CompanyType.subclass(*args_, **kwargs_)
        else:
            return CompanyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_contact(self):
        return self.contact
    def set_contact(self, contact):
        self.contact = contact
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_fax(self):
        return self.fax
    def set_fax(self, fax):
        self.fax = fax
    def get_id(self):
        return self.id
    def set_id(self, id):
        self.id = id
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_reportingCurrency(self):
        return self.reportingCurrency
    def set_reportingCurrency(self, reportingCurrency):
        self.reportingCurrency = reportingCurrency
    def get_telephone(self):
        return self.telephone
    def set_telephone(self, telephone):
        self.telephone = telephone
    def get_www(self):
        return self.www
    def set_www(self, www):
        self.www = www
    def hasContent_(self):
        if (
            self.address is not None or
            self.city is not None or
            self.contact is not None or
            self.email is not None or
            self.fax is not None or
            self.id is not None or
            self.name is not None or
            self.reportingCurrency is not None or
            self.telephone is not None or
            self.www is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompanyType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CompanyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CompanyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CompanyType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CompanyType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompanyType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.address is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saddress>%s</%saddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.address), input_name='address')), namespaceprefix_ , eol_))
        if self.city is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.contact is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontact>%s</%scontact>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.contact), input_name='contact')), namespaceprefix_ , eol_))
        if self.email is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
        if self.fax is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfax>%s</%sfax>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.fax), input_name='fax')), namespaceprefix_ , eol_))
        if self.id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sid>%s</%sid>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.id), input_name='id')), namespaceprefix_ , eol_))
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sname>%s</%sname>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.name), input_name='name')), namespaceprefix_ , eol_))
        if self.reportingCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreportingCurrency>%s</%sreportingCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.reportingCurrency), input_name='reportingCurrency')), namespaceprefix_ , eol_))
        if self.telephone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stelephone>%s</%stelephone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.telephone), input_name='telephone')), namespaceprefix_ , eol_))
        if self.www is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%swww>%s</%swww>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.www), input_name='www')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'address':
            address_ = child_.text
            address_ = self.gds_validate_string(address_, node, 'address')
            self.address = address_
        elif nodeName_ == 'city':
            city_ = child_.text
            city_ = self.gds_validate_string(city_, node, 'city')
            self.city = city_
        elif nodeName_ == 'contact':
            contact_ = child_.text
            contact_ = self.gds_validate_string(contact_, node, 'contact')
            self.contact = contact_
        elif nodeName_ == 'email':
            email_ = child_.text
            email_ = self.gds_validate_string(email_, node, 'email')
            self.email = email_
        elif nodeName_ == 'fax':
            fax_ = child_.text
            fax_ = self.gds_validate_string(fax_, node, 'fax')
            self.fax = fax_
        elif nodeName_ == 'id':
            id_ = child_.text
            id_ = self.gds_validate_string(id_, node, 'id')
            self.id = id_
        elif nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
        elif nodeName_ == 'reportingCurrency':
            reportingCurrency_ = child_.text
            reportingCurrency_ = self.gds_validate_string(reportingCurrency_, node, 'reportingCurrency')
            self.reportingCurrency = reportingCurrency_
        elif nodeName_ == 'telephone':
            telephone_ = child_.text
            telephone_ = self.gds_validate_string(telephone_, node, 'telephone')
            self.telephone = telephone_
        elif nodeName_ == 'www':
            www_ = child_.text
            www_ = self.gds_validate_string(www_, node, 'www')
            self.www = www_
# end class CompanyType


class GeneralInformationType108(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, assetId=None, lastUpdated=None, sharesInIssue=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.assetId = assetId
        self.lastUpdated = lastUpdated
        self.sharesInIssue = sharesInIssue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralInformationType108)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralInformationType108.subclass:
            return GeneralInformationType108.subclass(*args_, **kwargs_)
        else:
            return GeneralInformationType108(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_assetId(self):
        return self.assetId
    def set_assetId(self, assetId):
        self.assetId = assetId
    def get_lastUpdated(self):
        return self.lastUpdated
    def set_lastUpdated(self, lastUpdated):
        self.lastUpdated = lastUpdated
    def get_sharesInIssue(self):
        return self.sharesInIssue
    def set_sharesInIssue(self, sharesInIssue):
        self.sharesInIssue = sharesInIssue
    def hasContent_(self):
        if (
            self.assetId is not None or
            self.lastUpdated is not None or
            self.sharesInIssue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralInformationType108', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralInformationType108')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralInformationType108')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralInformationType108', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralInformationType108'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralInformationType108', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.assetId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sassetId>%s</%sassetId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.assetId), input_name='assetId')), namespaceprefix_ , eol_))
        if self.lastUpdated is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slastUpdated>%s</%slastUpdated>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lastUpdated), input_name='lastUpdated')), namespaceprefix_ , eol_))
        if self.sharesInIssue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssharesInIssue>%s</%ssharesInIssue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.sharesInIssue), input_name='sharesInIssue')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'assetId':
            assetId_ = child_.text
            assetId_ = self.gds_validate_string(assetId_, node, 'assetId')
            self.assetId = assetId_
        elif nodeName_ == 'lastUpdated':
            lastUpdated_ = child_.text
            lastUpdated_ = self.gds_validate_string(lastUpdated_, node, 'lastUpdated')
            self.lastUpdated = lastUpdated_
        elif nodeName_ == 'sharesInIssue':
            sharesInIssue_ = child_.text
            sharesInIssue_ = self.gds_validate_string(sharesInIssue_, node, 'sharesInIssue')
            self.sharesInIssue = sharesInIssue_
# end class GeneralInformationType108


class TaxCodesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id=None, name=None, taxJurisdiction=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.id = id
        self.name = name
        self.taxJurisdiction = taxJurisdiction
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxCodesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxCodesType.subclass:
            return TaxCodesType.subclass(*args_, **kwargs_)
        else:
            return TaxCodesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_id(self):
        return self.id
    def set_id(self, id):
        self.id = id
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_taxJurisdiction(self):
        return self.taxJurisdiction
    def set_taxJurisdiction(self, taxJurisdiction):
        self.taxJurisdiction = taxJurisdiction
    def hasContent_(self):
        if (
            self.id is not None or
            self.name is not None or
            self.taxJurisdiction is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TaxCodesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TaxCodesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TaxCodesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TaxCodesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TaxCodesType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TaxCodesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.id is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sid>%s</%sid>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.id), input_name='id')), namespaceprefix_ , eol_))
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sname>%s</%sname>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.name), input_name='name')), namespaceprefix_ , eol_))
        if self.taxJurisdiction is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%staxJurisdiction>%s</%staxJurisdiction>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.taxJurisdiction), input_name='taxJurisdiction')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'id':
            id_ = child_.text
            id_ = self.gds_validate_string(id_, node, 'id')
            self.id = id_
        elif nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
        elif nodeName_ == 'taxJurisdiction':
            taxJurisdiction_ = child_.text
            taxJurisdiction_ = self.gds_validate_string(taxJurisdiction_, node, 'taxJurisdiction')
            self.taxJurisdiction = taxJurisdiction_
# end class TaxCodesType


class CounterpartDetailType109(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ACCOUNT=None, COUNTERPART=None, MARKET=None, DATATYPE=None, FILTER=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ACCOUNT = _cast(None, ACCOUNT)
        self.COUNTERPART = _cast(None, COUNTERPART)
        self.MARKET = _cast(None, MARKET)
        self.DATATYPE = _cast(None, DATATYPE)
        self.FILTER = _cast(None, FILTER)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CounterpartDetailType109)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CounterpartDetailType109.subclass:
            return CounterpartDetailType109.subclass(*args_, **kwargs_)
        else:
            return CounterpartDetailType109(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_ACCOUNT(self):
        return self.ACCOUNT
    def set_ACCOUNT(self, ACCOUNT):
        self.ACCOUNT = ACCOUNT
    def get_COUNTERPART(self):
        return self.COUNTERPART
    def set_COUNTERPART(self, COUNTERPART):
        self.COUNTERPART = COUNTERPART
    def get_MARKET(self):
        return self.MARKET
    def set_MARKET(self, MARKET):
        self.MARKET = MARKET
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_FILTER(self):
        return self.FILTER
    def set_FILTER(self, FILTER):
        self.FILTER = FILTER
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CounterpartDetailType109', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CounterpartDetailType109')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CounterpartDetailType109')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CounterpartDetailType109', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CounterpartDetailType109'):
        if self.ACCOUNT is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            outfile.write(' ACCOUNT=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ACCOUNT), input_name='ACCOUNT')), ))
        if self.COUNTERPART is not None and 'COUNTERPART' not in already_processed:
            already_processed.add('COUNTERPART')
            outfile.write(' COUNTERPART=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.COUNTERPART), input_name='COUNTERPART')), ))
        if self.MARKET is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            outfile.write(' MARKET=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.MARKET), input_name='MARKET')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.FILTER is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            outfile.write(' FILTER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.FILTER), input_name='FILTER')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CounterpartDetailType109', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ACCOUNT', node)
        if value is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            self.ACCOUNT = value
        value = find_attr_value_('COUNTERPART', node)
        if value is not None and 'COUNTERPART' not in already_processed:
            already_processed.add('COUNTERPART')
            self.COUNTERPART = value
        value = find_attr_value_('MARKET', node)
        if value is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            self.MARKET = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('FILTER', node)
        if value is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            self.FILTER = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType110.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class CounterpartDetailType109


class DataDateType110(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, Trading=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
        self.Trading = Trading
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType110)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType110.subclass:
            return DataDateType110.subclass(*args_, **kwargs_)
        else:
            return DataDateType110(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_Trading(self):
        return self.Trading
    def set_Trading(self, Trading):
        self.Trading = Trading
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None or
            self.Trading is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType110', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType110')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType110')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType110', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType110'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType110', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
        if self.Trading is not None:
            self.Trading.export(outfile, level, namespaceprefix_, name_='Trading', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType111.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
        elif nodeName_ == 'Trading':
            obj_ = TradingType112.factory(parent_object_=self)
            obj_.build(child_)
            self.Trading = obj_
            obj_.original_tagname_ = 'Trading'
# end class DataDateType110


class GeneralType111(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Counterpart=None, CounterpartName=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Counterpart = Counterpart
        self.CounterpartName = CounterpartName
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType111)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType111.subclass:
            return GeneralType111.subclass(*args_, **kwargs_)
        else:
            return GeneralType111(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Counterpart(self):
        return self.Counterpart
    def set_Counterpart(self, Counterpart):
        self.Counterpart = Counterpart
    def get_CounterpartName(self):
        return self.CounterpartName
    def set_CounterpartName(self, CounterpartName):
        self.CounterpartName = CounterpartName
    def hasContent_(self):
        if (
            self.Counterpart is not None or
            self.CounterpartName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType111', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType111')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType111')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType111', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType111'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType111', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Counterpart is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCounterpart>%s</%sCounterpart>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Counterpart), input_name='Counterpart')), namespaceprefix_ , eol_))
        if self.CounterpartName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCounterpartName>%s</%sCounterpartName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CounterpartName), input_name='CounterpartName')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Counterpart':
            Counterpart_ = child_.text
            Counterpart_ = self.gds_validate_string(Counterpart_, node, 'Counterpart')
            self.Counterpart = Counterpart_
        elif nodeName_ == 'CounterpartName':
            CounterpartName_ = child_.text
            CounterpartName_ = self.gds_validate_string(CounterpartName_, node, 'CounterpartName')
            self.CounterpartName = CounterpartName_
# end class GeneralType111


class TradingType112(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Date=None, SlDailyReturn=None, ValueOnLoan=None, ValueOnLoanVsCash=None, ValueOnLoanVsNonCash=None, VWAF=None, VWAR=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.SlDailyReturn = SlDailyReturn
        self.ValueOnLoan = ValueOnLoan
        self.ValueOnLoanVsCash = ValueOnLoanVsCash
        self.ValueOnLoanVsNonCash = ValueOnLoanVsNonCash
        self.VWAF = VWAF
        self.VWAR = VWAR
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TradingType112)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TradingType112.subclass:
            return TradingType112.subclass(*args_, **kwargs_)
        else:
            return TradingType112(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_SlDailyReturn(self):
        return self.SlDailyReturn
    def set_SlDailyReturn(self, SlDailyReturn):
        self.SlDailyReturn = SlDailyReturn
    def get_ValueOnLoan(self):
        return self.ValueOnLoan
    def set_ValueOnLoan(self, ValueOnLoan):
        self.ValueOnLoan = ValueOnLoan
    def get_ValueOnLoanVsCash(self):
        return self.ValueOnLoanVsCash
    def set_ValueOnLoanVsCash(self, ValueOnLoanVsCash):
        self.ValueOnLoanVsCash = ValueOnLoanVsCash
    def get_ValueOnLoanVsNonCash(self):
        return self.ValueOnLoanVsNonCash
    def set_ValueOnLoanVsNonCash(self, ValueOnLoanVsNonCash):
        self.ValueOnLoanVsNonCash = ValueOnLoanVsNonCash
    def get_VWAF(self):
        return self.VWAF
    def set_VWAF(self, VWAF):
        self.VWAF = VWAF
    def get_VWAR(self):
        return self.VWAR
    def set_VWAR(self, VWAR):
        self.VWAR = VWAR
    def hasContent_(self):
        if (
            self.Date is not None or
            self.SlDailyReturn is not None or
            self.ValueOnLoan is not None or
            self.ValueOnLoanVsCash is not None or
            self.ValueOnLoanVsNonCash is not None or
            self.VWAF is not None or
            self.VWAR is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TradingType112', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TradingType112')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TradingType112')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TradingType112', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TradingType112'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TradingType112', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.SlDailyReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSlDailyReturn>%s</%sSlDailyReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.SlDailyReturn, input_name='SlDailyReturn'), namespaceprefix_ , eol_))
        if self.ValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoan>%s</%sValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoan, input_name='ValueOnLoan'), namespaceprefix_ , eol_))
        if self.ValueOnLoanVsCash is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanVsCash>%s</%sValueOnLoanVsCash>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoanVsCash, input_name='ValueOnLoanVsCash'), namespaceprefix_ , eol_))
        if self.ValueOnLoanVsNonCash is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanVsNonCash>%s</%sValueOnLoanVsNonCash>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoanVsNonCash, input_name='ValueOnLoanVsNonCash'), namespaceprefix_ , eol_))
        if self.VWAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAF>%s</%sVWAF>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAF, input_name='VWAF'), namespaceprefix_ , eol_))
        if self.VWAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAR>%s</%sVWAR>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAR, input_name='VWAR'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
        elif nodeName_ == 'SlDailyReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SlDailyReturn')
            self.SlDailyReturn = fval_
        elif nodeName_ == 'ValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoan')
            self.ValueOnLoan = fval_
        elif nodeName_ == 'ValueOnLoanVsCash' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoanVsCash')
            self.ValueOnLoanVsCash = fval_
        elif nodeName_ == 'ValueOnLoanVsNonCash' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoanVsNonCash')
            self.ValueOnLoanVsNonCash = fval_
        elif nodeName_ == 'VWAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAF')
            self.VWAF = fval_
        elif nodeName_ == 'VWAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAR')
            self.VWAR = fval_
# end class TradingType112


class RankedCounterpartType113(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ACCOUNT=None, DATATYPE=None, MARKET=None, RANK=None, RANKTYPE=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ACCOUNT = _cast(None, ACCOUNT)
        self.DATATYPE = _cast(None, DATATYPE)
        self.MARKET = _cast(None, MARKET)
        self.RANK = _cast(None, RANK)
        self.RANKTYPE = _cast(None, RANKTYPE)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RankedCounterpartType113)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RankedCounterpartType113.subclass:
            return RankedCounterpartType113.subclass(*args_, **kwargs_)
        else:
            return RankedCounterpartType113(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_ACCOUNT(self):
        return self.ACCOUNT
    def set_ACCOUNT(self, ACCOUNT):
        self.ACCOUNT = ACCOUNT
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_MARKET(self):
        return self.MARKET
    def set_MARKET(self, MARKET):
        self.MARKET = MARKET
    def get_RANK(self):
        return self.RANK
    def set_RANK(self, RANK):
        self.RANK = RANK
    def get_RANKTYPE(self):
        return self.RANKTYPE
    def set_RANKTYPE(self, RANKTYPE):
        self.RANKTYPE = RANKTYPE
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RankedCounterpartType113', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RankedCounterpartType113')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RankedCounterpartType113')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RankedCounterpartType113', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RankedCounterpartType113'):
        if self.ACCOUNT is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            outfile.write(' ACCOUNT=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ACCOUNT), input_name='ACCOUNT')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.MARKET is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            outfile.write(' MARKET=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.MARKET), input_name='MARKET')), ))
        if self.RANK is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            outfile.write(' RANK=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANK), input_name='RANK')), ))
        if self.RANKTYPE is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            outfile.write(' RANKTYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RANKTYPE), input_name='RANKTYPE')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RankedCounterpartType113', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ACCOUNT', node)
        if value is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            self.ACCOUNT = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('MARKET', node)
        if value is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            self.MARKET = value
        value = find_attr_value_('RANK', node)
        if value is not None and 'RANK' not in already_processed:
            already_processed.add('RANK')
            self.RANK = value
        value = find_attr_value_('RANKTYPE', node)
        if value is not None and 'RANKTYPE' not in already_processed:
            already_processed.add('RANKTYPE')
            self.RANKTYPE = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType114.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class RankedCounterpartType113


class DataDateType114(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType114)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType114.subclass:
            return DataDateType114.subclass(*args_, **kwargs_)
        else:
            return DataDateType114(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType114', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType114')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType114')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType114', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType114'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType114', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType115.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType114


class GeneralType115(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Counterpart=None, CounterpartName=None, Date=None, RankedValue=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Counterpart = Counterpart
        self.CounterpartName = CounterpartName
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.RankedValue = RankedValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType115)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType115.subclass:
            return GeneralType115.subclass(*args_, **kwargs_)
        else:
            return GeneralType115(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Counterpart(self):
        return self.Counterpart
    def set_Counterpart(self, Counterpart):
        self.Counterpart = Counterpart
    def get_CounterpartName(self):
        return self.CounterpartName
    def set_CounterpartName(self, CounterpartName):
        self.CounterpartName = CounterpartName
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_RankedValue(self):
        return self.RankedValue
    def set_RankedValue(self, RankedValue):
        self.RankedValue = RankedValue
    def hasContent_(self):
        if (
            self.Counterpart is not None or
            self.CounterpartName is not None or
            self.Date is not None or
            self.RankedValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType115', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType115')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType115')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType115', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType115'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType115', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Counterpart is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCounterpart>%s</%sCounterpart>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Counterpart), input_name='Counterpart')), namespaceprefix_ , eol_))
        if self.CounterpartName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCounterpartName>%s</%sCounterpartName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CounterpartName), input_name='CounterpartName')), namespaceprefix_ , eol_))
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.RankedValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRankedValue>%s</%sRankedValue>%s' % (namespaceprefix_ , self.gds_format_float(self.RankedValue, input_name='RankedValue'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Counterpart':
            Counterpart_ = child_.text
            Counterpart_ = self.gds_validate_string(Counterpart_, node, 'Counterpart')
            self.Counterpart = Counterpart_
        elif nodeName_ == 'CounterpartName':
            CounterpartName_ = child_.text
            CounterpartName_ = self.gds_validate_string(CounterpartName_, node, 'CounterpartName')
            self.CounterpartName = CounterpartName_
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
        elif nodeName_ == 'RankedValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RankedValue')
            self.RankedValue = fval_
# end class GeneralType115


class MarketDetailType116(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ACCOUNT=None, BENCHMARKFILTER2=None, MARKET=None, DATATYPE=None, FILTER=None, DataDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ACCOUNT = _cast(None, ACCOUNT)
        self.BENCHMARKFILTER2 = _cast(None, BENCHMARKFILTER2)
        self.MARKET = _cast(None, MARKET)
        self.DATATYPE = _cast(None, DATATYPE)
        self.FILTER = _cast(None, FILTER)
        if DataDate is None:
            self.DataDate = []
        else:
            self.DataDate = DataDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarketDetailType116)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarketDetailType116.subclass:
            return MarketDetailType116.subclass(*args_, **kwargs_)
        else:
            return MarketDetailType116(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def add_DataDate(self, value):
        self.DataDate.append(value)
    def insert_DataDate_at(self, index, value):
        self.DataDate.insert(index, value)
    def replace_DataDate_at(self, index, value):
        self.DataDate[index] = value
    def get_ACCOUNT(self):
        return self.ACCOUNT
    def set_ACCOUNT(self, ACCOUNT):
        self.ACCOUNT = ACCOUNT
    def get_BENCHMARKFILTER2(self):
        return self.BENCHMARKFILTER2
    def set_BENCHMARKFILTER2(self, BENCHMARKFILTER2):
        self.BENCHMARKFILTER2 = BENCHMARKFILTER2
    def get_MARKET(self):
        return self.MARKET
    def set_MARKET(self, MARKET):
        self.MARKET = MARKET
    def get_DATATYPE(self):
        return self.DATATYPE
    def set_DATATYPE(self, DATATYPE):
        self.DATATYPE = DATATYPE
    def get_FILTER(self):
        return self.FILTER
    def set_FILTER(self, FILTER):
        self.FILTER = FILTER
    def hasContent_(self):
        if (
            self.DataDate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MarketDetailType116', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarketDetailType116')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarketDetailType116')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarketDetailType116', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarketDetailType116'):
        if self.ACCOUNT is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            outfile.write(' ACCOUNT=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ACCOUNT), input_name='ACCOUNT')), ))
        if self.BENCHMARKFILTER2 is not None and 'BENCHMARKFILTER2' not in already_processed:
            already_processed.add('BENCHMARKFILTER2')
            outfile.write(' BENCHMARKFILTER2=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.BENCHMARKFILTER2), input_name='BENCHMARKFILTER2')), ))
        if self.MARKET is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            outfile.write(' MARKET=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.MARKET), input_name='MARKET')), ))
        if self.DATATYPE is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            outfile.write(' DATATYPE=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DATATYPE), input_name='DATATYPE')), ))
        if self.FILTER is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            outfile.write(' FILTER=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.FILTER), input_name='FILTER')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MarketDetailType116', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataDate_ in self.DataDate:
            DataDate_.export(outfile, level, namespaceprefix_, name_='DataDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ACCOUNT', node)
        if value is not None and 'ACCOUNT' not in already_processed:
            already_processed.add('ACCOUNT')
            self.ACCOUNT = value
        value = find_attr_value_('BENCHMARKFILTER2', node)
        if value is not None and 'BENCHMARKFILTER2' not in already_processed:
            already_processed.add('BENCHMARKFILTER2')
            self.BENCHMARKFILTER2 = value
        value = find_attr_value_('MARKET', node)
        if value is not None and 'MARKET' not in already_processed:
            already_processed.add('MARKET')
            self.MARKET = value
        value = find_attr_value_('DATATYPE', node)
        if value is not None and 'DATATYPE' not in already_processed:
            already_processed.add('DATATYPE')
            self.DATATYPE = value
        value = find_attr_value_('FILTER', node)
        if value is not None and 'FILTER' not in already_processed:
            already_processed.add('FILTER')
            self.FILTER = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataDate':
            obj_ = DataDateType117.factory(parent_object_=self)
            obj_.build(child_)
            self.DataDate.append(obj_)
            obj_.original_tagname_ = 'DataDate'
# end class MarketDetailType116


class DataDateType117(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, Trading=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.Trading = Trading
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType117)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType117.subclass:
            return DataDateType117.subclass(*args_, **kwargs_)
        else:
            return DataDateType117(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Trading(self):
        return self.Trading
    def set_Trading(self, Trading):
        self.Trading = Trading
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.Trading is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType117', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType117')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType117')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType117', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType117'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType117', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Trading is not None:
            self.Trading.export(outfile, level, namespaceprefix_, name_='Trading', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Trading':
            obj_ = TradingType118.factory(parent_object_=self)
            obj_.build(child_)
            self.Trading = obj_
            obj_.original_tagname_ = 'Trading'
# end class DataDateType117


class TradingType118(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Date=None, SlDailyReturn=None, ValueOnLoan=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.SlDailyReturn = SlDailyReturn
        self.ValueOnLoan = ValueOnLoan
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TradingType118)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TradingType118.subclass:
            return TradingType118.subclass(*args_, **kwargs_)
        else:
            return TradingType118(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_SlDailyReturn(self):
        return self.SlDailyReturn
    def set_SlDailyReturn(self, SlDailyReturn):
        self.SlDailyReturn = SlDailyReturn
    def get_ValueOnLoan(self):
        return self.ValueOnLoan
    def set_ValueOnLoan(self, ValueOnLoan):
        self.ValueOnLoan = ValueOnLoan
    def hasContent_(self):
        if (
            self.Date is not None or
            self.SlDailyReturn is not None or
            self.ValueOnLoan is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TradingType118', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TradingType118')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TradingType118')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TradingType118', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TradingType118'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TradingType118', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.SlDailyReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSlDailyReturn>%s</%sSlDailyReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.SlDailyReturn, input_name='SlDailyReturn'), namespaceprefix_ , eol_))
        if self.ValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoan>%s</%sValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoan, input_name='ValueOnLoan'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
        elif nodeName_ == 'SlDailyReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SlDailyReturn')
            self.SlDailyReturn = fval_
        elif nodeName_ == 'ValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoan')
            self.ValueOnLoan = fval_
# end class TradingType118


class DataDateType119(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType119)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType119.subclass:
            return DataDateType119.subclass(*args_, **kwargs_)
        else:
            return DataDateType119(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType119', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType119')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType119')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType119', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType119'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType119', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType120.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType119


class GeneralType120(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BB_TICKER=None, BBGID=None, BreakevenPrice=None, CompositeScore=None, CUSIP=None, Delta=None, DXLID=None, InstrumentName=None, InstrumentType=None, IsDeleted=None, ISIN=None, IsPrimary=None, MarketRank=None, NewPositions=None, OutOfMoneyPct=None, ProfitandLoss=None, ProfitandLossImpact=None, QUICK=None, RankedValue=None, SEDOL=None, TICKER=None, TICKERCODE=None, TransactionDuration=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.BB_TICKER = BB_TICKER
        self.BBGID = BBGID
        self.BreakevenPrice = BreakevenPrice
        self.CompositeScore = CompositeScore
        self.CUSIP = CUSIP
        if Delta is None:
            self.Delta = []
        else:
            self.Delta = Delta
        self.DXLID = DXLID
        self.InstrumentName = InstrumentName
        self.InstrumentType = InstrumentType
        self.IsDeleted = IsDeleted
        self.ISIN = ISIN
        self.IsPrimary = IsPrimary
        self.MarketRank = MarketRank
        self.NewPositions = NewPositions
        self.OutOfMoneyPct = OutOfMoneyPct
        self.ProfitandLoss = ProfitandLoss
        self.ProfitandLossImpact = ProfitandLossImpact
        self.QUICK = QUICK
        self.RankedValue = RankedValue
        self.SEDOL = SEDOL
        self.TICKER = TICKER
        self.TICKERCODE = TICKERCODE
        self.TransactionDuration = TransactionDuration
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType120)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType120.subclass:
            return GeneralType120.subclass(*args_, **kwargs_)
        else:
            return GeneralType120(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BB_TICKER(self):
        return self.BB_TICKER
    def set_BB_TICKER(self, BB_TICKER):
        self.BB_TICKER = BB_TICKER
    def get_BBGID(self):
        return self.BBGID
    def set_BBGID(self, BBGID):
        self.BBGID = BBGID
    def get_BreakevenPrice(self):
        return self.BreakevenPrice
    def set_BreakevenPrice(self, BreakevenPrice):
        self.BreakevenPrice = BreakevenPrice
    def get_CompositeScore(self):
        return self.CompositeScore
    def set_CompositeScore(self, CompositeScore):
        self.CompositeScore = CompositeScore
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_Delta(self):
        return self.Delta
    def set_Delta(self, Delta):
        self.Delta = Delta
    def add_Delta(self, value):
        self.Delta.append(value)
    def add_Delta(self, value):
        self.Delta.append(value)
    def insert_Delta_at(self, index, value):
        self.Delta.insert(index, value)
    def replace_Delta_at(self, index, value):
        self.Delta[index] = value
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_InstrumentName(self):
        return self.InstrumentName
    def set_InstrumentName(self, InstrumentName):
        self.InstrumentName = InstrumentName
    def get_InstrumentType(self):
        return self.InstrumentType
    def set_InstrumentType(self, InstrumentType):
        self.InstrumentType = InstrumentType
    def get_IsDeleted(self):
        return self.IsDeleted
    def set_IsDeleted(self, IsDeleted):
        self.IsDeleted = IsDeleted
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_IsPrimary(self):
        return self.IsPrimary
    def set_IsPrimary(self, IsPrimary):
        self.IsPrimary = IsPrimary
    def get_MarketRank(self):
        return self.MarketRank
    def set_MarketRank(self, MarketRank):
        self.MarketRank = MarketRank
    def get_NewPositions(self):
        return self.NewPositions
    def set_NewPositions(self, NewPositions):
        self.NewPositions = NewPositions
    def get_OutOfMoneyPct(self):
        return self.OutOfMoneyPct
    def set_OutOfMoneyPct(self, OutOfMoneyPct):
        self.OutOfMoneyPct = OutOfMoneyPct
    def get_ProfitandLoss(self):
        return self.ProfitandLoss
    def set_ProfitandLoss(self, ProfitandLoss):
        self.ProfitandLoss = ProfitandLoss
    def get_ProfitandLossImpact(self):
        return self.ProfitandLossImpact
    def set_ProfitandLossImpact(self, ProfitandLossImpact):
        self.ProfitandLossImpact = ProfitandLossImpact
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_RankedValue(self):
        return self.RankedValue
    def set_RankedValue(self, RankedValue):
        self.RankedValue = RankedValue
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def get_TICKERCODE(self):
        return self.TICKERCODE
    def set_TICKERCODE(self, TICKERCODE):
        self.TICKERCODE = TICKERCODE
    def get_TransactionDuration(self):
        return self.TransactionDuration
    def set_TransactionDuration(self, TransactionDuration):
        self.TransactionDuration = TransactionDuration
    def hasContent_(self):
        if (
            self.BB_TICKER is not None or
            self.BBGID is not None or
            self.BreakevenPrice is not None or
            self.CompositeScore is not None or
            self.CUSIP is not None or
            self.Delta or
            self.DXLID is not None or
            self.InstrumentName is not None or
            self.InstrumentType is not None or
            self.IsDeleted is not None or
            self.ISIN is not None or
            self.IsPrimary is not None or
            self.MarketRank is not None or
            self.NewPositions is not None or
            self.OutOfMoneyPct is not None or
            self.ProfitandLoss is not None or
            self.ProfitandLossImpact is not None or
            self.QUICK is not None or
            self.RankedValue is not None or
            self.SEDOL is not None or
            self.TICKER is not None or
            self.TICKERCODE is not None or
            self.TransactionDuration is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType120', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType120')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType120')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType120', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType120'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType120', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BB_TICKER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBB_TICKER>%s</%sBB_TICKER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BB_TICKER), input_name='BB_TICKER')), namespaceprefix_ , eol_))
        if self.BBGID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBBGID>%s</%sBBGID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BBGID), input_name='BBGID')), namespaceprefix_ , eol_))
        if self.BreakevenPrice is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBreakevenPrice>%s</%sBreakevenPrice>%s' % (namespaceprefix_ , self.gds_format_float(self.BreakevenPrice, input_name='BreakevenPrice'), namespaceprefix_ , eol_))
        if self.CompositeScore is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompositeScore>%s</%sCompositeScore>%s' % (namespaceprefix_ , self.gds_format_float(self.CompositeScore, input_name='CompositeScore'), namespaceprefix_ , eol_))
        if self.CUSIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUSIP>%s</%sCUSIP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CUSIP), input_name='CUSIP')), namespaceprefix_ , eol_))
        for Delta_ in self.Delta:
            Delta_.export(outfile, level, namespaceprefix_, name_='Delta', pretty_print=pretty_print)
        if self.DXLID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDXLID>%s</%sDXLID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DXLID), input_name='DXLID')), namespaceprefix_ , eol_))
        if self.InstrumentName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstrumentName>%s</%sInstrumentName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InstrumentName), input_name='InstrumentName')), namespaceprefix_ , eol_))
        if self.InstrumentType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstrumentType>%s</%sInstrumentType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InstrumentType), input_name='InstrumentType')), namespaceprefix_ , eol_))
        if self.IsDeleted is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsDeleted>%s</%sIsDeleted>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsDeleted), input_name='IsDeleted')), namespaceprefix_ , eol_))
        if self.ISIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sISIN>%s</%sISIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ISIN), input_name='ISIN')), namespaceprefix_ , eol_))
        if self.IsPrimary is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsPrimary>%s</%sIsPrimary>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsPrimary), input_name='IsPrimary')), namespaceprefix_ , eol_))
        if self.MarketRank is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarketRank>%s</%sMarketRank>%s' % (namespaceprefix_ , self.gds_format_float(self.MarketRank, input_name='MarketRank'), namespaceprefix_ , eol_))
        if self.NewPositions is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNewPositions>%s</%sNewPositions>%s' % (namespaceprefix_ , self.gds_format_float(self.NewPositions, input_name='NewPositions'), namespaceprefix_ , eol_))
        if self.OutOfMoneyPct is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOutOfMoneyPct>%s</%sOutOfMoneyPct>%s' % (namespaceprefix_ , self.gds_format_float(self.OutOfMoneyPct, input_name='OutOfMoneyPct'), namespaceprefix_ , eol_))
        if self.ProfitandLoss is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProfitandLoss>%s</%sProfitandLoss>%s' % (namespaceprefix_ , self.gds_format_float(self.ProfitandLoss, input_name='ProfitandLoss'), namespaceprefix_ , eol_))
        if self.ProfitandLossImpact is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProfitandLossImpact>%s</%sProfitandLossImpact>%s' % (namespaceprefix_ , self.gds_format_float(self.ProfitandLossImpact, input_name='ProfitandLossImpact'), namespaceprefix_ , eol_))
        if self.QUICK is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQUICK>%s</%sQUICK>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QUICK), input_name='QUICK')), namespaceprefix_ , eol_))
        if self.RankedValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRankedValue>%s</%sRankedValue>%s' % (namespaceprefix_ , self.gds_format_float(self.RankedValue, input_name='RankedValue'), namespaceprefix_ , eol_))
        if self.SEDOL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSEDOL>%s</%sSEDOL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SEDOL), input_name='SEDOL')), namespaceprefix_ , eol_))
        if self.TICKER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTICKER>%s</%sTICKER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TICKER), input_name='TICKER')), namespaceprefix_ , eol_))
        if self.TICKERCODE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTICKERCODE>%s</%sTICKERCODE>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TICKERCODE), input_name='TICKERCODE')), namespaceprefix_ , eol_))
        if self.TransactionDuration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransactionDuration>%s</%sTransactionDuration>%s' % (namespaceprefix_ , self.gds_format_float(self.TransactionDuration, input_name='TransactionDuration'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BB_TICKER':
            BB_TICKER_ = child_.text
            BB_TICKER_ = self.gds_validate_string(BB_TICKER_, node, 'BB_TICKER')
            self.BB_TICKER = BB_TICKER_
        elif nodeName_ == 'BBGID':
            BBGID_ = child_.text
            BBGID_ = self.gds_validate_string(BBGID_, node, 'BBGID')
            self.BBGID = BBGID_
        elif nodeName_ == 'BreakevenPrice' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'BreakevenPrice')
            self.BreakevenPrice = fval_
        elif nodeName_ == 'CompositeScore' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'CompositeScore')
            self.CompositeScore = fval_
        elif nodeName_ == 'CUSIP':
            CUSIP_ = child_.text
            CUSIP_ = self.gds_validate_string(CUSIP_, node, 'CUSIP')
            self.CUSIP = CUSIP_
        elif nodeName_ == 'Delta':
            obj_ = DeltaType121.factory(parent_object_=self)
            obj_.build(child_)
            self.Delta.append(obj_)
            obj_.original_tagname_ = 'Delta'
        elif nodeName_ == 'DXLID':
            DXLID_ = child_.text
            DXLID_ = self.gds_validate_string(DXLID_, node, 'DXLID')
            self.DXLID = DXLID_
        elif nodeName_ == 'InstrumentName':
            InstrumentName_ = child_.text
            InstrumentName_ = self.gds_validate_string(InstrumentName_, node, 'InstrumentName')
            self.InstrumentName = InstrumentName_
        elif nodeName_ == 'InstrumentType':
            InstrumentType_ = child_.text
            InstrumentType_ = self.gds_validate_string(InstrumentType_, node, 'InstrumentType')
            self.InstrumentType = InstrumentType_
        elif nodeName_ == 'IsDeleted':
            IsDeleted_ = child_.text
            IsDeleted_ = self.gds_validate_string(IsDeleted_, node, 'IsDeleted')
            self.IsDeleted = IsDeleted_
        elif nodeName_ == 'ISIN':
            ISIN_ = child_.text
            ISIN_ = self.gds_validate_string(ISIN_, node, 'ISIN')
            self.ISIN = ISIN_
        elif nodeName_ == 'IsPrimary':
            IsPrimary_ = child_.text
            IsPrimary_ = self.gds_validate_string(IsPrimary_, node, 'IsPrimary')
            self.IsPrimary = IsPrimary_
        elif nodeName_ == 'MarketRank' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'MarketRank')
            self.MarketRank = fval_
        elif nodeName_ == 'NewPositions' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NewPositions')
            self.NewPositions = fval_
        elif nodeName_ == 'OutOfMoneyPct' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'OutOfMoneyPct')
            self.OutOfMoneyPct = fval_
        elif nodeName_ == 'ProfitandLoss' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ProfitandLoss')
            self.ProfitandLoss = fval_
        elif nodeName_ == 'ProfitandLossImpact' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ProfitandLossImpact')
            self.ProfitandLossImpact = fval_
        elif nodeName_ == 'QUICK':
            QUICK_ = child_.text
            QUICK_ = self.gds_validate_string(QUICK_, node, 'QUICK')
            self.QUICK = QUICK_
        elif nodeName_ == 'RankedValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RankedValue')
            self.RankedValue = fval_
        elif nodeName_ == 'SEDOL':
            SEDOL_ = child_.text
            SEDOL_ = self.gds_validate_string(SEDOL_, node, 'SEDOL')
            self.SEDOL = SEDOL_
        elif nodeName_ == 'TICKER':
            TICKER_ = child_.text
            TICKER_ = self.gds_validate_string(TICKER_, node, 'TICKER')
            self.TICKER = TICKER_
        elif nodeName_ == 'TICKERCODE':
            TICKERCODE_ = child_.text
            TICKERCODE_ = self.gds_validate_string(TICKERCODE_, node, 'TICKERCODE')
            self.TICKERCODE = TICKERCODE_
        elif nodeName_ == 'TransactionDuration' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TransactionDuration')
            self.TransactionDuration = fval_
# end class GeneralType120


class DeltaType121(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, ShortSqueezeModelRankDelta=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.value = _cast(None, value)
        self.ShortSqueezeModelRankDelta = ShortSqueezeModelRankDelta
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeltaType121)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeltaType121.subclass:
            return DeltaType121.subclass(*args_, **kwargs_)
        else:
            return DeltaType121(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ShortSqueezeModelRankDelta(self):
        return self.ShortSqueezeModelRankDelta
    def set_ShortSqueezeModelRankDelta(self, ShortSqueezeModelRankDelta):
        self.ShortSqueezeModelRankDelta = ShortSqueezeModelRankDelta
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.ShortSqueezeModelRankDelta is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeltaType121', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeltaType121')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DeltaType121')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DeltaType121', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DeltaType121'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeltaType121', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShortSqueezeModelRankDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortSqueezeModelRankDelta>%s</%sShortSqueezeModelRankDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.ShortSqueezeModelRankDelta, input_name='ShortSqueezeModelRankDelta'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ShortSqueezeModelRankDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ShortSqueezeModelRankDelta')
            self.ShortSqueezeModelRankDelta = fval_
# end class DeltaType121


class GeneralType122(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BB_TICKER=None, BBGID=None, CUSIP=None, DXLID=None, InstrumentName=None, ISIN=None, QUICK=None, SEDOL=None, TICKER=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.BB_TICKER = BB_TICKER
        self.BBGID = BBGID
        self.CUSIP = CUSIP
        self.DXLID = DXLID
        self.InstrumentName = InstrumentName
        self.ISIN = ISIN
        self.QUICK = QUICK
        self.SEDOL = SEDOL
        self.TICKER = TICKER
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType122)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType122.subclass:
            return GeneralType122.subclass(*args_, **kwargs_)
        else:
            return GeneralType122(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BB_TICKER(self):
        return self.BB_TICKER
    def set_BB_TICKER(self, BB_TICKER):
        self.BB_TICKER = BB_TICKER
    def get_BBGID(self):
        return self.BBGID
    def set_BBGID(self, BBGID):
        self.BBGID = BBGID
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_InstrumentName(self):
        return self.InstrumentName
    def set_InstrumentName(self, InstrumentName):
        self.InstrumentName = InstrumentName
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def hasContent_(self):
        if (
            self.BB_TICKER is not None or
            self.BBGID is not None or
            self.CUSIP is not None or
            self.DXLID is not None or
            self.InstrumentName is not None or
            self.ISIN is not None or
            self.QUICK is not None or
            self.SEDOL is not None or
            self.TICKER is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType122', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType122')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType122')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType122', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType122'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType122', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BB_TICKER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBB_TICKER>%s</%sBB_TICKER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BB_TICKER), input_name='BB_TICKER')), namespaceprefix_ , eol_))
        if self.BBGID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBBGID>%s</%sBBGID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BBGID), input_name='BBGID')), namespaceprefix_ , eol_))
        if self.CUSIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUSIP>%s</%sCUSIP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CUSIP), input_name='CUSIP')), namespaceprefix_ , eol_))
        if self.DXLID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDXLID>%s</%sDXLID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DXLID), input_name='DXLID')), namespaceprefix_ , eol_))
        if self.InstrumentName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstrumentName>%s</%sInstrumentName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InstrumentName), input_name='InstrumentName')), namespaceprefix_ , eol_))
        if self.ISIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sISIN>%s</%sISIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ISIN), input_name='ISIN')), namespaceprefix_ , eol_))
        if self.QUICK is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQUICK>%s</%sQUICK>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QUICK), input_name='QUICK')), namespaceprefix_ , eol_))
        if self.SEDOL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSEDOL>%s</%sSEDOL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SEDOL), input_name='SEDOL')), namespaceprefix_ , eol_))
        if self.TICKER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTICKER>%s</%sTICKER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TICKER), input_name='TICKER')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BB_TICKER':
            BB_TICKER_ = child_.text
            BB_TICKER_ = self.gds_validate_string(BB_TICKER_, node, 'BB_TICKER')
            self.BB_TICKER = BB_TICKER_
        elif nodeName_ == 'BBGID':
            BBGID_ = child_.text
            BBGID_ = self.gds_validate_string(BBGID_, node, 'BBGID')
            self.BBGID = BBGID_
        elif nodeName_ == 'CUSIP':
            CUSIP_ = child_.text
            CUSIP_ = self.gds_validate_string(CUSIP_, node, 'CUSIP')
            self.CUSIP = CUSIP_
        elif nodeName_ == 'DXLID':
            DXLID_ = child_.text
            DXLID_ = self.gds_validate_string(DXLID_, node, 'DXLID')
            self.DXLID = DXLID_
        elif nodeName_ == 'InstrumentName':
            InstrumentName_ = child_.text
            InstrumentName_ = self.gds_validate_string(InstrumentName_, node, 'InstrumentName')
            self.InstrumentName = InstrumentName_
        elif nodeName_ == 'ISIN':
            ISIN_ = child_.text
            ISIN_ = self.gds_validate_string(ISIN_, node, 'ISIN')
            self.ISIN = ISIN_
        elif nodeName_ == 'QUICK':
            QUICK_ = child_.text
            QUICK_ = self.gds_validate_string(QUICK_, node, 'QUICK')
            self.QUICK = QUICK_
        elif nodeName_ == 'SEDOL':
            SEDOL_ = child_.text
            SEDOL_ = self.gds_validate_string(SEDOL_, node, 'SEDOL')
            self.SEDOL = SEDOL_
        elif nodeName_ == 'TICKER':
            TICKER_ = child_.text
            TICKER_ = self.gds_validate_string(TICKER_, node, 'TICKER')
            self.TICKER = TICKER_
# end class GeneralType122


class DataDateType123(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, BondPricing=None, InstrumentData=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.BondPricing = BondPricing
        self.InstrumentData = InstrumentData
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType123)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType123.subclass:
            return DataDateType123.subclass(*args_, **kwargs_)
        else:
            return DataDateType123(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BondPricing(self):
        return self.BondPricing
    def set_BondPricing(self, BondPricing):
        self.BondPricing = BondPricing
    def get_InstrumentData(self):
        return self.InstrumentData
    def set_InstrumentData(self, InstrumentData):
        self.InstrumentData = InstrumentData
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.BondPricing is not None or
            self.InstrumentData is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType123', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType123')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType123')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType123', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType123'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType123', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BondPricing is not None:
            self.BondPricing.export(outfile, level, namespaceprefix_, name_='BondPricing', pretty_print=pretty_print)
        if self.InstrumentData is not None:
            self.InstrumentData.export(outfile, level, namespaceprefix_, name_='InstrumentData', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BondPricing':
            obj_ = BondPricingType.factory(parent_object_=self)
            obj_.build(child_)
            self.BondPricing = obj_
            obj_.original_tagname_ = 'BondPricing'
        elif nodeName_ == 'InstrumentData':
            obj_ = InstrumentDataType124.factory(parent_object_=self)
            obj_.build(child_)
            self.InstrumentData = obj_
            obj_.original_tagname_ = 'InstrumentData'
# end class DataDateType123


class BondPricingType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BondPricingActualCdsBondBasisMid=None, BondPricingActualImmCdsBondBasisMid=None, BondPricingAnnualModifiedDuration=None, BondPricingAskPrice=None, BondPricingAskSpread=None, BondPricingAskYield=None, BondPricingBatchAsOf=None, BondPricingBatchCutoffTimezone=None, BondPricingBatchName=None, BondPricingBidPrice=None, BondPricingBidSpread=None, BondPricingBidYield=None, BondPricingCdsBondBasisAsOf=None, BondPricingLiquidityScore=None, BondPricingMidClosePrice=None, BondPricingMidCloseYield=None, BondPricingMidCloseZSpread=None, BondPricingQuotesCount=None, BondPricingReleaseTime=None, BondPricingStartTime=None, BondPricingUpdateTime=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.BondPricingActualCdsBondBasisMid = BondPricingActualCdsBondBasisMid
        self.BondPricingActualImmCdsBondBasisMid = BondPricingActualImmCdsBondBasisMid
        self.BondPricingAnnualModifiedDuration = BondPricingAnnualModifiedDuration
        self.BondPricingAskPrice = BondPricingAskPrice
        self.BondPricingAskSpread = BondPricingAskSpread
        self.BondPricingAskYield = BondPricingAskYield
        self.BondPricingBatchAsOf = BondPricingBatchAsOf
        self.BondPricingBatchCutoffTimezone = BondPricingBatchCutoffTimezone
        self.BondPricingBatchName = BondPricingBatchName
        self.BondPricingBidPrice = BondPricingBidPrice
        self.BondPricingBidSpread = BondPricingBidSpread
        self.BondPricingBidYield = BondPricingBidYield
        self.BondPricingCdsBondBasisAsOf = BondPricingCdsBondBasisAsOf
        self.BondPricingLiquidityScore = BondPricingLiquidityScore
        self.BondPricingMidClosePrice = BondPricingMidClosePrice
        self.BondPricingMidCloseYield = BondPricingMidCloseYield
        self.BondPricingMidCloseZSpread = BondPricingMidCloseZSpread
        self.BondPricingQuotesCount = BondPricingQuotesCount
        self.BondPricingReleaseTime = BondPricingReleaseTime
        self.BondPricingStartTime = BondPricingStartTime
        self.BondPricingUpdateTime = BondPricingUpdateTime
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BondPricingType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BondPricingType.subclass:
            return BondPricingType.subclass(*args_, **kwargs_)
        else:
            return BondPricingType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BondPricingActualCdsBondBasisMid(self):
        return self.BondPricingActualCdsBondBasisMid
    def set_BondPricingActualCdsBondBasisMid(self, BondPricingActualCdsBondBasisMid):
        self.BondPricingActualCdsBondBasisMid = BondPricingActualCdsBondBasisMid
    def get_BondPricingActualImmCdsBondBasisMid(self):
        return self.BondPricingActualImmCdsBondBasisMid
    def set_BondPricingActualImmCdsBondBasisMid(self, BondPricingActualImmCdsBondBasisMid):
        self.BondPricingActualImmCdsBondBasisMid = BondPricingActualImmCdsBondBasisMid
    def get_BondPricingAnnualModifiedDuration(self):
        return self.BondPricingAnnualModifiedDuration
    def set_BondPricingAnnualModifiedDuration(self, BondPricingAnnualModifiedDuration):
        self.BondPricingAnnualModifiedDuration = BondPricingAnnualModifiedDuration
    def get_BondPricingAskPrice(self):
        return self.BondPricingAskPrice
    def set_BondPricingAskPrice(self, BondPricingAskPrice):
        self.BondPricingAskPrice = BondPricingAskPrice
    def get_BondPricingAskSpread(self):
        return self.BondPricingAskSpread
    def set_BondPricingAskSpread(self, BondPricingAskSpread):
        self.BondPricingAskSpread = BondPricingAskSpread
    def get_BondPricingAskYield(self):
        return self.BondPricingAskYield
    def set_BondPricingAskYield(self, BondPricingAskYield):
        self.BondPricingAskYield = BondPricingAskYield
    def get_BondPricingBatchAsOf(self):
        return self.BondPricingBatchAsOf
    def set_BondPricingBatchAsOf(self, BondPricingBatchAsOf):
        self.BondPricingBatchAsOf = BondPricingBatchAsOf
    def get_BondPricingBatchCutoffTimezone(self):
        return self.BondPricingBatchCutoffTimezone
    def set_BondPricingBatchCutoffTimezone(self, BondPricingBatchCutoffTimezone):
        self.BondPricingBatchCutoffTimezone = BondPricingBatchCutoffTimezone
    def get_BondPricingBatchName(self):
        return self.BondPricingBatchName
    def set_BondPricingBatchName(self, BondPricingBatchName):
        self.BondPricingBatchName = BondPricingBatchName
    def get_BondPricingBidPrice(self):
        return self.BondPricingBidPrice
    def set_BondPricingBidPrice(self, BondPricingBidPrice):
        self.BondPricingBidPrice = BondPricingBidPrice
    def get_BondPricingBidSpread(self):
        return self.BondPricingBidSpread
    def set_BondPricingBidSpread(self, BondPricingBidSpread):
        self.BondPricingBidSpread = BondPricingBidSpread
    def get_BondPricingBidYield(self):
        return self.BondPricingBidYield
    def set_BondPricingBidYield(self, BondPricingBidYield):
        self.BondPricingBidYield = BondPricingBidYield
    def get_BondPricingCdsBondBasisAsOf(self):
        return self.BondPricingCdsBondBasisAsOf
    def set_BondPricingCdsBondBasisAsOf(self, BondPricingCdsBondBasisAsOf):
        self.BondPricingCdsBondBasisAsOf = BondPricingCdsBondBasisAsOf
    def get_BondPricingLiquidityScore(self):
        return self.BondPricingLiquidityScore
    def set_BondPricingLiquidityScore(self, BondPricingLiquidityScore):
        self.BondPricingLiquidityScore = BondPricingLiquidityScore
    def get_BondPricingMidClosePrice(self):
        return self.BondPricingMidClosePrice
    def set_BondPricingMidClosePrice(self, BondPricingMidClosePrice):
        self.BondPricingMidClosePrice = BondPricingMidClosePrice
    def get_BondPricingMidCloseYield(self):
        return self.BondPricingMidCloseYield
    def set_BondPricingMidCloseYield(self, BondPricingMidCloseYield):
        self.BondPricingMidCloseYield = BondPricingMidCloseYield
    def get_BondPricingMidCloseZSpread(self):
        return self.BondPricingMidCloseZSpread
    def set_BondPricingMidCloseZSpread(self, BondPricingMidCloseZSpread):
        self.BondPricingMidCloseZSpread = BondPricingMidCloseZSpread
    def get_BondPricingQuotesCount(self):
        return self.BondPricingQuotesCount
    def set_BondPricingQuotesCount(self, BondPricingQuotesCount):
        self.BondPricingQuotesCount = BondPricingQuotesCount
    def get_BondPricingReleaseTime(self):
        return self.BondPricingReleaseTime
    def set_BondPricingReleaseTime(self, BondPricingReleaseTime):
        self.BondPricingReleaseTime = BondPricingReleaseTime
    def get_BondPricingStartTime(self):
        return self.BondPricingStartTime
    def set_BondPricingStartTime(self, BondPricingStartTime):
        self.BondPricingStartTime = BondPricingStartTime
    def get_BondPricingUpdateTime(self):
        return self.BondPricingUpdateTime
    def set_BondPricingUpdateTime(self, BondPricingUpdateTime):
        self.BondPricingUpdateTime = BondPricingUpdateTime
    def hasContent_(self):
        if (
            self.BondPricingActualCdsBondBasisMid is not None or
            self.BondPricingActualImmCdsBondBasisMid is not None or
            self.BondPricingAnnualModifiedDuration is not None or
            self.BondPricingAskPrice is not None or
            self.BondPricingAskSpread is not None or
            self.BondPricingAskYield is not None or
            self.BondPricingBatchAsOf is not None or
            self.BondPricingBatchCutoffTimezone is not None or
            self.BondPricingBatchName is not None or
            self.BondPricingBidPrice is not None or
            self.BondPricingBidSpread is not None or
            self.BondPricingBidYield is not None or
            self.BondPricingCdsBondBasisAsOf is not None or
            self.BondPricingLiquidityScore is not None or
            self.BondPricingMidClosePrice is not None or
            self.BondPricingMidCloseYield is not None or
            self.BondPricingMidCloseZSpread is not None or
            self.BondPricingQuotesCount is not None or
            self.BondPricingReleaseTime is not None or
            self.BondPricingStartTime is not None or
            self.BondPricingUpdateTime is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BondPricingType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BondPricingType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BondPricingType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BondPricingType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BondPricingType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BondPricingType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BondPricingActualCdsBondBasisMid is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingActualCdsBondBasisMid>%s</%sBondPricingActualCdsBondBasisMid>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingActualCdsBondBasisMid), input_name='BondPricingActualCdsBondBasisMid')), namespaceprefix_ , eol_))
        if self.BondPricingActualImmCdsBondBasisMid is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingActualImmCdsBondBasisMid>%s</%sBondPricingActualImmCdsBondBasisMid>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingActualImmCdsBondBasisMid), input_name='BondPricingActualImmCdsBondBasisMid')), namespaceprefix_ , eol_))
        if self.BondPricingAnnualModifiedDuration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingAnnualModifiedDuration>%s</%sBondPricingAnnualModifiedDuration>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingAnnualModifiedDuration), input_name='BondPricingAnnualModifiedDuration')), namespaceprefix_ , eol_))
        if self.BondPricingAskPrice is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingAskPrice>%s</%sBondPricingAskPrice>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingAskPrice), input_name='BondPricingAskPrice')), namespaceprefix_ , eol_))
        if self.BondPricingAskSpread is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingAskSpread>%s</%sBondPricingAskSpread>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingAskSpread), input_name='BondPricingAskSpread')), namespaceprefix_ , eol_))
        if self.BondPricingAskYield is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingAskYield>%s</%sBondPricingAskYield>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingAskYield), input_name='BondPricingAskYield')), namespaceprefix_ , eol_))
        if self.BondPricingBatchAsOf is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingBatchAsOf>%s</%sBondPricingBatchAsOf>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingBatchAsOf), input_name='BondPricingBatchAsOf')), namespaceprefix_ , eol_))
        if self.BondPricingBatchCutoffTimezone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingBatchCutoffTimezone>%s</%sBondPricingBatchCutoffTimezone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingBatchCutoffTimezone), input_name='BondPricingBatchCutoffTimezone')), namespaceprefix_ , eol_))
        if self.BondPricingBatchName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingBatchName>%s</%sBondPricingBatchName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingBatchName), input_name='BondPricingBatchName')), namespaceprefix_ , eol_))
        if self.BondPricingBidPrice is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingBidPrice>%s</%sBondPricingBidPrice>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingBidPrice), input_name='BondPricingBidPrice')), namespaceprefix_ , eol_))
        if self.BondPricingBidSpread is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingBidSpread>%s</%sBondPricingBidSpread>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingBidSpread), input_name='BondPricingBidSpread')), namespaceprefix_ , eol_))
        if self.BondPricingBidYield is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingBidYield>%s</%sBondPricingBidYield>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingBidYield), input_name='BondPricingBidYield')), namespaceprefix_ , eol_))
        if self.BondPricingCdsBondBasisAsOf is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingCdsBondBasisAsOf>%s</%sBondPricingCdsBondBasisAsOf>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingCdsBondBasisAsOf), input_name='BondPricingCdsBondBasisAsOf')), namespaceprefix_ , eol_))
        if self.BondPricingLiquidityScore is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingLiquidityScore>%s</%sBondPricingLiquidityScore>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingLiquidityScore), input_name='BondPricingLiquidityScore')), namespaceprefix_ , eol_))
        if self.BondPricingMidClosePrice is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingMidClosePrice>%s</%sBondPricingMidClosePrice>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingMidClosePrice), input_name='BondPricingMidClosePrice')), namespaceprefix_ , eol_))
        if self.BondPricingMidCloseYield is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingMidCloseYield>%s</%sBondPricingMidCloseYield>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingMidCloseYield), input_name='BondPricingMidCloseYield')), namespaceprefix_ , eol_))
        if self.BondPricingMidCloseZSpread is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingMidCloseZSpread>%s</%sBondPricingMidCloseZSpread>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingMidCloseZSpread), input_name='BondPricingMidCloseZSpread')), namespaceprefix_ , eol_))
        if self.BondPricingQuotesCount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingQuotesCount>%s</%sBondPricingQuotesCount>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingQuotesCount), input_name='BondPricingQuotesCount')), namespaceprefix_ , eol_))
        if self.BondPricingReleaseTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingReleaseTime>%s</%sBondPricingReleaseTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingReleaseTime), input_name='BondPricingReleaseTime')), namespaceprefix_ , eol_))
        if self.BondPricingStartTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingStartTime>%s</%sBondPricingStartTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingStartTime), input_name='BondPricingStartTime')), namespaceprefix_ , eol_))
        if self.BondPricingUpdateTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingUpdateTime>%s</%sBondPricingUpdateTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingUpdateTime), input_name='BondPricingUpdateTime')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BondPricingActualCdsBondBasisMid':
            BondPricingActualCdsBondBasisMid_ = child_.text
            BondPricingActualCdsBondBasisMid_ = self.gds_validate_string(BondPricingActualCdsBondBasisMid_, node, 'BondPricingActualCdsBondBasisMid')
            self.BondPricingActualCdsBondBasisMid = BondPricingActualCdsBondBasisMid_
        elif nodeName_ == 'BondPricingActualImmCdsBondBasisMid':
            BondPricingActualImmCdsBondBasisMid_ = child_.text
            BondPricingActualImmCdsBondBasisMid_ = self.gds_validate_string(BondPricingActualImmCdsBondBasisMid_, node, 'BondPricingActualImmCdsBondBasisMid')
            self.BondPricingActualImmCdsBondBasisMid = BondPricingActualImmCdsBondBasisMid_
        elif nodeName_ == 'BondPricingAnnualModifiedDuration':
            BondPricingAnnualModifiedDuration_ = child_.text
            BondPricingAnnualModifiedDuration_ = self.gds_validate_string(BondPricingAnnualModifiedDuration_, node, 'BondPricingAnnualModifiedDuration')
            self.BondPricingAnnualModifiedDuration = BondPricingAnnualModifiedDuration_
        elif nodeName_ == 'BondPricingAskPrice':
            BondPricingAskPrice_ = child_.text
            BondPricingAskPrice_ = self.gds_validate_string(BondPricingAskPrice_, node, 'BondPricingAskPrice')
            self.BondPricingAskPrice = BondPricingAskPrice_
        elif nodeName_ == 'BondPricingAskSpread':
            BondPricingAskSpread_ = child_.text
            BondPricingAskSpread_ = self.gds_validate_string(BondPricingAskSpread_, node, 'BondPricingAskSpread')
            self.BondPricingAskSpread = BondPricingAskSpread_
        elif nodeName_ == 'BondPricingAskYield':
            BondPricingAskYield_ = child_.text
            BondPricingAskYield_ = self.gds_validate_string(BondPricingAskYield_, node, 'BondPricingAskYield')
            self.BondPricingAskYield = BondPricingAskYield_
        elif nodeName_ == 'BondPricingBatchAsOf':
            BondPricingBatchAsOf_ = child_.text
            BondPricingBatchAsOf_ = self.gds_validate_string(BondPricingBatchAsOf_, node, 'BondPricingBatchAsOf')
            self.BondPricingBatchAsOf = BondPricingBatchAsOf_
        elif nodeName_ == 'BondPricingBatchCutoffTimezone':
            BondPricingBatchCutoffTimezone_ = child_.text
            BondPricingBatchCutoffTimezone_ = self.gds_validate_string(BondPricingBatchCutoffTimezone_, node, 'BondPricingBatchCutoffTimezone')
            self.BondPricingBatchCutoffTimezone = BondPricingBatchCutoffTimezone_
        elif nodeName_ == 'BondPricingBatchName':
            BondPricingBatchName_ = child_.text
            BondPricingBatchName_ = self.gds_validate_string(BondPricingBatchName_, node, 'BondPricingBatchName')
            self.BondPricingBatchName = BondPricingBatchName_
        elif nodeName_ == 'BondPricingBidPrice':
            BondPricingBidPrice_ = child_.text
            BondPricingBidPrice_ = self.gds_validate_string(BondPricingBidPrice_, node, 'BondPricingBidPrice')
            self.BondPricingBidPrice = BondPricingBidPrice_
        elif nodeName_ == 'BondPricingBidSpread':
            BondPricingBidSpread_ = child_.text
            BondPricingBidSpread_ = self.gds_validate_string(BondPricingBidSpread_, node, 'BondPricingBidSpread')
            self.BondPricingBidSpread = BondPricingBidSpread_
        elif nodeName_ == 'BondPricingBidYield':
            BondPricingBidYield_ = child_.text
            BondPricingBidYield_ = self.gds_validate_string(BondPricingBidYield_, node, 'BondPricingBidYield')
            self.BondPricingBidYield = BondPricingBidYield_
        elif nodeName_ == 'BondPricingCdsBondBasisAsOf':
            BondPricingCdsBondBasisAsOf_ = child_.text
            BondPricingCdsBondBasisAsOf_ = self.gds_validate_string(BondPricingCdsBondBasisAsOf_, node, 'BondPricingCdsBondBasisAsOf')
            self.BondPricingCdsBondBasisAsOf = BondPricingCdsBondBasisAsOf_
        elif nodeName_ == 'BondPricingLiquidityScore':
            BondPricingLiquidityScore_ = child_.text
            BondPricingLiquidityScore_ = self.gds_validate_string(BondPricingLiquidityScore_, node, 'BondPricingLiquidityScore')
            self.BondPricingLiquidityScore = BondPricingLiquidityScore_
        elif nodeName_ == 'BondPricingMidClosePrice':
            BondPricingMidClosePrice_ = child_.text
            BondPricingMidClosePrice_ = self.gds_validate_string(BondPricingMidClosePrice_, node, 'BondPricingMidClosePrice')
            self.BondPricingMidClosePrice = BondPricingMidClosePrice_
        elif nodeName_ == 'BondPricingMidCloseYield':
            BondPricingMidCloseYield_ = child_.text
            BondPricingMidCloseYield_ = self.gds_validate_string(BondPricingMidCloseYield_, node, 'BondPricingMidCloseYield')
            self.BondPricingMidCloseYield = BondPricingMidCloseYield_
        elif nodeName_ == 'BondPricingMidCloseZSpread':
            BondPricingMidCloseZSpread_ = child_.text
            BondPricingMidCloseZSpread_ = self.gds_validate_string(BondPricingMidCloseZSpread_, node, 'BondPricingMidCloseZSpread')
            self.BondPricingMidCloseZSpread = BondPricingMidCloseZSpread_
        elif nodeName_ == 'BondPricingQuotesCount':
            BondPricingQuotesCount_ = child_.text
            BondPricingQuotesCount_ = self.gds_validate_string(BondPricingQuotesCount_, node, 'BondPricingQuotesCount')
            self.BondPricingQuotesCount = BondPricingQuotesCount_
        elif nodeName_ == 'BondPricingReleaseTime':
            BondPricingReleaseTime_ = child_.text
            BondPricingReleaseTime_ = self.gds_validate_string(BondPricingReleaseTime_, node, 'BondPricingReleaseTime')
            self.BondPricingReleaseTime = BondPricingReleaseTime_
        elif nodeName_ == 'BondPricingStartTime':
            BondPricingStartTime_ = child_.text
            BondPricingStartTime_ = self.gds_validate_string(BondPricingStartTime_, node, 'BondPricingStartTime')
            self.BondPricingStartTime = BondPricingStartTime_
        elif nodeName_ == 'BondPricingUpdateTime':
            BondPricingUpdateTime_ = child_.text
            BondPricingUpdateTime_ = self.gds_validate_string(BondPricingUpdateTime_, node, 'BondPricingUpdateTime')
            self.BondPricingUpdateTime = BondPricingUpdateTime_
# end class BondPricingType


class InstrumentDataType124(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BondPricingCurrency=None, BondPricingCusip=None, BondPricingInstrumentId=None, BondPricingInstrumentLongName=None, BondPricingInstrumentName=None, BondPricingIsin=None, BondPricingMarketId=None, BondPricingMaturityDate=None, BondPricingSymbol=None, BondPricingTickerId=None, BondPricingTierIdentifier=None, BondPricingTierName=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.BondPricingCurrency = BondPricingCurrency
        self.BondPricingCusip = BondPricingCusip
        self.BondPricingInstrumentId = BondPricingInstrumentId
        self.BondPricingInstrumentLongName = BondPricingInstrumentLongName
        self.BondPricingInstrumentName = BondPricingInstrumentName
        self.BondPricingIsin = BondPricingIsin
        self.BondPricingMarketId = BondPricingMarketId
        self.BondPricingMaturityDate = BondPricingMaturityDate
        self.BondPricingSymbol = BondPricingSymbol
        self.BondPricingTickerId = BondPricingTickerId
        self.BondPricingTierIdentifier = BondPricingTierIdentifier
        self.BondPricingTierName = BondPricingTierName
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InstrumentDataType124)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InstrumentDataType124.subclass:
            return InstrumentDataType124.subclass(*args_, **kwargs_)
        else:
            return InstrumentDataType124(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BondPricingCurrency(self):
        return self.BondPricingCurrency
    def set_BondPricingCurrency(self, BondPricingCurrency):
        self.BondPricingCurrency = BondPricingCurrency
    def get_BondPricingCusip(self):
        return self.BondPricingCusip
    def set_BondPricingCusip(self, BondPricingCusip):
        self.BondPricingCusip = BondPricingCusip
    def get_BondPricingInstrumentId(self):
        return self.BondPricingInstrumentId
    def set_BondPricingInstrumentId(self, BondPricingInstrumentId):
        self.BondPricingInstrumentId = BondPricingInstrumentId
    def get_BondPricingInstrumentLongName(self):
        return self.BondPricingInstrumentLongName
    def set_BondPricingInstrumentLongName(self, BondPricingInstrumentLongName):
        self.BondPricingInstrumentLongName = BondPricingInstrumentLongName
    def get_BondPricingInstrumentName(self):
        return self.BondPricingInstrumentName
    def set_BondPricingInstrumentName(self, BondPricingInstrumentName):
        self.BondPricingInstrumentName = BondPricingInstrumentName
    def get_BondPricingIsin(self):
        return self.BondPricingIsin
    def set_BondPricingIsin(self, BondPricingIsin):
        self.BondPricingIsin = BondPricingIsin
    def get_BondPricingMarketId(self):
        return self.BondPricingMarketId
    def set_BondPricingMarketId(self, BondPricingMarketId):
        self.BondPricingMarketId = BondPricingMarketId
    def get_BondPricingMaturityDate(self):
        return self.BondPricingMaturityDate
    def set_BondPricingMaturityDate(self, BondPricingMaturityDate):
        self.BondPricingMaturityDate = BondPricingMaturityDate
    def get_BondPricingSymbol(self):
        return self.BondPricingSymbol
    def set_BondPricingSymbol(self, BondPricingSymbol):
        self.BondPricingSymbol = BondPricingSymbol
    def get_BondPricingTickerId(self):
        return self.BondPricingTickerId
    def set_BondPricingTickerId(self, BondPricingTickerId):
        self.BondPricingTickerId = BondPricingTickerId
    def get_BondPricingTierIdentifier(self):
        return self.BondPricingTierIdentifier
    def set_BondPricingTierIdentifier(self, BondPricingTierIdentifier):
        self.BondPricingTierIdentifier = BondPricingTierIdentifier
    def get_BondPricingTierName(self):
        return self.BondPricingTierName
    def set_BondPricingTierName(self, BondPricingTierName):
        self.BondPricingTierName = BondPricingTierName
    def hasContent_(self):
        if (
            self.BondPricingCurrency is not None or
            self.BondPricingCusip is not None or
            self.BondPricingInstrumentId is not None or
            self.BondPricingInstrumentLongName is not None or
            self.BondPricingInstrumentName is not None or
            self.BondPricingIsin is not None or
            self.BondPricingMarketId is not None or
            self.BondPricingMaturityDate is not None or
            self.BondPricingSymbol is not None or
            self.BondPricingTickerId is not None or
            self.BondPricingTierIdentifier is not None or
            self.BondPricingTierName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentDataType124', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InstrumentDataType124')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InstrumentDataType124')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InstrumentDataType124', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InstrumentDataType124'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentDataType124', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BondPricingCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingCurrency>%s</%sBondPricingCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingCurrency), input_name='BondPricingCurrency')), namespaceprefix_ , eol_))
        if self.BondPricingCusip is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingCusip>%s</%sBondPricingCusip>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingCusip), input_name='BondPricingCusip')), namespaceprefix_ , eol_))
        if self.BondPricingInstrumentId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingInstrumentId>%s</%sBondPricingInstrumentId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingInstrumentId), input_name='BondPricingInstrumentId')), namespaceprefix_ , eol_))
        if self.BondPricingInstrumentLongName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingInstrumentLongName>%s</%sBondPricingInstrumentLongName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingInstrumentLongName), input_name='BondPricingInstrumentLongName')), namespaceprefix_ , eol_))
        if self.BondPricingInstrumentName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingInstrumentName>%s</%sBondPricingInstrumentName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingInstrumentName), input_name='BondPricingInstrumentName')), namespaceprefix_ , eol_))
        if self.BondPricingIsin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingIsin>%s</%sBondPricingIsin>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingIsin), input_name='BondPricingIsin')), namespaceprefix_ , eol_))
        if self.BondPricingMarketId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingMarketId>%s</%sBondPricingMarketId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingMarketId), input_name='BondPricingMarketId')), namespaceprefix_ , eol_))
        if self.BondPricingMaturityDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingMaturityDate>%s</%sBondPricingMaturityDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingMaturityDate), input_name='BondPricingMaturityDate')), namespaceprefix_ , eol_))
        if self.BondPricingSymbol is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingSymbol>%s</%sBondPricingSymbol>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingSymbol), input_name='BondPricingSymbol')), namespaceprefix_ , eol_))
        if self.BondPricingTickerId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingTickerId>%s</%sBondPricingTickerId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingTickerId), input_name='BondPricingTickerId')), namespaceprefix_ , eol_))
        if self.BondPricingTierIdentifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingTierIdentifier>%s</%sBondPricingTierIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingTierIdentifier), input_name='BondPricingTierIdentifier')), namespaceprefix_ , eol_))
        if self.BondPricingTierName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBondPricingTierName>%s</%sBondPricingTierName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BondPricingTierName), input_name='BondPricingTierName')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BondPricingCurrency':
            BondPricingCurrency_ = child_.text
            BondPricingCurrency_ = self.gds_validate_string(BondPricingCurrency_, node, 'BondPricingCurrency')
            self.BondPricingCurrency = BondPricingCurrency_
        elif nodeName_ == 'BondPricingCusip':
            BondPricingCusip_ = child_.text
            BondPricingCusip_ = self.gds_validate_string(BondPricingCusip_, node, 'BondPricingCusip')
            self.BondPricingCusip = BondPricingCusip_
        elif nodeName_ == 'BondPricingInstrumentId':
            BondPricingInstrumentId_ = child_.text
            BondPricingInstrumentId_ = self.gds_validate_string(BondPricingInstrumentId_, node, 'BondPricingInstrumentId')
            self.BondPricingInstrumentId = BondPricingInstrumentId_
        elif nodeName_ == 'BondPricingInstrumentLongName':
            BondPricingInstrumentLongName_ = child_.text
            BondPricingInstrumentLongName_ = self.gds_validate_string(BondPricingInstrumentLongName_, node, 'BondPricingInstrumentLongName')
            self.BondPricingInstrumentLongName = BondPricingInstrumentLongName_
        elif nodeName_ == 'BondPricingInstrumentName':
            BondPricingInstrumentName_ = child_.text
            BondPricingInstrumentName_ = self.gds_validate_string(BondPricingInstrumentName_, node, 'BondPricingInstrumentName')
            self.BondPricingInstrumentName = BondPricingInstrumentName_
        elif nodeName_ == 'BondPricingIsin':
            BondPricingIsin_ = child_.text
            BondPricingIsin_ = self.gds_validate_string(BondPricingIsin_, node, 'BondPricingIsin')
            self.BondPricingIsin = BondPricingIsin_
        elif nodeName_ == 'BondPricingMarketId':
            BondPricingMarketId_ = child_.text
            BondPricingMarketId_ = self.gds_validate_string(BondPricingMarketId_, node, 'BondPricingMarketId')
            self.BondPricingMarketId = BondPricingMarketId_
        elif nodeName_ == 'BondPricingMaturityDate':
            BondPricingMaturityDate_ = child_.text
            BondPricingMaturityDate_ = self.gds_validate_string(BondPricingMaturityDate_, node, 'BondPricingMaturityDate')
            self.BondPricingMaturityDate = BondPricingMaturityDate_
        elif nodeName_ == 'BondPricingSymbol':
            BondPricingSymbol_ = child_.text
            BondPricingSymbol_ = self.gds_validate_string(BondPricingSymbol_, node, 'BondPricingSymbol')
            self.BondPricingSymbol = BondPricingSymbol_
        elif nodeName_ == 'BondPricingTickerId':
            BondPricingTickerId_ = child_.text
            BondPricingTickerId_ = self.gds_validate_string(BondPricingTickerId_, node, 'BondPricingTickerId')
            self.BondPricingTickerId = BondPricingTickerId_
        elif nodeName_ == 'BondPricingTierIdentifier':
            BondPricingTierIdentifier_ = child_.text
            BondPricingTierIdentifier_ = self.gds_validate_string(BondPricingTierIdentifier_, node, 'BondPricingTierIdentifier')
            self.BondPricingTierIdentifier = BondPricingTierIdentifier_
        elif nodeName_ == 'BondPricingTierName':
            BondPricingTierName_ = child_.text
            BondPricingTierName_ = self.gds_validate_string(BondPricingTierName_, node, 'BondPricingTierName')
            self.BondPricingTierName = BondPricingTierName_
# end class InstrumentDataType124


class DataDateType125(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType125)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType125.subclass:
            return DataDateType125.subclass(*args_, **kwargs_)
        else:
            return DataDateType125(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType125', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType125')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType125')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType125', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType125'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType125', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType126.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType125


class GeneralType126(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DividendAnnouncementDate=None, DividendComment=None, DividendConfirmed=None, DividendCurrency=None, DividendExDate=None, DividendPaymentDate=None, DividendPerShare=None, DividendRecordDate=None, DividendScripOptional=None, DividendType=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(DividendAnnouncementDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DividendAnnouncementDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DividendAnnouncementDate
        self.DividendAnnouncementDate = initvalue_
        self.DividendComment = DividendComment
        self.DividendConfirmed = DividendConfirmed
        self.DividendCurrency = DividendCurrency
        if isinstance(DividendExDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DividendExDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DividendExDate
        self.DividendExDate = initvalue_
        if isinstance(DividendPaymentDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DividendPaymentDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DividendPaymentDate
        self.DividendPaymentDate = initvalue_
        self.DividendPerShare = DividendPerShare
        if isinstance(DividendRecordDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DividendRecordDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DividendRecordDate
        self.DividendRecordDate = initvalue_
        self.DividendScripOptional = DividendScripOptional
        self.DividendType = DividendType
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType126)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType126.subclass:
            return GeneralType126.subclass(*args_, **kwargs_)
        else:
            return GeneralType126(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DividendAnnouncementDate(self):
        return self.DividendAnnouncementDate
    def set_DividendAnnouncementDate(self, DividendAnnouncementDate):
        self.DividendAnnouncementDate = DividendAnnouncementDate
    def get_DividendComment(self):
        return self.DividendComment
    def set_DividendComment(self, DividendComment):
        self.DividendComment = DividendComment
    def get_DividendConfirmed(self):
        return self.DividendConfirmed
    def set_DividendConfirmed(self, DividendConfirmed):
        self.DividendConfirmed = DividendConfirmed
    def get_DividendCurrency(self):
        return self.DividendCurrency
    def set_DividendCurrency(self, DividendCurrency):
        self.DividendCurrency = DividendCurrency
    def get_DividendExDate(self):
        return self.DividendExDate
    def set_DividendExDate(self, DividendExDate):
        self.DividendExDate = DividendExDate
    def get_DividendPaymentDate(self):
        return self.DividendPaymentDate
    def set_DividendPaymentDate(self, DividendPaymentDate):
        self.DividendPaymentDate = DividendPaymentDate
    def get_DividendPerShare(self):
        return self.DividendPerShare
    def set_DividendPerShare(self, DividendPerShare):
        self.DividendPerShare = DividendPerShare
    def get_DividendRecordDate(self):
        return self.DividendRecordDate
    def set_DividendRecordDate(self, DividendRecordDate):
        self.DividendRecordDate = DividendRecordDate
    def get_DividendScripOptional(self):
        return self.DividendScripOptional
    def set_DividendScripOptional(self, DividendScripOptional):
        self.DividendScripOptional = DividendScripOptional
    def get_DividendType(self):
        return self.DividendType
    def set_DividendType(self, DividendType):
        self.DividendType = DividendType
    def hasContent_(self):
        if (
            self.DividendAnnouncementDate is not None or
            self.DividendComment is not None or
            self.DividendConfirmed is not None or
            self.DividendCurrency is not None or
            self.DividendExDate is not None or
            self.DividendPaymentDate is not None or
            self.DividendPerShare is not None or
            self.DividendRecordDate is not None or
            self.DividendScripOptional is not None or
            self.DividendType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType126', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType126')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType126')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType126', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType126'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType126', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DividendAnnouncementDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividendAnnouncementDate>%s</%sDividendAnnouncementDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DividendAnnouncementDate, input_name='DividendAnnouncementDate'), namespaceprefix_ , eol_))
        if self.DividendComment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividendComment>%s</%sDividendComment>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DividendComment), input_name='DividendComment')), namespaceprefix_ , eol_))
        if self.DividendConfirmed is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividendConfirmed>%s</%sDividendConfirmed>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DividendConfirmed), input_name='DividendConfirmed')), namespaceprefix_ , eol_))
        if self.DividendCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividendCurrency>%s</%sDividendCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DividendCurrency), input_name='DividendCurrency')), namespaceprefix_ , eol_))
        if self.DividendExDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividendExDate>%s</%sDividendExDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DividendExDate, input_name='DividendExDate'), namespaceprefix_ , eol_))
        if self.DividendPaymentDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividendPaymentDate>%s</%sDividendPaymentDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DividendPaymentDate, input_name='DividendPaymentDate'), namespaceprefix_ , eol_))
        if self.DividendPerShare is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividendPerShare>%s</%sDividendPerShare>%s' % (namespaceprefix_ , self.gds_format_float(self.DividendPerShare, input_name='DividendPerShare'), namespaceprefix_ , eol_))
        if self.DividendRecordDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividendRecordDate>%s</%sDividendRecordDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DividendRecordDate, input_name='DividendRecordDate'), namespaceprefix_ , eol_))
        if self.DividendScripOptional is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividendScripOptional>%s</%sDividendScripOptional>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DividendScripOptional), input_name='DividendScripOptional')), namespaceprefix_ , eol_))
        if self.DividendType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividendType>%s</%sDividendType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DividendType), input_name='DividendType')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DividendAnnouncementDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DividendAnnouncementDate = dval_
        elif nodeName_ == 'DividendComment':
            DividendComment_ = child_.text
            DividendComment_ = self.gds_validate_string(DividendComment_, node, 'DividendComment')
            self.DividendComment = DividendComment_
        elif nodeName_ == 'DividendConfirmed':
            DividendConfirmed_ = child_.text
            DividendConfirmed_ = self.gds_validate_string(DividendConfirmed_, node, 'DividendConfirmed')
            self.DividendConfirmed = DividendConfirmed_
        elif nodeName_ == 'DividendCurrency':
            DividendCurrency_ = child_.text
            DividendCurrency_ = self.gds_validate_string(DividendCurrency_, node, 'DividendCurrency')
            self.DividendCurrency = DividendCurrency_
        elif nodeName_ == 'DividendExDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DividendExDate = dval_
        elif nodeName_ == 'DividendPaymentDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DividendPaymentDate = dval_
        elif nodeName_ == 'DividendPerShare' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DividendPerShare')
            self.DividendPerShare = fval_
        elif nodeName_ == 'DividendRecordDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DividendRecordDate = dval_
        elif nodeName_ == 'DividendScripOptional':
            DividendScripOptional_ = child_.text
            DividendScripOptional_ = self.gds_validate_string(DividendScripOptional_, node, 'DividendScripOptional')
            self.DividendScripOptional = DividendScripOptional_
        elif nodeName_ == 'DividendType':
            DividendType_ = child_.text
            DividendType_ = self.gds_validate_string(DividendType_, node, 'DividendType')
            self.DividendType = DividendType_
# end class GeneralType126


class DataDateType127(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, ActiveInventory=None, CollateralData=None, General=None, Indicators=None, Inventory=None, MarketColour=None, Metrics=None, RateBuckets=None, Rerate=None, Trading=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.ActiveInventory = ActiveInventory
        self.CollateralData = CollateralData
        self.General = General
        self.Indicators = Indicators
        self.Inventory = Inventory
        self.MarketColour = MarketColour
        self.Metrics = Metrics
        self.RateBuckets = RateBuckets
        self.Rerate = Rerate
        self.Trading = Trading
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType127)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType127.subclass:
            return DataDateType127.subclass(*args_, **kwargs_)
        else:
            return DataDateType127(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ActiveInventory(self):
        return self.ActiveInventory
    def set_ActiveInventory(self, ActiveInventory):
        self.ActiveInventory = ActiveInventory
    def get_CollateralData(self):
        return self.CollateralData
    def set_CollateralData(self, CollateralData):
        self.CollateralData = CollateralData
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_Indicators(self):
        return self.Indicators
    def set_Indicators(self, Indicators):
        self.Indicators = Indicators
    def get_Inventory(self):
        return self.Inventory
    def set_Inventory(self, Inventory):
        self.Inventory = Inventory
    def get_MarketColour(self):
        return self.MarketColour
    def set_MarketColour(self, MarketColour):
        self.MarketColour = MarketColour
    def get_Metrics(self):
        return self.Metrics
    def set_Metrics(self, Metrics):
        self.Metrics = Metrics
    def get_RateBuckets(self):
        return self.RateBuckets
    def set_RateBuckets(self, RateBuckets):
        self.RateBuckets = RateBuckets
    def get_Rerate(self):
        return self.Rerate
    def set_Rerate(self, Rerate):
        self.Rerate = Rerate
    def get_Trading(self):
        return self.Trading
    def set_Trading(self, Trading):
        self.Trading = Trading
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.ActiveInventory is not None or
            self.CollateralData is not None or
            self.General is not None or
            self.Indicators is not None or
            self.Inventory is not None or
            self.MarketColour is not None or
            self.Metrics is not None or
            self.RateBuckets is not None or
            self.Rerate is not None or
            self.Trading is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType127', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType127')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType127')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType127', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType127'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType127', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ActiveInventory is not None:
            self.ActiveInventory.export(outfile, level, namespaceprefix_, name_='ActiveInventory', pretty_print=pretty_print)
        if self.CollateralData is not None:
            self.CollateralData.export(outfile, level, namespaceprefix_, name_='CollateralData', pretty_print=pretty_print)
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
        if self.Indicators is not None:
            self.Indicators.export(outfile, level, namespaceprefix_, name_='Indicators', pretty_print=pretty_print)
        if self.Inventory is not None:
            self.Inventory.export(outfile, level, namespaceprefix_, name_='Inventory', pretty_print=pretty_print)
        if self.MarketColour is not None:
            self.MarketColour.export(outfile, level, namespaceprefix_, name_='MarketColour', pretty_print=pretty_print)
        if self.Metrics is not None:
            self.Metrics.export(outfile, level, namespaceprefix_, name_='Metrics', pretty_print=pretty_print)
        if self.RateBuckets is not None:
            self.RateBuckets.export(outfile, level, namespaceprefix_, name_='RateBuckets', pretty_print=pretty_print)
        if self.Rerate is not None:
            self.Rerate.export(outfile, level, namespaceprefix_, name_='Rerate', pretty_print=pretty_print)
        if self.Trading is not None:
            self.Trading.export(outfile, level, namespaceprefix_, name_='Trading', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ActiveInventory':
            obj_ = ActiveInventoryType128.factory(parent_object_=self)
            obj_.build(child_)
            self.ActiveInventory = obj_
            obj_.original_tagname_ = 'ActiveInventory'
        elif nodeName_ == 'CollateralData':
            obj_ = CollateralDataType.factory(parent_object_=self)
            obj_.build(child_)
            self.CollateralData = obj_
            obj_.original_tagname_ = 'CollateralData'
        elif nodeName_ == 'General':
            obj_ = GeneralType130.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
        elif nodeName_ == 'Indicators':
            obj_ = IndicatorsType.factory(parent_object_=self)
            obj_.build(child_)
            self.Indicators = obj_
            obj_.original_tagname_ = 'Indicators'
        elif nodeName_ == 'Inventory':
            obj_ = InventoryType131.factory(parent_object_=self)
            obj_.build(child_)
            self.Inventory = obj_
            obj_.original_tagname_ = 'Inventory'
        elif nodeName_ == 'MarketColour':
            obj_ = MarketColourType134.factory(parent_object_=self)
            obj_.build(child_)
            self.MarketColour = obj_
            obj_.original_tagname_ = 'MarketColour'
        elif nodeName_ == 'Metrics':
            obj_ = MetricsType136.factory(parent_object_=self)
            obj_.build(child_)
            self.Metrics = obj_
            obj_.original_tagname_ = 'Metrics'
        elif nodeName_ == 'RateBuckets':
            obj_ = RateBucketsType.factory(parent_object_=self)
            obj_.build(child_)
            self.RateBuckets = obj_
            obj_.original_tagname_ = 'RateBuckets'
        elif nodeName_ == 'Rerate':
            obj_ = RerateType139.factory(parent_object_=self)
            obj_.build(child_)
            self.Rerate = obj_
            obj_.original_tagname_ = 'Rerate'
        elif nodeName_ == 'Trading':
            obj_ = TradingType140.factory(parent_object_=self)
            obj_.build(child_)
            self.Trading = obj_
            obj_.original_tagname_ = 'Trading'
# end class DataDateType127


class ActiveInventoryType128(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ActiveAvailableQuantity=None, ActiveAvailableRatio=None, ActiveAvailableValue=None, ActiveLendableAsPcFreeFloatQuantity=None, ActiveLendableAsPcFreeFloatValue=None, ActiveLendableAsPcMarketCap=None, ActiveLendableAsPcSharesOutstanding=None, ActiveLendableQuantity=None, ActiveLendableValue=None, ActiveUtilisation=None, ActiveUtilisationByQuantity=None, Delta=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ActiveAvailableQuantity = ActiveAvailableQuantity
        self.ActiveAvailableRatio = ActiveAvailableRatio
        self.ActiveAvailableValue = ActiveAvailableValue
        self.ActiveLendableAsPcFreeFloatQuantity = ActiveLendableAsPcFreeFloatQuantity
        self.ActiveLendableAsPcFreeFloatValue = ActiveLendableAsPcFreeFloatValue
        self.ActiveLendableAsPcMarketCap = ActiveLendableAsPcMarketCap
        self.ActiveLendableAsPcSharesOutstanding = ActiveLendableAsPcSharesOutstanding
        self.ActiveLendableQuantity = ActiveLendableQuantity
        self.ActiveLendableValue = ActiveLendableValue
        self.ActiveUtilisation = ActiveUtilisation
        self.ActiveUtilisationByQuantity = ActiveUtilisationByQuantity
        if Delta is None:
            self.Delta = []
        else:
            self.Delta = Delta
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ActiveInventoryType128)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ActiveInventoryType128.subclass:
            return ActiveInventoryType128.subclass(*args_, **kwargs_)
        else:
            return ActiveInventoryType128(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ActiveAvailableQuantity(self):
        return self.ActiveAvailableQuantity
    def set_ActiveAvailableQuantity(self, ActiveAvailableQuantity):
        self.ActiveAvailableQuantity = ActiveAvailableQuantity
    def get_ActiveAvailableRatio(self):
        return self.ActiveAvailableRatio
    def set_ActiveAvailableRatio(self, ActiveAvailableRatio):
        self.ActiveAvailableRatio = ActiveAvailableRatio
    def get_ActiveAvailableValue(self):
        return self.ActiveAvailableValue
    def set_ActiveAvailableValue(self, ActiveAvailableValue):
        self.ActiveAvailableValue = ActiveAvailableValue
    def get_ActiveLendableAsPcFreeFloatQuantity(self):
        return self.ActiveLendableAsPcFreeFloatQuantity
    def set_ActiveLendableAsPcFreeFloatQuantity(self, ActiveLendableAsPcFreeFloatQuantity):
        self.ActiveLendableAsPcFreeFloatQuantity = ActiveLendableAsPcFreeFloatQuantity
    def get_ActiveLendableAsPcFreeFloatValue(self):
        return self.ActiveLendableAsPcFreeFloatValue
    def set_ActiveLendableAsPcFreeFloatValue(self, ActiveLendableAsPcFreeFloatValue):
        self.ActiveLendableAsPcFreeFloatValue = ActiveLendableAsPcFreeFloatValue
    def get_ActiveLendableAsPcMarketCap(self):
        return self.ActiveLendableAsPcMarketCap
    def set_ActiveLendableAsPcMarketCap(self, ActiveLendableAsPcMarketCap):
        self.ActiveLendableAsPcMarketCap = ActiveLendableAsPcMarketCap
    def get_ActiveLendableAsPcSharesOutstanding(self):
        return self.ActiveLendableAsPcSharesOutstanding
    def set_ActiveLendableAsPcSharesOutstanding(self, ActiveLendableAsPcSharesOutstanding):
        self.ActiveLendableAsPcSharesOutstanding = ActiveLendableAsPcSharesOutstanding
    def get_ActiveLendableQuantity(self):
        return self.ActiveLendableQuantity
    def set_ActiveLendableQuantity(self, ActiveLendableQuantity):
        self.ActiveLendableQuantity = ActiveLendableQuantity
    def get_ActiveLendableValue(self):
        return self.ActiveLendableValue
    def set_ActiveLendableValue(self, ActiveLendableValue):
        self.ActiveLendableValue = ActiveLendableValue
    def get_ActiveUtilisation(self):
        return self.ActiveUtilisation
    def set_ActiveUtilisation(self, ActiveUtilisation):
        self.ActiveUtilisation = ActiveUtilisation
    def get_ActiveUtilisationByQuantity(self):
        return self.ActiveUtilisationByQuantity
    def set_ActiveUtilisationByQuantity(self, ActiveUtilisationByQuantity):
        self.ActiveUtilisationByQuantity = ActiveUtilisationByQuantity
    def get_Delta(self):
        return self.Delta
    def set_Delta(self, Delta):
        self.Delta = Delta
    def add_Delta(self, value):
        self.Delta.append(value)
    def add_Delta(self, value):
        self.Delta.append(value)
    def insert_Delta_at(self, index, value):
        self.Delta.insert(index, value)
    def replace_Delta_at(self, index, value):
        self.Delta[index] = value
    def hasContent_(self):
        if (
            self.ActiveAvailableQuantity is not None or
            self.ActiveAvailableRatio is not None or
            self.ActiveAvailableValue is not None or
            self.ActiveLendableAsPcFreeFloatQuantity is not None or
            self.ActiveLendableAsPcFreeFloatValue is not None or
            self.ActiveLendableAsPcMarketCap is not None or
            self.ActiveLendableAsPcSharesOutstanding is not None or
            self.ActiveLendableQuantity is not None or
            self.ActiveLendableValue is not None or
            self.ActiveUtilisation is not None or
            self.ActiveUtilisationByQuantity is not None or
            self.Delta
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ActiveInventoryType128', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ActiveInventoryType128')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ActiveInventoryType128')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ActiveInventoryType128', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ActiveInventoryType128'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ActiveInventoryType128', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ActiveAvailableQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveAvailableQuantity>%s</%sActiveAvailableQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.ActiveAvailableQuantity, input_name='ActiveAvailableQuantity'), namespaceprefix_ , eol_))
        if self.ActiveAvailableRatio is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveAvailableRatio>%s</%sActiveAvailableRatio>%s' % (namespaceprefix_ , self.gds_format_float(self.ActiveAvailableRatio, input_name='ActiveAvailableRatio'), namespaceprefix_ , eol_))
        if self.ActiveAvailableValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveAvailableValue>%s</%sActiveAvailableValue>%s' % (namespaceprefix_ , self.gds_format_float(self.ActiveAvailableValue, input_name='ActiveAvailableValue'), namespaceprefix_ , eol_))
        if self.ActiveLendableAsPcFreeFloatQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveLendableAsPcFreeFloatQuantity>%s</%sActiveLendableAsPcFreeFloatQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.ActiveLendableAsPcFreeFloatQuantity, input_name='ActiveLendableAsPcFreeFloatQuantity'), namespaceprefix_ , eol_))
        if self.ActiveLendableAsPcFreeFloatValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveLendableAsPcFreeFloatValue>%s</%sActiveLendableAsPcFreeFloatValue>%s' % (namespaceprefix_ , self.gds_format_float(self.ActiveLendableAsPcFreeFloatValue, input_name='ActiveLendableAsPcFreeFloatValue'), namespaceprefix_ , eol_))
        if self.ActiveLendableAsPcMarketCap is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveLendableAsPcMarketCap>%s</%sActiveLendableAsPcMarketCap>%s' % (namespaceprefix_ , self.gds_format_float(self.ActiveLendableAsPcMarketCap, input_name='ActiveLendableAsPcMarketCap'), namespaceprefix_ , eol_))
        if self.ActiveLendableAsPcSharesOutstanding is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveLendableAsPcSharesOutstanding>%s</%sActiveLendableAsPcSharesOutstanding>%s' % (namespaceprefix_ , self.gds_format_float(self.ActiveLendableAsPcSharesOutstanding, input_name='ActiveLendableAsPcSharesOutstanding'), namespaceprefix_ , eol_))
        if self.ActiveLendableQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveLendableQuantity>%s</%sActiveLendableQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.ActiveLendableQuantity, input_name='ActiveLendableQuantity'), namespaceprefix_ , eol_))
        if self.ActiveLendableValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveLendableValue>%s</%sActiveLendableValue>%s' % (namespaceprefix_ , self.gds_format_float(self.ActiveLendableValue, input_name='ActiveLendableValue'), namespaceprefix_ , eol_))
        if self.ActiveUtilisation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveUtilisation>%s</%sActiveUtilisation>%s' % (namespaceprefix_ , self.gds_format_float(self.ActiveUtilisation, input_name='ActiveUtilisation'), namespaceprefix_ , eol_))
        if self.ActiveUtilisationByQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveUtilisationByQuantity>%s</%sActiveUtilisationByQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.ActiveUtilisationByQuantity, input_name='ActiveUtilisationByQuantity'), namespaceprefix_ , eol_))
        for Delta_ in self.Delta:
            Delta_.export(outfile, level, namespaceprefix_, name_='Delta', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ActiveAvailableQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ActiveAvailableQuantity')
            self.ActiveAvailableQuantity = fval_
        elif nodeName_ == 'ActiveAvailableRatio' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ActiveAvailableRatio')
            self.ActiveAvailableRatio = fval_
        elif nodeName_ == 'ActiveAvailableValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ActiveAvailableValue')
            self.ActiveAvailableValue = fval_
        elif nodeName_ == 'ActiveLendableAsPcFreeFloatQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ActiveLendableAsPcFreeFloatQuantity')
            self.ActiveLendableAsPcFreeFloatQuantity = fval_
        elif nodeName_ == 'ActiveLendableAsPcFreeFloatValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ActiveLendableAsPcFreeFloatValue')
            self.ActiveLendableAsPcFreeFloatValue = fval_
        elif nodeName_ == 'ActiveLendableAsPcMarketCap' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ActiveLendableAsPcMarketCap')
            self.ActiveLendableAsPcMarketCap = fval_
        elif nodeName_ == 'ActiveLendableAsPcSharesOutstanding' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ActiveLendableAsPcSharesOutstanding')
            self.ActiveLendableAsPcSharesOutstanding = fval_
        elif nodeName_ == 'ActiveLendableQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ActiveLendableQuantity')
            self.ActiveLendableQuantity = fval_
        elif nodeName_ == 'ActiveLendableValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ActiveLendableValue')
            self.ActiveLendableValue = fval_
        elif nodeName_ == 'ActiveUtilisation' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ActiveUtilisation')
            self.ActiveUtilisation = fval_
        elif nodeName_ == 'ActiveUtilisationByQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ActiveUtilisationByQuantity')
            self.ActiveUtilisationByQuantity = fval_
        elif nodeName_ == 'Delta':
            obj_ = DeltaType129.factory(parent_object_=self)
            obj_.build(child_)
            self.Delta.append(obj_)
            obj_.original_tagname_ = 'Delta'
# end class ActiveInventoryType128


class DeltaType129(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, ActiveAvailableQuantityDelta=None, ActiveAvailableValueDelta=None, ActiveLendableQuantityDelta=None, ActiveLendableValueDelta=None, ActiveUtilisationByQuantityDelta=None, ActiveUtilisationDelta=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.value = _cast(None, value)
        self.ActiveAvailableQuantityDelta = ActiveAvailableQuantityDelta
        self.ActiveAvailableValueDelta = ActiveAvailableValueDelta
        self.ActiveLendableQuantityDelta = ActiveLendableQuantityDelta
        self.ActiveLendableValueDelta = ActiveLendableValueDelta
        self.ActiveUtilisationByQuantityDelta = ActiveUtilisationByQuantityDelta
        self.ActiveUtilisationDelta = ActiveUtilisationDelta
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeltaType129)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeltaType129.subclass:
            return DeltaType129.subclass(*args_, **kwargs_)
        else:
            return DeltaType129(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ActiveAvailableQuantityDelta(self):
        return self.ActiveAvailableQuantityDelta
    def set_ActiveAvailableQuantityDelta(self, ActiveAvailableQuantityDelta):
        self.ActiveAvailableQuantityDelta = ActiveAvailableQuantityDelta
    def get_ActiveAvailableValueDelta(self):
        return self.ActiveAvailableValueDelta
    def set_ActiveAvailableValueDelta(self, ActiveAvailableValueDelta):
        self.ActiveAvailableValueDelta = ActiveAvailableValueDelta
    def get_ActiveLendableQuantityDelta(self):
        return self.ActiveLendableQuantityDelta
    def set_ActiveLendableQuantityDelta(self, ActiveLendableQuantityDelta):
        self.ActiveLendableQuantityDelta = ActiveLendableQuantityDelta
    def get_ActiveLendableValueDelta(self):
        return self.ActiveLendableValueDelta
    def set_ActiveLendableValueDelta(self, ActiveLendableValueDelta):
        self.ActiveLendableValueDelta = ActiveLendableValueDelta
    def get_ActiveUtilisationByQuantityDelta(self):
        return self.ActiveUtilisationByQuantityDelta
    def set_ActiveUtilisationByQuantityDelta(self, ActiveUtilisationByQuantityDelta):
        self.ActiveUtilisationByQuantityDelta = ActiveUtilisationByQuantityDelta
    def get_ActiveUtilisationDelta(self):
        return self.ActiveUtilisationDelta
    def set_ActiveUtilisationDelta(self, ActiveUtilisationDelta):
        self.ActiveUtilisationDelta = ActiveUtilisationDelta
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.ActiveAvailableQuantityDelta is not None or
            self.ActiveAvailableValueDelta is not None or
            self.ActiveLendableQuantityDelta is not None or
            self.ActiveLendableValueDelta is not None or
            self.ActiveUtilisationByQuantityDelta is not None or
            self.ActiveUtilisationDelta is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeltaType129', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeltaType129')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DeltaType129')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DeltaType129', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DeltaType129'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeltaType129', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ActiveAvailableQuantityDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveAvailableQuantityDelta>%s</%sActiveAvailableQuantityDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.ActiveAvailableQuantityDelta, input_name='ActiveAvailableQuantityDelta'), namespaceprefix_ , eol_))
        if self.ActiveAvailableValueDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveAvailableValueDelta>%s</%sActiveAvailableValueDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.ActiveAvailableValueDelta, input_name='ActiveAvailableValueDelta'), namespaceprefix_ , eol_))
        if self.ActiveLendableQuantityDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveLendableQuantityDelta>%s</%sActiveLendableQuantityDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.ActiveLendableQuantityDelta, input_name='ActiveLendableQuantityDelta'), namespaceprefix_ , eol_))
        if self.ActiveLendableValueDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveLendableValueDelta>%s</%sActiveLendableValueDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.ActiveLendableValueDelta, input_name='ActiveLendableValueDelta'), namespaceprefix_ , eol_))
        if self.ActiveUtilisationByQuantityDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveUtilisationByQuantityDelta>%s</%sActiveUtilisationByQuantityDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.ActiveUtilisationByQuantityDelta, input_name='ActiveUtilisationByQuantityDelta'), namespaceprefix_ , eol_))
        if self.ActiveUtilisationDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveUtilisationDelta>%s</%sActiveUtilisationDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.ActiveUtilisationDelta, input_name='ActiveUtilisationDelta'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ActiveAvailableQuantityDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ActiveAvailableQuantityDelta')
            self.ActiveAvailableQuantityDelta = fval_
        elif nodeName_ == 'ActiveAvailableValueDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ActiveAvailableValueDelta')
            self.ActiveAvailableValueDelta = fval_
        elif nodeName_ == 'ActiveLendableQuantityDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ActiveLendableQuantityDelta')
            self.ActiveLendableQuantityDelta = fval_
        elif nodeName_ == 'ActiveLendableValueDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ActiveLendableValueDelta')
            self.ActiveLendableValueDelta = fval_
        elif nodeName_ == 'ActiveUtilisationByQuantityDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ActiveUtilisationByQuantityDelta')
            self.ActiveUtilisationByQuantityDelta = fval_
        elif nodeName_ == 'ActiveUtilisationDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ActiveUtilisationDelta')
            self.ActiveUtilisationDelta = fval_
# end class DeltaType129


class CollateralDataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CollateralName=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.CollateralName = CollateralName
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CollateralDataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CollateralDataType.subclass:
            return CollateralDataType.subclass(*args_, **kwargs_)
        else:
            return CollateralDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CollateralName(self):
        return self.CollateralName
    def set_CollateralName(self, CollateralName):
        self.CollateralName = CollateralName
    def hasContent_(self):
        if (
            self.CollateralName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CollateralDataType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CollateralDataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CollateralDataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CollateralDataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CollateralDataType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CollateralDataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CollateralName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCollateralName>%s</%sCollateralName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CollateralName), input_name='CollateralName')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CollateralName':
            CollateralName_ = child_.text
            CollateralName_ = self.gds_validate_string(CollateralName_, node, 'CollateralName')
            self.CollateralName = CollateralName_
# end class CollateralDataType


class GeneralType130(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, OpportunityGainLoss=None, ReturnQuantity=None, ReturnValue=None, TradeDate=None, TradeQuantity=None, TradeValue=None, VWAF=None, VWAR=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.OpportunityGainLoss = OpportunityGainLoss
        self.ReturnQuantity = ReturnQuantity
        self.ReturnValue = ReturnValue
        if isinstance(TradeDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TradeDate, '%Y-%m-%d').date()
        else:
            initvalue_ = TradeDate
        self.TradeDate = initvalue_
        self.TradeQuantity = TradeQuantity
        self.TradeValue = TradeValue
        self.VWAF = VWAF
        self.VWAR = VWAR
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType130)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType130.subclass:
            return GeneralType130.subclass(*args_, **kwargs_)
        else:
            return GeneralType130(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OpportunityGainLoss(self):
        return self.OpportunityGainLoss
    def set_OpportunityGainLoss(self, OpportunityGainLoss):
        self.OpportunityGainLoss = OpportunityGainLoss
    def get_ReturnQuantity(self):
        return self.ReturnQuantity
    def set_ReturnQuantity(self, ReturnQuantity):
        self.ReturnQuantity = ReturnQuantity
    def get_ReturnValue(self):
        return self.ReturnValue
    def set_ReturnValue(self, ReturnValue):
        self.ReturnValue = ReturnValue
    def get_TradeDate(self):
        return self.TradeDate
    def set_TradeDate(self, TradeDate):
        self.TradeDate = TradeDate
    def get_TradeQuantity(self):
        return self.TradeQuantity
    def set_TradeQuantity(self, TradeQuantity):
        self.TradeQuantity = TradeQuantity
    def get_TradeValue(self):
        return self.TradeValue
    def set_TradeValue(self, TradeValue):
        self.TradeValue = TradeValue
    def get_VWAF(self):
        return self.VWAF
    def set_VWAF(self, VWAF):
        self.VWAF = VWAF
    def get_VWAR(self):
        return self.VWAR
    def set_VWAR(self, VWAR):
        self.VWAR = VWAR
    def hasContent_(self):
        if (
            self.OpportunityGainLoss is not None or
            self.ReturnQuantity is not None or
            self.ReturnValue is not None or
            self.TradeDate is not None or
            self.TradeQuantity is not None or
            self.TradeValue is not None or
            self.VWAF is not None or
            self.VWAR is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType130', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType130')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType130')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType130', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType130'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType130', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OpportunityGainLoss is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOpportunityGainLoss>%s</%sOpportunityGainLoss>%s' % (namespaceprefix_ , self.gds_format_float(self.OpportunityGainLoss, input_name='OpportunityGainLoss'), namespaceprefix_ , eol_))
        if self.ReturnQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReturnQuantity>%s</%sReturnQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.ReturnQuantity, input_name='ReturnQuantity'), namespaceprefix_ , eol_))
        if self.ReturnValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReturnValue>%s</%sReturnValue>%s' % (namespaceprefix_ , self.gds_format_float(self.ReturnValue, input_name='ReturnValue'), namespaceprefix_ , eol_))
        if self.TradeDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradeDate>%s</%sTradeDate>%s' % (namespaceprefix_ , self.gds_format_date(self.TradeDate, input_name='TradeDate'), namespaceprefix_ , eol_))
        if self.TradeQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradeQuantity>%s</%sTradeQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.TradeQuantity, input_name='TradeQuantity'), namespaceprefix_ , eol_))
        if self.TradeValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradeValue>%s</%sTradeValue>%s' % (namespaceprefix_ , self.gds_format_float(self.TradeValue, input_name='TradeValue'), namespaceprefix_ , eol_))
        if self.VWAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAF>%s</%sVWAF>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAF, input_name='VWAF'), namespaceprefix_ , eol_))
        if self.VWAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAR>%s</%sVWAR>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAR, input_name='VWAR'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OpportunityGainLoss' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'OpportunityGainLoss')
            self.OpportunityGainLoss = fval_
        elif nodeName_ == 'ReturnQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ReturnQuantity')
            self.ReturnQuantity = fval_
        elif nodeName_ == 'ReturnValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ReturnValue')
            self.ReturnValue = fval_
        elif nodeName_ == 'TradeDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TradeDate = dval_
        elif nodeName_ == 'TradeQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TradeQuantity')
            self.TradeQuantity = fval_
        elif nodeName_ == 'TradeValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TradeValue')
            self.TradeValue = fval_
        elif nodeName_ == 'VWAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAF')
            self.VWAF = fval_
        elif nodeName_ == 'VWAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAR')
            self.VWAR = fval_
# end class GeneralType130


class IndicatorsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DIMV=None, DIPS=None, DNS=None, DPS=None, DRS=None, DSS=None, Period=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DIMV = DIMV
        self.DIPS = DIPS
        self.DNS = DNS
        self.DPS = DPS
        self.DRS = DRS
        self.DSS = DSS
        if Period is None:
            self.Period = []
        else:
            self.Period = Period
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IndicatorsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IndicatorsType.subclass:
            return IndicatorsType.subclass(*args_, **kwargs_)
        else:
            return IndicatorsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DIMV(self):
        return self.DIMV
    def set_DIMV(self, DIMV):
        self.DIMV = DIMV
    def get_DIPS(self):
        return self.DIPS
    def set_DIPS(self, DIPS):
        self.DIPS = DIPS
    def get_DNS(self):
        return self.DNS
    def set_DNS(self, DNS):
        self.DNS = DNS
    def get_DPS(self):
        return self.DPS
    def set_DPS(self, DPS):
        self.DPS = DPS
    def get_DRS(self):
        return self.DRS
    def set_DRS(self, DRS):
        self.DRS = DRS
    def get_DSS(self):
        return self.DSS
    def set_DSS(self, DSS):
        self.DSS = DSS
    def get_Period(self):
        return self.Period
    def set_Period(self, Period):
        self.Period = Period
    def add_Period(self, value):
        self.Period.append(value)
    def add_Period(self, value):
        self.Period.append(value)
    def insert_Period_at(self, index, value):
        self.Period.insert(index, value)
    def replace_Period_at(self, index, value):
        self.Period[index] = value
    def hasContent_(self):
        if (
            self.DIMV is not None or
            self.DIPS is not None or
            self.DNS is not None or
            self.DPS is not None or
            self.DRS is not None or
            self.DSS is not None or
            self.Period
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='IndicatorsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IndicatorsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IndicatorsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IndicatorsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='IndicatorsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='IndicatorsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DIMV is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDIMV>%s</%sDIMV>%s' % (namespaceprefix_ , self.gds_format_float(self.DIMV, input_name='DIMV'), namespaceprefix_ , eol_))
        if self.DIPS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDIPS>%s</%sDIPS>%s' % (namespaceprefix_ , self.gds_format_float(self.DIPS, input_name='DIPS'), namespaceprefix_ , eol_))
        if self.DNS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDNS>%s</%sDNS>%s' % (namespaceprefix_ , self.gds_format_float(self.DNS, input_name='DNS'), namespaceprefix_ , eol_))
        if self.DPS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDPS>%s</%sDPS>%s' % (namespaceprefix_ , self.gds_format_float(self.DPS, input_name='DPS'), namespaceprefix_ , eol_))
        if self.DRS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDRS>%s</%sDRS>%s' % (namespaceprefix_ , self.gds_format_float(self.DRS, input_name='DRS'), namespaceprefix_ , eol_))
        if self.DSS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDSS>%s</%sDSS>%s' % (namespaceprefix_ , self.gds_format_float(self.DSS, input_name='DSS'), namespaceprefix_ , eol_))
        for Period_ in self.Period:
            Period_.export(outfile, level, namespaceprefix_, name_='Period', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DIMV' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DIMV')
            self.DIMV = fval_
        elif nodeName_ == 'DIPS' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DIPS')
            self.DIPS = fval_
        elif nodeName_ == 'DNS' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DNS')
            self.DNS = fval_
        elif nodeName_ == 'DPS' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DPS')
            self.DPS = fval_
        elif nodeName_ == 'DRS' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DRS')
            self.DRS = fval_
        elif nodeName_ == 'DSS' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DSS')
            self.DSS = fval_
        elif nodeName_ == 'Period':
            obj_ = PeriodType.factory(parent_object_=self)
            obj_.build(child_)
            self.Period.append(obj_)
            obj_.original_tagname_ = 'Period'
# end class IndicatorsType


class PeriodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, DNSF=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.value = _cast(None, value)
        self.DNSF = DNSF
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PeriodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PeriodType.subclass:
            return PeriodType.subclass(*args_, **kwargs_)
        else:
            return PeriodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DNSF(self):
        return self.DNSF
    def set_DNSF(self, DNSF):
        self.DNSF = DNSF
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.DNSF is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PeriodType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PeriodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PeriodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PeriodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PeriodType'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PeriodType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DNSF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDNSF>%s</%sDNSF>%s' % (namespaceprefix_ , self.gds_format_float(self.DNSF, input_name='DNSF'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DNSF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DNSF')
            self.DNSF = fval_
# end class PeriodType


class InventoryType131(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AvailableQuantity=None, AvailableQuantityStability=None, AvailableValue=None, AvailableValueStability=None, ClientInventoryMarketShare=None, ClientInventoryMarketShareRank=None, Delta=None, Index=None, InventoryConcentration=None, LendableQuantity=None, LendableQuantityStability=None, LendableValue=None, LendableValueStability=None, LenderQuantity=None, LenderQuantityOnLoan=None, LenderQuantityOnLoanStability=None, LenderValue=None, LenderValueOnLoan=None, LenderValueOnLoanStability=None, Utilisation=None, UtilisationByQuantity=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.AvailableQuantity = AvailableQuantity
        self.AvailableQuantityStability = AvailableQuantityStability
        self.AvailableValue = AvailableValue
        self.AvailableValueStability = AvailableValueStability
        self.ClientInventoryMarketShare = ClientInventoryMarketShare
        self.ClientInventoryMarketShareRank = ClientInventoryMarketShareRank
        if Delta is None:
            self.Delta = []
        else:
            self.Delta = Delta
        if Index is None:
            self.Index = []
        else:
            self.Index = Index
        self.InventoryConcentration = InventoryConcentration
        self.LendableQuantity = LendableQuantity
        self.LendableQuantityStability = LendableQuantityStability
        self.LendableValue = LendableValue
        self.LendableValueStability = LendableValueStability
        self.LenderQuantity = LenderQuantity
        self.LenderQuantityOnLoan = LenderQuantityOnLoan
        self.LenderQuantityOnLoanStability = LenderQuantityOnLoanStability
        self.LenderValue = LenderValue
        self.LenderValueOnLoan = LenderValueOnLoan
        self.LenderValueOnLoanStability = LenderValueOnLoanStability
        self.Utilisation = Utilisation
        self.UtilisationByQuantity = UtilisationByQuantity
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InventoryType131)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InventoryType131.subclass:
            return InventoryType131.subclass(*args_, **kwargs_)
        else:
            return InventoryType131(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AvailableQuantity(self):
        return self.AvailableQuantity
    def set_AvailableQuantity(self, AvailableQuantity):
        self.AvailableQuantity = AvailableQuantity
    def get_AvailableQuantityStability(self):
        return self.AvailableQuantityStability
    def set_AvailableQuantityStability(self, AvailableQuantityStability):
        self.AvailableQuantityStability = AvailableQuantityStability
    def get_AvailableValue(self):
        return self.AvailableValue
    def set_AvailableValue(self, AvailableValue):
        self.AvailableValue = AvailableValue
    def get_AvailableValueStability(self):
        return self.AvailableValueStability
    def set_AvailableValueStability(self, AvailableValueStability):
        self.AvailableValueStability = AvailableValueStability
    def get_ClientInventoryMarketShare(self):
        return self.ClientInventoryMarketShare
    def set_ClientInventoryMarketShare(self, ClientInventoryMarketShare):
        self.ClientInventoryMarketShare = ClientInventoryMarketShare
    def get_ClientInventoryMarketShareRank(self):
        return self.ClientInventoryMarketShareRank
    def set_ClientInventoryMarketShareRank(self, ClientInventoryMarketShareRank):
        self.ClientInventoryMarketShareRank = ClientInventoryMarketShareRank
    def get_Delta(self):
        return self.Delta
    def set_Delta(self, Delta):
        self.Delta = Delta
    def add_Delta(self, value):
        self.Delta.append(value)
    def add_Delta(self, value):
        self.Delta.append(value)
    def insert_Delta_at(self, index, value):
        self.Delta.insert(index, value)
    def replace_Delta_at(self, index, value):
        self.Delta[index] = value
    def get_Index(self):
        return self.Index
    def set_Index(self, Index):
        self.Index = Index
    def add_Index(self, value):
        self.Index.append(value)
    def add_Index(self, value):
        self.Index.append(value)
    def insert_Index_at(self, index, value):
        self.Index.insert(index, value)
    def replace_Index_at(self, index, value):
        self.Index[index] = value
    def get_InventoryConcentration(self):
        return self.InventoryConcentration
    def set_InventoryConcentration(self, InventoryConcentration):
        self.InventoryConcentration = InventoryConcentration
    def get_LendableQuantity(self):
        return self.LendableQuantity
    def set_LendableQuantity(self, LendableQuantity):
        self.LendableQuantity = LendableQuantity
    def get_LendableQuantityStability(self):
        return self.LendableQuantityStability
    def set_LendableQuantityStability(self, LendableQuantityStability):
        self.LendableQuantityStability = LendableQuantityStability
    def get_LendableValue(self):
        return self.LendableValue
    def set_LendableValue(self, LendableValue):
        self.LendableValue = LendableValue
    def get_LendableValueStability(self):
        return self.LendableValueStability
    def set_LendableValueStability(self, LendableValueStability):
        self.LendableValueStability = LendableValueStability
    def get_LenderQuantity(self):
        return self.LenderQuantity
    def set_LenderQuantity(self, LenderQuantity):
        self.LenderQuantity = LenderQuantity
    def get_LenderQuantityOnLoan(self):
        return self.LenderQuantityOnLoan
    def set_LenderQuantityOnLoan(self, LenderQuantityOnLoan):
        self.LenderQuantityOnLoan = LenderQuantityOnLoan
    def get_LenderQuantityOnLoanStability(self):
        return self.LenderQuantityOnLoanStability
    def set_LenderQuantityOnLoanStability(self, LenderQuantityOnLoanStability):
        self.LenderQuantityOnLoanStability = LenderQuantityOnLoanStability
    def get_LenderValue(self):
        return self.LenderValue
    def set_LenderValue(self, LenderValue):
        self.LenderValue = LenderValue
    def get_LenderValueOnLoan(self):
        return self.LenderValueOnLoan
    def set_LenderValueOnLoan(self, LenderValueOnLoan):
        self.LenderValueOnLoan = LenderValueOnLoan
    def get_LenderValueOnLoanStability(self):
        return self.LenderValueOnLoanStability
    def set_LenderValueOnLoanStability(self, LenderValueOnLoanStability):
        self.LenderValueOnLoanStability = LenderValueOnLoanStability
    def get_Utilisation(self):
        return self.Utilisation
    def set_Utilisation(self, Utilisation):
        self.Utilisation = Utilisation
    def get_UtilisationByQuantity(self):
        return self.UtilisationByQuantity
    def set_UtilisationByQuantity(self, UtilisationByQuantity):
        self.UtilisationByQuantity = UtilisationByQuantity
    def hasContent_(self):
        if (
            self.AvailableQuantity is not None or
            self.AvailableQuantityStability is not None or
            self.AvailableValue is not None or
            self.AvailableValueStability is not None or
            self.ClientInventoryMarketShare is not None or
            self.ClientInventoryMarketShareRank is not None or
            self.Delta or
            self.Index or
            self.InventoryConcentration is not None or
            self.LendableQuantity is not None or
            self.LendableQuantityStability is not None or
            self.LendableValue is not None or
            self.LendableValueStability is not None or
            self.LenderQuantity is not None or
            self.LenderQuantityOnLoan is not None or
            self.LenderQuantityOnLoanStability is not None or
            self.LenderValue is not None or
            self.LenderValueOnLoan is not None or
            self.LenderValueOnLoanStability is not None or
            self.Utilisation is not None or
            self.UtilisationByQuantity is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InventoryType131', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InventoryType131')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InventoryType131')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InventoryType131', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InventoryType131'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InventoryType131', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AvailableQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAvailableQuantity>%s</%sAvailableQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.AvailableQuantity, input_name='AvailableQuantity'), namespaceprefix_ , eol_))
        if self.AvailableQuantityStability is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAvailableQuantityStability>%s</%sAvailableQuantityStability>%s' % (namespaceprefix_ , self.gds_format_float(self.AvailableQuantityStability, input_name='AvailableQuantityStability'), namespaceprefix_ , eol_))
        if self.AvailableValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAvailableValue>%s</%sAvailableValue>%s' % (namespaceprefix_ , self.gds_format_float(self.AvailableValue, input_name='AvailableValue'), namespaceprefix_ , eol_))
        if self.AvailableValueStability is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAvailableValueStability>%s</%sAvailableValueStability>%s' % (namespaceprefix_ , self.gds_format_float(self.AvailableValueStability, input_name='AvailableValueStability'), namespaceprefix_ , eol_))
        if self.ClientInventoryMarketShare is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientInventoryMarketShare>%s</%sClientInventoryMarketShare>%s' % (namespaceprefix_ , self.gds_format_float(self.ClientInventoryMarketShare, input_name='ClientInventoryMarketShare'), namespaceprefix_ , eol_))
        if self.ClientInventoryMarketShareRank is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientInventoryMarketShareRank>%s</%sClientInventoryMarketShareRank>%s' % (namespaceprefix_ , self.gds_format_float(self.ClientInventoryMarketShareRank, input_name='ClientInventoryMarketShareRank'), namespaceprefix_ , eol_))
        for Delta_ in self.Delta:
            Delta_.export(outfile, level, namespaceprefix_, name_='Delta', pretty_print=pretty_print)
        for Index_ in self.Index:
            Index_.export(outfile, level, namespaceprefix_, name_='Index', pretty_print=pretty_print)
        if self.InventoryConcentration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInventoryConcentration>%s</%sInventoryConcentration>%s' % (namespaceprefix_ , self.gds_format_float(self.InventoryConcentration, input_name='InventoryConcentration'), namespaceprefix_ , eol_))
        if self.LendableQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableQuantity>%s</%sLendableQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableQuantity, input_name='LendableQuantity'), namespaceprefix_ , eol_))
        if self.LendableQuantityStability is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableQuantityStability>%s</%sLendableQuantityStability>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableQuantityStability, input_name='LendableQuantityStability'), namespaceprefix_ , eol_))
        if self.LendableValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableValue>%s</%sLendableValue>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableValue, input_name='LendableValue'), namespaceprefix_ , eol_))
        if self.LendableValueStability is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableValueStability>%s</%sLendableValueStability>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableValueStability, input_name='LendableValueStability'), namespaceprefix_ , eol_))
        if self.LenderQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderQuantity>%s</%sLenderQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderQuantity, input_name='LenderQuantity'), namespaceprefix_ , eol_))
        if self.LenderQuantityOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderQuantityOnLoan>%s</%sLenderQuantityOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderQuantityOnLoan, input_name='LenderQuantityOnLoan'), namespaceprefix_ , eol_))
        if self.LenderQuantityOnLoanStability is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderQuantityOnLoanStability>%s</%sLenderQuantityOnLoanStability>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderQuantityOnLoanStability, input_name='LenderQuantityOnLoanStability'), namespaceprefix_ , eol_))
        if self.LenderValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderValue>%s</%sLenderValue>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderValue, input_name='LenderValue'), namespaceprefix_ , eol_))
        if self.LenderValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderValueOnLoan>%s</%sLenderValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderValueOnLoan, input_name='LenderValueOnLoan'), namespaceprefix_ , eol_))
        if self.LenderValueOnLoanStability is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderValueOnLoanStability>%s</%sLenderValueOnLoanStability>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderValueOnLoanStability, input_name='LenderValueOnLoanStability'), namespaceprefix_ , eol_))
        if self.Utilisation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisation>%s</%sUtilisation>%s' % (namespaceprefix_ , self.gds_format_float(self.Utilisation, input_name='Utilisation'), namespaceprefix_ , eol_))
        if self.UtilisationByQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisationByQuantity>%s</%sUtilisationByQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.UtilisationByQuantity, input_name='UtilisationByQuantity'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AvailableQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AvailableQuantity')
            self.AvailableQuantity = fval_
        elif nodeName_ == 'AvailableQuantityStability' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AvailableQuantityStability')
            self.AvailableQuantityStability = fval_
        elif nodeName_ == 'AvailableValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AvailableValue')
            self.AvailableValue = fval_
        elif nodeName_ == 'AvailableValueStability' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AvailableValueStability')
            self.AvailableValueStability = fval_
        elif nodeName_ == 'ClientInventoryMarketShare' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ClientInventoryMarketShare')
            self.ClientInventoryMarketShare = fval_
        elif nodeName_ == 'ClientInventoryMarketShareRank' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ClientInventoryMarketShareRank')
            self.ClientInventoryMarketShareRank = fval_
        elif nodeName_ == 'Delta':
            obj_ = DeltaType132.factory(parent_object_=self)
            obj_.build(child_)
            self.Delta.append(obj_)
            obj_.original_tagname_ = 'Delta'
        elif nodeName_ == 'Index':
            obj_ = IndexType133.factory(parent_object_=self)
            obj_.build(child_)
            self.Index.append(obj_)
            obj_.original_tagname_ = 'Index'
        elif nodeName_ == 'InventoryConcentration' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'InventoryConcentration')
            self.InventoryConcentration = fval_
        elif nodeName_ == 'LendableQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableQuantity')
            self.LendableQuantity = fval_
        elif nodeName_ == 'LendableQuantityStability' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableQuantityStability')
            self.LendableQuantityStability = fval_
        elif nodeName_ == 'LendableValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableValue')
            self.LendableValue = fval_
        elif nodeName_ == 'LendableValueStability' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableValueStability')
            self.LendableValueStability = fval_
        elif nodeName_ == 'LenderQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderQuantity')
            self.LenderQuantity = fval_
        elif nodeName_ == 'LenderQuantityOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderQuantityOnLoan')
            self.LenderQuantityOnLoan = fval_
        elif nodeName_ == 'LenderQuantityOnLoanStability' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderQuantityOnLoanStability')
            self.LenderQuantityOnLoanStability = fval_
        elif nodeName_ == 'LenderValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderValue')
            self.LenderValue = fval_
        elif nodeName_ == 'LenderValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderValueOnLoan')
            self.LenderValueOnLoan = fval_
        elif nodeName_ == 'LenderValueOnLoanStability' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderValueOnLoanStability')
            self.LenderValueOnLoanStability = fval_
        elif nodeName_ == 'Utilisation' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Utilisation')
            self.Utilisation = fval_
        elif nodeName_ == 'UtilisationByQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'UtilisationByQuantity')
            self.UtilisationByQuantity = fval_
# end class InventoryType131


class DeltaType132(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, AvailableQuantityDelta=None, AvailableValueDelta=None, LendableQuantityDelta=None, LendableValueDelta=None, LenderQuantityOnLoanDelta=None, LenderValueOnLoanDelta=None, UtilisationByQuantityDelta=None, UtilisationDelta=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.value = _cast(None, value)
        self.AvailableQuantityDelta = AvailableQuantityDelta
        self.AvailableValueDelta = AvailableValueDelta
        self.LendableQuantityDelta = LendableQuantityDelta
        self.LendableValueDelta = LendableValueDelta
        self.LenderQuantityOnLoanDelta = LenderQuantityOnLoanDelta
        self.LenderValueOnLoanDelta = LenderValueOnLoanDelta
        self.UtilisationByQuantityDelta = UtilisationByQuantityDelta
        self.UtilisationDelta = UtilisationDelta
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeltaType132)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeltaType132.subclass:
            return DeltaType132.subclass(*args_, **kwargs_)
        else:
            return DeltaType132(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AvailableQuantityDelta(self):
        return self.AvailableQuantityDelta
    def set_AvailableQuantityDelta(self, AvailableQuantityDelta):
        self.AvailableQuantityDelta = AvailableQuantityDelta
    def get_AvailableValueDelta(self):
        return self.AvailableValueDelta
    def set_AvailableValueDelta(self, AvailableValueDelta):
        self.AvailableValueDelta = AvailableValueDelta
    def get_LendableQuantityDelta(self):
        return self.LendableQuantityDelta
    def set_LendableQuantityDelta(self, LendableQuantityDelta):
        self.LendableQuantityDelta = LendableQuantityDelta
    def get_LendableValueDelta(self):
        return self.LendableValueDelta
    def set_LendableValueDelta(self, LendableValueDelta):
        self.LendableValueDelta = LendableValueDelta
    def get_LenderQuantityOnLoanDelta(self):
        return self.LenderQuantityOnLoanDelta
    def set_LenderQuantityOnLoanDelta(self, LenderQuantityOnLoanDelta):
        self.LenderQuantityOnLoanDelta = LenderQuantityOnLoanDelta
    def get_LenderValueOnLoanDelta(self):
        return self.LenderValueOnLoanDelta
    def set_LenderValueOnLoanDelta(self, LenderValueOnLoanDelta):
        self.LenderValueOnLoanDelta = LenderValueOnLoanDelta
    def get_UtilisationByQuantityDelta(self):
        return self.UtilisationByQuantityDelta
    def set_UtilisationByQuantityDelta(self, UtilisationByQuantityDelta):
        self.UtilisationByQuantityDelta = UtilisationByQuantityDelta
    def get_UtilisationDelta(self):
        return self.UtilisationDelta
    def set_UtilisationDelta(self, UtilisationDelta):
        self.UtilisationDelta = UtilisationDelta
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.AvailableQuantityDelta is not None or
            self.AvailableValueDelta is not None or
            self.LendableQuantityDelta is not None or
            self.LendableValueDelta is not None or
            self.LenderQuantityOnLoanDelta is not None or
            self.LenderValueOnLoanDelta is not None or
            self.UtilisationByQuantityDelta is not None or
            self.UtilisationDelta is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeltaType132', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeltaType132')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DeltaType132')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DeltaType132', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DeltaType132'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeltaType132', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AvailableQuantityDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAvailableQuantityDelta>%s</%sAvailableQuantityDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.AvailableQuantityDelta, input_name='AvailableQuantityDelta'), namespaceprefix_ , eol_))
        if self.AvailableValueDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAvailableValueDelta>%s</%sAvailableValueDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.AvailableValueDelta, input_name='AvailableValueDelta'), namespaceprefix_ , eol_))
        if self.LendableQuantityDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableQuantityDelta>%s</%sLendableQuantityDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableQuantityDelta, input_name='LendableQuantityDelta'), namespaceprefix_ , eol_))
        if self.LendableValueDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableValueDelta>%s</%sLendableValueDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableValueDelta, input_name='LendableValueDelta'), namespaceprefix_ , eol_))
        if self.LenderQuantityOnLoanDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderQuantityOnLoanDelta>%s</%sLenderQuantityOnLoanDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderQuantityOnLoanDelta, input_name='LenderQuantityOnLoanDelta'), namespaceprefix_ , eol_))
        if self.LenderValueOnLoanDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderValueOnLoanDelta>%s</%sLenderValueOnLoanDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderValueOnLoanDelta, input_name='LenderValueOnLoanDelta'), namespaceprefix_ , eol_))
        if self.UtilisationByQuantityDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisationByQuantityDelta>%s</%sUtilisationByQuantityDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.UtilisationByQuantityDelta, input_name='UtilisationByQuantityDelta'), namespaceprefix_ , eol_))
        if self.UtilisationDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisationDelta>%s</%sUtilisationDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.UtilisationDelta, input_name='UtilisationDelta'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AvailableQuantityDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AvailableQuantityDelta')
            self.AvailableQuantityDelta = fval_
        elif nodeName_ == 'AvailableValueDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AvailableValueDelta')
            self.AvailableValueDelta = fval_
        elif nodeName_ == 'LendableQuantityDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableQuantityDelta')
            self.LendableQuantityDelta = fval_
        elif nodeName_ == 'LendableValueDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableValueDelta')
            self.LendableValueDelta = fval_
        elif nodeName_ == 'LenderQuantityOnLoanDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderQuantityOnLoanDelta')
            self.LenderQuantityOnLoanDelta = fval_
        elif nodeName_ == 'LenderValueOnLoanDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderValueOnLoanDelta')
            self.LenderValueOnLoanDelta = fval_
        elif nodeName_ == 'UtilisationByQuantityDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'UtilisationByQuantityDelta')
            self.UtilisationByQuantityDelta = fval_
        elif nodeName_ == 'UtilisationDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'UtilisationDelta')
            self.UtilisationDelta = fval_
# end class DeltaType132


class IndexType133(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, InventoryMarketShare=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.value = _cast(None, value)
        self.InventoryMarketShare = InventoryMarketShare
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IndexType133)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IndexType133.subclass:
            return IndexType133.subclass(*args_, **kwargs_)
        else:
            return IndexType133(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_InventoryMarketShare(self):
        return self.InventoryMarketShare
    def set_InventoryMarketShare(self, InventoryMarketShare):
        self.InventoryMarketShare = InventoryMarketShare
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.InventoryMarketShare is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='IndexType133', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IndexType133')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IndexType133')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IndexType133', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='IndexType133'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='IndexType133', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InventoryMarketShare is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInventoryMarketShare>%s</%sInventoryMarketShare>%s' % (namespaceprefix_ , self.gds_format_float(self.InventoryMarketShare, input_name='InventoryMarketShare'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'InventoryMarketShare' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'InventoryMarketShare')
            self.InventoryMarketShare = fval_
# end class IndexType133


class MarketColourType134(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DaysToCover=None, DaysToCoverQuantity=None, DCBS=None, Delta=None, IndicativeFee=None, IndicativeFee1=None, IndicativeFee7=None, IndicativeFeeAllDay=None, IndicativeRebate=None, IndicativeRebate1=None, IndicativeRebate7=None, IndicativeRebateAllDay=None, LastDividendDate=None, LendableAsPcIssueValue=None, LendableAsPcMarketCap=None, LendableAsPcSharesOutstanding=None, LenderValueOnLoanAsPcIssueValue=None, LenderValueOnLoanAsPcMarketCap=None, MarketCap=None, NextDividendDate=None, PcFreeFloatQuantityOnLoan=None, PcFreeFloatValueOnLoan=None, PcIssueValueOnLoan=None, PcMarketCapOnLoan=None, PcSharesOutstandingOnLoan=None, Price=None, PriceCurrency=None, SharesOutstanding=None, ShortLoanQuantity=None, ShortLoanValue=None, ShortLoanValueAsPcIssueValue=None, ShortLoanValueAsPcMarketCap=None, VolumeTraded=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DaysToCover = DaysToCover
        self.DaysToCoverQuantity = DaysToCoverQuantity
        self.DCBS = DCBS
        if Delta is None:
            self.Delta = []
        else:
            self.Delta = Delta
        self.IndicativeFee = IndicativeFee
        self.IndicativeFee1 = IndicativeFee1
        self.IndicativeFee7 = IndicativeFee7
        self.IndicativeFeeAllDay = IndicativeFeeAllDay
        self.IndicativeRebate = IndicativeRebate
        self.IndicativeRebate1 = IndicativeRebate1
        self.IndicativeRebate7 = IndicativeRebate7
        self.IndicativeRebateAllDay = IndicativeRebateAllDay
        if isinstance(LastDividendDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LastDividendDate, '%Y-%m-%d').date()
        else:
            initvalue_ = LastDividendDate
        self.LastDividendDate = initvalue_
        self.LendableAsPcIssueValue = LendableAsPcIssueValue
        self.LendableAsPcMarketCap = LendableAsPcMarketCap
        self.LendableAsPcSharesOutstanding = LendableAsPcSharesOutstanding
        self.LenderValueOnLoanAsPcIssueValue = LenderValueOnLoanAsPcIssueValue
        self.LenderValueOnLoanAsPcMarketCap = LenderValueOnLoanAsPcMarketCap
        self.MarketCap = MarketCap
        if isinstance(NextDividendDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(NextDividendDate, '%Y-%m-%d').date()
        else:
            initvalue_ = NextDividendDate
        self.NextDividendDate = initvalue_
        self.PcFreeFloatQuantityOnLoan = PcFreeFloatQuantityOnLoan
        self.PcFreeFloatValueOnLoan = PcFreeFloatValueOnLoan
        self.PcIssueValueOnLoan = PcIssueValueOnLoan
        self.PcMarketCapOnLoan = PcMarketCapOnLoan
        self.PcSharesOutstandingOnLoan = PcSharesOutstandingOnLoan
        self.Price = Price
        self.PriceCurrency = PriceCurrency
        self.SharesOutstanding = SharesOutstanding
        self.ShortLoanQuantity = ShortLoanQuantity
        self.ShortLoanValue = ShortLoanValue
        self.ShortLoanValueAsPcIssueValue = ShortLoanValueAsPcIssueValue
        self.ShortLoanValueAsPcMarketCap = ShortLoanValueAsPcMarketCap
        self.VolumeTraded = VolumeTraded
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarketColourType134)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarketColourType134.subclass:
            return MarketColourType134.subclass(*args_, **kwargs_)
        else:
            return MarketColourType134(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DaysToCover(self):
        return self.DaysToCover
    def set_DaysToCover(self, DaysToCover):
        self.DaysToCover = DaysToCover
    def get_DaysToCoverQuantity(self):
        return self.DaysToCoverQuantity
    def set_DaysToCoverQuantity(self, DaysToCoverQuantity):
        self.DaysToCoverQuantity = DaysToCoverQuantity
    def get_DCBS(self):
        return self.DCBS
    def set_DCBS(self, DCBS):
        self.DCBS = DCBS
    def get_Delta(self):
        return self.Delta
    def set_Delta(self, Delta):
        self.Delta = Delta
    def add_Delta(self, value):
        self.Delta.append(value)
    def add_Delta(self, value):
        self.Delta.append(value)
    def insert_Delta_at(self, index, value):
        self.Delta.insert(index, value)
    def replace_Delta_at(self, index, value):
        self.Delta[index] = value
    def get_IndicativeFee(self):
        return self.IndicativeFee
    def set_IndicativeFee(self, IndicativeFee):
        self.IndicativeFee = IndicativeFee
    def get_IndicativeFee1(self):
        return self.IndicativeFee1
    def set_IndicativeFee1(self, IndicativeFee1):
        self.IndicativeFee1 = IndicativeFee1
    def get_IndicativeFee7(self):
        return self.IndicativeFee7
    def set_IndicativeFee7(self, IndicativeFee7):
        self.IndicativeFee7 = IndicativeFee7
    def get_IndicativeFeeAllDay(self):
        return self.IndicativeFeeAllDay
    def set_IndicativeFeeAllDay(self, IndicativeFeeAllDay):
        self.IndicativeFeeAllDay = IndicativeFeeAllDay
    def get_IndicativeRebate(self):
        return self.IndicativeRebate
    def set_IndicativeRebate(self, IndicativeRebate):
        self.IndicativeRebate = IndicativeRebate
    def get_IndicativeRebate1(self):
        return self.IndicativeRebate1
    def set_IndicativeRebate1(self, IndicativeRebate1):
        self.IndicativeRebate1 = IndicativeRebate1
    def get_IndicativeRebate7(self):
        return self.IndicativeRebate7
    def set_IndicativeRebate7(self, IndicativeRebate7):
        self.IndicativeRebate7 = IndicativeRebate7
    def get_IndicativeRebateAllDay(self):
        return self.IndicativeRebateAllDay
    def set_IndicativeRebateAllDay(self, IndicativeRebateAllDay):
        self.IndicativeRebateAllDay = IndicativeRebateAllDay
    def get_LastDividendDate(self):
        return self.LastDividendDate
    def set_LastDividendDate(self, LastDividendDate):
        self.LastDividendDate = LastDividendDate
    def get_LendableAsPcIssueValue(self):
        return self.LendableAsPcIssueValue
    def set_LendableAsPcIssueValue(self, LendableAsPcIssueValue):
        self.LendableAsPcIssueValue = LendableAsPcIssueValue
    def get_LendableAsPcMarketCap(self):
        return self.LendableAsPcMarketCap
    def set_LendableAsPcMarketCap(self, LendableAsPcMarketCap):
        self.LendableAsPcMarketCap = LendableAsPcMarketCap
    def get_LendableAsPcSharesOutstanding(self):
        return self.LendableAsPcSharesOutstanding
    def set_LendableAsPcSharesOutstanding(self, LendableAsPcSharesOutstanding):
        self.LendableAsPcSharesOutstanding = LendableAsPcSharesOutstanding
    def get_LenderValueOnLoanAsPcIssueValue(self):
        return self.LenderValueOnLoanAsPcIssueValue
    def set_LenderValueOnLoanAsPcIssueValue(self, LenderValueOnLoanAsPcIssueValue):
        self.LenderValueOnLoanAsPcIssueValue = LenderValueOnLoanAsPcIssueValue
    def get_LenderValueOnLoanAsPcMarketCap(self):
        return self.LenderValueOnLoanAsPcMarketCap
    def set_LenderValueOnLoanAsPcMarketCap(self, LenderValueOnLoanAsPcMarketCap):
        self.LenderValueOnLoanAsPcMarketCap = LenderValueOnLoanAsPcMarketCap
    def get_MarketCap(self):
        return self.MarketCap
    def set_MarketCap(self, MarketCap):
        self.MarketCap = MarketCap
    def get_NextDividendDate(self):
        return self.NextDividendDate
    def set_NextDividendDate(self, NextDividendDate):
        self.NextDividendDate = NextDividendDate
    def get_PcFreeFloatQuantityOnLoan(self):
        return self.PcFreeFloatQuantityOnLoan
    def set_PcFreeFloatQuantityOnLoan(self, PcFreeFloatQuantityOnLoan):
        self.PcFreeFloatQuantityOnLoan = PcFreeFloatQuantityOnLoan
    def get_PcFreeFloatValueOnLoan(self):
        return self.PcFreeFloatValueOnLoan
    def set_PcFreeFloatValueOnLoan(self, PcFreeFloatValueOnLoan):
        self.PcFreeFloatValueOnLoan = PcFreeFloatValueOnLoan
    def get_PcIssueValueOnLoan(self):
        return self.PcIssueValueOnLoan
    def set_PcIssueValueOnLoan(self, PcIssueValueOnLoan):
        self.PcIssueValueOnLoan = PcIssueValueOnLoan
    def get_PcMarketCapOnLoan(self):
        return self.PcMarketCapOnLoan
    def set_PcMarketCapOnLoan(self, PcMarketCapOnLoan):
        self.PcMarketCapOnLoan = PcMarketCapOnLoan
    def get_PcSharesOutstandingOnLoan(self):
        return self.PcSharesOutstandingOnLoan
    def set_PcSharesOutstandingOnLoan(self, PcSharesOutstandingOnLoan):
        self.PcSharesOutstandingOnLoan = PcSharesOutstandingOnLoan
    def get_Price(self):
        return self.Price
    def set_Price(self, Price):
        self.Price = Price
    def get_PriceCurrency(self):
        return self.PriceCurrency
    def set_PriceCurrency(self, PriceCurrency):
        self.PriceCurrency = PriceCurrency
    def get_SharesOutstanding(self):
        return self.SharesOutstanding
    def set_SharesOutstanding(self, SharesOutstanding):
        self.SharesOutstanding = SharesOutstanding
    def get_ShortLoanQuantity(self):
        return self.ShortLoanQuantity
    def set_ShortLoanQuantity(self, ShortLoanQuantity):
        self.ShortLoanQuantity = ShortLoanQuantity
    def get_ShortLoanValue(self):
        return self.ShortLoanValue
    def set_ShortLoanValue(self, ShortLoanValue):
        self.ShortLoanValue = ShortLoanValue
    def get_ShortLoanValueAsPcIssueValue(self):
        return self.ShortLoanValueAsPcIssueValue
    def set_ShortLoanValueAsPcIssueValue(self, ShortLoanValueAsPcIssueValue):
        self.ShortLoanValueAsPcIssueValue = ShortLoanValueAsPcIssueValue
    def get_ShortLoanValueAsPcMarketCap(self):
        return self.ShortLoanValueAsPcMarketCap
    def set_ShortLoanValueAsPcMarketCap(self, ShortLoanValueAsPcMarketCap):
        self.ShortLoanValueAsPcMarketCap = ShortLoanValueAsPcMarketCap
    def get_VolumeTraded(self):
        return self.VolumeTraded
    def set_VolumeTraded(self, VolumeTraded):
        self.VolumeTraded = VolumeTraded
    def hasContent_(self):
        if (
            self.DaysToCover is not None or
            self.DaysToCoverQuantity is not None or
            self.DCBS is not None or
            self.Delta or
            self.IndicativeFee is not None or
            self.IndicativeFee1 is not None or
            self.IndicativeFee7 is not None or
            self.IndicativeFeeAllDay is not None or
            self.IndicativeRebate is not None or
            self.IndicativeRebate1 is not None or
            self.IndicativeRebate7 is not None or
            self.IndicativeRebateAllDay is not None or
            self.LastDividendDate is not None or
            self.LendableAsPcIssueValue is not None or
            self.LendableAsPcMarketCap is not None or
            self.LendableAsPcSharesOutstanding is not None or
            self.LenderValueOnLoanAsPcIssueValue is not None or
            self.LenderValueOnLoanAsPcMarketCap is not None or
            self.MarketCap is not None or
            self.NextDividendDate is not None or
            self.PcFreeFloatQuantityOnLoan is not None or
            self.PcFreeFloatValueOnLoan is not None or
            self.PcIssueValueOnLoan is not None or
            self.PcMarketCapOnLoan is not None or
            self.PcSharesOutstandingOnLoan is not None or
            self.Price is not None or
            self.PriceCurrency is not None or
            self.SharesOutstanding is not None or
            self.ShortLoanQuantity is not None or
            self.ShortLoanValue is not None or
            self.ShortLoanValueAsPcIssueValue is not None or
            self.ShortLoanValueAsPcMarketCap is not None or
            self.VolumeTraded is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MarketColourType134', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarketColourType134')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarketColourType134')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarketColourType134', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarketColourType134'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MarketColourType134', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DaysToCover is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDaysToCover>%s</%sDaysToCover>%s' % (namespaceprefix_ , self.gds_format_float(self.DaysToCover, input_name='DaysToCover'), namespaceprefix_ , eol_))
        if self.DaysToCoverQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDaysToCoverQuantity>%s</%sDaysToCoverQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.DaysToCoverQuantity, input_name='DaysToCoverQuantity'), namespaceprefix_ , eol_))
        if self.DCBS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDCBS>%s</%sDCBS>%s' % (namespaceprefix_ , self.gds_format_float(self.DCBS, input_name='DCBS'), namespaceprefix_ , eol_))
        for Delta_ in self.Delta:
            Delta_.export(outfile, level, namespaceprefix_, name_='Delta', pretty_print=pretty_print)
        if self.IndicativeFee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeFee>%s</%sIndicativeFee>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeFee, input_name='IndicativeFee'), namespaceprefix_ , eol_))
        if self.IndicativeFee1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeFee1>%s</%sIndicativeFee1>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeFee1, input_name='IndicativeFee1'), namespaceprefix_ , eol_))
        if self.IndicativeFee7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeFee7>%s</%sIndicativeFee7>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeFee7, input_name='IndicativeFee7'), namespaceprefix_ , eol_))
        if self.IndicativeFeeAllDay is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeFeeAllDay>%s</%sIndicativeFeeAllDay>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeFeeAllDay, input_name='IndicativeFeeAllDay'), namespaceprefix_ , eol_))
        if self.IndicativeRebate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeRebate>%s</%sIndicativeRebate>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeRebate, input_name='IndicativeRebate'), namespaceprefix_ , eol_))
        if self.IndicativeRebate1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeRebate1>%s</%sIndicativeRebate1>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeRebate1, input_name='IndicativeRebate1'), namespaceprefix_ , eol_))
        if self.IndicativeRebate7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeRebate7>%s</%sIndicativeRebate7>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeRebate7, input_name='IndicativeRebate7'), namespaceprefix_ , eol_))
        if self.IndicativeRebateAllDay is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeRebateAllDay>%s</%sIndicativeRebateAllDay>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeRebateAllDay, input_name='IndicativeRebateAllDay'), namespaceprefix_ , eol_))
        if self.LastDividendDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLastDividendDate>%s</%sLastDividendDate>%s' % (namespaceprefix_ , self.gds_format_date(self.LastDividendDate, input_name='LastDividendDate'), namespaceprefix_ , eol_))
        if self.LendableAsPcIssueValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableAsPcIssueValue>%s</%sLendableAsPcIssueValue>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableAsPcIssueValue, input_name='LendableAsPcIssueValue'), namespaceprefix_ , eol_))
        if self.LendableAsPcMarketCap is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableAsPcMarketCap>%s</%sLendableAsPcMarketCap>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableAsPcMarketCap, input_name='LendableAsPcMarketCap'), namespaceprefix_ , eol_))
        if self.LendableAsPcSharesOutstanding is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableAsPcSharesOutstanding>%s</%sLendableAsPcSharesOutstanding>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableAsPcSharesOutstanding, input_name='LendableAsPcSharesOutstanding'), namespaceprefix_ , eol_))
        if self.LenderValueOnLoanAsPcIssueValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderValueOnLoanAsPcIssueValue>%s</%sLenderValueOnLoanAsPcIssueValue>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderValueOnLoanAsPcIssueValue, input_name='LenderValueOnLoanAsPcIssueValue'), namespaceprefix_ , eol_))
        if self.LenderValueOnLoanAsPcMarketCap is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderValueOnLoanAsPcMarketCap>%s</%sLenderValueOnLoanAsPcMarketCap>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderValueOnLoanAsPcMarketCap, input_name='LenderValueOnLoanAsPcMarketCap'), namespaceprefix_ , eol_))
        if self.MarketCap is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarketCap>%s</%sMarketCap>%s' % (namespaceprefix_ , self.gds_format_float(self.MarketCap, input_name='MarketCap'), namespaceprefix_ , eol_))
        if self.NextDividendDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNextDividendDate>%s</%sNextDividendDate>%s' % (namespaceprefix_ , self.gds_format_date(self.NextDividendDate, input_name='NextDividendDate'), namespaceprefix_ , eol_))
        if self.PcFreeFloatQuantityOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcFreeFloatQuantityOnLoan>%s</%sPcFreeFloatQuantityOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.PcFreeFloatQuantityOnLoan, input_name='PcFreeFloatQuantityOnLoan'), namespaceprefix_ , eol_))
        if self.PcFreeFloatValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcFreeFloatValueOnLoan>%s</%sPcFreeFloatValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.PcFreeFloatValueOnLoan, input_name='PcFreeFloatValueOnLoan'), namespaceprefix_ , eol_))
        if self.PcIssueValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcIssueValueOnLoan>%s</%sPcIssueValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.PcIssueValueOnLoan, input_name='PcIssueValueOnLoan'), namespaceprefix_ , eol_))
        if self.PcMarketCapOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcMarketCapOnLoan>%s</%sPcMarketCapOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.PcMarketCapOnLoan, input_name='PcMarketCapOnLoan'), namespaceprefix_ , eol_))
        if self.PcSharesOutstandingOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcSharesOutstandingOnLoan>%s</%sPcSharesOutstandingOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.PcSharesOutstandingOnLoan, input_name='PcSharesOutstandingOnLoan'), namespaceprefix_ , eol_))
        if self.Price is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrice>%s</%sPrice>%s' % (namespaceprefix_ , self.gds_format_float(self.Price, input_name='Price'), namespaceprefix_ , eol_))
        if self.PriceCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceCurrency>%s</%sPriceCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PriceCurrency), input_name='PriceCurrency')), namespaceprefix_ , eol_))
        if self.SharesOutstanding is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSharesOutstanding>%s</%sSharesOutstanding>%s' % (namespaceprefix_ , self.gds_format_float(self.SharesOutstanding, input_name='SharesOutstanding'), namespaceprefix_ , eol_))
        if self.ShortLoanQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortLoanQuantity>%s</%sShortLoanQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.ShortLoanQuantity, input_name='ShortLoanQuantity'), namespaceprefix_ , eol_))
        if self.ShortLoanValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortLoanValue>%s</%sShortLoanValue>%s' % (namespaceprefix_ , self.gds_format_float(self.ShortLoanValue, input_name='ShortLoanValue'), namespaceprefix_ , eol_))
        if self.ShortLoanValueAsPcIssueValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortLoanValueAsPcIssueValue>%s</%sShortLoanValueAsPcIssueValue>%s' % (namespaceprefix_ , self.gds_format_float(self.ShortLoanValueAsPcIssueValue, input_name='ShortLoanValueAsPcIssueValue'), namespaceprefix_ , eol_))
        if self.ShortLoanValueAsPcMarketCap is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortLoanValueAsPcMarketCap>%s</%sShortLoanValueAsPcMarketCap>%s' % (namespaceprefix_ , self.gds_format_float(self.ShortLoanValueAsPcMarketCap, input_name='ShortLoanValueAsPcMarketCap'), namespaceprefix_ , eol_))
        if self.VolumeTraded is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVolumeTraded>%s</%sVolumeTraded>%s' % (namespaceprefix_ , self.gds_format_float(self.VolumeTraded, input_name='VolumeTraded'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DaysToCover' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DaysToCover')
            self.DaysToCover = fval_
        elif nodeName_ == 'DaysToCoverQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DaysToCoverQuantity')
            self.DaysToCoverQuantity = fval_
        elif nodeName_ == 'DCBS' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DCBS')
            self.DCBS = fval_
        elif nodeName_ == 'Delta':
            obj_ = DeltaType135.factory(parent_object_=self)
            obj_.build(child_)
            self.Delta.append(obj_)
            obj_.original_tagname_ = 'Delta'
        elif nodeName_ == 'IndicativeFee' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeFee')
            self.IndicativeFee = fval_
        elif nodeName_ == 'IndicativeFee1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeFee1')
            self.IndicativeFee1 = fval_
        elif nodeName_ == 'IndicativeFee7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeFee7')
            self.IndicativeFee7 = fval_
        elif nodeName_ == 'IndicativeFeeAllDay' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeFeeAllDay')
            self.IndicativeFeeAllDay = fval_
        elif nodeName_ == 'IndicativeRebate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeRebate')
            self.IndicativeRebate = fval_
        elif nodeName_ == 'IndicativeRebate1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeRebate1')
            self.IndicativeRebate1 = fval_
        elif nodeName_ == 'IndicativeRebate7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeRebate7')
            self.IndicativeRebate7 = fval_
        elif nodeName_ == 'IndicativeRebateAllDay' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeRebateAllDay')
            self.IndicativeRebateAllDay = fval_
        elif nodeName_ == 'LastDividendDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.LastDividendDate = dval_
        elif nodeName_ == 'LendableAsPcIssueValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableAsPcIssueValue')
            self.LendableAsPcIssueValue = fval_
        elif nodeName_ == 'LendableAsPcMarketCap' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableAsPcMarketCap')
            self.LendableAsPcMarketCap = fval_
        elif nodeName_ == 'LendableAsPcSharesOutstanding' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableAsPcSharesOutstanding')
            self.LendableAsPcSharesOutstanding = fval_
        elif nodeName_ == 'LenderValueOnLoanAsPcIssueValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderValueOnLoanAsPcIssueValue')
            self.LenderValueOnLoanAsPcIssueValue = fval_
        elif nodeName_ == 'LenderValueOnLoanAsPcMarketCap' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderValueOnLoanAsPcMarketCap')
            self.LenderValueOnLoanAsPcMarketCap = fval_
        elif nodeName_ == 'MarketCap' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'MarketCap')
            self.MarketCap = fval_
        elif nodeName_ == 'NextDividendDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.NextDividendDate = dval_
        elif nodeName_ == 'PcFreeFloatQuantityOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcFreeFloatQuantityOnLoan')
            self.PcFreeFloatQuantityOnLoan = fval_
        elif nodeName_ == 'PcFreeFloatValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcFreeFloatValueOnLoan')
            self.PcFreeFloatValueOnLoan = fval_
        elif nodeName_ == 'PcIssueValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcIssueValueOnLoan')
            self.PcIssueValueOnLoan = fval_
        elif nodeName_ == 'PcMarketCapOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcMarketCapOnLoan')
            self.PcMarketCapOnLoan = fval_
        elif nodeName_ == 'PcSharesOutstandingOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcSharesOutstandingOnLoan')
            self.PcSharesOutstandingOnLoan = fval_
        elif nodeName_ == 'Price' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Price')
            self.Price = fval_
        elif nodeName_ == 'PriceCurrency':
            PriceCurrency_ = child_.text
            PriceCurrency_ = self.gds_validate_string(PriceCurrency_, node, 'PriceCurrency')
            self.PriceCurrency = PriceCurrency_
        elif nodeName_ == 'SharesOutstanding' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SharesOutstanding')
            self.SharesOutstanding = fval_
        elif nodeName_ == 'ShortLoanQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ShortLoanQuantity')
            self.ShortLoanQuantity = fval_
        elif nodeName_ == 'ShortLoanValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ShortLoanValue')
            self.ShortLoanValue = fval_
        elif nodeName_ == 'ShortLoanValueAsPcIssueValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ShortLoanValueAsPcIssueValue')
            self.ShortLoanValueAsPcIssueValue = fval_
        elif nodeName_ == 'ShortLoanValueAsPcMarketCap' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ShortLoanValueAsPcMarketCap')
            self.ShortLoanValueAsPcMarketCap = fval_
        elif nodeName_ == 'VolumeTraded' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VolumeTraded')
            self.VolumeTraded = fval_
# end class MarketColourType134


class DeltaType135(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, DaysToCoverDelta=None, DaysToCoverQuantityDelta=None, IndicativeFee1DayDelta=None, IndicativeFee7DaysDelta=None, IndicativeFeeAllDayDelta=None, IndicativeFeeDelta=None, IndicativeRebate1DayDelta=None, IndicativeRebate7DaysDelta=None, IndicativeRebateAllDayDelta=None, IndicativeRebateDelta=None, PcIssueValueOnLoanDelta=None, PcLendableAsPcSharesOutstandingDelta=None, PcMarketCapOnLoanDelta=None, PcSharesOutstandingOnLoanDelta=None, PriceDelta=None, ShortLoanQuantityDelta=None, ShortLoanValueDelta=None, VolumeTradedDelta=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.value = _cast(None, value)
        self.DaysToCoverDelta = DaysToCoverDelta
        self.DaysToCoverQuantityDelta = DaysToCoverQuantityDelta
        self.IndicativeFee1DayDelta = IndicativeFee1DayDelta
        self.IndicativeFee7DaysDelta = IndicativeFee7DaysDelta
        self.IndicativeFeeAllDayDelta = IndicativeFeeAllDayDelta
        self.IndicativeFeeDelta = IndicativeFeeDelta
        self.IndicativeRebate1DayDelta = IndicativeRebate1DayDelta
        self.IndicativeRebate7DaysDelta = IndicativeRebate7DaysDelta
        self.IndicativeRebateAllDayDelta = IndicativeRebateAllDayDelta
        self.IndicativeRebateDelta = IndicativeRebateDelta
        self.PcIssueValueOnLoanDelta = PcIssueValueOnLoanDelta
        self.PcLendableAsPcSharesOutstandingDelta = PcLendableAsPcSharesOutstandingDelta
        self.PcMarketCapOnLoanDelta = PcMarketCapOnLoanDelta
        self.PcSharesOutstandingOnLoanDelta = PcSharesOutstandingOnLoanDelta
        self.PriceDelta = PriceDelta
        self.ShortLoanQuantityDelta = ShortLoanQuantityDelta
        self.ShortLoanValueDelta = ShortLoanValueDelta
        self.VolumeTradedDelta = VolumeTradedDelta
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeltaType135)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeltaType135.subclass:
            return DeltaType135.subclass(*args_, **kwargs_)
        else:
            return DeltaType135(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DaysToCoverDelta(self):
        return self.DaysToCoverDelta
    def set_DaysToCoverDelta(self, DaysToCoverDelta):
        self.DaysToCoverDelta = DaysToCoverDelta
    def get_DaysToCoverQuantityDelta(self):
        return self.DaysToCoverQuantityDelta
    def set_DaysToCoverQuantityDelta(self, DaysToCoverQuantityDelta):
        self.DaysToCoverQuantityDelta = DaysToCoverQuantityDelta
    def get_IndicativeFee1DayDelta(self):
        return self.IndicativeFee1DayDelta
    def set_IndicativeFee1DayDelta(self, IndicativeFee1DayDelta):
        self.IndicativeFee1DayDelta = IndicativeFee1DayDelta
    def get_IndicativeFee7DaysDelta(self):
        return self.IndicativeFee7DaysDelta
    def set_IndicativeFee7DaysDelta(self, IndicativeFee7DaysDelta):
        self.IndicativeFee7DaysDelta = IndicativeFee7DaysDelta
    def get_IndicativeFeeAllDayDelta(self):
        return self.IndicativeFeeAllDayDelta
    def set_IndicativeFeeAllDayDelta(self, IndicativeFeeAllDayDelta):
        self.IndicativeFeeAllDayDelta = IndicativeFeeAllDayDelta
    def get_IndicativeFeeDelta(self):
        return self.IndicativeFeeDelta
    def set_IndicativeFeeDelta(self, IndicativeFeeDelta):
        self.IndicativeFeeDelta = IndicativeFeeDelta
    def get_IndicativeRebate1DayDelta(self):
        return self.IndicativeRebate1DayDelta
    def set_IndicativeRebate1DayDelta(self, IndicativeRebate1DayDelta):
        self.IndicativeRebate1DayDelta = IndicativeRebate1DayDelta
    def get_IndicativeRebate7DaysDelta(self):
        return self.IndicativeRebate7DaysDelta
    def set_IndicativeRebate7DaysDelta(self, IndicativeRebate7DaysDelta):
        self.IndicativeRebate7DaysDelta = IndicativeRebate7DaysDelta
    def get_IndicativeRebateAllDayDelta(self):
        return self.IndicativeRebateAllDayDelta
    def set_IndicativeRebateAllDayDelta(self, IndicativeRebateAllDayDelta):
        self.IndicativeRebateAllDayDelta = IndicativeRebateAllDayDelta
    def get_IndicativeRebateDelta(self):
        return self.IndicativeRebateDelta
    def set_IndicativeRebateDelta(self, IndicativeRebateDelta):
        self.IndicativeRebateDelta = IndicativeRebateDelta
    def get_PcIssueValueOnLoanDelta(self):
        return self.PcIssueValueOnLoanDelta
    def set_PcIssueValueOnLoanDelta(self, PcIssueValueOnLoanDelta):
        self.PcIssueValueOnLoanDelta = PcIssueValueOnLoanDelta
    def get_PcLendableAsPcSharesOutstandingDelta(self):
        return self.PcLendableAsPcSharesOutstandingDelta
    def set_PcLendableAsPcSharesOutstandingDelta(self, PcLendableAsPcSharesOutstandingDelta):
        self.PcLendableAsPcSharesOutstandingDelta = PcLendableAsPcSharesOutstandingDelta
    def get_PcMarketCapOnLoanDelta(self):
        return self.PcMarketCapOnLoanDelta
    def set_PcMarketCapOnLoanDelta(self, PcMarketCapOnLoanDelta):
        self.PcMarketCapOnLoanDelta = PcMarketCapOnLoanDelta
    def get_PcSharesOutstandingOnLoanDelta(self):
        return self.PcSharesOutstandingOnLoanDelta
    def set_PcSharesOutstandingOnLoanDelta(self, PcSharesOutstandingOnLoanDelta):
        self.PcSharesOutstandingOnLoanDelta = PcSharesOutstandingOnLoanDelta
    def get_PriceDelta(self):
        return self.PriceDelta
    def set_PriceDelta(self, PriceDelta):
        self.PriceDelta = PriceDelta
    def get_ShortLoanQuantityDelta(self):
        return self.ShortLoanQuantityDelta
    def set_ShortLoanQuantityDelta(self, ShortLoanQuantityDelta):
        self.ShortLoanQuantityDelta = ShortLoanQuantityDelta
    def get_ShortLoanValueDelta(self):
        return self.ShortLoanValueDelta
    def set_ShortLoanValueDelta(self, ShortLoanValueDelta):
        self.ShortLoanValueDelta = ShortLoanValueDelta
    def get_VolumeTradedDelta(self):
        return self.VolumeTradedDelta
    def set_VolumeTradedDelta(self, VolumeTradedDelta):
        self.VolumeTradedDelta = VolumeTradedDelta
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.DaysToCoverDelta is not None or
            self.DaysToCoverQuantityDelta is not None or
            self.IndicativeFee1DayDelta is not None or
            self.IndicativeFee7DaysDelta is not None or
            self.IndicativeFeeAllDayDelta is not None or
            self.IndicativeFeeDelta is not None or
            self.IndicativeRebate1DayDelta is not None or
            self.IndicativeRebate7DaysDelta is not None or
            self.IndicativeRebateAllDayDelta is not None or
            self.IndicativeRebateDelta is not None or
            self.PcIssueValueOnLoanDelta is not None or
            self.PcLendableAsPcSharesOutstandingDelta is not None or
            self.PcMarketCapOnLoanDelta is not None or
            self.PcSharesOutstandingOnLoanDelta is not None or
            self.PriceDelta is not None or
            self.ShortLoanQuantityDelta is not None or
            self.ShortLoanValueDelta is not None or
            self.VolumeTradedDelta is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeltaType135', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeltaType135')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DeltaType135')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DeltaType135', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DeltaType135'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeltaType135', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DaysToCoverDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDaysToCoverDelta>%s</%sDaysToCoverDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.DaysToCoverDelta, input_name='DaysToCoverDelta'), namespaceprefix_ , eol_))
        if self.DaysToCoverQuantityDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDaysToCoverQuantityDelta>%s</%sDaysToCoverQuantityDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.DaysToCoverQuantityDelta, input_name='DaysToCoverQuantityDelta'), namespaceprefix_ , eol_))
        if self.IndicativeFee1DayDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeFee1DayDelta>%s</%sIndicativeFee1DayDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeFee1DayDelta, input_name='IndicativeFee1DayDelta'), namespaceprefix_ , eol_))
        if self.IndicativeFee7DaysDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeFee7DaysDelta>%s</%sIndicativeFee7DaysDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeFee7DaysDelta, input_name='IndicativeFee7DaysDelta'), namespaceprefix_ , eol_))
        if self.IndicativeFeeAllDayDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeFeeAllDayDelta>%s</%sIndicativeFeeAllDayDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeFeeAllDayDelta, input_name='IndicativeFeeAllDayDelta'), namespaceprefix_ , eol_))
        if self.IndicativeFeeDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeFeeDelta>%s</%sIndicativeFeeDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeFeeDelta, input_name='IndicativeFeeDelta'), namespaceprefix_ , eol_))
        if self.IndicativeRebate1DayDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeRebate1DayDelta>%s</%sIndicativeRebate1DayDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeRebate1DayDelta, input_name='IndicativeRebate1DayDelta'), namespaceprefix_ , eol_))
        if self.IndicativeRebate7DaysDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeRebate7DaysDelta>%s</%sIndicativeRebate7DaysDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeRebate7DaysDelta, input_name='IndicativeRebate7DaysDelta'), namespaceprefix_ , eol_))
        if self.IndicativeRebateAllDayDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeRebateAllDayDelta>%s</%sIndicativeRebateAllDayDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeRebateAllDayDelta, input_name='IndicativeRebateAllDayDelta'), namespaceprefix_ , eol_))
        if self.IndicativeRebateDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeRebateDelta>%s</%sIndicativeRebateDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeRebateDelta, input_name='IndicativeRebateDelta'), namespaceprefix_ , eol_))
        if self.PcIssueValueOnLoanDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcIssueValueOnLoanDelta>%s</%sPcIssueValueOnLoanDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.PcIssueValueOnLoanDelta, input_name='PcIssueValueOnLoanDelta'), namespaceprefix_ , eol_))
        if self.PcLendableAsPcSharesOutstandingDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcLendableAsPcSharesOutstandingDelta>%s</%sPcLendableAsPcSharesOutstandingDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.PcLendableAsPcSharesOutstandingDelta, input_name='PcLendableAsPcSharesOutstandingDelta'), namespaceprefix_ , eol_))
        if self.PcMarketCapOnLoanDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcMarketCapOnLoanDelta>%s</%sPcMarketCapOnLoanDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.PcMarketCapOnLoanDelta, input_name='PcMarketCapOnLoanDelta'), namespaceprefix_ , eol_))
        if self.PcSharesOutstandingOnLoanDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcSharesOutstandingOnLoanDelta>%s</%sPcSharesOutstandingOnLoanDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.PcSharesOutstandingOnLoanDelta, input_name='PcSharesOutstandingOnLoanDelta'), namespaceprefix_ , eol_))
        if self.PriceDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceDelta>%s</%sPriceDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.PriceDelta, input_name='PriceDelta'), namespaceprefix_ , eol_))
        if self.ShortLoanQuantityDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortLoanQuantityDelta>%s</%sShortLoanQuantityDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.ShortLoanQuantityDelta, input_name='ShortLoanQuantityDelta'), namespaceprefix_ , eol_))
        if self.ShortLoanValueDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortLoanValueDelta>%s</%sShortLoanValueDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.ShortLoanValueDelta, input_name='ShortLoanValueDelta'), namespaceprefix_ , eol_))
        if self.VolumeTradedDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVolumeTradedDelta>%s</%sVolumeTradedDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.VolumeTradedDelta, input_name='VolumeTradedDelta'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DaysToCoverDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DaysToCoverDelta')
            self.DaysToCoverDelta = fval_
        elif nodeName_ == 'DaysToCoverQuantityDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DaysToCoverQuantityDelta')
            self.DaysToCoverQuantityDelta = fval_
        elif nodeName_ == 'IndicativeFee1DayDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeFee1DayDelta')
            self.IndicativeFee1DayDelta = fval_
        elif nodeName_ == 'IndicativeFee7DaysDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeFee7DaysDelta')
            self.IndicativeFee7DaysDelta = fval_
        elif nodeName_ == 'IndicativeFeeAllDayDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeFeeAllDayDelta')
            self.IndicativeFeeAllDayDelta = fval_
        elif nodeName_ == 'IndicativeFeeDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeFeeDelta')
            self.IndicativeFeeDelta = fval_
        elif nodeName_ == 'IndicativeRebate1DayDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeRebate1DayDelta')
            self.IndicativeRebate1DayDelta = fval_
        elif nodeName_ == 'IndicativeRebate7DaysDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeRebate7DaysDelta')
            self.IndicativeRebate7DaysDelta = fval_
        elif nodeName_ == 'IndicativeRebateAllDayDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeRebateAllDayDelta')
            self.IndicativeRebateAllDayDelta = fval_
        elif nodeName_ == 'IndicativeRebateDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeRebateDelta')
            self.IndicativeRebateDelta = fval_
        elif nodeName_ == 'PcIssueValueOnLoanDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcIssueValueOnLoanDelta')
            self.PcIssueValueOnLoanDelta = fval_
        elif nodeName_ == 'PcLendableAsPcSharesOutstandingDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcLendableAsPcSharesOutstandingDelta')
            self.PcLendableAsPcSharesOutstandingDelta = fval_
        elif nodeName_ == 'PcMarketCapOnLoanDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcMarketCapOnLoanDelta')
            self.PcMarketCapOnLoanDelta = fval_
        elif nodeName_ == 'PcSharesOutstandingOnLoanDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcSharesOutstandingOnLoanDelta')
            self.PcSharesOutstandingOnLoanDelta = fval_
        elif nodeName_ == 'PriceDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PriceDelta')
            self.PriceDelta = fval_
        elif nodeName_ == 'ShortLoanQuantityDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ShortLoanQuantityDelta')
            self.ShortLoanQuantityDelta = fval_
        elif nodeName_ == 'ShortLoanValueDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ShortLoanValueDelta')
            self.ShortLoanValueDelta = fval_
        elif nodeName_ == 'VolumeTradedDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VolumeTradedDelta')
            self.VolumeTradedDelta = fval_
# end class DeltaType135


class MetricsType136(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Metric=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if Metric is None:
            self.Metric = []
        else:
            self.Metric = Metric
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MetricsType136)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MetricsType136.subclass:
            return MetricsType136.subclass(*args_, **kwargs_)
        else:
            return MetricsType136(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Metric(self):
        return self.Metric
    def set_Metric(self, Metric):
        self.Metric = Metric
    def add_Metric(self, value):
        self.Metric.append(value)
    def add_Metric(self, value):
        self.Metric.append(value)
    def insert_Metric_at(self, index, value):
        self.Metric.insert(index, value)
    def replace_Metric_at(self, index, value):
        self.Metric[index] = value
    def hasContent_(self):
        if (
            self.Metric
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MetricsType136', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MetricsType136')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MetricsType136')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MetricsType136', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MetricsType136'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MetricsType136', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Metric_ in self.Metric:
            Metric_.export(outfile, level, namespaceprefix_, name_='Metric', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Metric':
            obj_ = MetricType137.factory(parent_object_=self)
            obj_.build(child_)
            self.Metric.append(obj_)
            obj_.original_tagname_ = 'Metric'
# end class MetricsType136


class MetricType137(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, BenchmarkFeeMetric=None, BenchmarkFeeMetricDate=None, BenchmarkRebateMetric=None, BenchmarkRebateMetricDate=None, LendableQuantityMetric=None, LendableQuantityMetricDate=None, LendableValueMetric=None, LendableValueMetricDate=None, LenderFeeMetric=None, LenderFeeMetricDate=None, LenderValueOnLoanMetric=None, LenderValueOnLoanMetricDate=None, PcSharesOutstandingOnLoanMetric=None, PcSharesOutstandingOnLoanMetricDate=None, PriceMetric=None, PriceMetricDate=None, QuantityOnLoanMetric=None, QuantityOnLoanMetricDate=None, TradableFeeMetric=None, TradableFeeMetricDate=None, TradableRebateMetric=None, TradableRebateMetricDate=None, UtilisationByQuantityMetric=None, UtilisationByQuantityMetricDate=None, UtilisationMetric=None, UtilisationMetricDate=None, ValueOnLoanMetric=None, ValueOnLoanMetricDate=None, VWAFMetric=None, VWAFMetricDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.value = _cast(None, value)
        self.BenchmarkFeeMetric = BenchmarkFeeMetric
        if isinstance(BenchmarkFeeMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(BenchmarkFeeMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = BenchmarkFeeMetricDate
        self.BenchmarkFeeMetricDate = initvalue_
        self.BenchmarkRebateMetric = BenchmarkRebateMetric
        if isinstance(BenchmarkRebateMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(BenchmarkRebateMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = BenchmarkRebateMetricDate
        self.BenchmarkRebateMetricDate = initvalue_
        self.LendableQuantityMetric = LendableQuantityMetric
        if isinstance(LendableQuantityMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LendableQuantityMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = LendableQuantityMetricDate
        self.LendableQuantityMetricDate = initvalue_
        self.LendableValueMetric = LendableValueMetric
        if isinstance(LendableValueMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LendableValueMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = LendableValueMetricDate
        self.LendableValueMetricDate = initvalue_
        self.LenderFeeMetric = LenderFeeMetric
        if isinstance(LenderFeeMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LenderFeeMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = LenderFeeMetricDate
        self.LenderFeeMetricDate = initvalue_
        self.LenderValueOnLoanMetric = LenderValueOnLoanMetric
        if isinstance(LenderValueOnLoanMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LenderValueOnLoanMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = LenderValueOnLoanMetricDate
        self.LenderValueOnLoanMetricDate = initvalue_
        self.PcSharesOutstandingOnLoanMetric = PcSharesOutstandingOnLoanMetric
        if isinstance(PcSharesOutstandingOnLoanMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(PcSharesOutstandingOnLoanMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = PcSharesOutstandingOnLoanMetricDate
        self.PcSharesOutstandingOnLoanMetricDate = initvalue_
        self.PriceMetric = PriceMetric
        if isinstance(PriceMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(PriceMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = PriceMetricDate
        self.PriceMetricDate = initvalue_
        self.QuantityOnLoanMetric = QuantityOnLoanMetric
        if isinstance(QuantityOnLoanMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(QuantityOnLoanMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = QuantityOnLoanMetricDate
        self.QuantityOnLoanMetricDate = initvalue_
        self.TradableFeeMetric = TradableFeeMetric
        if isinstance(TradableFeeMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TradableFeeMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = TradableFeeMetricDate
        self.TradableFeeMetricDate = initvalue_
        self.TradableRebateMetric = TradableRebateMetric
        if isinstance(TradableRebateMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TradableRebateMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = TradableRebateMetricDate
        self.TradableRebateMetricDate = initvalue_
        self.UtilisationByQuantityMetric = UtilisationByQuantityMetric
        if isinstance(UtilisationByQuantityMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(UtilisationByQuantityMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = UtilisationByQuantityMetricDate
        self.UtilisationByQuantityMetricDate = initvalue_
        self.UtilisationMetric = UtilisationMetric
        if isinstance(UtilisationMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(UtilisationMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = UtilisationMetricDate
        self.UtilisationMetricDate = initvalue_
        self.ValueOnLoanMetric = ValueOnLoanMetric
        if isinstance(ValueOnLoanMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ValueOnLoanMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ValueOnLoanMetricDate
        self.ValueOnLoanMetricDate = initvalue_
        self.VWAFMetric = VWAFMetric
        if isinstance(VWAFMetricDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(VWAFMetricDate, '%Y-%m-%d').date()
        else:
            initvalue_ = VWAFMetricDate
        self.VWAFMetricDate = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MetricType137)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MetricType137.subclass:
            return MetricType137.subclass(*args_, **kwargs_)
        else:
            return MetricType137(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BenchmarkFeeMetric(self):
        return self.BenchmarkFeeMetric
    def set_BenchmarkFeeMetric(self, BenchmarkFeeMetric):
        self.BenchmarkFeeMetric = BenchmarkFeeMetric
    def get_BenchmarkFeeMetricDate(self):
        return self.BenchmarkFeeMetricDate
    def set_BenchmarkFeeMetricDate(self, BenchmarkFeeMetricDate):
        self.BenchmarkFeeMetricDate = BenchmarkFeeMetricDate
    def get_BenchmarkRebateMetric(self):
        return self.BenchmarkRebateMetric
    def set_BenchmarkRebateMetric(self, BenchmarkRebateMetric):
        self.BenchmarkRebateMetric = BenchmarkRebateMetric
    def get_BenchmarkRebateMetricDate(self):
        return self.BenchmarkRebateMetricDate
    def set_BenchmarkRebateMetricDate(self, BenchmarkRebateMetricDate):
        self.BenchmarkRebateMetricDate = BenchmarkRebateMetricDate
    def get_LendableQuantityMetric(self):
        return self.LendableQuantityMetric
    def set_LendableQuantityMetric(self, LendableQuantityMetric):
        self.LendableQuantityMetric = LendableQuantityMetric
    def get_LendableQuantityMetricDate(self):
        return self.LendableQuantityMetricDate
    def set_LendableQuantityMetricDate(self, LendableQuantityMetricDate):
        self.LendableQuantityMetricDate = LendableQuantityMetricDate
    def get_LendableValueMetric(self):
        return self.LendableValueMetric
    def set_LendableValueMetric(self, LendableValueMetric):
        self.LendableValueMetric = LendableValueMetric
    def get_LendableValueMetricDate(self):
        return self.LendableValueMetricDate
    def set_LendableValueMetricDate(self, LendableValueMetricDate):
        self.LendableValueMetricDate = LendableValueMetricDate
    def get_LenderFeeMetric(self):
        return self.LenderFeeMetric
    def set_LenderFeeMetric(self, LenderFeeMetric):
        self.LenderFeeMetric = LenderFeeMetric
    def get_LenderFeeMetricDate(self):
        return self.LenderFeeMetricDate
    def set_LenderFeeMetricDate(self, LenderFeeMetricDate):
        self.LenderFeeMetricDate = LenderFeeMetricDate
    def get_LenderValueOnLoanMetric(self):
        return self.LenderValueOnLoanMetric
    def set_LenderValueOnLoanMetric(self, LenderValueOnLoanMetric):
        self.LenderValueOnLoanMetric = LenderValueOnLoanMetric
    def get_LenderValueOnLoanMetricDate(self):
        return self.LenderValueOnLoanMetricDate
    def set_LenderValueOnLoanMetricDate(self, LenderValueOnLoanMetricDate):
        self.LenderValueOnLoanMetricDate = LenderValueOnLoanMetricDate
    def get_PcSharesOutstandingOnLoanMetric(self):
        return self.PcSharesOutstandingOnLoanMetric
    def set_PcSharesOutstandingOnLoanMetric(self, PcSharesOutstandingOnLoanMetric):
        self.PcSharesOutstandingOnLoanMetric = PcSharesOutstandingOnLoanMetric
    def get_PcSharesOutstandingOnLoanMetricDate(self):
        return self.PcSharesOutstandingOnLoanMetricDate
    def set_PcSharesOutstandingOnLoanMetricDate(self, PcSharesOutstandingOnLoanMetricDate):
        self.PcSharesOutstandingOnLoanMetricDate = PcSharesOutstandingOnLoanMetricDate
    def get_PriceMetric(self):
        return self.PriceMetric
    def set_PriceMetric(self, PriceMetric):
        self.PriceMetric = PriceMetric
    def get_PriceMetricDate(self):
        return self.PriceMetricDate
    def set_PriceMetricDate(self, PriceMetricDate):
        self.PriceMetricDate = PriceMetricDate
    def get_QuantityOnLoanMetric(self):
        return self.QuantityOnLoanMetric
    def set_QuantityOnLoanMetric(self, QuantityOnLoanMetric):
        self.QuantityOnLoanMetric = QuantityOnLoanMetric
    def get_QuantityOnLoanMetricDate(self):
        return self.QuantityOnLoanMetricDate
    def set_QuantityOnLoanMetricDate(self, QuantityOnLoanMetricDate):
        self.QuantityOnLoanMetricDate = QuantityOnLoanMetricDate
    def get_TradableFeeMetric(self):
        return self.TradableFeeMetric
    def set_TradableFeeMetric(self, TradableFeeMetric):
        self.TradableFeeMetric = TradableFeeMetric
    def get_TradableFeeMetricDate(self):
        return self.TradableFeeMetricDate
    def set_TradableFeeMetricDate(self, TradableFeeMetricDate):
        self.TradableFeeMetricDate = TradableFeeMetricDate
    def get_TradableRebateMetric(self):
        return self.TradableRebateMetric
    def set_TradableRebateMetric(self, TradableRebateMetric):
        self.TradableRebateMetric = TradableRebateMetric
    def get_TradableRebateMetricDate(self):
        return self.TradableRebateMetricDate
    def set_TradableRebateMetricDate(self, TradableRebateMetricDate):
        self.TradableRebateMetricDate = TradableRebateMetricDate
    def get_UtilisationByQuantityMetric(self):
        return self.UtilisationByQuantityMetric
    def set_UtilisationByQuantityMetric(self, UtilisationByQuantityMetric):
        self.UtilisationByQuantityMetric = UtilisationByQuantityMetric
    def get_UtilisationByQuantityMetricDate(self):
        return self.UtilisationByQuantityMetricDate
    def set_UtilisationByQuantityMetricDate(self, UtilisationByQuantityMetricDate):
        self.UtilisationByQuantityMetricDate = UtilisationByQuantityMetricDate
    def get_UtilisationMetric(self):
        return self.UtilisationMetric
    def set_UtilisationMetric(self, UtilisationMetric):
        self.UtilisationMetric = UtilisationMetric
    def get_UtilisationMetricDate(self):
        return self.UtilisationMetricDate
    def set_UtilisationMetricDate(self, UtilisationMetricDate):
        self.UtilisationMetricDate = UtilisationMetricDate
    def get_ValueOnLoanMetric(self):
        return self.ValueOnLoanMetric
    def set_ValueOnLoanMetric(self, ValueOnLoanMetric):
        self.ValueOnLoanMetric = ValueOnLoanMetric
    def get_ValueOnLoanMetricDate(self):
        return self.ValueOnLoanMetricDate
    def set_ValueOnLoanMetricDate(self, ValueOnLoanMetricDate):
        self.ValueOnLoanMetricDate = ValueOnLoanMetricDate
    def get_VWAFMetric(self):
        return self.VWAFMetric
    def set_VWAFMetric(self, VWAFMetric):
        self.VWAFMetric = VWAFMetric
    def get_VWAFMetricDate(self):
        return self.VWAFMetricDate
    def set_VWAFMetricDate(self, VWAFMetricDate):
        self.VWAFMetricDate = VWAFMetricDate
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.BenchmarkFeeMetric is not None or
            self.BenchmarkFeeMetricDate is not None or
            self.BenchmarkRebateMetric is not None or
            self.BenchmarkRebateMetricDate is not None or
            self.LendableQuantityMetric is not None or
            self.LendableQuantityMetricDate is not None or
            self.LendableValueMetric is not None or
            self.LendableValueMetricDate is not None or
            self.LenderFeeMetric is not None or
            self.LenderFeeMetricDate is not None or
            self.LenderValueOnLoanMetric is not None or
            self.LenderValueOnLoanMetricDate is not None or
            self.PcSharesOutstandingOnLoanMetric is not None or
            self.PcSharesOutstandingOnLoanMetricDate is not None or
            self.PriceMetric is not None or
            self.PriceMetricDate is not None or
            self.QuantityOnLoanMetric is not None or
            self.QuantityOnLoanMetricDate is not None or
            self.TradableFeeMetric is not None or
            self.TradableFeeMetricDate is not None or
            self.TradableRebateMetric is not None or
            self.TradableRebateMetricDate is not None or
            self.UtilisationByQuantityMetric is not None or
            self.UtilisationByQuantityMetricDate is not None or
            self.UtilisationMetric is not None or
            self.UtilisationMetricDate is not None or
            self.ValueOnLoanMetric is not None or
            self.ValueOnLoanMetricDate is not None or
            self.VWAFMetric is not None or
            self.VWAFMetricDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MetricType137', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MetricType137')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MetricType137')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MetricType137', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MetricType137'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MetricType137', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BenchmarkFeeMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBenchmarkFeeMetric>%s</%sBenchmarkFeeMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.BenchmarkFeeMetric, input_name='BenchmarkFeeMetric'), namespaceprefix_ , eol_))
        if self.BenchmarkFeeMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBenchmarkFeeMetricDate>%s</%sBenchmarkFeeMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.BenchmarkFeeMetricDate, input_name='BenchmarkFeeMetricDate'), namespaceprefix_ , eol_))
        if self.BenchmarkRebateMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBenchmarkRebateMetric>%s</%sBenchmarkRebateMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.BenchmarkRebateMetric, input_name='BenchmarkRebateMetric'), namespaceprefix_ , eol_))
        if self.BenchmarkRebateMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBenchmarkRebateMetricDate>%s</%sBenchmarkRebateMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.BenchmarkRebateMetricDate, input_name='BenchmarkRebateMetricDate'), namespaceprefix_ , eol_))
        if self.LendableQuantityMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableQuantityMetric>%s</%sLendableQuantityMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableQuantityMetric, input_name='LendableQuantityMetric'), namespaceprefix_ , eol_))
        if self.LendableQuantityMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableQuantityMetricDate>%s</%sLendableQuantityMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.LendableQuantityMetricDate, input_name='LendableQuantityMetricDate'), namespaceprefix_ , eol_))
        if self.LendableValueMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableValueMetric>%s</%sLendableValueMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableValueMetric, input_name='LendableValueMetric'), namespaceprefix_ , eol_))
        if self.LendableValueMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableValueMetricDate>%s</%sLendableValueMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.LendableValueMetricDate, input_name='LendableValueMetricDate'), namespaceprefix_ , eol_))
        if self.LenderFeeMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderFeeMetric>%s</%sLenderFeeMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderFeeMetric, input_name='LenderFeeMetric'), namespaceprefix_ , eol_))
        if self.LenderFeeMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderFeeMetricDate>%s</%sLenderFeeMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.LenderFeeMetricDate, input_name='LenderFeeMetricDate'), namespaceprefix_ , eol_))
        if self.LenderValueOnLoanMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderValueOnLoanMetric>%s</%sLenderValueOnLoanMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderValueOnLoanMetric, input_name='LenderValueOnLoanMetric'), namespaceprefix_ , eol_))
        if self.LenderValueOnLoanMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderValueOnLoanMetricDate>%s</%sLenderValueOnLoanMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.LenderValueOnLoanMetricDate, input_name='LenderValueOnLoanMetricDate'), namespaceprefix_ , eol_))
        if self.PcSharesOutstandingOnLoanMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcSharesOutstandingOnLoanMetric>%s</%sPcSharesOutstandingOnLoanMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.PcSharesOutstandingOnLoanMetric, input_name='PcSharesOutstandingOnLoanMetric'), namespaceprefix_ , eol_))
        if self.PcSharesOutstandingOnLoanMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcSharesOutstandingOnLoanMetricDate>%s</%sPcSharesOutstandingOnLoanMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.PcSharesOutstandingOnLoanMetricDate, input_name='PcSharesOutstandingOnLoanMetricDate'), namespaceprefix_ , eol_))
        if self.PriceMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceMetric>%s</%sPriceMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.PriceMetric, input_name='PriceMetric'), namespaceprefix_ , eol_))
        if self.PriceMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriceMetricDate>%s</%sPriceMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.PriceMetricDate, input_name='PriceMetricDate'), namespaceprefix_ , eol_))
        if self.QuantityOnLoanMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityOnLoanMetric>%s</%sQuantityOnLoanMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.QuantityOnLoanMetric, input_name='QuantityOnLoanMetric'), namespaceprefix_ , eol_))
        if self.QuantityOnLoanMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityOnLoanMetricDate>%s</%sQuantityOnLoanMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.QuantityOnLoanMetricDate, input_name='QuantityOnLoanMetricDate'), namespaceprefix_ , eol_))
        if self.TradableFeeMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradableFeeMetric>%s</%sTradableFeeMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.TradableFeeMetric, input_name='TradableFeeMetric'), namespaceprefix_ , eol_))
        if self.TradableFeeMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradableFeeMetricDate>%s</%sTradableFeeMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.TradableFeeMetricDate, input_name='TradableFeeMetricDate'), namespaceprefix_ , eol_))
        if self.TradableRebateMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradableRebateMetric>%s</%sTradableRebateMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.TradableRebateMetric, input_name='TradableRebateMetric'), namespaceprefix_ , eol_))
        if self.TradableRebateMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradableRebateMetricDate>%s</%sTradableRebateMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.TradableRebateMetricDate, input_name='TradableRebateMetricDate'), namespaceprefix_ , eol_))
        if self.UtilisationByQuantityMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisationByQuantityMetric>%s</%sUtilisationByQuantityMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.UtilisationByQuantityMetric, input_name='UtilisationByQuantityMetric'), namespaceprefix_ , eol_))
        if self.UtilisationByQuantityMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisationByQuantityMetricDate>%s</%sUtilisationByQuantityMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.UtilisationByQuantityMetricDate, input_name='UtilisationByQuantityMetricDate'), namespaceprefix_ , eol_))
        if self.UtilisationMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisationMetric>%s</%sUtilisationMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.UtilisationMetric, input_name='UtilisationMetric'), namespaceprefix_ , eol_))
        if self.UtilisationMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisationMetricDate>%s</%sUtilisationMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.UtilisationMetricDate, input_name='UtilisationMetricDate'), namespaceprefix_ , eol_))
        if self.ValueOnLoanMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanMetric>%s</%sValueOnLoanMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoanMetric, input_name='ValueOnLoanMetric'), namespaceprefix_ , eol_))
        if self.ValueOnLoanMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanMetricDate>%s</%sValueOnLoanMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ValueOnLoanMetricDate, input_name='ValueOnLoanMetricDate'), namespaceprefix_ , eol_))
        if self.VWAFMetric is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAFMetric>%s</%sVWAFMetric>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAFMetric, input_name='VWAFMetric'), namespaceprefix_ , eol_))
        if self.VWAFMetricDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAFMetricDate>%s</%sVWAFMetricDate>%s' % (namespaceprefix_ , self.gds_format_date(self.VWAFMetricDate, input_name='VWAFMetricDate'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BenchmarkFeeMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'BenchmarkFeeMetric')
            self.BenchmarkFeeMetric = fval_
        elif nodeName_ == 'BenchmarkFeeMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.BenchmarkFeeMetricDate = dval_
        elif nodeName_ == 'BenchmarkRebateMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'BenchmarkRebateMetric')
            self.BenchmarkRebateMetric = fval_
        elif nodeName_ == 'BenchmarkRebateMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.BenchmarkRebateMetricDate = dval_
        elif nodeName_ == 'LendableQuantityMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableQuantityMetric')
            self.LendableQuantityMetric = fval_
        elif nodeName_ == 'LendableQuantityMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.LendableQuantityMetricDate = dval_
        elif nodeName_ == 'LendableValueMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableValueMetric')
            self.LendableValueMetric = fval_
        elif nodeName_ == 'LendableValueMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.LendableValueMetricDate = dval_
        elif nodeName_ == 'LenderFeeMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderFeeMetric')
            self.LenderFeeMetric = fval_
        elif nodeName_ == 'LenderFeeMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.LenderFeeMetricDate = dval_
        elif nodeName_ == 'LenderValueOnLoanMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderValueOnLoanMetric')
            self.LenderValueOnLoanMetric = fval_
        elif nodeName_ == 'LenderValueOnLoanMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.LenderValueOnLoanMetricDate = dval_
        elif nodeName_ == 'PcSharesOutstandingOnLoanMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcSharesOutstandingOnLoanMetric')
            self.PcSharesOutstandingOnLoanMetric = fval_
        elif nodeName_ == 'PcSharesOutstandingOnLoanMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.PcSharesOutstandingOnLoanMetricDate = dval_
        elif nodeName_ == 'PriceMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PriceMetric')
            self.PriceMetric = fval_
        elif nodeName_ == 'PriceMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.PriceMetricDate = dval_
        elif nodeName_ == 'QuantityOnLoanMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'QuantityOnLoanMetric')
            self.QuantityOnLoanMetric = fval_
        elif nodeName_ == 'QuantityOnLoanMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.QuantityOnLoanMetricDate = dval_
        elif nodeName_ == 'TradableFeeMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TradableFeeMetric')
            self.TradableFeeMetric = fval_
        elif nodeName_ == 'TradableFeeMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TradableFeeMetricDate = dval_
        elif nodeName_ == 'TradableRebateMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TradableRebateMetric')
            self.TradableRebateMetric = fval_
        elif nodeName_ == 'TradableRebateMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TradableRebateMetricDate = dval_
        elif nodeName_ == 'UtilisationByQuantityMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'UtilisationByQuantityMetric')
            self.UtilisationByQuantityMetric = fval_
        elif nodeName_ == 'UtilisationByQuantityMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.UtilisationByQuantityMetricDate = dval_
        elif nodeName_ == 'UtilisationMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'UtilisationMetric')
            self.UtilisationMetric = fval_
        elif nodeName_ == 'UtilisationMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.UtilisationMetricDate = dval_
        elif nodeName_ == 'ValueOnLoanMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoanMetric')
            self.ValueOnLoanMetric = fval_
        elif nodeName_ == 'ValueOnLoanMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ValueOnLoanMetricDate = dval_
        elif nodeName_ == 'VWAFMetric' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAFMetric')
            self.VWAFMetric = fval_
        elif nodeName_ == 'VWAFMetricDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.VWAFMetricDate = dval_
# end class MetricType137


class RateBucketsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Index=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if Index is None:
            self.Index = []
        else:
            self.Index = Index
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RateBucketsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RateBucketsType.subclass:
            return RateBucketsType.subclass(*args_, **kwargs_)
        else:
            return RateBucketsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Index(self):
        return self.Index
    def set_Index(self, Index):
        self.Index = Index
    def add_Index(self, value):
        self.Index.append(value)
    def add_Index(self, value):
        self.Index.append(value)
    def insert_Index_at(self, index, value):
        self.Index.insert(index, value)
    def replace_Index_at(self, index, value):
        self.Index[index] = value
    def hasContent_(self):
        if (
            self.Index
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RateBucketsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RateBucketsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RateBucketsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RateBucketsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RateBucketsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RateBucketsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Index_ in self.Index:
            Index_.export(outfile, level, namespaceprefix_, name_='Index', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Index':
            obj_ = IndexType138.factory(parent_object_=self)
            obj_.build(child_)
            self.Index.append(obj_)
            obj_.original_tagname_ = 'Index'
# end class RateBucketsType


class IndexType138(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, PerformanceBucketCount=None, PerformanceBucketLoanQuantity=None, PerformanceBucketLoanValue=None, PerformanceBucketMax=None, PerformanceBucketMin=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.value = _cast(None, value)
        self.PerformanceBucketCount = PerformanceBucketCount
        self.PerformanceBucketLoanQuantity = PerformanceBucketLoanQuantity
        self.PerformanceBucketLoanValue = PerformanceBucketLoanValue
        self.PerformanceBucketMax = PerformanceBucketMax
        self.PerformanceBucketMin = PerformanceBucketMin
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IndexType138)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IndexType138.subclass:
            return IndexType138.subclass(*args_, **kwargs_)
        else:
            return IndexType138(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PerformanceBucketCount(self):
        return self.PerformanceBucketCount
    def set_PerformanceBucketCount(self, PerformanceBucketCount):
        self.PerformanceBucketCount = PerformanceBucketCount
    def get_PerformanceBucketLoanQuantity(self):
        return self.PerformanceBucketLoanQuantity
    def set_PerformanceBucketLoanQuantity(self, PerformanceBucketLoanQuantity):
        self.PerformanceBucketLoanQuantity = PerformanceBucketLoanQuantity
    def get_PerformanceBucketLoanValue(self):
        return self.PerformanceBucketLoanValue
    def set_PerformanceBucketLoanValue(self, PerformanceBucketLoanValue):
        self.PerformanceBucketLoanValue = PerformanceBucketLoanValue
    def get_PerformanceBucketMax(self):
        return self.PerformanceBucketMax
    def set_PerformanceBucketMax(self, PerformanceBucketMax):
        self.PerformanceBucketMax = PerformanceBucketMax
    def get_PerformanceBucketMin(self):
        return self.PerformanceBucketMin
    def set_PerformanceBucketMin(self, PerformanceBucketMin):
        self.PerformanceBucketMin = PerformanceBucketMin
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.PerformanceBucketCount is not None or
            self.PerformanceBucketLoanQuantity is not None or
            self.PerformanceBucketLoanValue is not None or
            self.PerformanceBucketMax is not None or
            self.PerformanceBucketMin is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='IndexType138', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IndexType138')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IndexType138')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IndexType138', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='IndexType138'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='IndexType138', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PerformanceBucketCount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerformanceBucketCount>%s</%sPerformanceBucketCount>%s' % (namespaceprefix_ , self.gds_format_float(self.PerformanceBucketCount, input_name='PerformanceBucketCount'), namespaceprefix_ , eol_))
        if self.PerformanceBucketLoanQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerformanceBucketLoanQuantity>%s</%sPerformanceBucketLoanQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.PerformanceBucketLoanQuantity, input_name='PerformanceBucketLoanQuantity'), namespaceprefix_ , eol_))
        if self.PerformanceBucketLoanValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerformanceBucketLoanValue>%s</%sPerformanceBucketLoanValue>%s' % (namespaceprefix_ , self.gds_format_float(self.PerformanceBucketLoanValue, input_name='PerformanceBucketLoanValue'), namespaceprefix_ , eol_))
        if self.PerformanceBucketMax is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerformanceBucketMax>%s</%sPerformanceBucketMax>%s' % (namespaceprefix_ , self.gds_format_float(self.PerformanceBucketMax, input_name='PerformanceBucketMax'), namespaceprefix_ , eol_))
        if self.PerformanceBucketMin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerformanceBucketMin>%s</%sPerformanceBucketMin>%s' % (namespaceprefix_ , self.gds_format_float(self.PerformanceBucketMin, input_name='PerformanceBucketMin'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PerformanceBucketCount' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PerformanceBucketCount')
            self.PerformanceBucketCount = fval_
        elif nodeName_ == 'PerformanceBucketLoanQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PerformanceBucketLoanQuantity')
            self.PerformanceBucketLoanQuantity = fval_
        elif nodeName_ == 'PerformanceBucketLoanValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PerformanceBucketLoanValue')
            self.PerformanceBucketLoanValue = fval_
        elif nodeName_ == 'PerformanceBucketMax' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PerformanceBucketMax')
            self.PerformanceBucketMax = fval_
        elif nodeName_ == 'PerformanceBucketMin' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PerformanceBucketMin')
            self.PerformanceBucketMin = fval_
# end class IndexType138


class RerateType139(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Direction=None, ReratePreviousVWAF=None, ReratePreviousVWAR=None, RerateVWAF=None, RerateVWAR=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if Direction is None:
            self.Direction = []
        else:
            self.Direction = Direction
        self.ReratePreviousVWAF = ReratePreviousVWAF
        self.ReratePreviousVWAR = ReratePreviousVWAR
        self.RerateVWAF = RerateVWAF
        self.RerateVWAR = RerateVWAR
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RerateType139)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RerateType139.subclass:
            return RerateType139.subclass(*args_, **kwargs_)
        else:
            return RerateType139(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Direction(self):
        return self.Direction
    def set_Direction(self, Direction):
        self.Direction = Direction
    def add_Direction(self, value):
        self.Direction.append(value)
    def add_Direction(self, value):
        self.Direction.append(value)
    def insert_Direction_at(self, index, value):
        self.Direction.insert(index, value)
    def replace_Direction_at(self, index, value):
        self.Direction[index] = value
    def get_ReratePreviousVWAF(self):
        return self.ReratePreviousVWAF
    def set_ReratePreviousVWAF(self, ReratePreviousVWAF):
        self.ReratePreviousVWAF = ReratePreviousVWAF
    def get_ReratePreviousVWAR(self):
        return self.ReratePreviousVWAR
    def set_ReratePreviousVWAR(self, ReratePreviousVWAR):
        self.ReratePreviousVWAR = ReratePreviousVWAR
    def get_RerateVWAF(self):
        return self.RerateVWAF
    def set_RerateVWAF(self, RerateVWAF):
        self.RerateVWAF = RerateVWAF
    def get_RerateVWAR(self):
        return self.RerateVWAR
    def set_RerateVWAR(self, RerateVWAR):
        self.RerateVWAR = RerateVWAR
    def hasContent_(self):
        if (
            self.Direction or
            self.ReratePreviousVWAF is not None or
            self.ReratePreviousVWAR is not None or
            self.RerateVWAF is not None or
            self.RerateVWAR is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RerateType139', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RerateType139')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RerateType139')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RerateType139', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RerateType139'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RerateType139', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Direction_ in self.Direction:
            Direction_.export(outfile, level, namespaceprefix_, name_='Direction', pretty_print=pretty_print)
        if self.ReratePreviousVWAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReratePreviousVWAF>%s</%sReratePreviousVWAF>%s' % (namespaceprefix_ , self.gds_format_float(self.ReratePreviousVWAF, input_name='ReratePreviousVWAF'), namespaceprefix_ , eol_))
        if self.ReratePreviousVWAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReratePreviousVWAR>%s</%sReratePreviousVWAR>%s' % (namespaceprefix_ , self.gds_format_float(self.ReratePreviousVWAR, input_name='ReratePreviousVWAR'), namespaceprefix_ , eol_))
        if self.RerateVWAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRerateVWAF>%s</%sRerateVWAF>%s' % (namespaceprefix_ , self.gds_format_float(self.RerateVWAF, input_name='RerateVWAF'), namespaceprefix_ , eol_))
        if self.RerateVWAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRerateVWAR>%s</%sRerateVWAR>%s' % (namespaceprefix_ , self.gds_format_float(self.RerateVWAR, input_name='RerateVWAR'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Direction':
            obj_ = DirectionType.factory(parent_object_=self)
            obj_.build(child_)
            self.Direction.append(obj_)
            obj_.original_tagname_ = 'Direction'
        elif nodeName_ == 'ReratePreviousVWAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ReratePreviousVWAF')
            self.ReratePreviousVWAF = fval_
        elif nodeName_ == 'ReratePreviousVWAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ReratePreviousVWAR')
            self.ReratePreviousVWAR = fval_
        elif nodeName_ == 'RerateVWAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RerateVWAF')
            self.RerateVWAF = fval_
        elif nodeName_ == 'RerateVWAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RerateVWAR')
            self.RerateVWAR = fval_
# end class RerateType139


class DirectionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, RerateQuantityOnLoan=None, RerateTransactionCount=None, RerateValueOnLoan=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.value = _cast(None, value)
        self.RerateQuantityOnLoan = RerateQuantityOnLoan
        self.RerateTransactionCount = RerateTransactionCount
        self.RerateValueOnLoan = RerateValueOnLoan
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DirectionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DirectionType.subclass:
            return DirectionType.subclass(*args_, **kwargs_)
        else:
            return DirectionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RerateQuantityOnLoan(self):
        return self.RerateQuantityOnLoan
    def set_RerateQuantityOnLoan(self, RerateQuantityOnLoan):
        self.RerateQuantityOnLoan = RerateQuantityOnLoan
    def get_RerateTransactionCount(self):
        return self.RerateTransactionCount
    def set_RerateTransactionCount(self, RerateTransactionCount):
        self.RerateTransactionCount = RerateTransactionCount
    def get_RerateValueOnLoan(self):
        return self.RerateValueOnLoan
    def set_RerateValueOnLoan(self, RerateValueOnLoan):
        self.RerateValueOnLoan = RerateValueOnLoan
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.RerateQuantityOnLoan is not None or
            self.RerateTransactionCount is not None or
            self.RerateValueOnLoan is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DirectionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DirectionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DirectionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DirectionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DirectionType'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DirectionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RerateQuantityOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRerateQuantityOnLoan>%s</%sRerateQuantityOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.RerateQuantityOnLoan, input_name='RerateQuantityOnLoan'), namespaceprefix_ , eol_))
        if self.RerateTransactionCount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRerateTransactionCount>%s</%sRerateTransactionCount>%s' % (namespaceprefix_ , self.gds_format_float(self.RerateTransactionCount, input_name='RerateTransactionCount'), namespaceprefix_ , eol_))
        if self.RerateValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRerateValueOnLoan>%s</%sRerateValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.RerateValueOnLoan, input_name='RerateValueOnLoan'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RerateQuantityOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RerateQuantityOnLoan')
            self.RerateQuantityOnLoan = fval_
        elif nodeName_ == 'RerateTransactionCount' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RerateTransactionCount')
            self.RerateTransactionCount = fval_
        elif nodeName_ == 'RerateValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RerateValueOnLoan')
            self.RerateValueOnLoan = fval_
# end class DirectionType


class TradingType140(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ActiveLendingAgents=None, ActiveUtilisation=None, ActiveUtilisationByQuantity=None, AllIn=None, AverageTenure=None, Balance=None, BenchmarkAllIn=None, BenchmarkDuration=None, BenchmarkFee=None, BenchmarkRebate=None, BorrowerConcentration=None, CashLoanValue=None, Currency=None, DailyCost=None, DailyRevenue=None, Date=None, Delta=None, Duration=None, InactiveLendingAgents=None, Index=None, IndicativeFee=None, IndicativeFee1=None, IndicativeFee7=None, IndicativeFeeAllDay=None, IndicativeRebate=None, IndicativeRebate1=None, IndicativeRebate7=None, IndicativeRebateAllDay=None, LeastExpensiveFee=None, LeastExpensiveRebate=None, LenderConcentration=None, LenderFee=None, Margin=None, MarketShare=None, MarketShareRank=None, MedianRateSpread=None, MedianRepoRate=None, MedianSevenDayRateSpread=None, MedianSevenDayRepoRate=None, MostExpensiveFee=None, MostExpensiveRebate=None, NewLoanQuantity=None, NewLoanValue=None, NoticePeriod=None, Period=None, PrimeBrokers=None, Quantity=None, QuantityOnLoan=None, QuantityOnLoanDirectional=None, RateSpread=None, RepoRate=None, SAF=None, SAR=None, SATenure=None, SevenDayRateSpread=None, SevenDayRepoRate=None, SlFee=None, TradableDuration=None, TradableFee=None, TradableRebate=None, TransactionCount=None, Utilisation=None, UtilisationByQuantity=None, ValueOnLoan=None, ValueOnLoanDirectional=None, ValueOnLoanVsCash=None, VWAFAllDays=None, VWARAllDays=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ActiveLendingAgents = ActiveLendingAgents
        self.ActiveUtilisation = ActiveUtilisation
        self.ActiveUtilisationByQuantity = ActiveUtilisationByQuantity
        self.AllIn = AllIn
        self.AverageTenure = AverageTenure
        self.Balance = Balance
        self.BenchmarkAllIn = BenchmarkAllIn
        self.BenchmarkDuration = BenchmarkDuration
        self.BenchmarkFee = BenchmarkFee
        self.BenchmarkRebate = BenchmarkRebate
        self.BorrowerConcentration = BorrowerConcentration
        self.CashLoanValue = CashLoanValue
        self.Currency = Currency
        self.DailyCost = DailyCost
        self.DailyRevenue = DailyRevenue
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        if Delta is None:
            self.Delta = []
        else:
            self.Delta = Delta
        self.Duration = Duration
        self.InactiveLendingAgents = InactiveLendingAgents
        if Index is None:
            self.Index = []
        else:
            self.Index = Index
        self.IndicativeFee = IndicativeFee
        self.IndicativeFee1 = IndicativeFee1
        self.IndicativeFee7 = IndicativeFee7
        self.IndicativeFeeAllDay = IndicativeFeeAllDay
        self.IndicativeRebate = IndicativeRebate
        self.IndicativeRebate1 = IndicativeRebate1
        self.IndicativeRebate7 = IndicativeRebate7
        self.IndicativeRebateAllDay = IndicativeRebateAllDay
        self.LeastExpensiveFee = LeastExpensiveFee
        self.LeastExpensiveRebate = LeastExpensiveRebate
        self.LenderConcentration = LenderConcentration
        self.LenderFee = LenderFee
        self.Margin = Margin
        self.MarketShare = MarketShare
        self.MarketShareRank = MarketShareRank
        self.MedianRateSpread = MedianRateSpread
        self.MedianRepoRate = MedianRepoRate
        self.MedianSevenDayRateSpread = MedianSevenDayRateSpread
        self.MedianSevenDayRepoRate = MedianSevenDayRepoRate
        self.MostExpensiveFee = MostExpensiveFee
        self.MostExpensiveRebate = MostExpensiveRebate
        self.NewLoanQuantity = NewLoanQuantity
        self.NewLoanValue = NewLoanValue
        self.NoticePeriod = NoticePeriod
        if Period is None:
            self.Period = []
        else:
            self.Period = Period
        self.PrimeBrokers = PrimeBrokers
        self.Quantity = Quantity
        self.QuantityOnLoan = QuantityOnLoan
        self.QuantityOnLoanDirectional = QuantityOnLoanDirectional
        self.RateSpread = RateSpread
        self.RepoRate = RepoRate
        self.SAF = SAF
        self.SAR = SAR
        self.SATenure = SATenure
        self.SevenDayRateSpread = SevenDayRateSpread
        self.SevenDayRepoRate = SevenDayRepoRate
        self.SlFee = SlFee
        self.TradableDuration = TradableDuration
        self.TradableFee = TradableFee
        self.TradableRebate = TradableRebate
        self.TransactionCount = TransactionCount
        self.Utilisation = Utilisation
        self.UtilisationByQuantity = UtilisationByQuantity
        self.ValueOnLoan = ValueOnLoan
        self.ValueOnLoanDirectional = ValueOnLoanDirectional
        self.ValueOnLoanVsCash = ValueOnLoanVsCash
        self.VWAFAllDays = VWAFAllDays
        self.VWARAllDays = VWARAllDays
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TradingType140)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TradingType140.subclass:
            return TradingType140.subclass(*args_, **kwargs_)
        else:
            return TradingType140(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ActiveLendingAgents(self):
        return self.ActiveLendingAgents
    def set_ActiveLendingAgents(self, ActiveLendingAgents):
        self.ActiveLendingAgents = ActiveLendingAgents
    def get_ActiveUtilisation(self):
        return self.ActiveUtilisation
    def set_ActiveUtilisation(self, ActiveUtilisation):
        self.ActiveUtilisation = ActiveUtilisation
    def get_ActiveUtilisationByQuantity(self):
        return self.ActiveUtilisationByQuantity
    def set_ActiveUtilisationByQuantity(self, ActiveUtilisationByQuantity):
        self.ActiveUtilisationByQuantity = ActiveUtilisationByQuantity
    def get_AllIn(self):
        return self.AllIn
    def set_AllIn(self, AllIn):
        self.AllIn = AllIn
    def get_AverageTenure(self):
        return self.AverageTenure
    def set_AverageTenure(self, AverageTenure):
        self.AverageTenure = AverageTenure
    def get_Balance(self):
        return self.Balance
    def set_Balance(self, Balance):
        self.Balance = Balance
    def get_BenchmarkAllIn(self):
        return self.BenchmarkAllIn
    def set_BenchmarkAllIn(self, BenchmarkAllIn):
        self.BenchmarkAllIn = BenchmarkAllIn
    def get_BenchmarkDuration(self):
        return self.BenchmarkDuration
    def set_BenchmarkDuration(self, BenchmarkDuration):
        self.BenchmarkDuration = BenchmarkDuration
    def get_BenchmarkFee(self):
        return self.BenchmarkFee
    def set_BenchmarkFee(self, BenchmarkFee):
        self.BenchmarkFee = BenchmarkFee
    def get_BenchmarkRebate(self):
        return self.BenchmarkRebate
    def set_BenchmarkRebate(self, BenchmarkRebate):
        self.BenchmarkRebate = BenchmarkRebate
    def get_BorrowerConcentration(self):
        return self.BorrowerConcentration
    def set_BorrowerConcentration(self, BorrowerConcentration):
        self.BorrowerConcentration = BorrowerConcentration
    def get_CashLoanValue(self):
        return self.CashLoanValue
    def set_CashLoanValue(self, CashLoanValue):
        self.CashLoanValue = CashLoanValue
    def get_Currency(self):
        return self.Currency
    def set_Currency(self, Currency):
        self.Currency = Currency
    def get_DailyCost(self):
        return self.DailyCost
    def set_DailyCost(self, DailyCost):
        self.DailyCost = DailyCost
    def get_DailyRevenue(self):
        return self.DailyRevenue
    def set_DailyRevenue(self, DailyRevenue):
        self.DailyRevenue = DailyRevenue
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_Delta(self):
        return self.Delta
    def set_Delta(self, Delta):
        self.Delta = Delta
    def add_Delta(self, value):
        self.Delta.append(value)
    def add_Delta(self, value):
        self.Delta.append(value)
    def insert_Delta_at(self, index, value):
        self.Delta.insert(index, value)
    def replace_Delta_at(self, index, value):
        self.Delta[index] = value
    def get_Duration(self):
        return self.Duration
    def set_Duration(self, Duration):
        self.Duration = Duration
    def get_InactiveLendingAgents(self):
        return self.InactiveLendingAgents
    def set_InactiveLendingAgents(self, InactiveLendingAgents):
        self.InactiveLendingAgents = InactiveLendingAgents
    def get_Index(self):
        return self.Index
    def set_Index(self, Index):
        self.Index = Index
    def add_Index(self, value):
        self.Index.append(value)
    def add_Index(self, value):
        self.Index.append(value)
    def insert_Index_at(self, index, value):
        self.Index.insert(index, value)
    def replace_Index_at(self, index, value):
        self.Index[index] = value
    def get_IndicativeFee(self):
        return self.IndicativeFee
    def set_IndicativeFee(self, IndicativeFee):
        self.IndicativeFee = IndicativeFee
    def get_IndicativeFee1(self):
        return self.IndicativeFee1
    def set_IndicativeFee1(self, IndicativeFee1):
        self.IndicativeFee1 = IndicativeFee1
    def get_IndicativeFee7(self):
        return self.IndicativeFee7
    def set_IndicativeFee7(self, IndicativeFee7):
        self.IndicativeFee7 = IndicativeFee7
    def get_IndicativeFeeAllDay(self):
        return self.IndicativeFeeAllDay
    def set_IndicativeFeeAllDay(self, IndicativeFeeAllDay):
        self.IndicativeFeeAllDay = IndicativeFeeAllDay
    def get_IndicativeRebate(self):
        return self.IndicativeRebate
    def set_IndicativeRebate(self, IndicativeRebate):
        self.IndicativeRebate = IndicativeRebate
    def get_IndicativeRebate1(self):
        return self.IndicativeRebate1
    def set_IndicativeRebate1(self, IndicativeRebate1):
        self.IndicativeRebate1 = IndicativeRebate1
    def get_IndicativeRebate7(self):
        return self.IndicativeRebate7
    def set_IndicativeRebate7(self, IndicativeRebate7):
        self.IndicativeRebate7 = IndicativeRebate7
    def get_IndicativeRebateAllDay(self):
        return self.IndicativeRebateAllDay
    def set_IndicativeRebateAllDay(self, IndicativeRebateAllDay):
        self.IndicativeRebateAllDay = IndicativeRebateAllDay
    def get_LeastExpensiveFee(self):
        return self.LeastExpensiveFee
    def set_LeastExpensiveFee(self, LeastExpensiveFee):
        self.LeastExpensiveFee = LeastExpensiveFee
    def get_LeastExpensiveRebate(self):
        return self.LeastExpensiveRebate
    def set_LeastExpensiveRebate(self, LeastExpensiveRebate):
        self.LeastExpensiveRebate = LeastExpensiveRebate
    def get_LenderConcentration(self):
        return self.LenderConcentration
    def set_LenderConcentration(self, LenderConcentration):
        self.LenderConcentration = LenderConcentration
    def get_LenderFee(self):
        return self.LenderFee
    def set_LenderFee(self, LenderFee):
        self.LenderFee = LenderFee
    def get_Margin(self):
        return self.Margin
    def set_Margin(self, Margin):
        self.Margin = Margin
    def get_MarketShare(self):
        return self.MarketShare
    def set_MarketShare(self, MarketShare):
        self.MarketShare = MarketShare
    def get_MarketShareRank(self):
        return self.MarketShareRank
    def set_MarketShareRank(self, MarketShareRank):
        self.MarketShareRank = MarketShareRank
    def get_MedianRateSpread(self):
        return self.MedianRateSpread
    def set_MedianRateSpread(self, MedianRateSpread):
        self.MedianRateSpread = MedianRateSpread
    def get_MedianRepoRate(self):
        return self.MedianRepoRate
    def set_MedianRepoRate(self, MedianRepoRate):
        self.MedianRepoRate = MedianRepoRate
    def get_MedianSevenDayRateSpread(self):
        return self.MedianSevenDayRateSpread
    def set_MedianSevenDayRateSpread(self, MedianSevenDayRateSpread):
        self.MedianSevenDayRateSpread = MedianSevenDayRateSpread
    def get_MedianSevenDayRepoRate(self):
        return self.MedianSevenDayRepoRate
    def set_MedianSevenDayRepoRate(self, MedianSevenDayRepoRate):
        self.MedianSevenDayRepoRate = MedianSevenDayRepoRate
    def get_MostExpensiveFee(self):
        return self.MostExpensiveFee
    def set_MostExpensiveFee(self, MostExpensiveFee):
        self.MostExpensiveFee = MostExpensiveFee
    def get_MostExpensiveRebate(self):
        return self.MostExpensiveRebate
    def set_MostExpensiveRebate(self, MostExpensiveRebate):
        self.MostExpensiveRebate = MostExpensiveRebate
    def get_NewLoanQuantity(self):
        return self.NewLoanQuantity
    def set_NewLoanQuantity(self, NewLoanQuantity):
        self.NewLoanQuantity = NewLoanQuantity
    def get_NewLoanValue(self):
        return self.NewLoanValue
    def set_NewLoanValue(self, NewLoanValue):
        self.NewLoanValue = NewLoanValue
    def get_NoticePeriod(self):
        return self.NoticePeriod
    def set_NoticePeriod(self, NoticePeriod):
        self.NoticePeriod = NoticePeriod
    def get_Period(self):
        return self.Period
    def set_Period(self, Period):
        self.Period = Period
    def add_Period(self, value):
        self.Period.append(value)
    def add_Period(self, value):
        self.Period.append(value)
    def insert_Period_at(self, index, value):
        self.Period.insert(index, value)
    def replace_Period_at(self, index, value):
        self.Period[index] = value
    def get_PrimeBrokers(self):
        return self.PrimeBrokers
    def set_PrimeBrokers(self, PrimeBrokers):
        self.PrimeBrokers = PrimeBrokers
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_QuantityOnLoan(self):
        return self.QuantityOnLoan
    def set_QuantityOnLoan(self, QuantityOnLoan):
        self.QuantityOnLoan = QuantityOnLoan
    def get_QuantityOnLoanDirectional(self):
        return self.QuantityOnLoanDirectional
    def set_QuantityOnLoanDirectional(self, QuantityOnLoanDirectional):
        self.QuantityOnLoanDirectional = QuantityOnLoanDirectional
    def get_RateSpread(self):
        return self.RateSpread
    def set_RateSpread(self, RateSpread):
        self.RateSpread = RateSpread
    def get_RepoRate(self):
        return self.RepoRate
    def set_RepoRate(self, RepoRate):
        self.RepoRate = RepoRate
    def get_SAF(self):
        return self.SAF
    def set_SAF(self, SAF):
        self.SAF = SAF
    def get_SAR(self):
        return self.SAR
    def set_SAR(self, SAR):
        self.SAR = SAR
    def get_SATenure(self):
        return self.SATenure
    def set_SATenure(self, SATenure):
        self.SATenure = SATenure
    def get_SevenDayRateSpread(self):
        return self.SevenDayRateSpread
    def set_SevenDayRateSpread(self, SevenDayRateSpread):
        self.SevenDayRateSpread = SevenDayRateSpread
    def get_SevenDayRepoRate(self):
        return self.SevenDayRepoRate
    def set_SevenDayRepoRate(self, SevenDayRepoRate):
        self.SevenDayRepoRate = SevenDayRepoRate
    def get_SlFee(self):
        return self.SlFee
    def set_SlFee(self, SlFee):
        self.SlFee = SlFee
    def get_TradableDuration(self):
        return self.TradableDuration
    def set_TradableDuration(self, TradableDuration):
        self.TradableDuration = TradableDuration
    def get_TradableFee(self):
        return self.TradableFee
    def set_TradableFee(self, TradableFee):
        self.TradableFee = TradableFee
    def get_TradableRebate(self):
        return self.TradableRebate
    def set_TradableRebate(self, TradableRebate):
        self.TradableRebate = TradableRebate
    def get_TransactionCount(self):
        return self.TransactionCount
    def set_TransactionCount(self, TransactionCount):
        self.TransactionCount = TransactionCount
    def get_Utilisation(self):
        return self.Utilisation
    def set_Utilisation(self, Utilisation):
        self.Utilisation = Utilisation
    def get_UtilisationByQuantity(self):
        return self.UtilisationByQuantity
    def set_UtilisationByQuantity(self, UtilisationByQuantity):
        self.UtilisationByQuantity = UtilisationByQuantity
    def get_ValueOnLoan(self):
        return self.ValueOnLoan
    def set_ValueOnLoan(self, ValueOnLoan):
        self.ValueOnLoan = ValueOnLoan
    def get_ValueOnLoanDirectional(self):
        return self.ValueOnLoanDirectional
    def set_ValueOnLoanDirectional(self, ValueOnLoanDirectional):
        self.ValueOnLoanDirectional = ValueOnLoanDirectional
    def get_ValueOnLoanVsCash(self):
        return self.ValueOnLoanVsCash
    def set_ValueOnLoanVsCash(self, ValueOnLoanVsCash):
        self.ValueOnLoanVsCash = ValueOnLoanVsCash
    def get_VWAFAllDays(self):
        return self.VWAFAllDays
    def set_VWAFAllDays(self, VWAFAllDays):
        self.VWAFAllDays = VWAFAllDays
    def get_VWARAllDays(self):
        return self.VWARAllDays
    def set_VWARAllDays(self, VWARAllDays):
        self.VWARAllDays = VWARAllDays
    def hasContent_(self):
        if (
            self.ActiveLendingAgents is not None or
            self.ActiveUtilisation is not None or
            self.ActiveUtilisationByQuantity is not None or
            self.AllIn is not None or
            self.AverageTenure is not None or
            self.Balance is not None or
            self.BenchmarkAllIn is not None or
            self.BenchmarkDuration is not None or
            self.BenchmarkFee is not None or
            self.BenchmarkRebate is not None or
            self.BorrowerConcentration is not None or
            self.CashLoanValue is not None or
            self.Currency is not None or
            self.DailyCost is not None or
            self.DailyRevenue is not None or
            self.Date is not None or
            self.Delta or
            self.Duration is not None or
            self.InactiveLendingAgents is not None or
            self.Index or
            self.IndicativeFee is not None or
            self.IndicativeFee1 is not None or
            self.IndicativeFee7 is not None or
            self.IndicativeFeeAllDay is not None or
            self.IndicativeRebate is not None or
            self.IndicativeRebate1 is not None or
            self.IndicativeRebate7 is not None or
            self.IndicativeRebateAllDay is not None or
            self.LeastExpensiveFee is not None or
            self.LeastExpensiveRebate is not None or
            self.LenderConcentration is not None or
            self.LenderFee is not None or
            self.Margin is not None or
            self.MarketShare is not None or
            self.MarketShareRank is not None or
            self.MedianRateSpread is not None or
            self.MedianRepoRate is not None or
            self.MedianSevenDayRateSpread is not None or
            self.MedianSevenDayRepoRate is not None or
            self.MostExpensiveFee is not None or
            self.MostExpensiveRebate is not None or
            self.NewLoanQuantity is not None or
            self.NewLoanValue is not None or
            self.NoticePeriod is not None or
            self.Period or
            self.PrimeBrokers is not None or
            self.Quantity is not None or
            self.QuantityOnLoan is not None or
            self.QuantityOnLoanDirectional is not None or
            self.RateSpread is not None or
            self.RepoRate is not None or
            self.SAF is not None or
            self.SAR is not None or
            self.SATenure is not None or
            self.SevenDayRateSpread is not None or
            self.SevenDayRepoRate is not None or
            self.SlFee is not None or
            self.TradableDuration is not None or
            self.TradableFee is not None or
            self.TradableRebate is not None or
            self.TransactionCount is not None or
            self.Utilisation is not None or
            self.UtilisationByQuantity is not None or
            self.ValueOnLoan is not None or
            self.ValueOnLoanDirectional is not None or
            self.ValueOnLoanVsCash is not None or
            self.VWAFAllDays is not None or
            self.VWARAllDays is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TradingType140', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TradingType140')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TradingType140')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TradingType140', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TradingType140'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TradingType140', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ActiveLendingAgents is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveLendingAgents>%s</%sActiveLendingAgents>%s' % (namespaceprefix_ , self.gds_format_float(self.ActiveLendingAgents, input_name='ActiveLendingAgents'), namespaceprefix_ , eol_))
        if self.ActiveUtilisation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveUtilisation>%s</%sActiveUtilisation>%s' % (namespaceprefix_ , self.gds_format_float(self.ActiveUtilisation, input_name='ActiveUtilisation'), namespaceprefix_ , eol_))
        if self.ActiveUtilisationByQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveUtilisationByQuantity>%s</%sActiveUtilisationByQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.ActiveUtilisationByQuantity, input_name='ActiveUtilisationByQuantity'), namespaceprefix_ , eol_))
        if self.AllIn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllIn>%s</%sAllIn>%s' % (namespaceprefix_ , self.gds_format_float(self.AllIn, input_name='AllIn'), namespaceprefix_ , eol_))
        if self.AverageTenure is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAverageTenure>%s</%sAverageTenure>%s' % (namespaceprefix_ , self.gds_format_float(self.AverageTenure, input_name='AverageTenure'), namespaceprefix_ , eol_))
        if self.Balance is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBalance>%s</%sBalance>%s' % (namespaceprefix_ , self.gds_format_float(self.Balance, input_name='Balance'), namespaceprefix_ , eol_))
        if self.BenchmarkAllIn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBenchmarkAllIn>%s</%sBenchmarkAllIn>%s' % (namespaceprefix_ , self.gds_format_float(self.BenchmarkAllIn, input_name='BenchmarkAllIn'), namespaceprefix_ , eol_))
        if self.BenchmarkDuration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBenchmarkDuration>%s</%sBenchmarkDuration>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BenchmarkDuration), input_name='BenchmarkDuration')), namespaceprefix_ , eol_))
        if self.BenchmarkFee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBenchmarkFee>%s</%sBenchmarkFee>%s' % (namespaceprefix_ , self.gds_format_float(self.BenchmarkFee, input_name='BenchmarkFee'), namespaceprefix_ , eol_))
        if self.BenchmarkRebate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBenchmarkRebate>%s</%sBenchmarkRebate>%s' % (namespaceprefix_ , self.gds_format_float(self.BenchmarkRebate, input_name='BenchmarkRebate'), namespaceprefix_ , eol_))
        if self.BorrowerConcentration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBorrowerConcentration>%s</%sBorrowerConcentration>%s' % (namespaceprefix_ , self.gds_format_float(self.BorrowerConcentration, input_name='BorrowerConcentration'), namespaceprefix_ , eol_))
        if self.CashLoanValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCashLoanValue>%s</%sCashLoanValue>%s' % (namespaceprefix_ , self.gds_format_float(self.CashLoanValue, input_name='CashLoanValue'), namespaceprefix_ , eol_))
        if self.Currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrency>%s</%sCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Currency), input_name='Currency')), namespaceprefix_ , eol_))
        if self.DailyCost is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDailyCost>%s</%sDailyCost>%s' % (namespaceprefix_ , self.gds_format_float(self.DailyCost, input_name='DailyCost'), namespaceprefix_ , eol_))
        if self.DailyRevenue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDailyRevenue>%s</%sDailyRevenue>%s' % (namespaceprefix_ , self.gds_format_float(self.DailyRevenue, input_name='DailyRevenue'), namespaceprefix_ , eol_))
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        for Delta_ in self.Delta:
            Delta_.export(outfile, level, namespaceprefix_, name_='Delta', pretty_print=pretty_print)
        if self.Duration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDuration>%s</%sDuration>%s' % (namespaceprefix_ , self.gds_format_float(self.Duration, input_name='Duration'), namespaceprefix_ , eol_))
        if self.InactiveLendingAgents is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInactiveLendingAgents>%s</%sInactiveLendingAgents>%s' % (namespaceprefix_ , self.gds_format_float(self.InactiveLendingAgents, input_name='InactiveLendingAgents'), namespaceprefix_ , eol_))
        for Index_ in self.Index:
            Index_.export(outfile, level, namespaceprefix_, name_='Index', pretty_print=pretty_print)
        if self.IndicativeFee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeFee>%s</%sIndicativeFee>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeFee, input_name='IndicativeFee'), namespaceprefix_ , eol_))
        if self.IndicativeFee1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeFee1>%s</%sIndicativeFee1>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeFee1, input_name='IndicativeFee1'), namespaceprefix_ , eol_))
        if self.IndicativeFee7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeFee7>%s</%sIndicativeFee7>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeFee7, input_name='IndicativeFee7'), namespaceprefix_ , eol_))
        if self.IndicativeFeeAllDay is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeFeeAllDay>%s</%sIndicativeFeeAllDay>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeFeeAllDay, input_name='IndicativeFeeAllDay'), namespaceprefix_ , eol_))
        if self.IndicativeRebate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeRebate>%s</%sIndicativeRebate>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeRebate, input_name='IndicativeRebate'), namespaceprefix_ , eol_))
        if self.IndicativeRebate1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeRebate1>%s</%sIndicativeRebate1>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeRebate1, input_name='IndicativeRebate1'), namespaceprefix_ , eol_))
        if self.IndicativeRebate7 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeRebate7>%s</%sIndicativeRebate7>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeRebate7, input_name='IndicativeRebate7'), namespaceprefix_ , eol_))
        if self.IndicativeRebateAllDay is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeRebateAllDay>%s</%sIndicativeRebateAllDay>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeRebateAllDay, input_name='IndicativeRebateAllDay'), namespaceprefix_ , eol_))
        if self.LeastExpensiveFee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLeastExpensiveFee>%s</%sLeastExpensiveFee>%s' % (namespaceprefix_ , self.gds_format_float(self.LeastExpensiveFee, input_name='LeastExpensiveFee'), namespaceprefix_ , eol_))
        if self.LeastExpensiveRebate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLeastExpensiveRebate>%s</%sLeastExpensiveRebate>%s' % (namespaceprefix_ , self.gds_format_float(self.LeastExpensiveRebate, input_name='LeastExpensiveRebate'), namespaceprefix_ , eol_))
        if self.LenderConcentration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderConcentration>%s</%sLenderConcentration>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderConcentration, input_name='LenderConcentration'), namespaceprefix_ , eol_))
        if self.LenderFee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderFee>%s</%sLenderFee>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderFee, input_name='LenderFee'), namespaceprefix_ , eol_))
        if self.Margin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMargin>%s</%sMargin>%s' % (namespaceprefix_ , self.gds_format_float(self.Margin, input_name='Margin'), namespaceprefix_ , eol_))
        if self.MarketShare is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarketShare>%s</%sMarketShare>%s' % (namespaceprefix_ , self.gds_format_float(self.MarketShare, input_name='MarketShare'), namespaceprefix_ , eol_))
        if self.MarketShareRank is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarketShareRank>%s</%sMarketShareRank>%s' % (namespaceprefix_ , self.gds_format_float(self.MarketShareRank, input_name='MarketShareRank'), namespaceprefix_ , eol_))
        if self.MedianRateSpread is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMedianRateSpread>%s</%sMedianRateSpread>%s' % (namespaceprefix_ , self.gds_format_float(self.MedianRateSpread, input_name='MedianRateSpread'), namespaceprefix_ , eol_))
        if self.MedianRepoRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMedianRepoRate>%s</%sMedianRepoRate>%s' % (namespaceprefix_ , self.gds_format_float(self.MedianRepoRate, input_name='MedianRepoRate'), namespaceprefix_ , eol_))
        if self.MedianSevenDayRateSpread is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMedianSevenDayRateSpread>%s</%sMedianSevenDayRateSpread>%s' % (namespaceprefix_ , self.gds_format_float(self.MedianSevenDayRateSpread, input_name='MedianSevenDayRateSpread'), namespaceprefix_ , eol_))
        if self.MedianSevenDayRepoRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMedianSevenDayRepoRate>%s</%sMedianSevenDayRepoRate>%s' % (namespaceprefix_ , self.gds_format_float(self.MedianSevenDayRepoRate, input_name='MedianSevenDayRepoRate'), namespaceprefix_ , eol_))
        if self.MostExpensiveFee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMostExpensiveFee>%s</%sMostExpensiveFee>%s' % (namespaceprefix_ , self.gds_format_float(self.MostExpensiveFee, input_name='MostExpensiveFee'), namespaceprefix_ , eol_))
        if self.MostExpensiveRebate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMostExpensiveRebate>%s</%sMostExpensiveRebate>%s' % (namespaceprefix_ , self.gds_format_float(self.MostExpensiveRebate, input_name='MostExpensiveRebate'), namespaceprefix_ , eol_))
        if self.NewLoanQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNewLoanQuantity>%s</%sNewLoanQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.NewLoanQuantity, input_name='NewLoanQuantity'), namespaceprefix_ , eol_))
        if self.NewLoanValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNewLoanValue>%s</%sNewLoanValue>%s' % (namespaceprefix_ , self.gds_format_float(self.NewLoanValue, input_name='NewLoanValue'), namespaceprefix_ , eol_))
        if self.NoticePeriod is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoticePeriod>%s</%sNoticePeriod>%s' % (namespaceprefix_ , self.gds_format_float(self.NoticePeriod, input_name='NoticePeriod'), namespaceprefix_ , eol_))
        for Period_ in self.Period:
            Period_.export(outfile, level, namespaceprefix_, name_='Period', pretty_print=pretty_print)
        if self.PrimeBrokers is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrimeBrokers>%s</%sPrimeBrokers>%s' % (namespaceprefix_ , self.gds_format_float(self.PrimeBrokers, input_name='PrimeBrokers'), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.QuantityOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityOnLoan>%s</%sQuantityOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.QuantityOnLoan, input_name='QuantityOnLoan'), namespaceprefix_ , eol_))
        if self.QuantityOnLoanDirectional is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityOnLoanDirectional>%s</%sQuantityOnLoanDirectional>%s' % (namespaceprefix_ , self.gds_format_float(self.QuantityOnLoanDirectional, input_name='QuantityOnLoanDirectional'), namespaceprefix_ , eol_))
        if self.RateSpread is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateSpread>%s</%sRateSpread>%s' % (namespaceprefix_ , self.gds_format_float(self.RateSpread, input_name='RateSpread'), namespaceprefix_ , eol_))
        if self.RepoRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRepoRate>%s</%sRepoRate>%s' % (namespaceprefix_ , self.gds_format_float(self.RepoRate, input_name='RepoRate'), namespaceprefix_ , eol_))
        if self.SAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSAF>%s</%sSAF>%s' % (namespaceprefix_ , self.gds_format_float(self.SAF, input_name='SAF'), namespaceprefix_ , eol_))
        if self.SAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSAR>%s</%sSAR>%s' % (namespaceprefix_ , self.gds_format_float(self.SAR, input_name='SAR'), namespaceprefix_ , eol_))
        if self.SATenure is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSATenure>%s</%sSATenure>%s' % (namespaceprefix_ , self.gds_format_float(self.SATenure, input_name='SATenure'), namespaceprefix_ , eol_))
        if self.SevenDayRateSpread is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSevenDayRateSpread>%s</%sSevenDayRateSpread>%s' % (namespaceprefix_ , self.gds_format_float(self.SevenDayRateSpread, input_name='SevenDayRateSpread'), namespaceprefix_ , eol_))
        if self.SevenDayRepoRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSevenDayRepoRate>%s</%sSevenDayRepoRate>%s' % (namespaceprefix_ , self.gds_format_float(self.SevenDayRepoRate, input_name='SevenDayRepoRate'), namespaceprefix_ , eol_))
        if self.SlFee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSlFee>%s</%sSlFee>%s' % (namespaceprefix_ , self.gds_format_float(self.SlFee, input_name='SlFee'), namespaceprefix_ , eol_))
        if self.TradableDuration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradableDuration>%s</%sTradableDuration>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TradableDuration), input_name='TradableDuration')), namespaceprefix_ , eol_))
        if self.TradableFee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradableFee>%s</%sTradableFee>%s' % (namespaceprefix_ , self.gds_format_float(self.TradableFee, input_name='TradableFee'), namespaceprefix_ , eol_))
        if self.TradableRebate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradableRebate>%s</%sTradableRebate>%s' % (namespaceprefix_ , self.gds_format_float(self.TradableRebate, input_name='TradableRebate'), namespaceprefix_ , eol_))
        if self.TransactionCount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransactionCount>%s</%sTransactionCount>%s' % (namespaceprefix_ , self.gds_format_float(self.TransactionCount, input_name='TransactionCount'), namespaceprefix_ , eol_))
        if self.Utilisation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisation>%s</%sUtilisation>%s' % (namespaceprefix_ , self.gds_format_float(self.Utilisation, input_name='Utilisation'), namespaceprefix_ , eol_))
        if self.UtilisationByQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisationByQuantity>%s</%sUtilisationByQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.UtilisationByQuantity, input_name='UtilisationByQuantity'), namespaceprefix_ , eol_))
        if self.ValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoan>%s</%sValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoan, input_name='ValueOnLoan'), namespaceprefix_ , eol_))
        if self.ValueOnLoanDirectional is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanDirectional>%s</%sValueOnLoanDirectional>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoanDirectional, input_name='ValueOnLoanDirectional'), namespaceprefix_ , eol_))
        if self.ValueOnLoanVsCash is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanVsCash>%s</%sValueOnLoanVsCash>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoanVsCash, input_name='ValueOnLoanVsCash'), namespaceprefix_ , eol_))
        if self.VWAFAllDays is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAFAllDays>%s</%sVWAFAllDays>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAFAllDays, input_name='VWAFAllDays'), namespaceprefix_ , eol_))
        if self.VWARAllDays is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWARAllDays>%s</%sVWARAllDays>%s' % (namespaceprefix_ , self.gds_format_float(self.VWARAllDays, input_name='VWARAllDays'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ActiveLendingAgents' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ActiveLendingAgents')
            self.ActiveLendingAgents = fval_
        elif nodeName_ == 'ActiveUtilisation' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ActiveUtilisation')
            self.ActiveUtilisation = fval_
        elif nodeName_ == 'ActiveUtilisationByQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ActiveUtilisationByQuantity')
            self.ActiveUtilisationByQuantity = fval_
        elif nodeName_ == 'AllIn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AllIn')
            self.AllIn = fval_
        elif nodeName_ == 'AverageTenure' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AverageTenure')
            self.AverageTenure = fval_
        elif nodeName_ == 'Balance' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Balance')
            self.Balance = fval_
        elif nodeName_ == 'BenchmarkAllIn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'BenchmarkAllIn')
            self.BenchmarkAllIn = fval_
        elif nodeName_ == 'BenchmarkDuration':
            BenchmarkDuration_ = child_.text
            BenchmarkDuration_ = self.gds_validate_string(BenchmarkDuration_, node, 'BenchmarkDuration')
            self.BenchmarkDuration = BenchmarkDuration_
        elif nodeName_ == 'BenchmarkFee' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'BenchmarkFee')
            self.BenchmarkFee = fval_
        elif nodeName_ == 'BenchmarkRebate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'BenchmarkRebate')
            self.BenchmarkRebate = fval_
        elif nodeName_ == 'BorrowerConcentration' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'BorrowerConcentration')
            self.BorrowerConcentration = fval_
        elif nodeName_ == 'CashLoanValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'CashLoanValue')
            self.CashLoanValue = fval_
        elif nodeName_ == 'Currency':
            Currency_ = child_.text
            Currency_ = self.gds_validate_string(Currency_, node, 'Currency')
            self.Currency = Currency_
        elif nodeName_ == 'DailyCost' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DailyCost')
            self.DailyCost = fval_
        elif nodeName_ == 'DailyRevenue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DailyRevenue')
            self.DailyRevenue = fval_
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
        elif nodeName_ == 'Delta':
            obj_ = DeltaType141.factory(parent_object_=self)
            obj_.build(child_)
            self.Delta.append(obj_)
            obj_.original_tagname_ = 'Delta'
        elif nodeName_ == 'Duration' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Duration')
            self.Duration = fval_
        elif nodeName_ == 'InactiveLendingAgents' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'InactiveLendingAgents')
            self.InactiveLendingAgents = fval_
        elif nodeName_ == 'Index':
            obj_ = IndexType142.factory(parent_object_=self)
            obj_.build(child_)
            self.Index.append(obj_)
            obj_.original_tagname_ = 'Index'
        elif nodeName_ == 'IndicativeFee' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeFee')
            self.IndicativeFee = fval_
        elif nodeName_ == 'IndicativeFee1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeFee1')
            self.IndicativeFee1 = fval_
        elif nodeName_ == 'IndicativeFee7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeFee7')
            self.IndicativeFee7 = fval_
        elif nodeName_ == 'IndicativeFeeAllDay' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeFeeAllDay')
            self.IndicativeFeeAllDay = fval_
        elif nodeName_ == 'IndicativeRebate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeRebate')
            self.IndicativeRebate = fval_
        elif nodeName_ == 'IndicativeRebate1' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeRebate1')
            self.IndicativeRebate1 = fval_
        elif nodeName_ == 'IndicativeRebate7' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeRebate7')
            self.IndicativeRebate7 = fval_
        elif nodeName_ == 'IndicativeRebateAllDay' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeRebateAllDay')
            self.IndicativeRebateAllDay = fval_
        elif nodeName_ == 'LeastExpensiveFee' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LeastExpensiveFee')
            self.LeastExpensiveFee = fval_
        elif nodeName_ == 'LeastExpensiveRebate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LeastExpensiveRebate')
            self.LeastExpensiveRebate = fval_
        elif nodeName_ == 'LenderConcentration' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderConcentration')
            self.LenderConcentration = fval_
        elif nodeName_ == 'LenderFee' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderFee')
            self.LenderFee = fval_
        elif nodeName_ == 'Margin' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Margin')
            self.Margin = fval_
        elif nodeName_ == 'MarketShare' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'MarketShare')
            self.MarketShare = fval_
        elif nodeName_ == 'MarketShareRank' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'MarketShareRank')
            self.MarketShareRank = fval_
        elif nodeName_ == 'MedianRateSpread' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'MedianRateSpread')
            self.MedianRateSpread = fval_
        elif nodeName_ == 'MedianRepoRate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'MedianRepoRate')
            self.MedianRepoRate = fval_
        elif nodeName_ == 'MedianSevenDayRateSpread' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'MedianSevenDayRateSpread')
            self.MedianSevenDayRateSpread = fval_
        elif nodeName_ == 'MedianSevenDayRepoRate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'MedianSevenDayRepoRate')
            self.MedianSevenDayRepoRate = fval_
        elif nodeName_ == 'MostExpensiveFee' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'MostExpensiveFee')
            self.MostExpensiveFee = fval_
        elif nodeName_ == 'MostExpensiveRebate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'MostExpensiveRebate')
            self.MostExpensiveRebate = fval_
        elif nodeName_ == 'NewLoanQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NewLoanQuantity')
            self.NewLoanQuantity = fval_
        elif nodeName_ == 'NewLoanValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NewLoanValue')
            self.NewLoanValue = fval_
        elif nodeName_ == 'NoticePeriod' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NoticePeriod')
            self.NoticePeriod = fval_
        elif nodeName_ == 'Period':
            obj_ = PeriodType143.factory(parent_object_=self)
            obj_.build(child_)
            self.Period.append(obj_)
            obj_.original_tagname_ = 'Period'
        elif nodeName_ == 'PrimeBrokers' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PrimeBrokers')
            self.PrimeBrokers = fval_
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Quantity')
            self.Quantity = fval_
        elif nodeName_ == 'QuantityOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'QuantityOnLoan')
            self.QuantityOnLoan = fval_
        elif nodeName_ == 'QuantityOnLoanDirectional' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'QuantityOnLoanDirectional')
            self.QuantityOnLoanDirectional = fval_
        elif nodeName_ == 'RateSpread' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RateSpread')
            self.RateSpread = fval_
        elif nodeName_ == 'RepoRate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RepoRate')
            self.RepoRate = fval_
        elif nodeName_ == 'SAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SAF')
            self.SAF = fval_
        elif nodeName_ == 'SAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SAR')
            self.SAR = fval_
        elif nodeName_ == 'SATenure' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SATenure')
            self.SATenure = fval_
        elif nodeName_ == 'SevenDayRateSpread' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SevenDayRateSpread')
            self.SevenDayRateSpread = fval_
        elif nodeName_ == 'SevenDayRepoRate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SevenDayRepoRate')
            self.SevenDayRepoRate = fval_
        elif nodeName_ == 'SlFee' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SlFee')
            self.SlFee = fval_
        elif nodeName_ == 'TradableDuration':
            TradableDuration_ = child_.text
            TradableDuration_ = self.gds_validate_string(TradableDuration_, node, 'TradableDuration')
            self.TradableDuration = TradableDuration_
        elif nodeName_ == 'TradableFee' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TradableFee')
            self.TradableFee = fval_
        elif nodeName_ == 'TradableRebate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TradableRebate')
            self.TradableRebate = fval_
        elif nodeName_ == 'TransactionCount' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TransactionCount')
            self.TransactionCount = fval_
        elif nodeName_ == 'Utilisation' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Utilisation')
            self.Utilisation = fval_
        elif nodeName_ == 'UtilisationByQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'UtilisationByQuantity')
            self.UtilisationByQuantity = fval_
        elif nodeName_ == 'ValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoan')
            self.ValueOnLoan = fval_
        elif nodeName_ == 'ValueOnLoanDirectional' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoanDirectional')
            self.ValueOnLoanDirectional = fval_
        elif nodeName_ == 'ValueOnLoanVsCash' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoanVsCash')
            self.ValueOnLoanVsCash = fval_
        elif nodeName_ == 'VWAFAllDays' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAFAllDays')
            self.VWAFAllDays = fval_
        elif nodeName_ == 'VWARAllDays' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWARAllDays')
            self.VWARAllDays = fval_
# end class TradingType140


class DeltaType141(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, ActiveUtilisationByQuantityDelta=None, ActiveUtilisationDelta=None, BenchmarkFeeDelta=None, BenchmarkRebateDelta=None, IndicativeFee1DayDelta=None, IndicativeFee7DaysDelta=None, IndicativeFeeAllDayDelta=None, IndicativeFeeDelta=None, IndicativeRebate1DayDelta=None, IndicativeRebate7DaysDelta=None, IndicativeRebateAllDayDelta=None, IndicativeRebateDelta=None, QuantityOnLoanDelta=None, SAFDelta=None, SARDelta=None, UtilisationByQuantityDelta=None, UtilisationDelta=None, ValueOnLoanDelta=None, ValueOnLoanVsCashDelta=None, VWAFAllDaysDelta=None, VWAFDelta=None, VWARAllDaysDelta=None, VWARDelta=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.value = _cast(None, value)
        self.ActiveUtilisationByQuantityDelta = ActiveUtilisationByQuantityDelta
        self.ActiveUtilisationDelta = ActiveUtilisationDelta
        self.BenchmarkFeeDelta = BenchmarkFeeDelta
        self.BenchmarkRebateDelta = BenchmarkRebateDelta
        self.IndicativeFee1DayDelta = IndicativeFee1DayDelta
        self.IndicativeFee7DaysDelta = IndicativeFee7DaysDelta
        self.IndicativeFeeAllDayDelta = IndicativeFeeAllDayDelta
        self.IndicativeFeeDelta = IndicativeFeeDelta
        self.IndicativeRebate1DayDelta = IndicativeRebate1DayDelta
        self.IndicativeRebate7DaysDelta = IndicativeRebate7DaysDelta
        self.IndicativeRebateAllDayDelta = IndicativeRebateAllDayDelta
        self.IndicativeRebateDelta = IndicativeRebateDelta
        self.QuantityOnLoanDelta = QuantityOnLoanDelta
        self.SAFDelta = SAFDelta
        self.SARDelta = SARDelta
        self.UtilisationByQuantityDelta = UtilisationByQuantityDelta
        self.UtilisationDelta = UtilisationDelta
        self.ValueOnLoanDelta = ValueOnLoanDelta
        self.ValueOnLoanVsCashDelta = ValueOnLoanVsCashDelta
        self.VWAFAllDaysDelta = VWAFAllDaysDelta
        self.VWAFDelta = VWAFDelta
        self.VWARAllDaysDelta = VWARAllDaysDelta
        self.VWARDelta = VWARDelta
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeltaType141)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeltaType141.subclass:
            return DeltaType141.subclass(*args_, **kwargs_)
        else:
            return DeltaType141(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ActiveUtilisationByQuantityDelta(self):
        return self.ActiveUtilisationByQuantityDelta
    def set_ActiveUtilisationByQuantityDelta(self, ActiveUtilisationByQuantityDelta):
        self.ActiveUtilisationByQuantityDelta = ActiveUtilisationByQuantityDelta
    def get_ActiveUtilisationDelta(self):
        return self.ActiveUtilisationDelta
    def set_ActiveUtilisationDelta(self, ActiveUtilisationDelta):
        self.ActiveUtilisationDelta = ActiveUtilisationDelta
    def get_BenchmarkFeeDelta(self):
        return self.BenchmarkFeeDelta
    def set_BenchmarkFeeDelta(self, BenchmarkFeeDelta):
        self.BenchmarkFeeDelta = BenchmarkFeeDelta
    def get_BenchmarkRebateDelta(self):
        return self.BenchmarkRebateDelta
    def set_BenchmarkRebateDelta(self, BenchmarkRebateDelta):
        self.BenchmarkRebateDelta = BenchmarkRebateDelta
    def get_IndicativeFee1DayDelta(self):
        return self.IndicativeFee1DayDelta
    def set_IndicativeFee1DayDelta(self, IndicativeFee1DayDelta):
        self.IndicativeFee1DayDelta = IndicativeFee1DayDelta
    def get_IndicativeFee7DaysDelta(self):
        return self.IndicativeFee7DaysDelta
    def set_IndicativeFee7DaysDelta(self, IndicativeFee7DaysDelta):
        self.IndicativeFee7DaysDelta = IndicativeFee7DaysDelta
    def get_IndicativeFeeAllDayDelta(self):
        return self.IndicativeFeeAllDayDelta
    def set_IndicativeFeeAllDayDelta(self, IndicativeFeeAllDayDelta):
        self.IndicativeFeeAllDayDelta = IndicativeFeeAllDayDelta
    def get_IndicativeFeeDelta(self):
        return self.IndicativeFeeDelta
    def set_IndicativeFeeDelta(self, IndicativeFeeDelta):
        self.IndicativeFeeDelta = IndicativeFeeDelta
    def get_IndicativeRebate1DayDelta(self):
        return self.IndicativeRebate1DayDelta
    def set_IndicativeRebate1DayDelta(self, IndicativeRebate1DayDelta):
        self.IndicativeRebate1DayDelta = IndicativeRebate1DayDelta
    def get_IndicativeRebate7DaysDelta(self):
        return self.IndicativeRebate7DaysDelta
    def set_IndicativeRebate7DaysDelta(self, IndicativeRebate7DaysDelta):
        self.IndicativeRebate7DaysDelta = IndicativeRebate7DaysDelta
    def get_IndicativeRebateAllDayDelta(self):
        return self.IndicativeRebateAllDayDelta
    def set_IndicativeRebateAllDayDelta(self, IndicativeRebateAllDayDelta):
        self.IndicativeRebateAllDayDelta = IndicativeRebateAllDayDelta
    def get_IndicativeRebateDelta(self):
        return self.IndicativeRebateDelta
    def set_IndicativeRebateDelta(self, IndicativeRebateDelta):
        self.IndicativeRebateDelta = IndicativeRebateDelta
    def get_QuantityOnLoanDelta(self):
        return self.QuantityOnLoanDelta
    def set_QuantityOnLoanDelta(self, QuantityOnLoanDelta):
        self.QuantityOnLoanDelta = QuantityOnLoanDelta
    def get_SAFDelta(self):
        return self.SAFDelta
    def set_SAFDelta(self, SAFDelta):
        self.SAFDelta = SAFDelta
    def get_SARDelta(self):
        return self.SARDelta
    def set_SARDelta(self, SARDelta):
        self.SARDelta = SARDelta
    def get_UtilisationByQuantityDelta(self):
        return self.UtilisationByQuantityDelta
    def set_UtilisationByQuantityDelta(self, UtilisationByQuantityDelta):
        self.UtilisationByQuantityDelta = UtilisationByQuantityDelta
    def get_UtilisationDelta(self):
        return self.UtilisationDelta
    def set_UtilisationDelta(self, UtilisationDelta):
        self.UtilisationDelta = UtilisationDelta
    def get_ValueOnLoanDelta(self):
        return self.ValueOnLoanDelta
    def set_ValueOnLoanDelta(self, ValueOnLoanDelta):
        self.ValueOnLoanDelta = ValueOnLoanDelta
    def get_ValueOnLoanVsCashDelta(self):
        return self.ValueOnLoanVsCashDelta
    def set_ValueOnLoanVsCashDelta(self, ValueOnLoanVsCashDelta):
        self.ValueOnLoanVsCashDelta = ValueOnLoanVsCashDelta
    def get_VWAFAllDaysDelta(self):
        return self.VWAFAllDaysDelta
    def set_VWAFAllDaysDelta(self, VWAFAllDaysDelta):
        self.VWAFAllDaysDelta = VWAFAllDaysDelta
    def get_VWAFDelta(self):
        return self.VWAFDelta
    def set_VWAFDelta(self, VWAFDelta):
        self.VWAFDelta = VWAFDelta
    def get_VWARAllDaysDelta(self):
        return self.VWARAllDaysDelta
    def set_VWARAllDaysDelta(self, VWARAllDaysDelta):
        self.VWARAllDaysDelta = VWARAllDaysDelta
    def get_VWARDelta(self):
        return self.VWARDelta
    def set_VWARDelta(self, VWARDelta):
        self.VWARDelta = VWARDelta
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.ActiveUtilisationByQuantityDelta is not None or
            self.ActiveUtilisationDelta is not None or
            self.BenchmarkFeeDelta is not None or
            self.BenchmarkRebateDelta is not None or
            self.IndicativeFee1DayDelta is not None or
            self.IndicativeFee7DaysDelta is not None or
            self.IndicativeFeeAllDayDelta is not None or
            self.IndicativeFeeDelta is not None or
            self.IndicativeRebate1DayDelta is not None or
            self.IndicativeRebate7DaysDelta is not None or
            self.IndicativeRebateAllDayDelta is not None or
            self.IndicativeRebateDelta is not None or
            self.QuantityOnLoanDelta is not None or
            self.SAFDelta is not None or
            self.SARDelta is not None or
            self.UtilisationByQuantityDelta is not None or
            self.UtilisationDelta is not None or
            self.ValueOnLoanDelta is not None or
            self.ValueOnLoanVsCashDelta is not None or
            self.VWAFAllDaysDelta is not None or
            self.VWAFDelta is not None or
            self.VWARAllDaysDelta is not None or
            self.VWARDelta is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeltaType141', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeltaType141')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DeltaType141')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DeltaType141', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DeltaType141'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeltaType141', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ActiveUtilisationByQuantityDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveUtilisationByQuantityDelta>%s</%sActiveUtilisationByQuantityDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.ActiveUtilisationByQuantityDelta, input_name='ActiveUtilisationByQuantityDelta'), namespaceprefix_ , eol_))
        if self.ActiveUtilisationDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveUtilisationDelta>%s</%sActiveUtilisationDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.ActiveUtilisationDelta, input_name='ActiveUtilisationDelta'), namespaceprefix_ , eol_))
        if self.BenchmarkFeeDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBenchmarkFeeDelta>%s</%sBenchmarkFeeDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.BenchmarkFeeDelta, input_name='BenchmarkFeeDelta'), namespaceprefix_ , eol_))
        if self.BenchmarkRebateDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBenchmarkRebateDelta>%s</%sBenchmarkRebateDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.BenchmarkRebateDelta, input_name='BenchmarkRebateDelta'), namespaceprefix_ , eol_))
        if self.IndicativeFee1DayDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeFee1DayDelta>%s</%sIndicativeFee1DayDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeFee1DayDelta, input_name='IndicativeFee1DayDelta'), namespaceprefix_ , eol_))
        if self.IndicativeFee7DaysDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeFee7DaysDelta>%s</%sIndicativeFee7DaysDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeFee7DaysDelta, input_name='IndicativeFee7DaysDelta'), namespaceprefix_ , eol_))
        if self.IndicativeFeeAllDayDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeFeeAllDayDelta>%s</%sIndicativeFeeAllDayDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeFeeAllDayDelta, input_name='IndicativeFeeAllDayDelta'), namespaceprefix_ , eol_))
        if self.IndicativeFeeDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeFeeDelta>%s</%sIndicativeFeeDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeFeeDelta, input_name='IndicativeFeeDelta'), namespaceprefix_ , eol_))
        if self.IndicativeRebate1DayDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeRebate1DayDelta>%s</%sIndicativeRebate1DayDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeRebate1DayDelta, input_name='IndicativeRebate1DayDelta'), namespaceprefix_ , eol_))
        if self.IndicativeRebate7DaysDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeRebate7DaysDelta>%s</%sIndicativeRebate7DaysDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeRebate7DaysDelta, input_name='IndicativeRebate7DaysDelta'), namespaceprefix_ , eol_))
        if self.IndicativeRebateAllDayDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeRebateAllDayDelta>%s</%sIndicativeRebateAllDayDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeRebateAllDayDelta, input_name='IndicativeRebateAllDayDelta'), namespaceprefix_ , eol_))
        if self.IndicativeRebateDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicativeRebateDelta>%s</%sIndicativeRebateDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.IndicativeRebateDelta, input_name='IndicativeRebateDelta'), namespaceprefix_ , eol_))
        if self.QuantityOnLoanDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityOnLoanDelta>%s</%sQuantityOnLoanDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.QuantityOnLoanDelta, input_name='QuantityOnLoanDelta'), namespaceprefix_ , eol_))
        if self.SAFDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSAFDelta>%s</%sSAFDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.SAFDelta, input_name='SAFDelta'), namespaceprefix_ , eol_))
        if self.SARDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSARDelta>%s</%sSARDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.SARDelta, input_name='SARDelta'), namespaceprefix_ , eol_))
        if self.UtilisationByQuantityDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisationByQuantityDelta>%s</%sUtilisationByQuantityDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.UtilisationByQuantityDelta, input_name='UtilisationByQuantityDelta'), namespaceprefix_ , eol_))
        if self.UtilisationDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisationDelta>%s</%sUtilisationDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.UtilisationDelta, input_name='UtilisationDelta'), namespaceprefix_ , eol_))
        if self.ValueOnLoanDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanDelta>%s</%sValueOnLoanDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoanDelta, input_name='ValueOnLoanDelta'), namespaceprefix_ , eol_))
        if self.ValueOnLoanVsCashDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanVsCashDelta>%s</%sValueOnLoanVsCashDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoanVsCashDelta, input_name='ValueOnLoanVsCashDelta'), namespaceprefix_ , eol_))
        if self.VWAFAllDaysDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAFAllDaysDelta>%s</%sVWAFAllDaysDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAFAllDaysDelta, input_name='VWAFAllDaysDelta'), namespaceprefix_ , eol_))
        if self.VWAFDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAFDelta>%s</%sVWAFDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAFDelta, input_name='VWAFDelta'), namespaceprefix_ , eol_))
        if self.VWARAllDaysDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWARAllDaysDelta>%s</%sVWARAllDaysDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.VWARAllDaysDelta, input_name='VWARAllDaysDelta'), namespaceprefix_ , eol_))
        if self.VWARDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWARDelta>%s</%sVWARDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.VWARDelta, input_name='VWARDelta'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ActiveUtilisationByQuantityDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ActiveUtilisationByQuantityDelta')
            self.ActiveUtilisationByQuantityDelta = fval_
        elif nodeName_ == 'ActiveUtilisationDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ActiveUtilisationDelta')
            self.ActiveUtilisationDelta = fval_
        elif nodeName_ == 'BenchmarkFeeDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'BenchmarkFeeDelta')
            self.BenchmarkFeeDelta = fval_
        elif nodeName_ == 'BenchmarkRebateDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'BenchmarkRebateDelta')
            self.BenchmarkRebateDelta = fval_
        elif nodeName_ == 'IndicativeFee1DayDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeFee1DayDelta')
            self.IndicativeFee1DayDelta = fval_
        elif nodeName_ == 'IndicativeFee7DaysDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeFee7DaysDelta')
            self.IndicativeFee7DaysDelta = fval_
        elif nodeName_ == 'IndicativeFeeAllDayDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeFeeAllDayDelta')
            self.IndicativeFeeAllDayDelta = fval_
        elif nodeName_ == 'IndicativeFeeDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeFeeDelta')
            self.IndicativeFeeDelta = fval_
        elif nodeName_ == 'IndicativeRebate1DayDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeRebate1DayDelta')
            self.IndicativeRebate1DayDelta = fval_
        elif nodeName_ == 'IndicativeRebate7DaysDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeRebate7DaysDelta')
            self.IndicativeRebate7DaysDelta = fval_
        elif nodeName_ == 'IndicativeRebateAllDayDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeRebateAllDayDelta')
            self.IndicativeRebateAllDayDelta = fval_
        elif nodeName_ == 'IndicativeRebateDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'IndicativeRebateDelta')
            self.IndicativeRebateDelta = fval_
        elif nodeName_ == 'QuantityOnLoanDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'QuantityOnLoanDelta')
            self.QuantityOnLoanDelta = fval_
        elif nodeName_ == 'SAFDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SAFDelta')
            self.SAFDelta = fval_
        elif nodeName_ == 'SARDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SARDelta')
            self.SARDelta = fval_
        elif nodeName_ == 'UtilisationByQuantityDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'UtilisationByQuantityDelta')
            self.UtilisationByQuantityDelta = fval_
        elif nodeName_ == 'UtilisationDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'UtilisationDelta')
            self.UtilisationDelta = fval_
        elif nodeName_ == 'ValueOnLoanDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoanDelta')
            self.ValueOnLoanDelta = fval_
        elif nodeName_ == 'ValueOnLoanVsCashDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoanVsCashDelta')
            self.ValueOnLoanVsCashDelta = fval_
        elif nodeName_ == 'VWAFAllDaysDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAFAllDaysDelta')
            self.VWAFAllDaysDelta = fval_
        elif nodeName_ == 'VWAFDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAFDelta')
            self.VWAFDelta = fval_
        elif nodeName_ == 'VWARAllDaysDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWARAllDaysDelta')
            self.VWARAllDaysDelta = fval_
        elif nodeName_ == 'VWARDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWARDelta')
            self.VWARDelta = fval_
# end class DeltaType141


class IndexType142(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, BorrowerMarketShare=None, BorrowerVWAF=None, BorrowerVWAR=None, Dividend=None, LenderMarketShare=None, LenderVWAF=None, LenderVWAR=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.value = _cast(None, value)
        self.BorrowerMarketShare = BorrowerMarketShare
        self.BorrowerVWAF = BorrowerVWAF
        self.BorrowerVWAR = BorrowerVWAR
        self.Dividend = Dividend
        self.LenderMarketShare = LenderMarketShare
        self.LenderVWAF = LenderVWAF
        self.LenderVWAR = LenderVWAR
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IndexType142)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IndexType142.subclass:
            return IndexType142.subclass(*args_, **kwargs_)
        else:
            return IndexType142(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BorrowerMarketShare(self):
        return self.BorrowerMarketShare
    def set_BorrowerMarketShare(self, BorrowerMarketShare):
        self.BorrowerMarketShare = BorrowerMarketShare
    def get_BorrowerVWAF(self):
        return self.BorrowerVWAF
    def set_BorrowerVWAF(self, BorrowerVWAF):
        self.BorrowerVWAF = BorrowerVWAF
    def get_BorrowerVWAR(self):
        return self.BorrowerVWAR
    def set_BorrowerVWAR(self, BorrowerVWAR):
        self.BorrowerVWAR = BorrowerVWAR
    def get_Dividend(self):
        return self.Dividend
    def set_Dividend(self, Dividend):
        self.Dividend = Dividend
    def get_LenderMarketShare(self):
        return self.LenderMarketShare
    def set_LenderMarketShare(self, LenderMarketShare):
        self.LenderMarketShare = LenderMarketShare
    def get_LenderVWAF(self):
        return self.LenderVWAF
    def set_LenderVWAF(self, LenderVWAF):
        self.LenderVWAF = LenderVWAF
    def get_LenderVWAR(self):
        return self.LenderVWAR
    def set_LenderVWAR(self, LenderVWAR):
        self.LenderVWAR = LenderVWAR
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.BorrowerMarketShare is not None or
            self.BorrowerVWAF is not None or
            self.BorrowerVWAR is not None or
            self.Dividend is not None or
            self.LenderMarketShare is not None or
            self.LenderVWAF is not None or
            self.LenderVWAR is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='IndexType142', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IndexType142')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IndexType142')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IndexType142', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='IndexType142'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='IndexType142', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BorrowerMarketShare is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBorrowerMarketShare>%s</%sBorrowerMarketShare>%s' % (namespaceprefix_ , self.gds_format_float(self.BorrowerMarketShare, input_name='BorrowerMarketShare'), namespaceprefix_ , eol_))
        if self.BorrowerVWAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBorrowerVWAF>%s</%sBorrowerVWAF>%s' % (namespaceprefix_ , self.gds_format_float(self.BorrowerVWAF, input_name='BorrowerVWAF'), namespaceprefix_ , eol_))
        if self.BorrowerVWAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBorrowerVWAR>%s</%sBorrowerVWAR>%s' % (namespaceprefix_ , self.gds_format_float(self.BorrowerVWAR, input_name='BorrowerVWAR'), namespaceprefix_ , eol_))
        if self.Dividend is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividend>%s</%sDividend>%s' % (namespaceprefix_ , self.gds_format_float(self.Dividend, input_name='Dividend'), namespaceprefix_ , eol_))
        if self.LenderMarketShare is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderMarketShare>%s</%sLenderMarketShare>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderMarketShare, input_name='LenderMarketShare'), namespaceprefix_ , eol_))
        if self.LenderVWAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderVWAF>%s</%sLenderVWAF>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderVWAF, input_name='LenderVWAF'), namespaceprefix_ , eol_))
        if self.LenderVWAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderVWAR>%s</%sLenderVWAR>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderVWAR, input_name='LenderVWAR'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BorrowerMarketShare' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'BorrowerMarketShare')
            self.BorrowerMarketShare = fval_
        elif nodeName_ == 'BorrowerVWAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'BorrowerVWAF')
            self.BorrowerVWAF = fval_
        elif nodeName_ == 'BorrowerVWAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'BorrowerVWAR')
            self.BorrowerVWAR = fval_
        elif nodeName_ == 'Dividend' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Dividend')
            self.Dividend = fval_
        elif nodeName_ == 'LenderMarketShare' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderMarketShare')
            self.LenderMarketShare = fval_
        elif nodeName_ == 'LenderVWAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderVWAF')
            self.LenderVWAF = fval_
        elif nodeName_ == 'LenderVWAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderVWAR')
            self.LenderVWAR = fval_
# end class IndexType142


class PeriodType143(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, VWAF=None, VWAR=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.value = _cast(None, value)
        self.VWAF = VWAF
        self.VWAR = VWAR
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PeriodType143)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PeriodType143.subclass:
            return PeriodType143.subclass(*args_, **kwargs_)
        else:
            return PeriodType143(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_VWAF(self):
        return self.VWAF
    def set_VWAF(self, VWAF):
        self.VWAF = VWAF
    def get_VWAR(self):
        return self.VWAR
    def set_VWAR(self, VWAR):
        self.VWAR = VWAR
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.VWAF is not None or
            self.VWAR is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PeriodType143', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PeriodType143')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PeriodType143')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PeriodType143', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PeriodType143'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PeriodType143', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.VWAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAF>%s</%sVWAF>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAF, input_name='VWAF'), namespaceprefix_ , eol_))
        if self.VWAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAR>%s</%sVWAR>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAR, input_name='VWAR'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'VWAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAF')
            self.VWAF = fval_
        elif nodeName_ == 'VWAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAR')
            self.VWAR = fval_
# end class PeriodType143


class InstrumentDataType144(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BB_TICKER=None, BBGID=None, CUSIP=None, DXLID=None, EXCHANGE=None, InstrumentID=None, InstrumentName=None, InstrumentType=None, IsDeleted=None, ISIN=None, IsPrimary=None, MarketArea=None, QUICK=None, RegionMarketArea=None, Sector=None, SEDOL=None, TICKER=None, TICKERCODE=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.BB_TICKER = BB_TICKER
        self.BBGID = BBGID
        self.CUSIP = CUSIP
        self.DXLID = DXLID
        self.EXCHANGE = EXCHANGE
        self.InstrumentID = InstrumentID
        self.InstrumentName = InstrumentName
        self.InstrumentType = InstrumentType
        self.IsDeleted = IsDeleted
        self.ISIN = ISIN
        self.IsPrimary = IsPrimary
        self.MarketArea = MarketArea
        self.QUICK = QUICK
        self.RegionMarketArea = RegionMarketArea
        self.Sector = Sector
        self.SEDOL = SEDOL
        self.TICKER = TICKER
        self.TICKERCODE = TICKERCODE
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InstrumentDataType144)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InstrumentDataType144.subclass:
            return InstrumentDataType144.subclass(*args_, **kwargs_)
        else:
            return InstrumentDataType144(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BB_TICKER(self):
        return self.BB_TICKER
    def set_BB_TICKER(self, BB_TICKER):
        self.BB_TICKER = BB_TICKER
    def get_BBGID(self):
        return self.BBGID
    def set_BBGID(self, BBGID):
        self.BBGID = BBGID
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_EXCHANGE(self):
        return self.EXCHANGE
    def set_EXCHANGE(self, EXCHANGE):
        self.EXCHANGE = EXCHANGE
    def get_InstrumentID(self):
        return self.InstrumentID
    def set_InstrumentID(self, InstrumentID):
        self.InstrumentID = InstrumentID
    def get_InstrumentName(self):
        return self.InstrumentName
    def set_InstrumentName(self, InstrumentName):
        self.InstrumentName = InstrumentName
    def get_InstrumentType(self):
        return self.InstrumentType
    def set_InstrumentType(self, InstrumentType):
        self.InstrumentType = InstrumentType
    def get_IsDeleted(self):
        return self.IsDeleted
    def set_IsDeleted(self, IsDeleted):
        self.IsDeleted = IsDeleted
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_IsPrimary(self):
        return self.IsPrimary
    def set_IsPrimary(self, IsPrimary):
        self.IsPrimary = IsPrimary
    def get_MarketArea(self):
        return self.MarketArea
    def set_MarketArea(self, MarketArea):
        self.MarketArea = MarketArea
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_RegionMarketArea(self):
        return self.RegionMarketArea
    def set_RegionMarketArea(self, RegionMarketArea):
        self.RegionMarketArea = RegionMarketArea
    def get_Sector(self):
        return self.Sector
    def set_Sector(self, Sector):
        self.Sector = Sector
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def get_TICKERCODE(self):
        return self.TICKERCODE
    def set_TICKERCODE(self, TICKERCODE):
        self.TICKERCODE = TICKERCODE
    def hasContent_(self):
        if (
            self.BB_TICKER is not None or
            self.BBGID is not None or
            self.CUSIP is not None or
            self.DXLID is not None or
            self.EXCHANGE is not None or
            self.InstrumentID is not None or
            self.InstrumentName is not None or
            self.InstrumentType is not None or
            self.IsDeleted is not None or
            self.ISIN is not None or
            self.IsPrimary is not None or
            self.MarketArea is not None or
            self.QUICK is not None or
            self.RegionMarketArea is not None or
            self.Sector is not None or
            self.SEDOL is not None or
            self.TICKER is not None or
            self.TICKERCODE is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentDataType144', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InstrumentDataType144')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InstrumentDataType144')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InstrumentDataType144', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InstrumentDataType144'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentDataType144', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BB_TICKER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBB_TICKER>%s</%sBB_TICKER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BB_TICKER), input_name='BB_TICKER')), namespaceprefix_ , eol_))
        if self.BBGID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBBGID>%s</%sBBGID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BBGID), input_name='BBGID')), namespaceprefix_ , eol_))
        if self.CUSIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUSIP>%s</%sCUSIP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CUSIP), input_name='CUSIP')), namespaceprefix_ , eol_))
        if self.DXLID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDXLID>%s</%sDXLID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DXLID), input_name='DXLID')), namespaceprefix_ , eol_))
        if self.EXCHANGE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEXCHANGE>%s</%sEXCHANGE>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EXCHANGE), input_name='EXCHANGE')), namespaceprefix_ , eol_))
        if self.InstrumentID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstrumentID>%s</%sInstrumentID>%s' % (namespaceprefix_ , self.gds_format_float(self.InstrumentID, input_name='InstrumentID'), namespaceprefix_ , eol_))
        if self.InstrumentName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstrumentName>%s</%sInstrumentName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InstrumentName), input_name='InstrumentName')), namespaceprefix_ , eol_))
        if self.InstrumentType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstrumentType>%s</%sInstrumentType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InstrumentType), input_name='InstrumentType')), namespaceprefix_ , eol_))
        if self.IsDeleted is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsDeleted>%s</%sIsDeleted>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsDeleted), input_name='IsDeleted')), namespaceprefix_ , eol_))
        if self.ISIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sISIN>%s</%sISIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ISIN), input_name='ISIN')), namespaceprefix_ , eol_))
        if self.IsPrimary is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsPrimary>%s</%sIsPrimary>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsPrimary), input_name='IsPrimary')), namespaceprefix_ , eol_))
        if self.MarketArea is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarketArea>%s</%sMarketArea>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarketArea), input_name='MarketArea')), namespaceprefix_ , eol_))
        if self.QUICK is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQUICK>%s</%sQUICK>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QUICK), input_name='QUICK')), namespaceprefix_ , eol_))
        if self.RegionMarketArea is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegionMarketArea>%s</%sRegionMarketArea>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegionMarketArea), input_name='RegionMarketArea')), namespaceprefix_ , eol_))
        if self.Sector is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSector>%s</%sSector>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Sector), input_name='Sector')), namespaceprefix_ , eol_))
        if self.SEDOL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSEDOL>%s</%sSEDOL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SEDOL), input_name='SEDOL')), namespaceprefix_ , eol_))
        if self.TICKER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTICKER>%s</%sTICKER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TICKER), input_name='TICKER')), namespaceprefix_ , eol_))
        if self.TICKERCODE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTICKERCODE>%s</%sTICKERCODE>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TICKERCODE), input_name='TICKERCODE')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BB_TICKER':
            BB_TICKER_ = child_.text
            BB_TICKER_ = self.gds_validate_string(BB_TICKER_, node, 'BB_TICKER')
            self.BB_TICKER = BB_TICKER_
        elif nodeName_ == 'BBGID':
            BBGID_ = child_.text
            BBGID_ = self.gds_validate_string(BBGID_, node, 'BBGID')
            self.BBGID = BBGID_
        elif nodeName_ == 'CUSIP':
            CUSIP_ = child_.text
            CUSIP_ = self.gds_validate_string(CUSIP_, node, 'CUSIP')
            self.CUSIP = CUSIP_
        elif nodeName_ == 'DXLID':
            DXLID_ = child_.text
            DXLID_ = self.gds_validate_string(DXLID_, node, 'DXLID')
            self.DXLID = DXLID_
        elif nodeName_ == 'EXCHANGE':
            EXCHANGE_ = child_.text
            EXCHANGE_ = self.gds_validate_string(EXCHANGE_, node, 'EXCHANGE')
            self.EXCHANGE = EXCHANGE_
        elif nodeName_ == 'InstrumentID' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'InstrumentID')
            self.InstrumentID = fval_
        elif nodeName_ == 'InstrumentName':
            InstrumentName_ = child_.text
            InstrumentName_ = self.gds_validate_string(InstrumentName_, node, 'InstrumentName')
            self.InstrumentName = InstrumentName_
        elif nodeName_ == 'InstrumentType':
            InstrumentType_ = child_.text
            InstrumentType_ = self.gds_validate_string(InstrumentType_, node, 'InstrumentType')
            self.InstrumentType = InstrumentType_
        elif nodeName_ == 'IsDeleted':
            IsDeleted_ = child_.text
            IsDeleted_ = self.gds_validate_string(IsDeleted_, node, 'IsDeleted')
            self.IsDeleted = IsDeleted_
        elif nodeName_ == 'ISIN':
            ISIN_ = child_.text
            ISIN_ = self.gds_validate_string(ISIN_, node, 'ISIN')
            self.ISIN = ISIN_
        elif nodeName_ == 'IsPrimary':
            IsPrimary_ = child_.text
            IsPrimary_ = self.gds_validate_string(IsPrimary_, node, 'IsPrimary')
            self.IsPrimary = IsPrimary_
        elif nodeName_ == 'MarketArea':
            MarketArea_ = child_.text
            MarketArea_ = self.gds_validate_string(MarketArea_, node, 'MarketArea')
            self.MarketArea = MarketArea_
        elif nodeName_ == 'QUICK':
            QUICK_ = child_.text
            QUICK_ = self.gds_validate_string(QUICK_, node, 'QUICK')
            self.QUICK = QUICK_
        elif nodeName_ == 'RegionMarketArea':
            RegionMarketArea_ = child_.text
            RegionMarketArea_ = self.gds_validate_string(RegionMarketArea_, node, 'RegionMarketArea')
            self.RegionMarketArea = RegionMarketArea_
        elif nodeName_ == 'Sector':
            Sector_ = child_.text
            Sector_ = self.gds_validate_string(Sector_, node, 'Sector')
            self.Sector = Sector_
        elif nodeName_ == 'SEDOL':
            SEDOL_ = child_.text
            SEDOL_ = self.gds_validate_string(SEDOL_, node, 'SEDOL')
            self.SEDOL = SEDOL_
        elif nodeName_ == 'TICKER':
            TICKER_ = child_.text
            TICKER_ = self.gds_validate_string(TICKER_, node, 'TICKER')
            self.TICKER = TICKER_
        elif nodeName_ == 'TICKERCODE':
            TICKERCODE_ = child_.text
            TICKERCODE_ = self.gds_validate_string(TICKERCODE_, node, 'TICKERCODE')
            self.TICKERCODE = TICKERCODE_
# end class InstrumentDataType144


class TradingType145(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Currency=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Currency = Currency
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TradingType145)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TradingType145.subclass:
            return TradingType145.subclass(*args_, **kwargs_)
        else:
            return TradingType145(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Currency(self):
        return self.Currency
    def set_Currency(self, Currency):
        self.Currency = Currency
    def hasContent_(self):
        if (
            self.Currency is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TradingType145', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TradingType145')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TradingType145')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TradingType145', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TradingType145'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TradingType145', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrency>%s</%sCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Currency), input_name='Currency')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Currency':
            Currency_ = child_.text
            Currency_ = self.gds_validate_string(Currency_, node, 'Currency')
            self.Currency = Currency_
# end class TradingType145


class DataDateType146(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType146)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType146.subclass:
            return DataDateType146.subclass(*args_, **kwargs_)
        else:
            return DataDateType146(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType146', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType146')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType146')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType146', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType146'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType146', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType147.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType146


class GeneralType147(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Balance=None, ClientName=None, CollateralCurrency=None, CollateralType=None, Counterpart=None, Date=None, DividendRequirement=None, DXLID=None, EndDate=None, Fee=None, FundName=None, InstrumentID=None, IsAgedBenchmarkTrade=None, IsBenchmarkTrade=None, IsBlockTrade=None, IsBrokerToBrokerTrade=None, IsDividendTrade=None, IsFinanceTrade=None, IsMismarkedTrade=None, IsOutlierTrade=None, Quantity=None, Rebate=None, ReceiptTime=None, ReinvestmentRate=None, RerateDate=None, ReratePreviousFee=None, ReratePreviousRebate=None, StartDate=None, TermType=None, TradeDate=None, TradeEntryTime=None, TradeFlow=None, TradeStatus=None, TradeStyle=None, TransactionRef=None, USDRebate=None, Value=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Balance = Balance
        self.ClientName = ClientName
        self.CollateralCurrency = CollateralCurrency
        self.CollateralType = CollateralType
        self.Counterpart = Counterpart
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.DividendRequirement = DividendRequirement
        self.DXLID = DXLID
        if isinstance(EndDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EndDate, '%Y-%m-%d').date()
        else:
            initvalue_ = EndDate
        self.EndDate = initvalue_
        self.Fee = Fee
        self.FundName = FundName
        self.InstrumentID = InstrumentID
        self.IsAgedBenchmarkTrade = IsAgedBenchmarkTrade
        self.IsBenchmarkTrade = IsBenchmarkTrade
        self.IsBlockTrade = IsBlockTrade
        self.IsBrokerToBrokerTrade = IsBrokerToBrokerTrade
        self.IsDividendTrade = IsDividendTrade
        self.IsFinanceTrade = IsFinanceTrade
        self.IsMismarkedTrade = IsMismarkedTrade
        self.IsOutlierTrade = IsOutlierTrade
        self.Quantity = Quantity
        self.Rebate = Rebate
        self.ReceiptTime = ReceiptTime
        self.ReinvestmentRate = ReinvestmentRate
        if isinstance(RerateDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RerateDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RerateDate
        self.RerateDate = initvalue_
        self.ReratePreviousFee = ReratePreviousFee
        self.ReratePreviousRebate = ReratePreviousRebate
        if isinstance(StartDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(StartDate, '%Y-%m-%d').date()
        else:
            initvalue_ = StartDate
        self.StartDate = initvalue_
        self.TermType = TermType
        if isinstance(TradeDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TradeDate, '%Y-%m-%d').date()
        else:
            initvalue_ = TradeDate
        self.TradeDate = initvalue_
        self.TradeEntryTime = TradeEntryTime
        self.TradeFlow = TradeFlow
        self.TradeStatus = TradeStatus
        self.TradeStyle = TradeStyle
        self.TransactionRef = TransactionRef
        self.USDRebate = USDRebate
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType147)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType147.subclass:
            return GeneralType147.subclass(*args_, **kwargs_)
        else:
            return GeneralType147(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Balance(self):
        return self.Balance
    def set_Balance(self, Balance):
        self.Balance = Balance
    def get_ClientName(self):
        return self.ClientName
    def set_ClientName(self, ClientName):
        self.ClientName = ClientName
    def get_CollateralCurrency(self):
        return self.CollateralCurrency
    def set_CollateralCurrency(self, CollateralCurrency):
        self.CollateralCurrency = CollateralCurrency
    def get_CollateralType(self):
        return self.CollateralType
    def set_CollateralType(self, CollateralType):
        self.CollateralType = CollateralType
    def get_Counterpart(self):
        return self.Counterpart
    def set_Counterpart(self, Counterpart):
        self.Counterpart = Counterpart
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_DividendRequirement(self):
        return self.DividendRequirement
    def set_DividendRequirement(self, DividendRequirement):
        self.DividendRequirement = DividendRequirement
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_EndDate(self):
        return self.EndDate
    def set_EndDate(self, EndDate):
        self.EndDate = EndDate
    def get_Fee(self):
        return self.Fee
    def set_Fee(self, Fee):
        self.Fee = Fee
    def get_FundName(self):
        return self.FundName
    def set_FundName(self, FundName):
        self.FundName = FundName
    def get_InstrumentID(self):
        return self.InstrumentID
    def set_InstrumentID(self, InstrumentID):
        self.InstrumentID = InstrumentID
    def get_IsAgedBenchmarkTrade(self):
        return self.IsAgedBenchmarkTrade
    def set_IsAgedBenchmarkTrade(self, IsAgedBenchmarkTrade):
        self.IsAgedBenchmarkTrade = IsAgedBenchmarkTrade
    def get_IsBenchmarkTrade(self):
        return self.IsBenchmarkTrade
    def set_IsBenchmarkTrade(self, IsBenchmarkTrade):
        self.IsBenchmarkTrade = IsBenchmarkTrade
    def get_IsBlockTrade(self):
        return self.IsBlockTrade
    def set_IsBlockTrade(self, IsBlockTrade):
        self.IsBlockTrade = IsBlockTrade
    def get_IsBrokerToBrokerTrade(self):
        return self.IsBrokerToBrokerTrade
    def set_IsBrokerToBrokerTrade(self, IsBrokerToBrokerTrade):
        self.IsBrokerToBrokerTrade = IsBrokerToBrokerTrade
    def get_IsDividendTrade(self):
        return self.IsDividendTrade
    def set_IsDividendTrade(self, IsDividendTrade):
        self.IsDividendTrade = IsDividendTrade
    def get_IsFinanceTrade(self):
        return self.IsFinanceTrade
    def set_IsFinanceTrade(self, IsFinanceTrade):
        self.IsFinanceTrade = IsFinanceTrade
    def get_IsMismarkedTrade(self):
        return self.IsMismarkedTrade
    def set_IsMismarkedTrade(self, IsMismarkedTrade):
        self.IsMismarkedTrade = IsMismarkedTrade
    def get_IsOutlierTrade(self):
        return self.IsOutlierTrade
    def set_IsOutlierTrade(self, IsOutlierTrade):
        self.IsOutlierTrade = IsOutlierTrade
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_Rebate(self):
        return self.Rebate
    def set_Rebate(self, Rebate):
        self.Rebate = Rebate
    def get_ReceiptTime(self):
        return self.ReceiptTime
    def set_ReceiptTime(self, ReceiptTime):
        self.ReceiptTime = ReceiptTime
    def get_ReinvestmentRate(self):
        return self.ReinvestmentRate
    def set_ReinvestmentRate(self, ReinvestmentRate):
        self.ReinvestmentRate = ReinvestmentRate
    def get_RerateDate(self):
        return self.RerateDate
    def set_RerateDate(self, RerateDate):
        self.RerateDate = RerateDate
    def get_ReratePreviousFee(self):
        return self.ReratePreviousFee
    def set_ReratePreviousFee(self, ReratePreviousFee):
        self.ReratePreviousFee = ReratePreviousFee
    def get_ReratePreviousRebate(self):
        return self.ReratePreviousRebate
    def set_ReratePreviousRebate(self, ReratePreviousRebate):
        self.ReratePreviousRebate = ReratePreviousRebate
    def get_StartDate(self):
        return self.StartDate
    def set_StartDate(self, StartDate):
        self.StartDate = StartDate
    def get_TermType(self):
        return self.TermType
    def set_TermType(self, TermType):
        self.TermType = TermType
    def get_TradeDate(self):
        return self.TradeDate
    def set_TradeDate(self, TradeDate):
        self.TradeDate = TradeDate
    def get_TradeEntryTime(self):
        return self.TradeEntryTime
    def set_TradeEntryTime(self, TradeEntryTime):
        self.TradeEntryTime = TradeEntryTime
    def get_TradeFlow(self):
        return self.TradeFlow
    def set_TradeFlow(self, TradeFlow):
        self.TradeFlow = TradeFlow
    def get_TradeStatus(self):
        return self.TradeStatus
    def set_TradeStatus(self, TradeStatus):
        self.TradeStatus = TradeStatus
    def get_TradeStyle(self):
        return self.TradeStyle
    def set_TradeStyle(self, TradeStyle):
        self.TradeStyle = TradeStyle
    def get_TransactionRef(self):
        return self.TransactionRef
    def set_TransactionRef(self, TransactionRef):
        self.TransactionRef = TransactionRef
    def get_USDRebate(self):
        return self.USDRebate
    def set_USDRebate(self, USDRebate):
        self.USDRebate = USDRebate
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def hasContent_(self):
        if (
            self.Balance is not None or
            self.ClientName is not None or
            self.CollateralCurrency is not None or
            self.CollateralType is not None or
            self.Counterpart is not None or
            self.Date is not None or
            self.DividendRequirement is not None or
            self.DXLID is not None or
            self.EndDate is not None or
            self.Fee is not None or
            self.FundName is not None or
            self.InstrumentID is not None or
            self.IsAgedBenchmarkTrade is not None or
            self.IsBenchmarkTrade is not None or
            self.IsBlockTrade is not None or
            self.IsBrokerToBrokerTrade is not None or
            self.IsDividendTrade is not None or
            self.IsFinanceTrade is not None or
            self.IsMismarkedTrade is not None or
            self.IsOutlierTrade is not None or
            self.Quantity is not None or
            self.Rebate is not None or
            self.ReceiptTime is not None or
            self.ReinvestmentRate is not None or
            self.RerateDate is not None or
            self.ReratePreviousFee is not None or
            self.ReratePreviousRebate is not None or
            self.StartDate is not None or
            self.TermType is not None or
            self.TradeDate is not None or
            self.TradeEntryTime is not None or
            self.TradeFlow is not None or
            self.TradeStatus is not None or
            self.TradeStyle is not None or
            self.TransactionRef is not None or
            self.USDRebate is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType147', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType147')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType147')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType147', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType147'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType147', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Balance is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBalance>%s</%sBalance>%s' % (namespaceprefix_ , self.gds_format_float(self.Balance, input_name='Balance'), namespaceprefix_ , eol_))
        if self.ClientName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientName>%s</%sClientName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClientName), input_name='ClientName')), namespaceprefix_ , eol_))
        if self.CollateralCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCollateralCurrency>%s</%sCollateralCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CollateralCurrency), input_name='CollateralCurrency')), namespaceprefix_ , eol_))
        if self.CollateralType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCollateralType>%s</%sCollateralType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CollateralType), input_name='CollateralType')), namespaceprefix_ , eol_))
        if self.Counterpart is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCounterpart>%s</%sCounterpart>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Counterpart), input_name='Counterpart')), namespaceprefix_ , eol_))
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.DividendRequirement is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividendRequirement>%s</%sDividendRequirement>%s' % (namespaceprefix_ , self.gds_format_float(self.DividendRequirement, input_name='DividendRequirement'), namespaceprefix_ , eol_))
        if self.DXLID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDXLID>%s</%sDXLID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DXLID), input_name='DXLID')), namespaceprefix_ , eol_))
        if self.EndDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEndDate>%s</%sEndDate>%s' % (namespaceprefix_ , self.gds_format_date(self.EndDate, input_name='EndDate'), namespaceprefix_ , eol_))
        if self.Fee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFee>%s</%sFee>%s' % (namespaceprefix_ , self.gds_format_float(self.Fee, input_name='Fee'), namespaceprefix_ , eol_))
        if self.FundName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFundName>%s</%sFundName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FundName), input_name='FundName')), namespaceprefix_ , eol_))
        if self.InstrumentID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstrumentID>%s</%sInstrumentID>%s' % (namespaceprefix_ , self.gds_format_float(self.InstrumentID, input_name='InstrumentID'), namespaceprefix_ , eol_))
        if self.IsAgedBenchmarkTrade is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsAgedBenchmarkTrade>%s</%sIsAgedBenchmarkTrade>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsAgedBenchmarkTrade), input_name='IsAgedBenchmarkTrade')), namespaceprefix_ , eol_))
        if self.IsBenchmarkTrade is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsBenchmarkTrade>%s</%sIsBenchmarkTrade>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsBenchmarkTrade), input_name='IsBenchmarkTrade')), namespaceprefix_ , eol_))
        if self.IsBlockTrade is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsBlockTrade>%s</%sIsBlockTrade>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsBlockTrade), input_name='IsBlockTrade')), namespaceprefix_ , eol_))
        if self.IsBrokerToBrokerTrade is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsBrokerToBrokerTrade>%s</%sIsBrokerToBrokerTrade>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsBrokerToBrokerTrade), input_name='IsBrokerToBrokerTrade')), namespaceprefix_ , eol_))
        if self.IsDividendTrade is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsDividendTrade>%s</%sIsDividendTrade>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsDividendTrade), input_name='IsDividendTrade')), namespaceprefix_ , eol_))
        if self.IsFinanceTrade is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsFinanceTrade>%s</%sIsFinanceTrade>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsFinanceTrade), input_name='IsFinanceTrade')), namespaceprefix_ , eol_))
        if self.IsMismarkedTrade is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsMismarkedTrade>%s</%sIsMismarkedTrade>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsMismarkedTrade), input_name='IsMismarkedTrade')), namespaceprefix_ , eol_))
        if self.IsOutlierTrade is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsOutlierTrade>%s</%sIsOutlierTrade>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsOutlierTrade), input_name='IsOutlierTrade')), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.Rebate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRebate>%s</%sRebate>%s' % (namespaceprefix_ , self.gds_format_float(self.Rebate, input_name='Rebate'), namespaceprefix_ , eol_))
        if self.ReceiptTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReceiptTime>%s</%sReceiptTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReceiptTime), input_name='ReceiptTime')), namespaceprefix_ , eol_))
        if self.ReinvestmentRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReinvestmentRate>%s</%sReinvestmentRate>%s' % (namespaceprefix_ , self.gds_format_float(self.ReinvestmentRate, input_name='ReinvestmentRate'), namespaceprefix_ , eol_))
        if self.RerateDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRerateDate>%s</%sRerateDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RerateDate, input_name='RerateDate'), namespaceprefix_ , eol_))
        if self.ReratePreviousFee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReratePreviousFee>%s</%sReratePreviousFee>%s' % (namespaceprefix_ , self.gds_format_float(self.ReratePreviousFee, input_name='ReratePreviousFee'), namespaceprefix_ , eol_))
        if self.ReratePreviousRebate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReratePreviousRebate>%s</%sReratePreviousRebate>%s' % (namespaceprefix_ , self.gds_format_float(self.ReratePreviousRebate, input_name='ReratePreviousRebate'), namespaceprefix_ , eol_))
        if self.StartDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStartDate>%s</%sStartDate>%s' % (namespaceprefix_ , self.gds_format_date(self.StartDate, input_name='StartDate'), namespaceprefix_ , eol_))
        if self.TermType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTermType>%s</%sTermType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TermType), input_name='TermType')), namespaceprefix_ , eol_))
        if self.TradeDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradeDate>%s</%sTradeDate>%s' % (namespaceprefix_ , self.gds_format_date(self.TradeDate, input_name='TradeDate'), namespaceprefix_ , eol_))
        if self.TradeEntryTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradeEntryTime>%s</%sTradeEntryTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TradeEntryTime), input_name='TradeEntryTime')), namespaceprefix_ , eol_))
        if self.TradeFlow is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradeFlow>%s</%sTradeFlow>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TradeFlow), input_name='TradeFlow')), namespaceprefix_ , eol_))
        if self.TradeStatus is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradeStatus>%s</%sTradeStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TradeStatus), input_name='TradeStatus')), namespaceprefix_ , eol_))
        if self.TradeStyle is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradeStyle>%s</%sTradeStyle>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TradeStyle), input_name='TradeStyle')), namespaceprefix_ , eol_))
        if self.TransactionRef is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransactionRef>%s</%sTransactionRef>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransactionRef), input_name='TransactionRef')), namespaceprefix_ , eol_))
        if self.USDRebate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUSDRebate>%s</%sUSDRebate>%s' % (namespaceprefix_ , self.gds_format_float(self.USDRebate, input_name='USDRebate'), namespaceprefix_ , eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_format_float(self.Value, input_name='Value'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Balance' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Balance')
            self.Balance = fval_
        elif nodeName_ == 'ClientName':
            ClientName_ = child_.text
            ClientName_ = self.gds_validate_string(ClientName_, node, 'ClientName')
            self.ClientName = ClientName_
        elif nodeName_ == 'CollateralCurrency':
            CollateralCurrency_ = child_.text
            CollateralCurrency_ = self.gds_validate_string(CollateralCurrency_, node, 'CollateralCurrency')
            self.CollateralCurrency = CollateralCurrency_
        elif nodeName_ == 'CollateralType':
            CollateralType_ = child_.text
            CollateralType_ = self.gds_validate_string(CollateralType_, node, 'CollateralType')
            self.CollateralType = CollateralType_
        elif nodeName_ == 'Counterpart':
            Counterpart_ = child_.text
            Counterpart_ = self.gds_validate_string(Counterpart_, node, 'Counterpart')
            self.Counterpart = Counterpart_
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
        elif nodeName_ == 'DividendRequirement' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DividendRequirement')
            self.DividendRequirement = fval_
        elif nodeName_ == 'DXLID':
            DXLID_ = child_.text
            DXLID_ = self.gds_validate_string(DXLID_, node, 'DXLID')
            self.DXLID = DXLID_
        elif nodeName_ == 'EndDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.EndDate = dval_
        elif nodeName_ == 'Fee' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Fee')
            self.Fee = fval_
        elif nodeName_ == 'FundName':
            FundName_ = child_.text
            FundName_ = self.gds_validate_string(FundName_, node, 'FundName')
            self.FundName = FundName_
        elif nodeName_ == 'InstrumentID' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'InstrumentID')
            self.InstrumentID = fval_
        elif nodeName_ == 'IsAgedBenchmarkTrade':
            IsAgedBenchmarkTrade_ = child_.text
            IsAgedBenchmarkTrade_ = self.gds_validate_string(IsAgedBenchmarkTrade_, node, 'IsAgedBenchmarkTrade')
            self.IsAgedBenchmarkTrade = IsAgedBenchmarkTrade_
        elif nodeName_ == 'IsBenchmarkTrade':
            IsBenchmarkTrade_ = child_.text
            IsBenchmarkTrade_ = self.gds_validate_string(IsBenchmarkTrade_, node, 'IsBenchmarkTrade')
            self.IsBenchmarkTrade = IsBenchmarkTrade_
        elif nodeName_ == 'IsBlockTrade':
            IsBlockTrade_ = child_.text
            IsBlockTrade_ = self.gds_validate_string(IsBlockTrade_, node, 'IsBlockTrade')
            self.IsBlockTrade = IsBlockTrade_
        elif nodeName_ == 'IsBrokerToBrokerTrade':
            IsBrokerToBrokerTrade_ = child_.text
            IsBrokerToBrokerTrade_ = self.gds_validate_string(IsBrokerToBrokerTrade_, node, 'IsBrokerToBrokerTrade')
            self.IsBrokerToBrokerTrade = IsBrokerToBrokerTrade_
        elif nodeName_ == 'IsDividendTrade':
            IsDividendTrade_ = child_.text
            IsDividendTrade_ = self.gds_validate_string(IsDividendTrade_, node, 'IsDividendTrade')
            self.IsDividendTrade = IsDividendTrade_
        elif nodeName_ == 'IsFinanceTrade':
            IsFinanceTrade_ = child_.text
            IsFinanceTrade_ = self.gds_validate_string(IsFinanceTrade_, node, 'IsFinanceTrade')
            self.IsFinanceTrade = IsFinanceTrade_
        elif nodeName_ == 'IsMismarkedTrade':
            IsMismarkedTrade_ = child_.text
            IsMismarkedTrade_ = self.gds_validate_string(IsMismarkedTrade_, node, 'IsMismarkedTrade')
            self.IsMismarkedTrade = IsMismarkedTrade_
        elif nodeName_ == 'IsOutlierTrade':
            IsOutlierTrade_ = child_.text
            IsOutlierTrade_ = self.gds_validate_string(IsOutlierTrade_, node, 'IsOutlierTrade')
            self.IsOutlierTrade = IsOutlierTrade_
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Quantity')
            self.Quantity = fval_
        elif nodeName_ == 'Rebate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Rebate')
            self.Rebate = fval_
        elif nodeName_ == 'ReceiptTime':
            ReceiptTime_ = child_.text
            ReceiptTime_ = self.gds_validate_string(ReceiptTime_, node, 'ReceiptTime')
            self.ReceiptTime = ReceiptTime_
        elif nodeName_ == 'ReinvestmentRate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ReinvestmentRate')
            self.ReinvestmentRate = fval_
        elif nodeName_ == 'RerateDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RerateDate = dval_
        elif nodeName_ == 'ReratePreviousFee' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ReratePreviousFee')
            self.ReratePreviousFee = fval_
        elif nodeName_ == 'ReratePreviousRebate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ReratePreviousRebate')
            self.ReratePreviousRebate = fval_
        elif nodeName_ == 'StartDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.StartDate = dval_
        elif nodeName_ == 'TermType':
            TermType_ = child_.text
            TermType_ = self.gds_validate_string(TermType_, node, 'TermType')
            self.TermType = TermType_
        elif nodeName_ == 'TradeDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TradeDate = dval_
        elif nodeName_ == 'TradeEntryTime':
            TradeEntryTime_ = child_.text
            TradeEntryTime_ = self.gds_validate_string(TradeEntryTime_, node, 'TradeEntryTime')
            self.TradeEntryTime = TradeEntryTime_
        elif nodeName_ == 'TradeFlow':
            TradeFlow_ = child_.text
            TradeFlow_ = self.gds_validate_string(TradeFlow_, node, 'TradeFlow')
            self.TradeFlow = TradeFlow_
        elif nodeName_ == 'TradeStatus':
            TradeStatus_ = child_.text
            TradeStatus_ = self.gds_validate_string(TradeStatus_, node, 'TradeStatus')
            self.TradeStatus = TradeStatus_
        elif nodeName_ == 'TradeStyle':
            TradeStyle_ = child_.text
            TradeStyle_ = self.gds_validate_string(TradeStyle_, node, 'TradeStyle')
            self.TradeStyle = TradeStyle_
        elif nodeName_ == 'TransactionRef':
            TransactionRef_ = child_.text
            TransactionRef_ = self.gds_validate_string(TransactionRef_, node, 'TransactionRef')
            self.TransactionRef = TransactionRef_
        elif nodeName_ == 'USDRebate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'USDRebate')
            self.USDRebate = fval_
        elif nodeName_ == 'Value' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Value')
            self.Value = fval_
# end class GeneralType147


class DataDateType148(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, ActiveInventory=None, Indicators=None, Inventory=None, MarketColour=None, MarketShare=None, Trading=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.ActiveInventory = ActiveInventory
        self.Indicators = Indicators
        self.Inventory = Inventory
        self.MarketColour = MarketColour
        self.MarketShare = MarketShare
        self.Trading = Trading
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType148)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType148.subclass:
            return DataDateType148.subclass(*args_, **kwargs_)
        else:
            return DataDateType148(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ActiveInventory(self):
        return self.ActiveInventory
    def set_ActiveInventory(self, ActiveInventory):
        self.ActiveInventory = ActiveInventory
    def get_Indicators(self):
        return self.Indicators
    def set_Indicators(self, Indicators):
        self.Indicators = Indicators
    def get_Inventory(self):
        return self.Inventory
    def set_Inventory(self, Inventory):
        self.Inventory = Inventory
    def get_MarketColour(self):
        return self.MarketColour
    def set_MarketColour(self, MarketColour):
        self.MarketColour = MarketColour
    def get_MarketShare(self):
        return self.MarketShare
    def set_MarketShare(self, MarketShare):
        self.MarketShare = MarketShare
    def get_Trading(self):
        return self.Trading
    def set_Trading(self, Trading):
        self.Trading = Trading
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.ActiveInventory is not None or
            self.Indicators is not None or
            self.Inventory is not None or
            self.MarketColour is not None or
            self.MarketShare is not None or
            self.Trading is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType148', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType148')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType148')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType148', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType148'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType148', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ActiveInventory is not None:
            self.ActiveInventory.export(outfile, level, namespaceprefix_, name_='ActiveInventory', pretty_print=pretty_print)
        if self.Indicators is not None:
            self.Indicators.export(outfile, level, namespaceprefix_, name_='Indicators', pretty_print=pretty_print)
        if self.Inventory is not None:
            self.Inventory.export(outfile, level, namespaceprefix_, name_='Inventory', pretty_print=pretty_print)
        if self.MarketColour is not None:
            self.MarketColour.export(outfile, level, namespaceprefix_, name_='MarketColour', pretty_print=pretty_print)
        if self.MarketShare is not None:
            self.MarketShare.export(outfile, level, namespaceprefix_, name_='MarketShare', pretty_print=pretty_print)
        if self.Trading is not None:
            self.Trading.export(outfile, level, namespaceprefix_, name_='Trading', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ActiveInventory':
            obj_ = ActiveInventoryType149.factory(parent_object_=self)
            obj_.build(child_)
            self.ActiveInventory = obj_
            obj_.original_tagname_ = 'ActiveInventory'
        elif nodeName_ == 'Indicators':
            obj_ = IndicatorsType150.factory(parent_object_=self)
            obj_.build(child_)
            self.Indicators = obj_
            obj_.original_tagname_ = 'Indicators'
        elif nodeName_ == 'Inventory':
            obj_ = InventoryType152.factory(parent_object_=self)
            obj_.build(child_)
            self.Inventory = obj_
            obj_.original_tagname_ = 'Inventory'
        elif nodeName_ == 'MarketColour':
            obj_ = MarketColourType154.factory(parent_object_=self)
            obj_.build(child_)
            self.MarketColour = obj_
            obj_.original_tagname_ = 'MarketColour'
        elif nodeName_ == 'MarketShare':
            obj_ = MarketShareType.factory(parent_object_=self)
            obj_.build(child_)
            self.MarketShare = obj_
            obj_.original_tagname_ = 'MarketShare'
        elif nodeName_ == 'Trading':
            obj_ = TradingType155.factory(parent_object_=self)
            obj_.build(child_)
            self.Trading = obj_
            obj_.original_tagname_ = 'Trading'
# end class DataDateType148


class ActiveInventoryType149(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ActiveAvailableValue=None, ActiveLendableValue=None, ActiveUtilisation=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ActiveAvailableValue = ActiveAvailableValue
        self.ActiveLendableValue = ActiveLendableValue
        self.ActiveUtilisation = ActiveUtilisation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ActiveInventoryType149)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ActiveInventoryType149.subclass:
            return ActiveInventoryType149.subclass(*args_, **kwargs_)
        else:
            return ActiveInventoryType149(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ActiveAvailableValue(self):
        return self.ActiveAvailableValue
    def set_ActiveAvailableValue(self, ActiveAvailableValue):
        self.ActiveAvailableValue = ActiveAvailableValue
    def get_ActiveLendableValue(self):
        return self.ActiveLendableValue
    def set_ActiveLendableValue(self, ActiveLendableValue):
        self.ActiveLendableValue = ActiveLendableValue
    def get_ActiveUtilisation(self):
        return self.ActiveUtilisation
    def set_ActiveUtilisation(self, ActiveUtilisation):
        self.ActiveUtilisation = ActiveUtilisation
    def hasContent_(self):
        if (
            self.ActiveAvailableValue is not None or
            self.ActiveLendableValue is not None or
            self.ActiveUtilisation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ActiveInventoryType149', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ActiveInventoryType149')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ActiveInventoryType149')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ActiveInventoryType149', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ActiveInventoryType149'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ActiveInventoryType149', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ActiveAvailableValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveAvailableValue>%s</%sActiveAvailableValue>%s' % (namespaceprefix_ , self.gds_format_float(self.ActiveAvailableValue, input_name='ActiveAvailableValue'), namespaceprefix_ , eol_))
        if self.ActiveLendableValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveLendableValue>%s</%sActiveLendableValue>%s' % (namespaceprefix_ , self.gds_format_float(self.ActiveLendableValue, input_name='ActiveLendableValue'), namespaceprefix_ , eol_))
        if self.ActiveUtilisation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveUtilisation>%s</%sActiveUtilisation>%s' % (namespaceprefix_ , self.gds_format_float(self.ActiveUtilisation, input_name='ActiveUtilisation'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ActiveAvailableValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ActiveAvailableValue')
            self.ActiveAvailableValue = fval_
        elif nodeName_ == 'ActiveLendableValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ActiveLendableValue')
            self.ActiveLendableValue = fval_
        elif nodeName_ == 'ActiveUtilisation' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ActiveUtilisation')
            self.ActiveUtilisation = fval_
# end class ActiveInventoryType149


class IndicatorsType150(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DIMV=None, DIPS=None, DNS=None, DPS=None, DRS=None, DSS=None, Period=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DIMV = DIMV
        self.DIPS = DIPS
        self.DNS = DNS
        self.DPS = DPS
        self.DRS = DRS
        self.DSS = DSS
        if Period is None:
            self.Period = []
        else:
            self.Period = Period
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IndicatorsType150)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IndicatorsType150.subclass:
            return IndicatorsType150.subclass(*args_, **kwargs_)
        else:
            return IndicatorsType150(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DIMV(self):
        return self.DIMV
    def set_DIMV(self, DIMV):
        self.DIMV = DIMV
    def get_DIPS(self):
        return self.DIPS
    def set_DIPS(self, DIPS):
        self.DIPS = DIPS
    def get_DNS(self):
        return self.DNS
    def set_DNS(self, DNS):
        self.DNS = DNS
    def get_DPS(self):
        return self.DPS
    def set_DPS(self, DPS):
        self.DPS = DPS
    def get_DRS(self):
        return self.DRS
    def set_DRS(self, DRS):
        self.DRS = DRS
    def get_DSS(self):
        return self.DSS
    def set_DSS(self, DSS):
        self.DSS = DSS
    def get_Period(self):
        return self.Period
    def set_Period(self, Period):
        self.Period = Period
    def add_Period(self, value):
        self.Period.append(value)
    def add_Period(self, value):
        self.Period.append(value)
    def insert_Period_at(self, index, value):
        self.Period.insert(index, value)
    def replace_Period_at(self, index, value):
        self.Period[index] = value
    def hasContent_(self):
        if (
            self.DIMV is not None or
            self.DIPS is not None or
            self.DNS is not None or
            self.DPS is not None or
            self.DRS is not None or
            self.DSS is not None or
            self.Period
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='IndicatorsType150', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IndicatorsType150')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IndicatorsType150')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IndicatorsType150', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='IndicatorsType150'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='IndicatorsType150', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DIMV is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDIMV>%s</%sDIMV>%s' % (namespaceprefix_ , self.gds_format_float(self.DIMV, input_name='DIMV'), namespaceprefix_ , eol_))
        if self.DIPS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDIPS>%s</%sDIPS>%s' % (namespaceprefix_ , self.gds_format_float(self.DIPS, input_name='DIPS'), namespaceprefix_ , eol_))
        if self.DNS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDNS>%s</%sDNS>%s' % (namespaceprefix_ , self.gds_format_float(self.DNS, input_name='DNS'), namespaceprefix_ , eol_))
        if self.DPS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDPS>%s</%sDPS>%s' % (namespaceprefix_ , self.gds_format_float(self.DPS, input_name='DPS'), namespaceprefix_ , eol_))
        if self.DRS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDRS>%s</%sDRS>%s' % (namespaceprefix_ , self.gds_format_float(self.DRS, input_name='DRS'), namespaceprefix_ , eol_))
        if self.DSS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDSS>%s</%sDSS>%s' % (namespaceprefix_ , self.gds_format_float(self.DSS, input_name='DSS'), namespaceprefix_ , eol_))
        for Period_ in self.Period:
            Period_.export(outfile, level, namespaceprefix_, name_='Period', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DIMV' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DIMV')
            self.DIMV = fval_
        elif nodeName_ == 'DIPS' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DIPS')
            self.DIPS = fval_
        elif nodeName_ == 'DNS' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DNS')
            self.DNS = fval_
        elif nodeName_ == 'DPS' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DPS')
            self.DPS = fval_
        elif nodeName_ == 'DRS' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DRS')
            self.DRS = fval_
        elif nodeName_ == 'DSS' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DSS')
            self.DSS = fval_
        elif nodeName_ == 'Period':
            obj_ = PeriodType151.factory(parent_object_=self)
            obj_.build(child_)
            self.Period.append(obj_)
            obj_.original_tagname_ = 'Period'
# end class IndicatorsType150


class PeriodType151(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, DNSF=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.value = _cast(None, value)
        self.DNSF = DNSF
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PeriodType151)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PeriodType151.subclass:
            return PeriodType151.subclass(*args_, **kwargs_)
        else:
            return PeriodType151(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DNSF(self):
        return self.DNSF
    def set_DNSF(self, DNSF):
        self.DNSF = DNSF
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.DNSF is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PeriodType151', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PeriodType151')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PeriodType151')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PeriodType151', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PeriodType151'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PeriodType151', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DNSF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDNSF>%s</%sDNSF>%s' % (namespaceprefix_ , self.gds_format_float(self.DNSF, input_name='DNSF'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DNSF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DNSF')
            self.DNSF = fval_
# end class PeriodType151


class InventoryType152(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AvailableQuantity=None, AvailableValue=None, Delta=None, LendableQuantity=None, LendableValue=None, LenderQuantity=None, LenderQuantityOnLoan=None, LenderValue=None, LenderValueOnLoan=None, Utilisation=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.AvailableQuantity = AvailableQuantity
        self.AvailableValue = AvailableValue
        if Delta is None:
            self.Delta = []
        else:
            self.Delta = Delta
        self.LendableQuantity = LendableQuantity
        self.LendableValue = LendableValue
        self.LenderQuantity = LenderQuantity
        self.LenderQuantityOnLoan = LenderQuantityOnLoan
        self.LenderValue = LenderValue
        self.LenderValueOnLoan = LenderValueOnLoan
        self.Utilisation = Utilisation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InventoryType152)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InventoryType152.subclass:
            return InventoryType152.subclass(*args_, **kwargs_)
        else:
            return InventoryType152(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AvailableQuantity(self):
        return self.AvailableQuantity
    def set_AvailableQuantity(self, AvailableQuantity):
        self.AvailableQuantity = AvailableQuantity
    def get_AvailableValue(self):
        return self.AvailableValue
    def set_AvailableValue(self, AvailableValue):
        self.AvailableValue = AvailableValue
    def get_Delta(self):
        return self.Delta
    def set_Delta(self, Delta):
        self.Delta = Delta
    def add_Delta(self, value):
        self.Delta.append(value)
    def add_Delta(self, value):
        self.Delta.append(value)
    def insert_Delta_at(self, index, value):
        self.Delta.insert(index, value)
    def replace_Delta_at(self, index, value):
        self.Delta[index] = value
    def get_LendableQuantity(self):
        return self.LendableQuantity
    def set_LendableQuantity(self, LendableQuantity):
        self.LendableQuantity = LendableQuantity
    def get_LendableValue(self):
        return self.LendableValue
    def set_LendableValue(self, LendableValue):
        self.LendableValue = LendableValue
    def get_LenderQuantity(self):
        return self.LenderQuantity
    def set_LenderQuantity(self, LenderQuantity):
        self.LenderQuantity = LenderQuantity
    def get_LenderQuantityOnLoan(self):
        return self.LenderQuantityOnLoan
    def set_LenderQuantityOnLoan(self, LenderQuantityOnLoan):
        self.LenderQuantityOnLoan = LenderQuantityOnLoan
    def get_LenderValue(self):
        return self.LenderValue
    def set_LenderValue(self, LenderValue):
        self.LenderValue = LenderValue
    def get_LenderValueOnLoan(self):
        return self.LenderValueOnLoan
    def set_LenderValueOnLoan(self, LenderValueOnLoan):
        self.LenderValueOnLoan = LenderValueOnLoan
    def get_Utilisation(self):
        return self.Utilisation
    def set_Utilisation(self, Utilisation):
        self.Utilisation = Utilisation
    def hasContent_(self):
        if (
            self.AvailableQuantity is not None or
            self.AvailableValue is not None or
            self.Delta or
            self.LendableQuantity is not None or
            self.LendableValue is not None or
            self.LenderQuantity is not None or
            self.LenderQuantityOnLoan is not None or
            self.LenderValue is not None or
            self.LenderValueOnLoan is not None or
            self.Utilisation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InventoryType152', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InventoryType152')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InventoryType152')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InventoryType152', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InventoryType152'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InventoryType152', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AvailableQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAvailableQuantity>%s</%sAvailableQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.AvailableQuantity, input_name='AvailableQuantity'), namespaceprefix_ , eol_))
        if self.AvailableValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAvailableValue>%s</%sAvailableValue>%s' % (namespaceprefix_ , self.gds_format_float(self.AvailableValue, input_name='AvailableValue'), namespaceprefix_ , eol_))
        for Delta_ in self.Delta:
            Delta_.export(outfile, level, namespaceprefix_, name_='Delta', pretty_print=pretty_print)
        if self.LendableQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableQuantity>%s</%sLendableQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableQuantity, input_name='LendableQuantity'), namespaceprefix_ , eol_))
        if self.LendableValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableValue>%s</%sLendableValue>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableValue, input_name='LendableValue'), namespaceprefix_ , eol_))
        if self.LenderQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderQuantity>%s</%sLenderQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderQuantity, input_name='LenderQuantity'), namespaceprefix_ , eol_))
        if self.LenderQuantityOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderQuantityOnLoan>%s</%sLenderQuantityOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderQuantityOnLoan, input_name='LenderQuantityOnLoan'), namespaceprefix_ , eol_))
        if self.LenderValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderValue>%s</%sLenderValue>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderValue, input_name='LenderValue'), namespaceprefix_ , eol_))
        if self.LenderValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderValueOnLoan>%s</%sLenderValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderValueOnLoan, input_name='LenderValueOnLoan'), namespaceprefix_ , eol_))
        if self.Utilisation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisation>%s</%sUtilisation>%s' % (namespaceprefix_ , self.gds_format_float(self.Utilisation, input_name='Utilisation'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AvailableQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AvailableQuantity')
            self.AvailableQuantity = fval_
        elif nodeName_ == 'AvailableValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AvailableValue')
            self.AvailableValue = fval_
        elif nodeName_ == 'Delta':
            obj_ = DeltaType153.factory(parent_object_=self)
            obj_.build(child_)
            self.Delta.append(obj_)
            obj_.original_tagname_ = 'Delta'
        elif nodeName_ == 'LendableQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableQuantity')
            self.LendableQuantity = fval_
        elif nodeName_ == 'LendableValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableValue')
            self.LendableValue = fval_
        elif nodeName_ == 'LenderQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderQuantity')
            self.LenderQuantity = fval_
        elif nodeName_ == 'LenderQuantityOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderQuantityOnLoan')
            self.LenderQuantityOnLoan = fval_
        elif nodeName_ == 'LenderValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderValue')
            self.LenderValue = fval_
        elif nodeName_ == 'LenderValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderValueOnLoan')
            self.LenderValueOnLoan = fval_
        elif nodeName_ == 'Utilisation' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Utilisation')
            self.Utilisation = fval_
# end class InventoryType152


class DeltaType153(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, AvailableQuantityDelta=None, AvailableValueDelta=None, LendableQuantityDelta=None, LendableValueDelta=None, LenderQuantityOnLoanDelta=None, LenderValueOnLoanDelta=None, UtilisationDelta=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.value = _cast(None, value)
        self.AvailableQuantityDelta = AvailableQuantityDelta
        self.AvailableValueDelta = AvailableValueDelta
        self.LendableQuantityDelta = LendableQuantityDelta
        self.LendableValueDelta = LendableValueDelta
        self.LenderQuantityOnLoanDelta = LenderQuantityOnLoanDelta
        self.LenderValueOnLoanDelta = LenderValueOnLoanDelta
        self.UtilisationDelta = UtilisationDelta
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeltaType153)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeltaType153.subclass:
            return DeltaType153.subclass(*args_, **kwargs_)
        else:
            return DeltaType153(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AvailableQuantityDelta(self):
        return self.AvailableQuantityDelta
    def set_AvailableQuantityDelta(self, AvailableQuantityDelta):
        self.AvailableQuantityDelta = AvailableQuantityDelta
    def get_AvailableValueDelta(self):
        return self.AvailableValueDelta
    def set_AvailableValueDelta(self, AvailableValueDelta):
        self.AvailableValueDelta = AvailableValueDelta
    def get_LendableQuantityDelta(self):
        return self.LendableQuantityDelta
    def set_LendableQuantityDelta(self, LendableQuantityDelta):
        self.LendableQuantityDelta = LendableQuantityDelta
    def get_LendableValueDelta(self):
        return self.LendableValueDelta
    def set_LendableValueDelta(self, LendableValueDelta):
        self.LendableValueDelta = LendableValueDelta
    def get_LenderQuantityOnLoanDelta(self):
        return self.LenderQuantityOnLoanDelta
    def set_LenderQuantityOnLoanDelta(self, LenderQuantityOnLoanDelta):
        self.LenderQuantityOnLoanDelta = LenderQuantityOnLoanDelta
    def get_LenderValueOnLoanDelta(self):
        return self.LenderValueOnLoanDelta
    def set_LenderValueOnLoanDelta(self, LenderValueOnLoanDelta):
        self.LenderValueOnLoanDelta = LenderValueOnLoanDelta
    def get_UtilisationDelta(self):
        return self.UtilisationDelta
    def set_UtilisationDelta(self, UtilisationDelta):
        self.UtilisationDelta = UtilisationDelta
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.AvailableQuantityDelta is not None or
            self.AvailableValueDelta is not None or
            self.LendableQuantityDelta is not None or
            self.LendableValueDelta is not None or
            self.LenderQuantityOnLoanDelta is not None or
            self.LenderValueOnLoanDelta is not None or
            self.UtilisationDelta is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeltaType153', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeltaType153')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DeltaType153')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DeltaType153', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DeltaType153'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeltaType153', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AvailableQuantityDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAvailableQuantityDelta>%s</%sAvailableQuantityDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.AvailableQuantityDelta, input_name='AvailableQuantityDelta'), namespaceprefix_ , eol_))
        if self.AvailableValueDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAvailableValueDelta>%s</%sAvailableValueDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.AvailableValueDelta, input_name='AvailableValueDelta'), namespaceprefix_ , eol_))
        if self.LendableQuantityDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableQuantityDelta>%s</%sLendableQuantityDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableQuantityDelta, input_name='LendableQuantityDelta'), namespaceprefix_ , eol_))
        if self.LendableValueDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableValueDelta>%s</%sLendableValueDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableValueDelta, input_name='LendableValueDelta'), namespaceprefix_ , eol_))
        if self.LenderQuantityOnLoanDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderQuantityOnLoanDelta>%s</%sLenderQuantityOnLoanDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderQuantityOnLoanDelta, input_name='LenderQuantityOnLoanDelta'), namespaceprefix_ , eol_))
        if self.LenderValueOnLoanDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderValueOnLoanDelta>%s</%sLenderValueOnLoanDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderValueOnLoanDelta, input_name='LenderValueOnLoanDelta'), namespaceprefix_ , eol_))
        if self.UtilisationDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisationDelta>%s</%sUtilisationDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.UtilisationDelta, input_name='UtilisationDelta'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AvailableQuantityDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AvailableQuantityDelta')
            self.AvailableQuantityDelta = fval_
        elif nodeName_ == 'AvailableValueDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AvailableValueDelta')
            self.AvailableValueDelta = fval_
        elif nodeName_ == 'LendableQuantityDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableQuantityDelta')
            self.LendableQuantityDelta = fval_
        elif nodeName_ == 'LendableValueDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableValueDelta')
            self.LendableValueDelta = fval_
        elif nodeName_ == 'LenderQuantityOnLoanDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderQuantityOnLoanDelta')
            self.LenderQuantityOnLoanDelta = fval_
        elif nodeName_ == 'LenderValueOnLoanDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderValueOnLoanDelta')
            self.LenderValueOnLoanDelta = fval_
        elif nodeName_ == 'UtilisationDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'UtilisationDelta')
            self.UtilisationDelta = fval_
# end class DeltaType153


class MarketColourType154(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LendableAsPcIssueValue=None, LendableAsPcMarketCap=None, LenderValueOnLoanAsPcIssueValue=None, LenderValueOnLoanAsPcMarketCap=None, PcFreeFloatValueOnLoan=None, PcIssueValueOnLoan=None, PcMarketCapOnLoan=None, ShortLoanValueAsPcIssueValue=None, ShortLoanValueAsPcMarketCap=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.LendableAsPcIssueValue = LendableAsPcIssueValue
        self.LendableAsPcMarketCap = LendableAsPcMarketCap
        self.LenderValueOnLoanAsPcIssueValue = LenderValueOnLoanAsPcIssueValue
        self.LenderValueOnLoanAsPcMarketCap = LenderValueOnLoanAsPcMarketCap
        self.PcFreeFloatValueOnLoan = PcFreeFloatValueOnLoan
        self.PcIssueValueOnLoan = PcIssueValueOnLoan
        self.PcMarketCapOnLoan = PcMarketCapOnLoan
        self.ShortLoanValueAsPcIssueValue = ShortLoanValueAsPcIssueValue
        self.ShortLoanValueAsPcMarketCap = ShortLoanValueAsPcMarketCap
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarketColourType154)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarketColourType154.subclass:
            return MarketColourType154.subclass(*args_, **kwargs_)
        else:
            return MarketColourType154(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LendableAsPcIssueValue(self):
        return self.LendableAsPcIssueValue
    def set_LendableAsPcIssueValue(self, LendableAsPcIssueValue):
        self.LendableAsPcIssueValue = LendableAsPcIssueValue
    def get_LendableAsPcMarketCap(self):
        return self.LendableAsPcMarketCap
    def set_LendableAsPcMarketCap(self, LendableAsPcMarketCap):
        self.LendableAsPcMarketCap = LendableAsPcMarketCap
    def get_LenderValueOnLoanAsPcIssueValue(self):
        return self.LenderValueOnLoanAsPcIssueValue
    def set_LenderValueOnLoanAsPcIssueValue(self, LenderValueOnLoanAsPcIssueValue):
        self.LenderValueOnLoanAsPcIssueValue = LenderValueOnLoanAsPcIssueValue
    def get_LenderValueOnLoanAsPcMarketCap(self):
        return self.LenderValueOnLoanAsPcMarketCap
    def set_LenderValueOnLoanAsPcMarketCap(self, LenderValueOnLoanAsPcMarketCap):
        self.LenderValueOnLoanAsPcMarketCap = LenderValueOnLoanAsPcMarketCap
    def get_PcFreeFloatValueOnLoan(self):
        return self.PcFreeFloatValueOnLoan
    def set_PcFreeFloatValueOnLoan(self, PcFreeFloatValueOnLoan):
        self.PcFreeFloatValueOnLoan = PcFreeFloatValueOnLoan
    def get_PcIssueValueOnLoan(self):
        return self.PcIssueValueOnLoan
    def set_PcIssueValueOnLoan(self, PcIssueValueOnLoan):
        self.PcIssueValueOnLoan = PcIssueValueOnLoan
    def get_PcMarketCapOnLoan(self):
        return self.PcMarketCapOnLoan
    def set_PcMarketCapOnLoan(self, PcMarketCapOnLoan):
        self.PcMarketCapOnLoan = PcMarketCapOnLoan
    def get_ShortLoanValueAsPcIssueValue(self):
        return self.ShortLoanValueAsPcIssueValue
    def set_ShortLoanValueAsPcIssueValue(self, ShortLoanValueAsPcIssueValue):
        self.ShortLoanValueAsPcIssueValue = ShortLoanValueAsPcIssueValue
    def get_ShortLoanValueAsPcMarketCap(self):
        return self.ShortLoanValueAsPcMarketCap
    def set_ShortLoanValueAsPcMarketCap(self, ShortLoanValueAsPcMarketCap):
        self.ShortLoanValueAsPcMarketCap = ShortLoanValueAsPcMarketCap
    def hasContent_(self):
        if (
            self.LendableAsPcIssueValue is not None or
            self.LendableAsPcMarketCap is not None or
            self.LenderValueOnLoanAsPcIssueValue is not None or
            self.LenderValueOnLoanAsPcMarketCap is not None or
            self.PcFreeFloatValueOnLoan is not None or
            self.PcIssueValueOnLoan is not None or
            self.PcMarketCapOnLoan is not None or
            self.ShortLoanValueAsPcIssueValue is not None or
            self.ShortLoanValueAsPcMarketCap is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MarketColourType154', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarketColourType154')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarketColourType154')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarketColourType154', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarketColourType154'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MarketColourType154', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LendableAsPcIssueValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableAsPcIssueValue>%s</%sLendableAsPcIssueValue>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableAsPcIssueValue, input_name='LendableAsPcIssueValue'), namespaceprefix_ , eol_))
        if self.LendableAsPcMarketCap is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableAsPcMarketCap>%s</%sLendableAsPcMarketCap>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableAsPcMarketCap, input_name='LendableAsPcMarketCap'), namespaceprefix_ , eol_))
        if self.LenderValueOnLoanAsPcIssueValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderValueOnLoanAsPcIssueValue>%s</%sLenderValueOnLoanAsPcIssueValue>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderValueOnLoanAsPcIssueValue, input_name='LenderValueOnLoanAsPcIssueValue'), namespaceprefix_ , eol_))
        if self.LenderValueOnLoanAsPcMarketCap is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderValueOnLoanAsPcMarketCap>%s</%sLenderValueOnLoanAsPcMarketCap>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderValueOnLoanAsPcMarketCap, input_name='LenderValueOnLoanAsPcMarketCap'), namespaceprefix_ , eol_))
        if self.PcFreeFloatValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcFreeFloatValueOnLoan>%s</%sPcFreeFloatValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.PcFreeFloatValueOnLoan, input_name='PcFreeFloatValueOnLoan'), namespaceprefix_ , eol_))
        if self.PcIssueValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcIssueValueOnLoan>%s</%sPcIssueValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.PcIssueValueOnLoan, input_name='PcIssueValueOnLoan'), namespaceprefix_ , eol_))
        if self.PcMarketCapOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcMarketCapOnLoan>%s</%sPcMarketCapOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.PcMarketCapOnLoan, input_name='PcMarketCapOnLoan'), namespaceprefix_ , eol_))
        if self.ShortLoanValueAsPcIssueValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortLoanValueAsPcIssueValue>%s</%sShortLoanValueAsPcIssueValue>%s' % (namespaceprefix_ , self.gds_format_float(self.ShortLoanValueAsPcIssueValue, input_name='ShortLoanValueAsPcIssueValue'), namespaceprefix_ , eol_))
        if self.ShortLoanValueAsPcMarketCap is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortLoanValueAsPcMarketCap>%s</%sShortLoanValueAsPcMarketCap>%s' % (namespaceprefix_ , self.gds_format_float(self.ShortLoanValueAsPcMarketCap, input_name='ShortLoanValueAsPcMarketCap'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LendableAsPcIssueValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableAsPcIssueValue')
            self.LendableAsPcIssueValue = fval_
        elif nodeName_ == 'LendableAsPcMarketCap' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableAsPcMarketCap')
            self.LendableAsPcMarketCap = fval_
        elif nodeName_ == 'LenderValueOnLoanAsPcIssueValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderValueOnLoanAsPcIssueValue')
            self.LenderValueOnLoanAsPcIssueValue = fval_
        elif nodeName_ == 'LenderValueOnLoanAsPcMarketCap' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderValueOnLoanAsPcMarketCap')
            self.LenderValueOnLoanAsPcMarketCap = fval_
        elif nodeName_ == 'PcFreeFloatValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcFreeFloatValueOnLoan')
            self.PcFreeFloatValueOnLoan = fval_
        elif nodeName_ == 'PcIssueValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcIssueValueOnLoan')
            self.PcIssueValueOnLoan = fval_
        elif nodeName_ == 'PcMarketCapOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcMarketCapOnLoan')
            self.PcMarketCapOnLoan = fval_
        elif nodeName_ == 'ShortLoanValueAsPcIssueValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ShortLoanValueAsPcIssueValue')
            self.ShortLoanValueAsPcIssueValue = fval_
        elif nodeName_ == 'ShortLoanValueAsPcMarketCap' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ShortLoanValueAsPcMarketCap')
            self.ShortLoanValueAsPcMarketCap = fval_
# end class MarketColourType154


class MarketShareType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BorrowerMarketShare=None, BorrowerRank=None, BorrowerValueOnLoanShare=None, ClientNameForBorrowerValueOnLoan=None, ClientNameForLenderInventory=None, ClientNameForLenderValueOnLoan=None, InventoryMarketShare=None, InventoryRank=None, LendableValueShare=None, LenderMarketShare=None, LenderRank=None, LenderValueOnLoanShare=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.BorrowerMarketShare = BorrowerMarketShare
        self.BorrowerRank = BorrowerRank
        self.BorrowerValueOnLoanShare = BorrowerValueOnLoanShare
        self.ClientNameForBorrowerValueOnLoan = ClientNameForBorrowerValueOnLoan
        self.ClientNameForLenderInventory = ClientNameForLenderInventory
        self.ClientNameForLenderValueOnLoan = ClientNameForLenderValueOnLoan
        self.InventoryMarketShare = InventoryMarketShare
        self.InventoryRank = InventoryRank
        self.LendableValueShare = LendableValueShare
        self.LenderMarketShare = LenderMarketShare
        self.LenderRank = LenderRank
        self.LenderValueOnLoanShare = LenderValueOnLoanShare
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarketShareType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarketShareType.subclass:
            return MarketShareType.subclass(*args_, **kwargs_)
        else:
            return MarketShareType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BorrowerMarketShare(self):
        return self.BorrowerMarketShare
    def set_BorrowerMarketShare(self, BorrowerMarketShare):
        self.BorrowerMarketShare = BorrowerMarketShare
    def get_BorrowerRank(self):
        return self.BorrowerRank
    def set_BorrowerRank(self, BorrowerRank):
        self.BorrowerRank = BorrowerRank
    def get_BorrowerValueOnLoanShare(self):
        return self.BorrowerValueOnLoanShare
    def set_BorrowerValueOnLoanShare(self, BorrowerValueOnLoanShare):
        self.BorrowerValueOnLoanShare = BorrowerValueOnLoanShare
    def get_ClientNameForBorrowerValueOnLoan(self):
        return self.ClientNameForBorrowerValueOnLoan
    def set_ClientNameForBorrowerValueOnLoan(self, ClientNameForBorrowerValueOnLoan):
        self.ClientNameForBorrowerValueOnLoan = ClientNameForBorrowerValueOnLoan
    def get_ClientNameForLenderInventory(self):
        return self.ClientNameForLenderInventory
    def set_ClientNameForLenderInventory(self, ClientNameForLenderInventory):
        self.ClientNameForLenderInventory = ClientNameForLenderInventory
    def get_ClientNameForLenderValueOnLoan(self):
        return self.ClientNameForLenderValueOnLoan
    def set_ClientNameForLenderValueOnLoan(self, ClientNameForLenderValueOnLoan):
        self.ClientNameForLenderValueOnLoan = ClientNameForLenderValueOnLoan
    def get_InventoryMarketShare(self):
        return self.InventoryMarketShare
    def set_InventoryMarketShare(self, InventoryMarketShare):
        self.InventoryMarketShare = InventoryMarketShare
    def get_InventoryRank(self):
        return self.InventoryRank
    def set_InventoryRank(self, InventoryRank):
        self.InventoryRank = InventoryRank
    def get_LendableValueShare(self):
        return self.LendableValueShare
    def set_LendableValueShare(self, LendableValueShare):
        self.LendableValueShare = LendableValueShare
    def get_LenderMarketShare(self):
        return self.LenderMarketShare
    def set_LenderMarketShare(self, LenderMarketShare):
        self.LenderMarketShare = LenderMarketShare
    def get_LenderRank(self):
        return self.LenderRank
    def set_LenderRank(self, LenderRank):
        self.LenderRank = LenderRank
    def get_LenderValueOnLoanShare(self):
        return self.LenderValueOnLoanShare
    def set_LenderValueOnLoanShare(self, LenderValueOnLoanShare):
        self.LenderValueOnLoanShare = LenderValueOnLoanShare
    def hasContent_(self):
        if (
            self.BorrowerMarketShare is not None or
            self.BorrowerRank is not None or
            self.BorrowerValueOnLoanShare is not None or
            self.ClientNameForBorrowerValueOnLoan is not None or
            self.ClientNameForLenderInventory is not None or
            self.ClientNameForLenderValueOnLoan is not None or
            self.InventoryMarketShare is not None or
            self.InventoryRank is not None or
            self.LendableValueShare is not None or
            self.LenderMarketShare is not None or
            self.LenderRank is not None or
            self.LenderValueOnLoanShare is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MarketShareType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarketShareType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarketShareType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarketShareType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarketShareType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MarketShareType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BorrowerMarketShare is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBorrowerMarketShare>%s</%sBorrowerMarketShare>%s' % (namespaceprefix_ , self.gds_format_float(self.BorrowerMarketShare, input_name='BorrowerMarketShare'), namespaceprefix_ , eol_))
        if self.BorrowerRank is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBorrowerRank>%s</%sBorrowerRank>%s' % (namespaceprefix_ , self.gds_format_float(self.BorrowerRank, input_name='BorrowerRank'), namespaceprefix_ , eol_))
        if self.BorrowerValueOnLoanShare is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBorrowerValueOnLoanShare>%s</%sBorrowerValueOnLoanShare>%s' % (namespaceprefix_ , self.gds_format_float(self.BorrowerValueOnLoanShare, input_name='BorrowerValueOnLoanShare'), namespaceprefix_ , eol_))
        if self.ClientNameForBorrowerValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientNameForBorrowerValueOnLoan>%s</%sClientNameForBorrowerValueOnLoan>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClientNameForBorrowerValueOnLoan), input_name='ClientNameForBorrowerValueOnLoan')), namespaceprefix_ , eol_))
        if self.ClientNameForLenderInventory is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientNameForLenderInventory>%s</%sClientNameForLenderInventory>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClientNameForLenderInventory), input_name='ClientNameForLenderInventory')), namespaceprefix_ , eol_))
        if self.ClientNameForLenderValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientNameForLenderValueOnLoan>%s</%sClientNameForLenderValueOnLoan>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClientNameForLenderValueOnLoan), input_name='ClientNameForLenderValueOnLoan')), namespaceprefix_ , eol_))
        if self.InventoryMarketShare is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInventoryMarketShare>%s</%sInventoryMarketShare>%s' % (namespaceprefix_ , self.gds_format_float(self.InventoryMarketShare, input_name='InventoryMarketShare'), namespaceprefix_ , eol_))
        if self.InventoryRank is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInventoryRank>%s</%sInventoryRank>%s' % (namespaceprefix_ , self.gds_format_float(self.InventoryRank, input_name='InventoryRank'), namespaceprefix_ , eol_))
        if self.LendableValueShare is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableValueShare>%s</%sLendableValueShare>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableValueShare, input_name='LendableValueShare'), namespaceprefix_ , eol_))
        if self.LenderMarketShare is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderMarketShare>%s</%sLenderMarketShare>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderMarketShare, input_name='LenderMarketShare'), namespaceprefix_ , eol_))
        if self.LenderRank is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderRank>%s</%sLenderRank>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderRank, input_name='LenderRank'), namespaceprefix_ , eol_))
        if self.LenderValueOnLoanShare is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderValueOnLoanShare>%s</%sLenderValueOnLoanShare>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderValueOnLoanShare, input_name='LenderValueOnLoanShare'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BorrowerMarketShare' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'BorrowerMarketShare')
            self.BorrowerMarketShare = fval_
        elif nodeName_ == 'BorrowerRank' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'BorrowerRank')
            self.BorrowerRank = fval_
        elif nodeName_ == 'BorrowerValueOnLoanShare' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'BorrowerValueOnLoanShare')
            self.BorrowerValueOnLoanShare = fval_
        elif nodeName_ == 'ClientNameForBorrowerValueOnLoan':
            ClientNameForBorrowerValueOnLoan_ = child_.text
            ClientNameForBorrowerValueOnLoan_ = self.gds_validate_string(ClientNameForBorrowerValueOnLoan_, node, 'ClientNameForBorrowerValueOnLoan')
            self.ClientNameForBorrowerValueOnLoan = ClientNameForBorrowerValueOnLoan_
        elif nodeName_ == 'ClientNameForLenderInventory':
            ClientNameForLenderInventory_ = child_.text
            ClientNameForLenderInventory_ = self.gds_validate_string(ClientNameForLenderInventory_, node, 'ClientNameForLenderInventory')
            self.ClientNameForLenderInventory = ClientNameForLenderInventory_
        elif nodeName_ == 'ClientNameForLenderValueOnLoan':
            ClientNameForLenderValueOnLoan_ = child_.text
            ClientNameForLenderValueOnLoan_ = self.gds_validate_string(ClientNameForLenderValueOnLoan_, node, 'ClientNameForLenderValueOnLoan')
            self.ClientNameForLenderValueOnLoan = ClientNameForLenderValueOnLoan_
        elif nodeName_ == 'InventoryMarketShare' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'InventoryMarketShare')
            self.InventoryMarketShare = fval_
        elif nodeName_ == 'InventoryRank' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'InventoryRank')
            self.InventoryRank = fval_
        elif nodeName_ == 'LendableValueShare' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableValueShare')
            self.LendableValueShare = fval_
        elif nodeName_ == 'LenderMarketShare' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderMarketShare')
            self.LenderMarketShare = fval_
        elif nodeName_ == 'LenderRank' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderRank')
            self.LenderRank = fval_
        elif nodeName_ == 'LenderValueOnLoanShare' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderValueOnLoanShare')
            self.LenderValueOnLoanShare = fval_
# end class MarketShareType


class TradingType155(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ActiveUtilisation=None, AverageTenure=None, Balance=None, CashLoanValue=None, Currency=None, DailyCost=None, DailyRevenue=None, Date=None, DCBS=None, Delta=None, LenderFee=None, Margin=None, NewLoanQuantity=None, NewLoanValue=None, Quantity=None, QuantityOnLoan=None, RepoRate=None, SAF=None, SAR=None, SATenure=None, SevenDayRepoRate=None, ShortLoanValue=None, SlDailyReturn=None, SlReturnToLendable=None, TransactionCount=None, Utilisation=None, ValueOnLoan=None, VWAF=None, VWAFAllDays=None, VWAR=None, VWARAllDays=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ActiveUtilisation = ActiveUtilisation
        self.AverageTenure = AverageTenure
        self.Balance = Balance
        self.CashLoanValue = CashLoanValue
        self.Currency = Currency
        self.DailyCost = DailyCost
        self.DailyRevenue = DailyRevenue
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.DCBS = DCBS
        if Delta is None:
            self.Delta = []
        else:
            self.Delta = Delta
        self.LenderFee = LenderFee
        self.Margin = Margin
        self.NewLoanQuantity = NewLoanQuantity
        self.NewLoanValue = NewLoanValue
        self.Quantity = Quantity
        self.QuantityOnLoan = QuantityOnLoan
        self.RepoRate = RepoRate
        self.SAF = SAF
        self.SAR = SAR
        self.SATenure = SATenure
        self.SevenDayRepoRate = SevenDayRepoRate
        self.ShortLoanValue = ShortLoanValue
        self.SlDailyReturn = SlDailyReturn
        self.SlReturnToLendable = SlReturnToLendable
        self.TransactionCount = TransactionCount
        self.Utilisation = Utilisation
        self.ValueOnLoan = ValueOnLoan
        self.VWAF = VWAF
        self.VWAFAllDays = VWAFAllDays
        self.VWAR = VWAR
        self.VWARAllDays = VWARAllDays
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TradingType155)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TradingType155.subclass:
            return TradingType155.subclass(*args_, **kwargs_)
        else:
            return TradingType155(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ActiveUtilisation(self):
        return self.ActiveUtilisation
    def set_ActiveUtilisation(self, ActiveUtilisation):
        self.ActiveUtilisation = ActiveUtilisation
    def get_AverageTenure(self):
        return self.AverageTenure
    def set_AverageTenure(self, AverageTenure):
        self.AverageTenure = AverageTenure
    def get_Balance(self):
        return self.Balance
    def set_Balance(self, Balance):
        self.Balance = Balance
    def get_CashLoanValue(self):
        return self.CashLoanValue
    def set_CashLoanValue(self, CashLoanValue):
        self.CashLoanValue = CashLoanValue
    def get_Currency(self):
        return self.Currency
    def set_Currency(self, Currency):
        self.Currency = Currency
    def get_DailyCost(self):
        return self.DailyCost
    def set_DailyCost(self, DailyCost):
        self.DailyCost = DailyCost
    def get_DailyRevenue(self):
        return self.DailyRevenue
    def set_DailyRevenue(self, DailyRevenue):
        self.DailyRevenue = DailyRevenue
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_DCBS(self):
        return self.DCBS
    def set_DCBS(self, DCBS):
        self.DCBS = DCBS
    def get_Delta(self):
        return self.Delta
    def set_Delta(self, Delta):
        self.Delta = Delta
    def add_Delta(self, value):
        self.Delta.append(value)
    def add_Delta(self, value):
        self.Delta.append(value)
    def insert_Delta_at(self, index, value):
        self.Delta.insert(index, value)
    def replace_Delta_at(self, index, value):
        self.Delta[index] = value
    def get_LenderFee(self):
        return self.LenderFee
    def set_LenderFee(self, LenderFee):
        self.LenderFee = LenderFee
    def get_Margin(self):
        return self.Margin
    def set_Margin(self, Margin):
        self.Margin = Margin
    def get_NewLoanQuantity(self):
        return self.NewLoanQuantity
    def set_NewLoanQuantity(self, NewLoanQuantity):
        self.NewLoanQuantity = NewLoanQuantity
    def get_NewLoanValue(self):
        return self.NewLoanValue
    def set_NewLoanValue(self, NewLoanValue):
        self.NewLoanValue = NewLoanValue
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_QuantityOnLoan(self):
        return self.QuantityOnLoan
    def set_QuantityOnLoan(self, QuantityOnLoan):
        self.QuantityOnLoan = QuantityOnLoan
    def get_RepoRate(self):
        return self.RepoRate
    def set_RepoRate(self, RepoRate):
        self.RepoRate = RepoRate
    def get_SAF(self):
        return self.SAF
    def set_SAF(self, SAF):
        self.SAF = SAF
    def get_SAR(self):
        return self.SAR
    def set_SAR(self, SAR):
        self.SAR = SAR
    def get_SATenure(self):
        return self.SATenure
    def set_SATenure(self, SATenure):
        self.SATenure = SATenure
    def get_SevenDayRepoRate(self):
        return self.SevenDayRepoRate
    def set_SevenDayRepoRate(self, SevenDayRepoRate):
        self.SevenDayRepoRate = SevenDayRepoRate
    def get_ShortLoanValue(self):
        return self.ShortLoanValue
    def set_ShortLoanValue(self, ShortLoanValue):
        self.ShortLoanValue = ShortLoanValue
    def get_SlDailyReturn(self):
        return self.SlDailyReturn
    def set_SlDailyReturn(self, SlDailyReturn):
        self.SlDailyReturn = SlDailyReturn
    def get_SlReturnToLendable(self):
        return self.SlReturnToLendable
    def set_SlReturnToLendable(self, SlReturnToLendable):
        self.SlReturnToLendable = SlReturnToLendable
    def get_TransactionCount(self):
        return self.TransactionCount
    def set_TransactionCount(self, TransactionCount):
        self.TransactionCount = TransactionCount
    def get_Utilisation(self):
        return self.Utilisation
    def set_Utilisation(self, Utilisation):
        self.Utilisation = Utilisation
    def get_ValueOnLoan(self):
        return self.ValueOnLoan
    def set_ValueOnLoan(self, ValueOnLoan):
        self.ValueOnLoan = ValueOnLoan
    def get_VWAF(self):
        return self.VWAF
    def set_VWAF(self, VWAF):
        self.VWAF = VWAF
    def get_VWAFAllDays(self):
        return self.VWAFAllDays
    def set_VWAFAllDays(self, VWAFAllDays):
        self.VWAFAllDays = VWAFAllDays
    def get_VWAR(self):
        return self.VWAR
    def set_VWAR(self, VWAR):
        self.VWAR = VWAR
    def get_VWARAllDays(self):
        return self.VWARAllDays
    def set_VWARAllDays(self, VWARAllDays):
        self.VWARAllDays = VWARAllDays
    def hasContent_(self):
        if (
            self.ActiveUtilisation is not None or
            self.AverageTenure is not None or
            self.Balance is not None or
            self.CashLoanValue is not None or
            self.Currency is not None or
            self.DailyCost is not None or
            self.DailyRevenue is not None or
            self.Date is not None or
            self.DCBS is not None or
            self.Delta or
            self.LenderFee is not None or
            self.Margin is not None or
            self.NewLoanQuantity is not None or
            self.NewLoanValue is not None or
            self.Quantity is not None or
            self.QuantityOnLoan is not None or
            self.RepoRate is not None or
            self.SAF is not None or
            self.SAR is not None or
            self.SATenure is not None or
            self.SevenDayRepoRate is not None or
            self.ShortLoanValue is not None or
            self.SlDailyReturn is not None or
            self.SlReturnToLendable is not None or
            self.TransactionCount is not None or
            self.Utilisation is not None or
            self.ValueOnLoan is not None or
            self.VWAF is not None or
            self.VWAFAllDays is not None or
            self.VWAR is not None or
            self.VWARAllDays is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TradingType155', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TradingType155')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TradingType155')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TradingType155', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TradingType155'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TradingType155', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ActiveUtilisation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveUtilisation>%s</%sActiveUtilisation>%s' % (namespaceprefix_ , self.gds_format_float(self.ActiveUtilisation, input_name='ActiveUtilisation'), namespaceprefix_ , eol_))
        if self.AverageTenure is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAverageTenure>%s</%sAverageTenure>%s' % (namespaceprefix_ , self.gds_format_float(self.AverageTenure, input_name='AverageTenure'), namespaceprefix_ , eol_))
        if self.Balance is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBalance>%s</%sBalance>%s' % (namespaceprefix_ , self.gds_format_float(self.Balance, input_name='Balance'), namespaceprefix_ , eol_))
        if self.CashLoanValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCashLoanValue>%s</%sCashLoanValue>%s' % (namespaceprefix_ , self.gds_format_float(self.CashLoanValue, input_name='CashLoanValue'), namespaceprefix_ , eol_))
        if self.Currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrency>%s</%sCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Currency), input_name='Currency')), namespaceprefix_ , eol_))
        if self.DailyCost is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDailyCost>%s</%sDailyCost>%s' % (namespaceprefix_ , self.gds_format_float(self.DailyCost, input_name='DailyCost'), namespaceprefix_ , eol_))
        if self.DailyRevenue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDailyRevenue>%s</%sDailyRevenue>%s' % (namespaceprefix_ , self.gds_format_float(self.DailyRevenue, input_name='DailyRevenue'), namespaceprefix_ , eol_))
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.DCBS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDCBS>%s</%sDCBS>%s' % (namespaceprefix_ , self.gds_format_float(self.DCBS, input_name='DCBS'), namespaceprefix_ , eol_))
        for Delta_ in self.Delta:
            Delta_.export(outfile, level, namespaceprefix_, name_='Delta', pretty_print=pretty_print)
        if self.LenderFee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenderFee>%s</%sLenderFee>%s' % (namespaceprefix_ , self.gds_format_float(self.LenderFee, input_name='LenderFee'), namespaceprefix_ , eol_))
        if self.Margin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMargin>%s</%sMargin>%s' % (namespaceprefix_ , self.gds_format_float(self.Margin, input_name='Margin'), namespaceprefix_ , eol_))
        if self.NewLoanQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNewLoanQuantity>%s</%sNewLoanQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.NewLoanQuantity, input_name='NewLoanQuantity'), namespaceprefix_ , eol_))
        if self.NewLoanValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNewLoanValue>%s</%sNewLoanValue>%s' % (namespaceprefix_ , self.gds_format_float(self.NewLoanValue, input_name='NewLoanValue'), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.QuantityOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityOnLoan>%s</%sQuantityOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.QuantityOnLoan, input_name='QuantityOnLoan'), namespaceprefix_ , eol_))
        if self.RepoRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRepoRate>%s</%sRepoRate>%s' % (namespaceprefix_ , self.gds_format_float(self.RepoRate, input_name='RepoRate'), namespaceprefix_ , eol_))
        if self.SAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSAF>%s</%sSAF>%s' % (namespaceprefix_ , self.gds_format_float(self.SAF, input_name='SAF'), namespaceprefix_ , eol_))
        if self.SAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSAR>%s</%sSAR>%s' % (namespaceprefix_ , self.gds_format_float(self.SAR, input_name='SAR'), namespaceprefix_ , eol_))
        if self.SATenure is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSATenure>%s</%sSATenure>%s' % (namespaceprefix_ , self.gds_format_float(self.SATenure, input_name='SATenure'), namespaceprefix_ , eol_))
        if self.SevenDayRepoRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSevenDayRepoRate>%s</%sSevenDayRepoRate>%s' % (namespaceprefix_ , self.gds_format_float(self.SevenDayRepoRate, input_name='SevenDayRepoRate'), namespaceprefix_ , eol_))
        if self.ShortLoanValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortLoanValue>%s</%sShortLoanValue>%s' % (namespaceprefix_ , self.gds_format_float(self.ShortLoanValue, input_name='ShortLoanValue'), namespaceprefix_ , eol_))
        if self.SlDailyReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSlDailyReturn>%s</%sSlDailyReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.SlDailyReturn, input_name='SlDailyReturn'), namespaceprefix_ , eol_))
        if self.SlReturnToLendable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSlReturnToLendable>%s</%sSlReturnToLendable>%s' % (namespaceprefix_ , self.gds_format_float(self.SlReturnToLendable, input_name='SlReturnToLendable'), namespaceprefix_ , eol_))
        if self.TransactionCount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransactionCount>%s</%sTransactionCount>%s' % (namespaceprefix_ , self.gds_format_float(self.TransactionCount, input_name='TransactionCount'), namespaceprefix_ , eol_))
        if self.Utilisation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisation>%s</%sUtilisation>%s' % (namespaceprefix_ , self.gds_format_float(self.Utilisation, input_name='Utilisation'), namespaceprefix_ , eol_))
        if self.ValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoan>%s</%sValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoan, input_name='ValueOnLoan'), namespaceprefix_ , eol_))
        if self.VWAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAF>%s</%sVWAF>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAF, input_name='VWAF'), namespaceprefix_ , eol_))
        if self.VWAFAllDays is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAFAllDays>%s</%sVWAFAllDays>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAFAllDays, input_name='VWAFAllDays'), namespaceprefix_ , eol_))
        if self.VWAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAR>%s</%sVWAR>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAR, input_name='VWAR'), namespaceprefix_ , eol_))
        if self.VWARAllDays is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWARAllDays>%s</%sVWARAllDays>%s' % (namespaceprefix_ , self.gds_format_float(self.VWARAllDays, input_name='VWARAllDays'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ActiveUtilisation' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ActiveUtilisation')
            self.ActiveUtilisation = fval_
        elif nodeName_ == 'AverageTenure' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AverageTenure')
            self.AverageTenure = fval_
        elif nodeName_ == 'Balance' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Balance')
            self.Balance = fval_
        elif nodeName_ == 'CashLoanValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'CashLoanValue')
            self.CashLoanValue = fval_
        elif nodeName_ == 'Currency':
            Currency_ = child_.text
            Currency_ = self.gds_validate_string(Currency_, node, 'Currency')
            self.Currency = Currency_
        elif nodeName_ == 'DailyCost' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DailyCost')
            self.DailyCost = fval_
        elif nodeName_ == 'DailyRevenue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DailyRevenue')
            self.DailyRevenue = fval_
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
        elif nodeName_ == 'DCBS' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DCBS')
            self.DCBS = fval_
        elif nodeName_ == 'Delta':
            obj_ = DeltaType156.factory(parent_object_=self)
            obj_.build(child_)
            self.Delta.append(obj_)
            obj_.original_tagname_ = 'Delta'
        elif nodeName_ == 'LenderFee' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LenderFee')
            self.LenderFee = fval_
        elif nodeName_ == 'Margin' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Margin')
            self.Margin = fval_
        elif nodeName_ == 'NewLoanQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NewLoanQuantity')
            self.NewLoanQuantity = fval_
        elif nodeName_ == 'NewLoanValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NewLoanValue')
            self.NewLoanValue = fval_
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Quantity')
            self.Quantity = fval_
        elif nodeName_ == 'QuantityOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'QuantityOnLoan')
            self.QuantityOnLoan = fval_
        elif nodeName_ == 'RepoRate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RepoRate')
            self.RepoRate = fval_
        elif nodeName_ == 'SAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SAF')
            self.SAF = fval_
        elif nodeName_ == 'SAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SAR')
            self.SAR = fval_
        elif nodeName_ == 'SATenure' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SATenure')
            self.SATenure = fval_
        elif nodeName_ == 'SevenDayRepoRate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SevenDayRepoRate')
            self.SevenDayRepoRate = fval_
        elif nodeName_ == 'ShortLoanValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ShortLoanValue')
            self.ShortLoanValue = fval_
        elif nodeName_ == 'SlDailyReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SlDailyReturn')
            self.SlDailyReturn = fval_
        elif nodeName_ == 'SlReturnToLendable' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SlReturnToLendable')
            self.SlReturnToLendable = fval_
        elif nodeName_ == 'TransactionCount' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TransactionCount')
            self.TransactionCount = fval_
        elif nodeName_ == 'Utilisation' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Utilisation')
            self.Utilisation = fval_
        elif nodeName_ == 'ValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoan')
            self.ValueOnLoan = fval_
        elif nodeName_ == 'VWAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAF')
            self.VWAF = fval_
        elif nodeName_ == 'VWAFAllDays' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAFAllDays')
            self.VWAFAllDays = fval_
        elif nodeName_ == 'VWAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAR')
            self.VWAR = fval_
        elif nodeName_ == 'VWARAllDays' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWARAllDays')
            self.VWARAllDays = fval_
# end class TradingType155


class DeltaType156(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, QuantityOnLoanDelta=None, SAFDelta=None, SARDelta=None, UtilisationDelta=None, ValueOnLoanDelta=None, VWAFAllDaysDelta=None, VWAFDelta=None, VWARAllDaysDelta=None, VWARDelta=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.value = _cast(None, value)
        self.QuantityOnLoanDelta = QuantityOnLoanDelta
        self.SAFDelta = SAFDelta
        self.SARDelta = SARDelta
        self.UtilisationDelta = UtilisationDelta
        self.ValueOnLoanDelta = ValueOnLoanDelta
        self.VWAFAllDaysDelta = VWAFAllDaysDelta
        self.VWAFDelta = VWAFDelta
        self.VWARAllDaysDelta = VWARAllDaysDelta
        self.VWARDelta = VWARDelta
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeltaType156)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeltaType156.subclass:
            return DeltaType156.subclass(*args_, **kwargs_)
        else:
            return DeltaType156(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_QuantityOnLoanDelta(self):
        return self.QuantityOnLoanDelta
    def set_QuantityOnLoanDelta(self, QuantityOnLoanDelta):
        self.QuantityOnLoanDelta = QuantityOnLoanDelta
    def get_SAFDelta(self):
        return self.SAFDelta
    def set_SAFDelta(self, SAFDelta):
        self.SAFDelta = SAFDelta
    def get_SARDelta(self):
        return self.SARDelta
    def set_SARDelta(self, SARDelta):
        self.SARDelta = SARDelta
    def get_UtilisationDelta(self):
        return self.UtilisationDelta
    def set_UtilisationDelta(self, UtilisationDelta):
        self.UtilisationDelta = UtilisationDelta
    def get_ValueOnLoanDelta(self):
        return self.ValueOnLoanDelta
    def set_ValueOnLoanDelta(self, ValueOnLoanDelta):
        self.ValueOnLoanDelta = ValueOnLoanDelta
    def get_VWAFAllDaysDelta(self):
        return self.VWAFAllDaysDelta
    def set_VWAFAllDaysDelta(self, VWAFAllDaysDelta):
        self.VWAFAllDaysDelta = VWAFAllDaysDelta
    def get_VWAFDelta(self):
        return self.VWAFDelta
    def set_VWAFDelta(self, VWAFDelta):
        self.VWAFDelta = VWAFDelta
    def get_VWARAllDaysDelta(self):
        return self.VWARAllDaysDelta
    def set_VWARAllDaysDelta(self, VWARAllDaysDelta):
        self.VWARAllDaysDelta = VWARAllDaysDelta
    def get_VWARDelta(self):
        return self.VWARDelta
    def set_VWARDelta(self, VWARDelta):
        self.VWARDelta = VWARDelta
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.QuantityOnLoanDelta is not None or
            self.SAFDelta is not None or
            self.SARDelta is not None or
            self.UtilisationDelta is not None or
            self.ValueOnLoanDelta is not None or
            self.VWAFAllDaysDelta is not None or
            self.VWAFDelta is not None or
            self.VWARAllDaysDelta is not None or
            self.VWARDelta is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeltaType156', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeltaType156')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DeltaType156')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DeltaType156', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DeltaType156'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeltaType156', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.QuantityOnLoanDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityOnLoanDelta>%s</%sQuantityOnLoanDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.QuantityOnLoanDelta, input_name='QuantityOnLoanDelta'), namespaceprefix_ , eol_))
        if self.SAFDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSAFDelta>%s</%sSAFDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.SAFDelta, input_name='SAFDelta'), namespaceprefix_ , eol_))
        if self.SARDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSARDelta>%s</%sSARDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.SARDelta, input_name='SARDelta'), namespaceprefix_ , eol_))
        if self.UtilisationDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisationDelta>%s</%sUtilisationDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.UtilisationDelta, input_name='UtilisationDelta'), namespaceprefix_ , eol_))
        if self.ValueOnLoanDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanDelta>%s</%sValueOnLoanDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoanDelta, input_name='ValueOnLoanDelta'), namespaceprefix_ , eol_))
        if self.VWAFAllDaysDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAFAllDaysDelta>%s</%sVWAFAllDaysDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAFAllDaysDelta, input_name='VWAFAllDaysDelta'), namespaceprefix_ , eol_))
        if self.VWAFDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAFDelta>%s</%sVWAFDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAFDelta, input_name='VWAFDelta'), namespaceprefix_ , eol_))
        if self.VWARAllDaysDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWARAllDaysDelta>%s</%sVWARAllDaysDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.VWARAllDaysDelta, input_name='VWARAllDaysDelta'), namespaceprefix_ , eol_))
        if self.VWARDelta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWARDelta>%s</%sVWARDelta>%s' % (namespaceprefix_ , self.gds_format_float(self.VWARDelta, input_name='VWARDelta'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'QuantityOnLoanDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'QuantityOnLoanDelta')
            self.QuantityOnLoanDelta = fval_
        elif nodeName_ == 'SAFDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SAFDelta')
            self.SAFDelta = fval_
        elif nodeName_ == 'SARDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SARDelta')
            self.SARDelta = fval_
        elif nodeName_ == 'UtilisationDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'UtilisationDelta')
            self.UtilisationDelta = fval_
        elif nodeName_ == 'ValueOnLoanDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoanDelta')
            self.ValueOnLoanDelta = fval_
        elif nodeName_ == 'VWAFAllDaysDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAFAllDaysDelta')
            self.VWAFAllDaysDelta = fval_
        elif nodeName_ == 'VWAFDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAFDelta')
            self.VWAFDelta = fval_
        elif nodeName_ == 'VWARAllDaysDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWARAllDaysDelta')
            self.VWARAllDaysDelta = fval_
        elif nodeName_ == 'VWARDelta' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWARDelta')
            self.VWARDelta = fval_
# end class DeltaType156


class MarketDataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, InstrumentName=None, MarketArea=None, MarketAreaID=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.InstrumentName = InstrumentName
        self.MarketArea = MarketArea
        self.MarketAreaID = MarketAreaID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarketDataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarketDataType.subclass:
            return MarketDataType.subclass(*args_, **kwargs_)
        else:
            return MarketDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_InstrumentName(self):
        return self.InstrumentName
    def set_InstrumentName(self, InstrumentName):
        self.InstrumentName = InstrumentName
    def get_MarketArea(self):
        return self.MarketArea
    def set_MarketArea(self, MarketArea):
        self.MarketArea = MarketArea
    def get_MarketAreaID(self):
        return self.MarketAreaID
    def set_MarketAreaID(self, MarketAreaID):
        self.MarketAreaID = MarketAreaID
    def hasContent_(self):
        if (
            self.InstrumentName is not None or
            self.MarketArea is not None or
            self.MarketAreaID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MarketDataType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarketDataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarketDataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarketDataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarketDataType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MarketDataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InstrumentName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstrumentName>%s</%sInstrumentName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InstrumentName), input_name='InstrumentName')), namespaceprefix_ , eol_))
        if self.MarketArea is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarketArea>%s</%sMarketArea>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarketArea), input_name='MarketArea')), namespaceprefix_ , eol_))
        if self.MarketAreaID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarketAreaID>%s</%sMarketAreaID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarketAreaID), input_name='MarketAreaID')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'InstrumentName':
            InstrumentName_ = child_.text
            InstrumentName_ = self.gds_validate_string(InstrumentName_, node, 'InstrumentName')
            self.InstrumentName = InstrumentName_
        elif nodeName_ == 'MarketArea':
            MarketArea_ = child_.text
            MarketArea_ = self.gds_validate_string(MarketArea_, node, 'MarketArea')
            self.MarketArea = MarketArea_
        elif nodeName_ == 'MarketAreaID':
            MarketAreaID_ = child_.text
            MarketAreaID_ = self.gds_validate_string(MarketAreaID_, node, 'MarketAreaID')
            self.MarketAreaID = MarketAreaID_
# end class MarketDataType


class TradingType157(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Currency=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Currency = Currency
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TradingType157)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TradingType157.subclass:
            return TradingType157.subclass(*args_, **kwargs_)
        else:
            return TradingType157(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Currency(self):
        return self.Currency
    def set_Currency(self, Currency):
        self.Currency = Currency
    def hasContent_(self):
        if (
            self.Currency is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TradingType157', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TradingType157')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TradingType157')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TradingType157', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TradingType157'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TradingType157', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrency>%s</%sCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Currency), input_name='Currency')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Currency':
            Currency_ = child_.text
            Currency_ = self.gds_validate_string(Currency_, node, 'Currency')
            self.Currency = Currency_
# end class TradingType157


class GeneralType158(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BB_TICKER=None, BBGID=None, CUSIP=None, DXLID=None, EXCHANGE=None, InstrumentName=None, InstrumentType=None, IsDeleted=None, ISIN=None, IsPrimary=None, MarketArea=None, QUICK=None, SEDOL=None, TICKER=None, TICKERCODE=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.BB_TICKER = BB_TICKER
        self.BBGID = BBGID
        self.CUSIP = CUSIP
        self.DXLID = DXLID
        self.EXCHANGE = EXCHANGE
        self.InstrumentName = InstrumentName
        self.InstrumentType = InstrumentType
        self.IsDeleted = IsDeleted
        self.ISIN = ISIN
        self.IsPrimary = IsPrimary
        self.MarketArea = MarketArea
        self.QUICK = QUICK
        self.SEDOL = SEDOL
        self.TICKER = TICKER
        self.TICKERCODE = TICKERCODE
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType158)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType158.subclass:
            return GeneralType158.subclass(*args_, **kwargs_)
        else:
            return GeneralType158(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BB_TICKER(self):
        return self.BB_TICKER
    def set_BB_TICKER(self, BB_TICKER):
        self.BB_TICKER = BB_TICKER
    def get_BBGID(self):
        return self.BBGID
    def set_BBGID(self, BBGID):
        self.BBGID = BBGID
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_EXCHANGE(self):
        return self.EXCHANGE
    def set_EXCHANGE(self, EXCHANGE):
        self.EXCHANGE = EXCHANGE
    def get_InstrumentName(self):
        return self.InstrumentName
    def set_InstrumentName(self, InstrumentName):
        self.InstrumentName = InstrumentName
    def get_InstrumentType(self):
        return self.InstrumentType
    def set_InstrumentType(self, InstrumentType):
        self.InstrumentType = InstrumentType
    def get_IsDeleted(self):
        return self.IsDeleted
    def set_IsDeleted(self, IsDeleted):
        self.IsDeleted = IsDeleted
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_IsPrimary(self):
        return self.IsPrimary
    def set_IsPrimary(self, IsPrimary):
        self.IsPrimary = IsPrimary
    def get_MarketArea(self):
        return self.MarketArea
    def set_MarketArea(self, MarketArea):
        self.MarketArea = MarketArea
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def get_TICKERCODE(self):
        return self.TICKERCODE
    def set_TICKERCODE(self, TICKERCODE):
        self.TICKERCODE = TICKERCODE
    def hasContent_(self):
        if (
            self.BB_TICKER is not None or
            self.BBGID is not None or
            self.CUSIP is not None or
            self.DXLID is not None or
            self.EXCHANGE is not None or
            self.InstrumentName is not None or
            self.InstrumentType is not None or
            self.IsDeleted is not None or
            self.ISIN is not None or
            self.IsPrimary is not None or
            self.MarketArea is not None or
            self.QUICK is not None or
            self.SEDOL is not None or
            self.TICKER is not None or
            self.TICKERCODE is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType158', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType158')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType158')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType158', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType158'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType158', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BB_TICKER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBB_TICKER>%s</%sBB_TICKER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BB_TICKER), input_name='BB_TICKER')), namespaceprefix_ , eol_))
        if self.BBGID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBBGID>%s</%sBBGID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BBGID), input_name='BBGID')), namespaceprefix_ , eol_))
        if self.CUSIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUSIP>%s</%sCUSIP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CUSIP), input_name='CUSIP')), namespaceprefix_ , eol_))
        if self.DXLID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDXLID>%s</%sDXLID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DXLID), input_name='DXLID')), namespaceprefix_ , eol_))
        if self.EXCHANGE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEXCHANGE>%s</%sEXCHANGE>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EXCHANGE), input_name='EXCHANGE')), namespaceprefix_ , eol_))
        if self.InstrumentName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstrumentName>%s</%sInstrumentName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InstrumentName), input_name='InstrumentName')), namespaceprefix_ , eol_))
        if self.InstrumentType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstrumentType>%s</%sInstrumentType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InstrumentType), input_name='InstrumentType')), namespaceprefix_ , eol_))
        if self.IsDeleted is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsDeleted>%s</%sIsDeleted>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsDeleted), input_name='IsDeleted')), namespaceprefix_ , eol_))
        if self.ISIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sISIN>%s</%sISIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ISIN), input_name='ISIN')), namespaceprefix_ , eol_))
        if self.IsPrimary is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsPrimary>%s</%sIsPrimary>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsPrimary), input_name='IsPrimary')), namespaceprefix_ , eol_))
        if self.MarketArea is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarketArea>%s</%sMarketArea>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarketArea), input_name='MarketArea')), namespaceprefix_ , eol_))
        if self.QUICK is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQUICK>%s</%sQUICK>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QUICK), input_name='QUICK')), namespaceprefix_ , eol_))
        if self.SEDOL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSEDOL>%s</%sSEDOL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SEDOL), input_name='SEDOL')), namespaceprefix_ , eol_))
        if self.TICKER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTICKER>%s</%sTICKER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TICKER), input_name='TICKER')), namespaceprefix_ , eol_))
        if self.TICKERCODE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTICKERCODE>%s</%sTICKERCODE>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TICKERCODE), input_name='TICKERCODE')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BB_TICKER':
            BB_TICKER_ = child_.text
            BB_TICKER_ = self.gds_validate_string(BB_TICKER_, node, 'BB_TICKER')
            self.BB_TICKER = BB_TICKER_
        elif nodeName_ == 'BBGID':
            BBGID_ = child_.text
            BBGID_ = self.gds_validate_string(BBGID_, node, 'BBGID')
            self.BBGID = BBGID_
        elif nodeName_ == 'CUSIP':
            CUSIP_ = child_.text
            CUSIP_ = self.gds_validate_string(CUSIP_, node, 'CUSIP')
            self.CUSIP = CUSIP_
        elif nodeName_ == 'DXLID':
            DXLID_ = child_.text
            DXLID_ = self.gds_validate_string(DXLID_, node, 'DXLID')
            self.DXLID = DXLID_
        elif nodeName_ == 'EXCHANGE':
            EXCHANGE_ = child_.text
            EXCHANGE_ = self.gds_validate_string(EXCHANGE_, node, 'EXCHANGE')
            self.EXCHANGE = EXCHANGE_
        elif nodeName_ == 'InstrumentName':
            InstrumentName_ = child_.text
            InstrumentName_ = self.gds_validate_string(InstrumentName_, node, 'InstrumentName')
            self.InstrumentName = InstrumentName_
        elif nodeName_ == 'InstrumentType':
            InstrumentType_ = child_.text
            InstrumentType_ = self.gds_validate_string(InstrumentType_, node, 'InstrumentType')
            self.InstrumentType = InstrumentType_
        elif nodeName_ == 'IsDeleted':
            IsDeleted_ = child_.text
            IsDeleted_ = self.gds_validate_string(IsDeleted_, node, 'IsDeleted')
            self.IsDeleted = IsDeleted_
        elif nodeName_ == 'ISIN':
            ISIN_ = child_.text
            ISIN_ = self.gds_validate_string(ISIN_, node, 'ISIN')
            self.ISIN = ISIN_
        elif nodeName_ == 'IsPrimary':
            IsPrimary_ = child_.text
            IsPrimary_ = self.gds_validate_string(IsPrimary_, node, 'IsPrimary')
            self.IsPrimary = IsPrimary_
        elif nodeName_ == 'MarketArea':
            MarketArea_ = child_.text
            MarketArea_ = self.gds_validate_string(MarketArea_, node, 'MarketArea')
            self.MarketArea = MarketArea_
        elif nodeName_ == 'QUICK':
            QUICK_ = child_.text
            QUICK_ = self.gds_validate_string(QUICK_, node, 'QUICK')
            self.QUICK = QUICK_
        elif nodeName_ == 'SEDOL':
            SEDOL_ = child_.text
            SEDOL_ = self.gds_validate_string(SEDOL_, node, 'SEDOL')
            self.SEDOL = SEDOL_
        elif nodeName_ == 'TICKER':
            TICKER_ = child_.text
            TICKER_ = self.gds_validate_string(TICKER_, node, 'TICKER')
            self.TICKER = TICKER_
        elif nodeName_ == 'TICKERCODE':
            TICKERCODE_ = child_.text
            TICKERCODE_ = self.gds_validate_string(TICKERCODE_, node, 'TICKERCODE')
            self.TICKERCODE = TICKERCODE_
# end class GeneralType158


class GeneralType159(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BB_TICKER=None, BBGID=None, CUSIP=None, DXLID=None, EXCHANGE=None, InstrumentName=None, ISIN=None, MarketArea=None, QUICK=None, SEDOL=None, TICKER=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.BB_TICKER = BB_TICKER
        self.BBGID = BBGID
        self.CUSIP = CUSIP
        self.DXLID = DXLID
        self.EXCHANGE = EXCHANGE
        self.InstrumentName = InstrumentName
        self.ISIN = ISIN
        self.MarketArea = MarketArea
        self.QUICK = QUICK
        self.SEDOL = SEDOL
        self.TICKER = TICKER
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType159)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType159.subclass:
            return GeneralType159.subclass(*args_, **kwargs_)
        else:
            return GeneralType159(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BB_TICKER(self):
        return self.BB_TICKER
    def set_BB_TICKER(self, BB_TICKER):
        self.BB_TICKER = BB_TICKER
    def get_BBGID(self):
        return self.BBGID
    def set_BBGID(self, BBGID):
        self.BBGID = BBGID
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_EXCHANGE(self):
        return self.EXCHANGE
    def set_EXCHANGE(self, EXCHANGE):
        self.EXCHANGE = EXCHANGE
    def get_InstrumentName(self):
        return self.InstrumentName
    def set_InstrumentName(self, InstrumentName):
        self.InstrumentName = InstrumentName
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_MarketArea(self):
        return self.MarketArea
    def set_MarketArea(self, MarketArea):
        self.MarketArea = MarketArea
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def hasContent_(self):
        if (
            self.BB_TICKER is not None or
            self.BBGID is not None or
            self.CUSIP is not None or
            self.DXLID is not None or
            self.EXCHANGE is not None or
            self.InstrumentName is not None or
            self.ISIN is not None or
            self.MarketArea is not None or
            self.QUICK is not None or
            self.SEDOL is not None or
            self.TICKER is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType159', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType159')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType159')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType159', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType159'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType159', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BB_TICKER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBB_TICKER>%s</%sBB_TICKER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BB_TICKER), input_name='BB_TICKER')), namespaceprefix_ , eol_))
        if self.BBGID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBBGID>%s</%sBBGID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BBGID), input_name='BBGID')), namespaceprefix_ , eol_))
        if self.CUSIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUSIP>%s</%sCUSIP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CUSIP), input_name='CUSIP')), namespaceprefix_ , eol_))
        if self.DXLID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDXLID>%s</%sDXLID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DXLID), input_name='DXLID')), namespaceprefix_ , eol_))
        if self.EXCHANGE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEXCHANGE>%s</%sEXCHANGE>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EXCHANGE), input_name='EXCHANGE')), namespaceprefix_ , eol_))
        if self.InstrumentName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstrumentName>%s</%sInstrumentName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InstrumentName), input_name='InstrumentName')), namespaceprefix_ , eol_))
        if self.ISIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sISIN>%s</%sISIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ISIN), input_name='ISIN')), namespaceprefix_ , eol_))
        if self.MarketArea is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarketArea>%s</%sMarketArea>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarketArea), input_name='MarketArea')), namespaceprefix_ , eol_))
        if self.QUICK is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQUICK>%s</%sQUICK>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QUICK), input_name='QUICK')), namespaceprefix_ , eol_))
        if self.SEDOL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSEDOL>%s</%sSEDOL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SEDOL), input_name='SEDOL')), namespaceprefix_ , eol_))
        if self.TICKER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTICKER>%s</%sTICKER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TICKER), input_name='TICKER')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BB_TICKER':
            BB_TICKER_ = child_.text
            BB_TICKER_ = self.gds_validate_string(BB_TICKER_, node, 'BB_TICKER')
            self.BB_TICKER = BB_TICKER_
        elif nodeName_ == 'BBGID':
            BBGID_ = child_.text
            BBGID_ = self.gds_validate_string(BBGID_, node, 'BBGID')
            self.BBGID = BBGID_
        elif nodeName_ == 'CUSIP':
            CUSIP_ = child_.text
            CUSIP_ = self.gds_validate_string(CUSIP_, node, 'CUSIP')
            self.CUSIP = CUSIP_
        elif nodeName_ == 'DXLID':
            DXLID_ = child_.text
            DXLID_ = self.gds_validate_string(DXLID_, node, 'DXLID')
            self.DXLID = DXLID_
        elif nodeName_ == 'EXCHANGE':
            EXCHANGE_ = child_.text
            EXCHANGE_ = self.gds_validate_string(EXCHANGE_, node, 'EXCHANGE')
            self.EXCHANGE = EXCHANGE_
        elif nodeName_ == 'InstrumentName':
            InstrumentName_ = child_.text
            InstrumentName_ = self.gds_validate_string(InstrumentName_, node, 'InstrumentName')
            self.InstrumentName = InstrumentName_
        elif nodeName_ == 'ISIN':
            ISIN_ = child_.text
            ISIN_ = self.gds_validate_string(ISIN_, node, 'ISIN')
            self.ISIN = ISIN_
        elif nodeName_ == 'MarketArea':
            MarketArea_ = child_.text
            MarketArea_ = self.gds_validate_string(MarketArea_, node, 'MarketArea')
            self.MarketArea = MarketArea_
        elif nodeName_ == 'QUICK':
            QUICK_ = child_.text
            QUICK_ = self.gds_validate_string(QUICK_, node, 'QUICK')
            self.QUICK = QUICK_
        elif nodeName_ == 'SEDOL':
            SEDOL_ = child_.text
            SEDOL_ = self.gds_validate_string(SEDOL_, node, 'SEDOL')
            self.SEDOL = SEDOL_
        elif nodeName_ == 'TICKER':
            TICKER_ = child_.text
            TICKER_ = self.gds_validate_string(TICKER_, node, 'TICKER')
            self.TICKER = TICKER_
# end class GeneralType159


class GeneralType160(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BB_TICKER=None, BBGID=None, CUSIP=None, DXLID=None, InstrumentID=None, InstrumentName=None, InstrumentType=None, IsDeleted=None, ISIN=None, IsPrimary=None, QUICK=None, SEDOL=None, TICKER=None, TICKERCODE=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.BB_TICKER = BB_TICKER
        self.BBGID = BBGID
        self.CUSIP = CUSIP
        self.DXLID = DXLID
        self.InstrumentID = InstrumentID
        self.InstrumentName = InstrumentName
        self.InstrumentType = InstrumentType
        self.IsDeleted = IsDeleted
        self.ISIN = ISIN
        self.IsPrimary = IsPrimary
        self.QUICK = QUICK
        self.SEDOL = SEDOL
        self.TICKER = TICKER
        self.TICKERCODE = TICKERCODE
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType160)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType160.subclass:
            return GeneralType160.subclass(*args_, **kwargs_)
        else:
            return GeneralType160(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BB_TICKER(self):
        return self.BB_TICKER
    def set_BB_TICKER(self, BB_TICKER):
        self.BB_TICKER = BB_TICKER
    def get_BBGID(self):
        return self.BBGID
    def set_BBGID(self, BBGID):
        self.BBGID = BBGID
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_InstrumentID(self):
        return self.InstrumentID
    def set_InstrumentID(self, InstrumentID):
        self.InstrumentID = InstrumentID
    def get_InstrumentName(self):
        return self.InstrumentName
    def set_InstrumentName(self, InstrumentName):
        self.InstrumentName = InstrumentName
    def get_InstrumentType(self):
        return self.InstrumentType
    def set_InstrumentType(self, InstrumentType):
        self.InstrumentType = InstrumentType
    def get_IsDeleted(self):
        return self.IsDeleted
    def set_IsDeleted(self, IsDeleted):
        self.IsDeleted = IsDeleted
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_IsPrimary(self):
        return self.IsPrimary
    def set_IsPrimary(self, IsPrimary):
        self.IsPrimary = IsPrimary
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def get_TICKERCODE(self):
        return self.TICKERCODE
    def set_TICKERCODE(self, TICKERCODE):
        self.TICKERCODE = TICKERCODE
    def hasContent_(self):
        if (
            self.BB_TICKER is not None or
            self.BBGID is not None or
            self.CUSIP is not None or
            self.DXLID is not None or
            self.InstrumentID is not None or
            self.InstrumentName is not None or
            self.InstrumentType is not None or
            self.IsDeleted is not None or
            self.ISIN is not None or
            self.IsPrimary is not None or
            self.QUICK is not None or
            self.SEDOL is not None or
            self.TICKER is not None or
            self.TICKERCODE is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType160', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType160')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType160')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType160', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType160'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType160', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BB_TICKER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBB_TICKER>%s</%sBB_TICKER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BB_TICKER), input_name='BB_TICKER')), namespaceprefix_ , eol_))
        if self.BBGID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBBGID>%s</%sBBGID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BBGID), input_name='BBGID')), namespaceprefix_ , eol_))
        if self.CUSIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUSIP>%s</%sCUSIP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CUSIP), input_name='CUSIP')), namespaceprefix_ , eol_))
        if self.DXLID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDXLID>%s</%sDXLID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DXLID), input_name='DXLID')), namespaceprefix_ , eol_))
        if self.InstrumentID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstrumentID>%s</%sInstrumentID>%s' % (namespaceprefix_ , self.gds_format_float(self.InstrumentID, input_name='InstrumentID'), namespaceprefix_ , eol_))
        if self.InstrumentName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstrumentName>%s</%sInstrumentName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InstrumentName), input_name='InstrumentName')), namespaceprefix_ , eol_))
        if self.InstrumentType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstrumentType>%s</%sInstrumentType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InstrumentType), input_name='InstrumentType')), namespaceprefix_ , eol_))
        if self.IsDeleted is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsDeleted>%s</%sIsDeleted>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsDeleted), input_name='IsDeleted')), namespaceprefix_ , eol_))
        if self.ISIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sISIN>%s</%sISIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ISIN), input_name='ISIN')), namespaceprefix_ , eol_))
        if self.IsPrimary is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsPrimary>%s</%sIsPrimary>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsPrimary), input_name='IsPrimary')), namespaceprefix_ , eol_))
        if self.QUICK is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQUICK>%s</%sQUICK>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QUICK), input_name='QUICK')), namespaceprefix_ , eol_))
        if self.SEDOL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSEDOL>%s</%sSEDOL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SEDOL), input_name='SEDOL')), namespaceprefix_ , eol_))
        if self.TICKER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTICKER>%s</%sTICKER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TICKER), input_name='TICKER')), namespaceprefix_ , eol_))
        if self.TICKERCODE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTICKERCODE>%s</%sTICKERCODE>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TICKERCODE), input_name='TICKERCODE')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BB_TICKER':
            BB_TICKER_ = child_.text
            BB_TICKER_ = self.gds_validate_string(BB_TICKER_, node, 'BB_TICKER')
            self.BB_TICKER = BB_TICKER_
        elif nodeName_ == 'BBGID':
            BBGID_ = child_.text
            BBGID_ = self.gds_validate_string(BBGID_, node, 'BBGID')
            self.BBGID = BBGID_
        elif nodeName_ == 'CUSIP':
            CUSIP_ = child_.text
            CUSIP_ = self.gds_validate_string(CUSIP_, node, 'CUSIP')
            self.CUSIP = CUSIP_
        elif nodeName_ == 'DXLID':
            DXLID_ = child_.text
            DXLID_ = self.gds_validate_string(DXLID_, node, 'DXLID')
            self.DXLID = DXLID_
        elif nodeName_ == 'InstrumentID' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'InstrumentID')
            self.InstrumentID = fval_
        elif nodeName_ == 'InstrumentName':
            InstrumentName_ = child_.text
            InstrumentName_ = self.gds_validate_string(InstrumentName_, node, 'InstrumentName')
            self.InstrumentName = InstrumentName_
        elif nodeName_ == 'InstrumentType':
            InstrumentType_ = child_.text
            InstrumentType_ = self.gds_validate_string(InstrumentType_, node, 'InstrumentType')
            self.InstrumentType = InstrumentType_
        elif nodeName_ == 'IsDeleted':
            IsDeleted_ = child_.text
            IsDeleted_ = self.gds_validate_string(IsDeleted_, node, 'IsDeleted')
            self.IsDeleted = IsDeleted_
        elif nodeName_ == 'ISIN':
            ISIN_ = child_.text
            ISIN_ = self.gds_validate_string(ISIN_, node, 'ISIN')
            self.ISIN = ISIN_
        elif nodeName_ == 'IsPrimary':
            IsPrimary_ = child_.text
            IsPrimary_ = self.gds_validate_string(IsPrimary_, node, 'IsPrimary')
            self.IsPrimary = IsPrimary_
        elif nodeName_ == 'QUICK':
            QUICK_ = child_.text
            QUICK_ = self.gds_validate_string(QUICK_, node, 'QUICK')
            self.QUICK = QUICK_
        elif nodeName_ == 'SEDOL':
            SEDOL_ = child_.text
            SEDOL_ = self.gds_validate_string(SEDOL_, node, 'SEDOL')
            self.SEDOL = SEDOL_
        elif nodeName_ == 'TICKER':
            TICKER_ = child_.text
            TICKER_ = self.gds_validate_string(TICKER_, node, 'TICKER')
            self.TICKER = TICKER_
        elif nodeName_ == 'TICKERCODE':
            TICKERCODE_ = child_.text
            TICKERCODE_ = self.gds_validate_string(TICKERCODE_, node, 'TICKERCODE')
            self.TICKERCODE = TICKERCODE_
# end class GeneralType160


class DataDateType161(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType161)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType161.subclass:
            return DataDateType161.subclass(*args_, **kwargs_)
        else:
            return DataDateType161(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType161', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType161')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType161')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType161', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType161'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType161', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType162.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType161


class GeneralType162(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ClientName=None, FundName=None, Quantity=None, Value=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ClientName = ClientName
        self.FundName = FundName
        self.Quantity = Quantity
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType162)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType162.subclass:
            return GeneralType162.subclass(*args_, **kwargs_)
        else:
            return GeneralType162(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ClientName(self):
        return self.ClientName
    def set_ClientName(self, ClientName):
        self.ClientName = ClientName
    def get_FundName(self):
        return self.FundName
    def set_FundName(self, FundName):
        self.FundName = FundName
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def hasContent_(self):
        if (
            self.ClientName is not None or
            self.FundName is not None or
            self.Quantity is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType162', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType162')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType162')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType162', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType162'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType162', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClientName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientName>%s</%sClientName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClientName), input_name='ClientName')), namespaceprefix_ , eol_))
        if self.FundName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFundName>%s</%sFundName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FundName), input_name='FundName')), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_format_float(self.Value, input_name='Value'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ClientName':
            ClientName_ = child_.text
            ClientName_ = self.gds_validate_string(ClientName_, node, 'ClientName')
            self.ClientName = ClientName_
        elif nodeName_ == 'FundName':
            FundName_ = child_.text
            FundName_ = self.gds_validate_string(FundName_, node, 'FundName')
            self.FundName = FundName_
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Quantity')
            self.Quantity = fval_
        elif nodeName_ == 'Value' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Value')
            self.Value = fval_
# end class GeneralType162


class DataDateType163(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, BanDetails=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.BanDetails = BanDetails
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType163)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType163.subclass:
            return DataDateType163.subclass(*args_, **kwargs_)
        else:
            return DataDateType163(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BanDetails(self):
        return self.BanDetails
    def set_BanDetails(self, BanDetails):
        self.BanDetails = BanDetails
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.BanDetails is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType163', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType163')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType163')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType163', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType163'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType163', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BanDetails is not None:
            self.BanDetails.export(outfile, level, namespaceprefix_, name_='BanDetails', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BanDetails':
            obj_ = BanDetailsType.factory(parent_object_=self)
            obj_.build(child_)
            self.BanDetails = obj_
            obj_.original_tagname_ = 'BanDetails'
# end class DataDateType163


class BanDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BanType=None, Effective=None, EffectiveDate=None, EndDate=None, RegulatoryAuthorityName=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.BanType = BanType
        self.Effective = Effective
        if isinstance(EffectiveDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EffectiveDate, '%Y-%m-%d').date()
        else:
            initvalue_ = EffectiveDate
        self.EffectiveDate = initvalue_
        if isinstance(EndDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EndDate, '%Y-%m-%d').date()
        else:
            initvalue_ = EndDate
        self.EndDate = initvalue_
        self.RegulatoryAuthorityName = RegulatoryAuthorityName
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BanDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BanDetailsType.subclass:
            return BanDetailsType.subclass(*args_, **kwargs_)
        else:
            return BanDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BanType(self):
        return self.BanType
    def set_BanType(self, BanType):
        self.BanType = BanType
    def get_Effective(self):
        return self.Effective
    def set_Effective(self, Effective):
        self.Effective = Effective
    def get_EffectiveDate(self):
        return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate):
        self.EffectiveDate = EffectiveDate
    def get_EndDate(self):
        return self.EndDate
    def set_EndDate(self, EndDate):
        self.EndDate = EndDate
    def get_RegulatoryAuthorityName(self):
        return self.RegulatoryAuthorityName
    def set_RegulatoryAuthorityName(self, RegulatoryAuthorityName):
        self.RegulatoryAuthorityName = RegulatoryAuthorityName
    def hasContent_(self):
        if (
            self.BanType is not None or
            self.Effective is not None or
            self.EffectiveDate is not None or
            self.EndDate is not None or
            self.RegulatoryAuthorityName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BanDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BanDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BanDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BanDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BanDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BanDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BanType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBanType>%s</%sBanType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BanType), input_name='BanType')), namespaceprefix_ , eol_))
        if self.Effective is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEffective>%s</%sEffective>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Effective), input_name='Effective')), namespaceprefix_ , eol_))
        if self.EffectiveDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEffectiveDate>%s</%sEffectiveDate>%s' % (namespaceprefix_ , self.gds_format_date(self.EffectiveDate, input_name='EffectiveDate'), namespaceprefix_ , eol_))
        if self.EndDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEndDate>%s</%sEndDate>%s' % (namespaceprefix_ , self.gds_format_date(self.EndDate, input_name='EndDate'), namespaceprefix_ , eol_))
        if self.RegulatoryAuthorityName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegulatoryAuthorityName>%s</%sRegulatoryAuthorityName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegulatoryAuthorityName), input_name='RegulatoryAuthorityName')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BanType':
            BanType_ = child_.text
            BanType_ = self.gds_validate_string(BanType_, node, 'BanType')
            self.BanType = BanType_
        elif nodeName_ == 'Effective':
            Effective_ = child_.text
            Effective_ = self.gds_validate_string(Effective_, node, 'Effective')
            self.Effective = Effective_
        elif nodeName_ == 'EffectiveDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.EffectiveDate = dval_
        elif nodeName_ == 'EndDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.EndDate = dval_
        elif nodeName_ == 'RegulatoryAuthorityName':
            RegulatoryAuthorityName_ = child_.text
            RegulatoryAuthorityName_ = self.gds_validate_string(RegulatoryAuthorityName_, node, 'RegulatoryAuthorityName')
            self.RegulatoryAuthorityName = RegulatoryAuthorityName_
# end class BanDetailsType


class InstrumentDataType164(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BB_TICKER=None, BBGID=None, CUSIP=None, DXLID=None, ISIN=None, QUICK=None, SEDOL=None, TICKER=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.BB_TICKER = BB_TICKER
        self.BBGID = BBGID
        self.CUSIP = CUSIP
        self.DXLID = DXLID
        self.ISIN = ISIN
        self.QUICK = QUICK
        self.SEDOL = SEDOL
        self.TICKER = TICKER
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InstrumentDataType164)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InstrumentDataType164.subclass:
            return InstrumentDataType164.subclass(*args_, **kwargs_)
        else:
            return InstrumentDataType164(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BB_TICKER(self):
        return self.BB_TICKER
    def set_BB_TICKER(self, BB_TICKER):
        self.BB_TICKER = BB_TICKER
    def get_BBGID(self):
        return self.BBGID
    def set_BBGID(self, BBGID):
        self.BBGID = BBGID
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def hasContent_(self):
        if (
            self.BB_TICKER is not None or
            self.BBGID is not None or
            self.CUSIP is not None or
            self.DXLID is not None or
            self.ISIN is not None or
            self.QUICK is not None or
            self.SEDOL is not None or
            self.TICKER is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentDataType164', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InstrumentDataType164')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InstrumentDataType164')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InstrumentDataType164', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InstrumentDataType164'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentDataType164', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BB_TICKER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBB_TICKER>%s</%sBB_TICKER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BB_TICKER), input_name='BB_TICKER')), namespaceprefix_ , eol_))
        if self.BBGID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBBGID>%s</%sBBGID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BBGID), input_name='BBGID')), namespaceprefix_ , eol_))
        if self.CUSIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUSIP>%s</%sCUSIP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CUSIP), input_name='CUSIP')), namespaceprefix_ , eol_))
        if self.DXLID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDXLID>%s</%sDXLID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DXLID), input_name='DXLID')), namespaceprefix_ , eol_))
        if self.ISIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sISIN>%s</%sISIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ISIN), input_name='ISIN')), namespaceprefix_ , eol_))
        if self.QUICK is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQUICK>%s</%sQUICK>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QUICK), input_name='QUICK')), namespaceprefix_ , eol_))
        if self.SEDOL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSEDOL>%s</%sSEDOL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SEDOL), input_name='SEDOL')), namespaceprefix_ , eol_))
        if self.TICKER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTICKER>%s</%sTICKER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TICKER), input_name='TICKER')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BB_TICKER':
            BB_TICKER_ = child_.text
            BB_TICKER_ = self.gds_validate_string(BB_TICKER_, node, 'BB_TICKER')
            self.BB_TICKER = BB_TICKER_
        elif nodeName_ == 'BBGID':
            BBGID_ = child_.text
            BBGID_ = self.gds_validate_string(BBGID_, node, 'BBGID')
            self.BBGID = BBGID_
        elif nodeName_ == 'CUSIP':
            CUSIP_ = child_.text
            CUSIP_ = self.gds_validate_string(CUSIP_, node, 'CUSIP')
            self.CUSIP = CUSIP_
        elif nodeName_ == 'DXLID':
            DXLID_ = child_.text
            DXLID_ = self.gds_validate_string(DXLID_, node, 'DXLID')
            self.DXLID = DXLID_
        elif nodeName_ == 'ISIN':
            ISIN_ = child_.text
            ISIN_ = self.gds_validate_string(ISIN_, node, 'ISIN')
            self.ISIN = ISIN_
        elif nodeName_ == 'QUICK':
            QUICK_ = child_.text
            QUICK_ = self.gds_validate_string(QUICK_, node, 'QUICK')
            self.QUICK = QUICK_
        elif nodeName_ == 'SEDOL':
            SEDOL_ = child_.text
            SEDOL_ = self.gds_validate_string(SEDOL_, node, 'SEDOL')
            self.SEDOL = SEDOL_
        elif nodeName_ == 'TICKER':
            TICKER_ = child_.text
            TICKER_ = self.gds_validate_string(TICKER_, node, 'TICKER')
            self.TICKER = TICKER_
# end class InstrumentDataType164


class DataDateType165(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, DisclosureDetails=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.DisclosureDetails = DisclosureDetails
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType165)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType165.subclass:
            return DataDateType165.subclass(*args_, **kwargs_)
        else:
            return DataDateType165(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DisclosureDetails(self):
        return self.DisclosureDetails
    def set_DisclosureDetails(self, DisclosureDetails):
        self.DisclosureDetails = DisclosureDetails
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.DisclosureDetails is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType165', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType165')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType165')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType165', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType165'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType165', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DisclosureDetails is not None:
            self.DisclosureDetails.export(outfile, level, namespaceprefix_, name_='DisclosureDetails', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DisclosureDetails':
            obj_ = DisclosureDetailsType.factory(parent_object_=self)
            obj_.build(child_)
            self.DisclosureDetails = obj_
            obj_.original_tagname_ = 'DisclosureDetails'
# end class DataDateType165


class DisclosureDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CloseDate=None, Date=None, DisclosureType=None, FundName=None, PcSharesFreeFloat=None, Percentage=None, Quantity=None, RegulatoryAuthorityName=None, SuppliedType=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(CloseDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(CloseDate, '%Y-%m-%d').date()
        else:
            initvalue_ = CloseDate
        self.CloseDate = initvalue_
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.DisclosureType = DisclosureType
        self.FundName = FundName
        self.PcSharesFreeFloat = PcSharesFreeFloat
        self.Percentage = Percentage
        self.Quantity = Quantity
        self.RegulatoryAuthorityName = RegulatoryAuthorityName
        self.SuppliedType = SuppliedType
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DisclosureDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DisclosureDetailsType.subclass:
            return DisclosureDetailsType.subclass(*args_, **kwargs_)
        else:
            return DisclosureDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CloseDate(self):
        return self.CloseDate
    def set_CloseDate(self, CloseDate):
        self.CloseDate = CloseDate
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_DisclosureType(self):
        return self.DisclosureType
    def set_DisclosureType(self, DisclosureType):
        self.DisclosureType = DisclosureType
    def get_FundName(self):
        return self.FundName
    def set_FundName(self, FundName):
        self.FundName = FundName
    def get_PcSharesFreeFloat(self):
        return self.PcSharesFreeFloat
    def set_PcSharesFreeFloat(self, PcSharesFreeFloat):
        self.PcSharesFreeFloat = PcSharesFreeFloat
    def get_Percentage(self):
        return self.Percentage
    def set_Percentage(self, Percentage):
        self.Percentage = Percentage
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_RegulatoryAuthorityName(self):
        return self.RegulatoryAuthorityName
    def set_RegulatoryAuthorityName(self, RegulatoryAuthorityName):
        self.RegulatoryAuthorityName = RegulatoryAuthorityName
    def get_SuppliedType(self):
        return self.SuppliedType
    def set_SuppliedType(self, SuppliedType):
        self.SuppliedType = SuppliedType
    def hasContent_(self):
        if (
            self.CloseDate is not None or
            self.Date is not None or
            self.DisclosureType is not None or
            self.FundName is not None or
            self.PcSharesFreeFloat is not None or
            self.Percentage is not None or
            self.Quantity is not None or
            self.RegulatoryAuthorityName is not None or
            self.SuppliedType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DisclosureDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DisclosureDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DisclosureDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DisclosureDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DisclosureDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DisclosureDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CloseDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCloseDate>%s</%sCloseDate>%s' % (namespaceprefix_ , self.gds_format_date(self.CloseDate, input_name='CloseDate'), namespaceprefix_ , eol_))
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.DisclosureType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDisclosureType>%s</%sDisclosureType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DisclosureType), input_name='DisclosureType')), namespaceprefix_ , eol_))
        if self.FundName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFundName>%s</%sFundName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FundName), input_name='FundName')), namespaceprefix_ , eol_))
        if self.PcSharesFreeFloat is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcSharesFreeFloat>%s</%sPcSharesFreeFloat>%s' % (namespaceprefix_ , self.gds_format_float(self.PcSharesFreeFloat, input_name='PcSharesFreeFloat'), namespaceprefix_ , eol_))
        if self.Percentage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPercentage>%s</%sPercentage>%s' % (namespaceprefix_ , self.gds_format_float(self.Percentage, input_name='Percentage'), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.RegulatoryAuthorityName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegulatoryAuthorityName>%s</%sRegulatoryAuthorityName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegulatoryAuthorityName), input_name='RegulatoryAuthorityName')), namespaceprefix_ , eol_))
        if self.SuppliedType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSuppliedType>%s</%sSuppliedType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SuppliedType), input_name='SuppliedType')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CloseDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.CloseDate = dval_
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
        elif nodeName_ == 'DisclosureType':
            DisclosureType_ = child_.text
            DisclosureType_ = self.gds_validate_string(DisclosureType_, node, 'DisclosureType')
            self.DisclosureType = DisclosureType_
        elif nodeName_ == 'FundName':
            FundName_ = child_.text
            FundName_ = self.gds_validate_string(FundName_, node, 'FundName')
            self.FundName = FundName_
        elif nodeName_ == 'PcSharesFreeFloat' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcSharesFreeFloat')
            self.PcSharesFreeFloat = fval_
        elif nodeName_ == 'Percentage' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Percentage')
            self.Percentage = fval_
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Quantity')
            self.Quantity = fval_
        elif nodeName_ == 'RegulatoryAuthorityName':
            RegulatoryAuthorityName_ = child_.text
            RegulatoryAuthorityName_ = self.gds_validate_string(RegulatoryAuthorityName_, node, 'RegulatoryAuthorityName')
            self.RegulatoryAuthorityName = RegulatoryAuthorityName_
        elif nodeName_ == 'SuppliedType':
            SuppliedType_ = child_.text
            SuppliedType_ = self.gds_validate_string(SuppliedType_, node, 'SuppliedType')
            self.SuppliedType = SuppliedType_
# end class DisclosureDetailsType


class InstrumentDataType166(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BB_TICKER=None, BBGID=None, CUSIP=None, DXLID=None, InstrumentName=None, ISIN=None, QUICK=None, SEDOL=None, TICKER=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.BB_TICKER = BB_TICKER
        self.BBGID = BBGID
        self.CUSIP = CUSIP
        self.DXLID = DXLID
        self.InstrumentName = InstrumentName
        self.ISIN = ISIN
        self.QUICK = QUICK
        self.SEDOL = SEDOL
        self.TICKER = TICKER
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InstrumentDataType166)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InstrumentDataType166.subclass:
            return InstrumentDataType166.subclass(*args_, **kwargs_)
        else:
            return InstrumentDataType166(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BB_TICKER(self):
        return self.BB_TICKER
    def set_BB_TICKER(self, BB_TICKER):
        self.BB_TICKER = BB_TICKER
    def get_BBGID(self):
        return self.BBGID
    def set_BBGID(self, BBGID):
        self.BBGID = BBGID
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_InstrumentName(self):
        return self.InstrumentName
    def set_InstrumentName(self, InstrumentName):
        self.InstrumentName = InstrumentName
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def hasContent_(self):
        if (
            self.BB_TICKER is not None or
            self.BBGID is not None or
            self.CUSIP is not None or
            self.DXLID is not None or
            self.InstrumentName is not None or
            self.ISIN is not None or
            self.QUICK is not None or
            self.SEDOL is not None or
            self.TICKER is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentDataType166', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InstrumentDataType166')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InstrumentDataType166')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InstrumentDataType166', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InstrumentDataType166'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentDataType166', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BB_TICKER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBB_TICKER>%s</%sBB_TICKER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BB_TICKER), input_name='BB_TICKER')), namespaceprefix_ , eol_))
        if self.BBGID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBBGID>%s</%sBBGID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BBGID), input_name='BBGID')), namespaceprefix_ , eol_))
        if self.CUSIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUSIP>%s</%sCUSIP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CUSIP), input_name='CUSIP')), namespaceprefix_ , eol_))
        if self.DXLID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDXLID>%s</%sDXLID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DXLID), input_name='DXLID')), namespaceprefix_ , eol_))
        if self.InstrumentName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstrumentName>%s</%sInstrumentName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InstrumentName), input_name='InstrumentName')), namespaceprefix_ , eol_))
        if self.ISIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sISIN>%s</%sISIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ISIN), input_name='ISIN')), namespaceprefix_ , eol_))
        if self.QUICK is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQUICK>%s</%sQUICK>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QUICK), input_name='QUICK')), namespaceprefix_ , eol_))
        if self.SEDOL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSEDOL>%s</%sSEDOL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SEDOL), input_name='SEDOL')), namespaceprefix_ , eol_))
        if self.TICKER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTICKER>%s</%sTICKER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TICKER), input_name='TICKER')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BB_TICKER':
            BB_TICKER_ = child_.text
            BB_TICKER_ = self.gds_validate_string(BB_TICKER_, node, 'BB_TICKER')
            self.BB_TICKER = BB_TICKER_
        elif nodeName_ == 'BBGID':
            BBGID_ = child_.text
            BBGID_ = self.gds_validate_string(BBGID_, node, 'BBGID')
            self.BBGID = BBGID_
        elif nodeName_ == 'CUSIP':
            CUSIP_ = child_.text
            CUSIP_ = self.gds_validate_string(CUSIP_, node, 'CUSIP')
            self.CUSIP = CUSIP_
        elif nodeName_ == 'DXLID':
            DXLID_ = child_.text
            DXLID_ = self.gds_validate_string(DXLID_, node, 'DXLID')
            self.DXLID = DXLID_
        elif nodeName_ == 'InstrumentName':
            InstrumentName_ = child_.text
            InstrumentName_ = self.gds_validate_string(InstrumentName_, node, 'InstrumentName')
            self.InstrumentName = InstrumentName_
        elif nodeName_ == 'ISIN':
            ISIN_ = child_.text
            ISIN_ = self.gds_validate_string(ISIN_, node, 'ISIN')
            self.ISIN = ISIN_
        elif nodeName_ == 'QUICK':
            QUICK_ = child_.text
            QUICK_ = self.gds_validate_string(QUICK_, node, 'QUICK')
            self.QUICK = QUICK_
        elif nodeName_ == 'SEDOL':
            SEDOL_ = child_.text
            SEDOL_ = self.gds_validate_string(SEDOL_, node, 'SEDOL')
            self.SEDOL = SEDOL_
        elif nodeName_ == 'TICKER':
            TICKER_ = child_.text
            TICKER_ = self.gds_validate_string(TICKER_, node, 'TICKER')
            self.TICKER = TICKER_
# end class InstrumentDataType166


class DataDateType167(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, ExchangeDetails=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.ExchangeDetails = ExchangeDetails
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType167)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType167.subclass:
            return DataDateType167.subclass(*args_, **kwargs_)
        else:
            return DataDateType167(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ExchangeDetails(self):
        return self.ExchangeDetails
    def set_ExchangeDetails(self, ExchangeDetails):
        self.ExchangeDetails = ExchangeDetails
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.ExchangeDetails is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType167', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType167')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType167')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType167', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType167'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType167', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ExchangeDetails is not None:
            self.ExchangeDetails.export(outfile, level, namespaceprefix_, name_='ExchangeDetails', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ExchangeDetails':
            obj_ = ExchangeDetailsType.factory(parent_object_=self)
            obj_.build(child_)
            self.ExchangeDetails = obj_
            obj_.original_tagname_ = 'ExchangeDetails'
# end class DataDateType167


class ExchangeDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Date=None, DisseminationDate=None, ForecastDate=None, ForecastQuantity=None, ForecastQuantityAsPcOfFreeFloat=None, ForecastQuantityAsPcOfSharesOutstanding=None, PcSharesFreeFloat=None, Percentage=None, Quantity=None, RegulatoryAuthorityName=None, Source=None, Type=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        if isinstance(DisseminationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DisseminationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DisseminationDate
        self.DisseminationDate = initvalue_
        if isinstance(ForecastDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ForecastDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ForecastDate
        self.ForecastDate = initvalue_
        self.ForecastQuantity = ForecastQuantity
        self.ForecastQuantityAsPcOfFreeFloat = ForecastQuantityAsPcOfFreeFloat
        self.ForecastQuantityAsPcOfSharesOutstanding = ForecastQuantityAsPcOfSharesOutstanding
        self.PcSharesFreeFloat = PcSharesFreeFloat
        self.Percentage = Percentage
        self.Quantity = Quantity
        self.RegulatoryAuthorityName = RegulatoryAuthorityName
        self.Source = Source
        self.Type = Type
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExchangeDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExchangeDetailsType.subclass:
            return ExchangeDetailsType.subclass(*args_, **kwargs_)
        else:
            return ExchangeDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_DisseminationDate(self):
        return self.DisseminationDate
    def set_DisseminationDate(self, DisseminationDate):
        self.DisseminationDate = DisseminationDate
    def get_ForecastDate(self):
        return self.ForecastDate
    def set_ForecastDate(self, ForecastDate):
        self.ForecastDate = ForecastDate
    def get_ForecastQuantity(self):
        return self.ForecastQuantity
    def set_ForecastQuantity(self, ForecastQuantity):
        self.ForecastQuantity = ForecastQuantity
    def get_ForecastQuantityAsPcOfFreeFloat(self):
        return self.ForecastQuantityAsPcOfFreeFloat
    def set_ForecastQuantityAsPcOfFreeFloat(self, ForecastQuantityAsPcOfFreeFloat):
        self.ForecastQuantityAsPcOfFreeFloat = ForecastQuantityAsPcOfFreeFloat
    def get_ForecastQuantityAsPcOfSharesOutstanding(self):
        return self.ForecastQuantityAsPcOfSharesOutstanding
    def set_ForecastQuantityAsPcOfSharesOutstanding(self, ForecastQuantityAsPcOfSharesOutstanding):
        self.ForecastQuantityAsPcOfSharesOutstanding = ForecastQuantityAsPcOfSharesOutstanding
    def get_PcSharesFreeFloat(self):
        return self.PcSharesFreeFloat
    def set_PcSharesFreeFloat(self, PcSharesFreeFloat):
        self.PcSharesFreeFloat = PcSharesFreeFloat
    def get_Percentage(self):
        return self.Percentage
    def set_Percentage(self, Percentage):
        self.Percentage = Percentage
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_RegulatoryAuthorityName(self):
        return self.RegulatoryAuthorityName
    def set_RegulatoryAuthorityName(self, RegulatoryAuthorityName):
        self.RegulatoryAuthorityName = RegulatoryAuthorityName
    def get_Source(self):
        return self.Source
    def set_Source(self, Source):
        self.Source = Source
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def hasContent_(self):
        if (
            self.Date is not None or
            self.DisseminationDate is not None or
            self.ForecastDate is not None or
            self.ForecastQuantity is not None or
            self.ForecastQuantityAsPcOfFreeFloat is not None or
            self.ForecastQuantityAsPcOfSharesOutstanding is not None or
            self.PcSharesFreeFloat is not None or
            self.Percentage is not None or
            self.Quantity is not None or
            self.RegulatoryAuthorityName is not None or
            self.Source is not None or
            self.Type is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExchangeDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExchangeDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ExchangeDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ExchangeDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ExchangeDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExchangeDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.DisseminationDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDisseminationDate>%s</%sDisseminationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DisseminationDate, input_name='DisseminationDate'), namespaceprefix_ , eol_))
        if self.ForecastDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sForecastDate>%s</%sForecastDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ForecastDate, input_name='ForecastDate'), namespaceprefix_ , eol_))
        if self.ForecastQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sForecastQuantity>%s</%sForecastQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.ForecastQuantity, input_name='ForecastQuantity'), namespaceprefix_ , eol_))
        if self.ForecastQuantityAsPcOfFreeFloat is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sForecastQuantityAsPcOfFreeFloat>%s</%sForecastQuantityAsPcOfFreeFloat>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ForecastQuantityAsPcOfFreeFloat), input_name='ForecastQuantityAsPcOfFreeFloat')), namespaceprefix_ , eol_))
        if self.ForecastQuantityAsPcOfSharesOutstanding is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sForecastQuantityAsPcOfSharesOutstanding>%s</%sForecastQuantityAsPcOfSharesOutstanding>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ForecastQuantityAsPcOfSharesOutstanding), input_name='ForecastQuantityAsPcOfSharesOutstanding')), namespaceprefix_ , eol_))
        if self.PcSharesFreeFloat is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPcSharesFreeFloat>%s</%sPcSharesFreeFloat>%s' % (namespaceprefix_ , self.gds_format_float(self.PcSharesFreeFloat, input_name='PcSharesFreeFloat'), namespaceprefix_ , eol_))
        if self.Percentage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPercentage>%s</%sPercentage>%s' % (namespaceprefix_ , self.gds_format_float(self.Percentage, input_name='Percentage'), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.RegulatoryAuthorityName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegulatoryAuthorityName>%s</%sRegulatoryAuthorityName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegulatoryAuthorityName), input_name='RegulatoryAuthorityName')), namespaceprefix_ , eol_))
        if self.Source is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSource>%s</%sSource>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Source), input_name='Source')), namespaceprefix_ , eol_))
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
        elif nodeName_ == 'DisseminationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DisseminationDate = dval_
        elif nodeName_ == 'ForecastDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ForecastDate = dval_
        elif nodeName_ == 'ForecastQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ForecastQuantity')
            self.ForecastQuantity = fval_
        elif nodeName_ == 'ForecastQuantityAsPcOfFreeFloat':
            ForecastQuantityAsPcOfFreeFloat_ = child_.text
            ForecastQuantityAsPcOfFreeFloat_ = self.gds_validate_string(ForecastQuantityAsPcOfFreeFloat_, node, 'ForecastQuantityAsPcOfFreeFloat')
            self.ForecastQuantityAsPcOfFreeFloat = ForecastQuantityAsPcOfFreeFloat_
        elif nodeName_ == 'ForecastQuantityAsPcOfSharesOutstanding':
            ForecastQuantityAsPcOfSharesOutstanding_ = child_.text
            ForecastQuantityAsPcOfSharesOutstanding_ = self.gds_validate_string(ForecastQuantityAsPcOfSharesOutstanding_, node, 'ForecastQuantityAsPcOfSharesOutstanding')
            self.ForecastQuantityAsPcOfSharesOutstanding = ForecastQuantityAsPcOfSharesOutstanding_
        elif nodeName_ == 'PcSharesFreeFloat' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PcSharesFreeFloat')
            self.PcSharesFreeFloat = fval_
        elif nodeName_ == 'Percentage' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Percentage')
            self.Percentage = fval_
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Quantity')
            self.Quantity = fval_
        elif nodeName_ == 'RegulatoryAuthorityName':
            RegulatoryAuthorityName_ = child_.text
            RegulatoryAuthorityName_ = self.gds_validate_string(RegulatoryAuthorityName_, node, 'RegulatoryAuthorityName')
            self.RegulatoryAuthorityName = RegulatoryAuthorityName_
        elif nodeName_ == 'Source':
            Source_ = child_.text
            Source_ = self.gds_validate_string(Source_, node, 'Source')
            self.Source = Source_
        elif nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
# end class ExchangeDetailsType


class InstrumentDataType168(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BB_TICKER=None, BBGID=None, CUSIP=None, DXLID=None, InstrumentName=None, ISIN=None, QUICK=None, SEDOL=None, TICKER=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.BB_TICKER = BB_TICKER
        self.BBGID = BBGID
        self.CUSIP = CUSIP
        self.DXLID = DXLID
        self.InstrumentName = InstrumentName
        self.ISIN = ISIN
        self.QUICK = QUICK
        self.SEDOL = SEDOL
        self.TICKER = TICKER
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InstrumentDataType168)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InstrumentDataType168.subclass:
            return InstrumentDataType168.subclass(*args_, **kwargs_)
        else:
            return InstrumentDataType168(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BB_TICKER(self):
        return self.BB_TICKER
    def set_BB_TICKER(self, BB_TICKER):
        self.BB_TICKER = BB_TICKER
    def get_BBGID(self):
        return self.BBGID
    def set_BBGID(self, BBGID):
        self.BBGID = BBGID
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_InstrumentName(self):
        return self.InstrumentName
    def set_InstrumentName(self, InstrumentName):
        self.InstrumentName = InstrumentName
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def hasContent_(self):
        if (
            self.BB_TICKER is not None or
            self.BBGID is not None or
            self.CUSIP is not None or
            self.DXLID is not None or
            self.InstrumentName is not None or
            self.ISIN is not None or
            self.QUICK is not None or
            self.SEDOL is not None or
            self.TICKER is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentDataType168', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InstrumentDataType168')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InstrumentDataType168')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InstrumentDataType168', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InstrumentDataType168'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentDataType168', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BB_TICKER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBB_TICKER>%s</%sBB_TICKER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BB_TICKER), input_name='BB_TICKER')), namespaceprefix_ , eol_))
        if self.BBGID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBBGID>%s</%sBBGID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BBGID), input_name='BBGID')), namespaceprefix_ , eol_))
        if self.CUSIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUSIP>%s</%sCUSIP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CUSIP), input_name='CUSIP')), namespaceprefix_ , eol_))
        if self.DXLID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDXLID>%s</%sDXLID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DXLID), input_name='DXLID')), namespaceprefix_ , eol_))
        if self.InstrumentName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstrumentName>%s</%sInstrumentName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InstrumentName), input_name='InstrumentName')), namespaceprefix_ , eol_))
        if self.ISIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sISIN>%s</%sISIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ISIN), input_name='ISIN')), namespaceprefix_ , eol_))
        if self.QUICK is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQUICK>%s</%sQUICK>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QUICK), input_name='QUICK')), namespaceprefix_ , eol_))
        if self.SEDOL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSEDOL>%s</%sSEDOL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SEDOL), input_name='SEDOL')), namespaceprefix_ , eol_))
        if self.TICKER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTICKER>%s</%sTICKER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TICKER), input_name='TICKER')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BB_TICKER':
            BB_TICKER_ = child_.text
            BB_TICKER_ = self.gds_validate_string(BB_TICKER_, node, 'BB_TICKER')
            self.BB_TICKER = BB_TICKER_
        elif nodeName_ == 'BBGID':
            BBGID_ = child_.text
            BBGID_ = self.gds_validate_string(BBGID_, node, 'BBGID')
            self.BBGID = BBGID_
        elif nodeName_ == 'CUSIP':
            CUSIP_ = child_.text
            CUSIP_ = self.gds_validate_string(CUSIP_, node, 'CUSIP')
            self.CUSIP = CUSIP_
        elif nodeName_ == 'DXLID':
            DXLID_ = child_.text
            DXLID_ = self.gds_validate_string(DXLID_, node, 'DXLID')
            self.DXLID = DXLID_
        elif nodeName_ == 'InstrumentName':
            InstrumentName_ = child_.text
            InstrumentName_ = self.gds_validate_string(InstrumentName_, node, 'InstrumentName')
            self.InstrumentName = InstrumentName_
        elif nodeName_ == 'ISIN':
            ISIN_ = child_.text
            ISIN_ = self.gds_validate_string(ISIN_, node, 'ISIN')
            self.ISIN = ISIN_
        elif nodeName_ == 'QUICK':
            QUICK_ = child_.text
            QUICK_ = self.gds_validate_string(QUICK_, node, 'QUICK')
            self.QUICK = QUICK_
        elif nodeName_ == 'SEDOL':
            SEDOL_ = child_.text
            SEDOL_ = self.gds_validate_string(SEDOL_, node, 'SEDOL')
            self.SEDOL = SEDOL_
        elif nodeName_ == 'TICKER':
            TICKER_ = child_.text
            TICKER_ = self.gds_validate_string(TICKER_, node, 'TICKER')
            self.TICKER = TICKER_
# end class InstrumentDataType168


class DataDateType169(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType169)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType169.subclass:
            return DataDateType169.subclass(*args_, **kwargs_)
        else:
            return DataDateType169(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType169', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType169')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType169')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType169', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType169'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType169', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType170.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType169


class GeneralType170(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Backwardation=None, Date=None, Fee=None, LongQuantity=None, LongValue=None, NetQuantity=None, NetValue=None, Restriction=None, SettlementDate=None, Source=None, StockLoanQuantity=None, StockLoanValue=None, TradeDate=None, UpperLimit=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Backwardation = Backwardation
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.Fee = Fee
        self.LongQuantity = LongQuantity
        self.LongValue = LongValue
        self.NetQuantity = NetQuantity
        self.NetValue = NetValue
        self.Restriction = Restriction
        if isinstance(SettlementDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(SettlementDate, '%Y-%m-%d').date()
        else:
            initvalue_ = SettlementDate
        self.SettlementDate = initvalue_
        self.Source = Source
        self.StockLoanQuantity = StockLoanQuantity
        self.StockLoanValue = StockLoanValue
        if isinstance(TradeDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TradeDate, '%Y-%m-%d').date()
        else:
            initvalue_ = TradeDate
        self.TradeDate = initvalue_
        self.UpperLimit = UpperLimit
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType170)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType170.subclass:
            return GeneralType170.subclass(*args_, **kwargs_)
        else:
            return GeneralType170(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Backwardation(self):
        return self.Backwardation
    def set_Backwardation(self, Backwardation):
        self.Backwardation = Backwardation
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_Fee(self):
        return self.Fee
    def set_Fee(self, Fee):
        self.Fee = Fee
    def get_LongQuantity(self):
        return self.LongQuantity
    def set_LongQuantity(self, LongQuantity):
        self.LongQuantity = LongQuantity
    def get_LongValue(self):
        return self.LongValue
    def set_LongValue(self, LongValue):
        self.LongValue = LongValue
    def get_NetQuantity(self):
        return self.NetQuantity
    def set_NetQuantity(self, NetQuantity):
        self.NetQuantity = NetQuantity
    def get_NetValue(self):
        return self.NetValue
    def set_NetValue(self, NetValue):
        self.NetValue = NetValue
    def get_Restriction(self):
        return self.Restriction
    def set_Restriction(self, Restriction):
        self.Restriction = Restriction
    def get_SettlementDate(self):
        return self.SettlementDate
    def set_SettlementDate(self, SettlementDate):
        self.SettlementDate = SettlementDate
    def get_Source(self):
        return self.Source
    def set_Source(self, Source):
        self.Source = Source
    def get_StockLoanQuantity(self):
        return self.StockLoanQuantity
    def set_StockLoanQuantity(self, StockLoanQuantity):
        self.StockLoanQuantity = StockLoanQuantity
    def get_StockLoanValue(self):
        return self.StockLoanValue
    def set_StockLoanValue(self, StockLoanValue):
        self.StockLoanValue = StockLoanValue
    def get_TradeDate(self):
        return self.TradeDate
    def set_TradeDate(self, TradeDate):
        self.TradeDate = TradeDate
    def get_UpperLimit(self):
        return self.UpperLimit
    def set_UpperLimit(self, UpperLimit):
        self.UpperLimit = UpperLimit
    def hasContent_(self):
        if (
            self.Backwardation is not None or
            self.Date is not None or
            self.Fee is not None or
            self.LongQuantity is not None or
            self.LongValue is not None or
            self.NetQuantity is not None or
            self.NetValue is not None or
            self.Restriction is not None or
            self.SettlementDate is not None or
            self.Source is not None or
            self.StockLoanQuantity is not None or
            self.StockLoanValue is not None or
            self.TradeDate is not None or
            self.UpperLimit is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType170', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType170')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType170')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType170', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType170'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType170', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Backwardation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBackwardation>%s</%sBackwardation>%s' % (namespaceprefix_ , self.gds_format_float(self.Backwardation, input_name='Backwardation'), namespaceprefix_ , eol_))
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.Fee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFee>%s</%sFee>%s' % (namespaceprefix_ , self.gds_format_float(self.Fee, input_name='Fee'), namespaceprefix_ , eol_))
        if self.LongQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLongQuantity>%s</%sLongQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.LongQuantity, input_name='LongQuantity'), namespaceprefix_ , eol_))
        if self.LongValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLongValue>%s</%sLongValue>%s' % (namespaceprefix_ , self.gds_format_float(self.LongValue, input_name='LongValue'), namespaceprefix_ , eol_))
        if self.NetQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNetQuantity>%s</%sNetQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.NetQuantity, input_name='NetQuantity'), namespaceprefix_ , eol_))
        if self.NetValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNetValue>%s</%sNetValue>%s' % (namespaceprefix_ , self.gds_format_float(self.NetValue, input_name='NetValue'), namespaceprefix_ , eol_))
        if self.Restriction is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRestriction>%s</%sRestriction>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Restriction), input_name='Restriction')), namespaceprefix_ , eol_))
        if self.SettlementDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSettlementDate>%s</%sSettlementDate>%s' % (namespaceprefix_ , self.gds_format_date(self.SettlementDate, input_name='SettlementDate'), namespaceprefix_ , eol_))
        if self.Source is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSource>%s</%sSource>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Source), input_name='Source')), namespaceprefix_ , eol_))
        if self.StockLoanQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStockLoanQuantity>%s</%sStockLoanQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.StockLoanQuantity, input_name='StockLoanQuantity'), namespaceprefix_ , eol_))
        if self.StockLoanValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStockLoanValue>%s</%sStockLoanValue>%s' % (namespaceprefix_ , self.gds_format_float(self.StockLoanValue, input_name='StockLoanValue'), namespaceprefix_ , eol_))
        if self.TradeDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradeDate>%s</%sTradeDate>%s' % (namespaceprefix_ , self.gds_format_date(self.TradeDate, input_name='TradeDate'), namespaceprefix_ , eol_))
        if self.UpperLimit is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUpperLimit>%s</%sUpperLimit>%s' % (namespaceprefix_ , self.gds_format_float(self.UpperLimit, input_name='UpperLimit'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Backwardation' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Backwardation')
            self.Backwardation = fval_
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
        elif nodeName_ == 'Fee' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Fee')
            self.Fee = fval_
        elif nodeName_ == 'LongQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LongQuantity')
            self.LongQuantity = fval_
        elif nodeName_ == 'LongValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LongValue')
            self.LongValue = fval_
        elif nodeName_ == 'NetQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NetQuantity')
            self.NetQuantity = fval_
        elif nodeName_ == 'NetValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NetValue')
            self.NetValue = fval_
        elif nodeName_ == 'Restriction':
            Restriction_ = child_.text
            Restriction_ = self.gds_validate_string(Restriction_, node, 'Restriction')
            self.Restriction = Restriction_
        elif nodeName_ == 'SettlementDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.SettlementDate = dval_
        elif nodeName_ == 'Source':
            Source_ = child_.text
            Source_ = self.gds_validate_string(Source_, node, 'Source')
            self.Source = Source_
        elif nodeName_ == 'StockLoanQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'StockLoanQuantity')
            self.StockLoanQuantity = fval_
        elif nodeName_ == 'StockLoanValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'StockLoanValue')
            self.StockLoanValue = fval_
        elif nodeName_ == 'TradeDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TradeDate = dval_
        elif nodeName_ == 'UpperLimit' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'UpperLimit')
            self.UpperLimit = fval_
# end class GeneralType170


class GeneralType171(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Currency=None, DXLID=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Currency = Currency
        self.DXLID = DXLID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType171)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType171.subclass:
            return GeneralType171.subclass(*args_, **kwargs_)
        else:
            return GeneralType171(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Currency(self):
        return self.Currency
    def set_Currency(self, Currency):
        self.Currency = Currency
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def hasContent_(self):
        if (
            self.Currency is not None or
            self.DXLID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType171', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType171')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType171')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType171', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType171'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType171', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrency>%s</%sCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Currency), input_name='Currency')), namespaceprefix_ , eol_))
        if self.DXLID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDXLID>%s</%sDXLID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DXLID), input_name='DXLID')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Currency':
            Currency_ = child_.text
            Currency_ = self.gds_validate_string(Currency_, node, 'Currency')
            self.Currency = Currency_
        elif nodeName_ == 'DXLID':
            DXLID_ = child_.text
            DXLID_ = self.gds_validate_string(DXLID_, node, 'DXLID')
            self.DXLID = DXLID_
# end class GeneralType171


class DataDateType172(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType172)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType172.subclass:
            return DataDateType172.subclass(*args_, **kwargs_)
        else:
            return DataDateType172(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType172', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType172')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType172')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType172', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType172'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType172', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType173.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType172


class GeneralType173(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Author=None, Body=None, BusinessDate=None, Category=None, DXLIDs=None, FirstPublishDateTime=None, Headline=None, Link=None, MappedIdentifiers=None, NewsIdentifier=None, PublishDateTime=None, Source=None, TagList=None, Type=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Author = Author
        self.Body = Body
        self.BusinessDate = BusinessDate
        self.Category = Category
        self.DXLIDs = DXLIDs
        self.FirstPublishDateTime = FirstPublishDateTime
        self.Headline = Headline
        self.Link = Link
        self.MappedIdentifiers = MappedIdentifiers
        self.NewsIdentifier = NewsIdentifier
        self.PublishDateTime = PublishDateTime
        self.Source = Source
        self.TagList = TagList
        self.Type = Type
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType173)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType173.subclass:
            return GeneralType173.subclass(*args_, **kwargs_)
        else:
            return GeneralType173(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Author(self):
        return self.Author
    def set_Author(self, Author):
        self.Author = Author
    def get_Body(self):
        return self.Body
    def set_Body(self, Body):
        self.Body = Body
    def get_BusinessDate(self):
        return self.BusinessDate
    def set_BusinessDate(self, BusinessDate):
        self.BusinessDate = BusinessDate
    def get_Category(self):
        return self.Category
    def set_Category(self, Category):
        self.Category = Category
    def get_DXLIDs(self):
        return self.DXLIDs
    def set_DXLIDs(self, DXLIDs):
        self.DXLIDs = DXLIDs
    def get_FirstPublishDateTime(self):
        return self.FirstPublishDateTime
    def set_FirstPublishDateTime(self, FirstPublishDateTime):
        self.FirstPublishDateTime = FirstPublishDateTime
    def get_Headline(self):
        return self.Headline
    def set_Headline(self, Headline):
        self.Headline = Headline
    def get_Link(self):
        return self.Link
    def set_Link(self, Link):
        self.Link = Link
    def get_MappedIdentifiers(self):
        return self.MappedIdentifiers
    def set_MappedIdentifiers(self, MappedIdentifiers):
        self.MappedIdentifiers = MappedIdentifiers
    def get_NewsIdentifier(self):
        return self.NewsIdentifier
    def set_NewsIdentifier(self, NewsIdentifier):
        self.NewsIdentifier = NewsIdentifier
    def get_PublishDateTime(self):
        return self.PublishDateTime
    def set_PublishDateTime(self, PublishDateTime):
        self.PublishDateTime = PublishDateTime
    def get_Source(self):
        return self.Source
    def set_Source(self, Source):
        self.Source = Source
    def get_TagList(self):
        return self.TagList
    def set_TagList(self, TagList):
        self.TagList = TagList
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def hasContent_(self):
        if (
            self.Author is not None or
            self.Body is not None or
            self.BusinessDate is not None or
            self.Category is not None or
            self.DXLIDs is not None or
            self.FirstPublishDateTime is not None or
            self.Headline is not None or
            self.Link is not None or
            self.MappedIdentifiers is not None or
            self.NewsIdentifier is not None or
            self.PublishDateTime is not None or
            self.Source is not None or
            self.TagList is not None or
            self.Type is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType173', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType173')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType173')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType173', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType173'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType173', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Author is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthor>%s</%sAuthor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Author), input_name='Author')), namespaceprefix_ , eol_))
        if self.Body is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBody>%s</%sBody>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Body), input_name='Body')), namespaceprefix_ , eol_))
        if self.BusinessDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBusinessDate>%s</%sBusinessDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BusinessDate), input_name='BusinessDate')), namespaceprefix_ , eol_))
        if self.Category is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCategory>%s</%sCategory>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Category), input_name='Category')), namespaceprefix_ , eol_))
        if self.DXLIDs is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDXLIDs>%s</%sDXLIDs>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DXLIDs), input_name='DXLIDs')), namespaceprefix_ , eol_))
        if self.FirstPublishDateTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFirstPublishDateTime>%s</%sFirstPublishDateTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FirstPublishDateTime), input_name='FirstPublishDateTime')), namespaceprefix_ , eol_))
        if self.Headline is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHeadline>%s</%sHeadline>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Headline), input_name='Headline')), namespaceprefix_ , eol_))
        if self.Link is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLink>%s</%sLink>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Link), input_name='Link')), namespaceprefix_ , eol_))
        if self.MappedIdentifiers is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMappedIdentifiers>%s</%sMappedIdentifiers>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MappedIdentifiers), input_name='MappedIdentifiers')), namespaceprefix_ , eol_))
        if self.NewsIdentifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNewsIdentifier>%s</%sNewsIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NewsIdentifier), input_name='NewsIdentifier')), namespaceprefix_ , eol_))
        if self.PublishDateTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPublishDateTime>%s</%sPublishDateTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PublishDateTime), input_name='PublishDateTime')), namespaceprefix_ , eol_))
        if self.Source is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSource>%s</%sSource>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Source), input_name='Source')), namespaceprefix_ , eol_))
        if self.TagList is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTagList>%s</%sTagList>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TagList), input_name='TagList')), namespaceprefix_ , eol_))
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Author':
            Author_ = child_.text
            Author_ = self.gds_validate_string(Author_, node, 'Author')
            self.Author = Author_
        elif nodeName_ == 'Body':
            Body_ = child_.text
            Body_ = self.gds_validate_string(Body_, node, 'Body')
            self.Body = Body_
        elif nodeName_ == 'BusinessDate':
            BusinessDate_ = child_.text
            BusinessDate_ = self.gds_validate_string(BusinessDate_, node, 'BusinessDate')
            self.BusinessDate = BusinessDate_
        elif nodeName_ == 'Category':
            Category_ = child_.text
            Category_ = self.gds_validate_string(Category_, node, 'Category')
            self.Category = Category_
        elif nodeName_ == 'DXLIDs':
            DXLIDs_ = child_.text
            DXLIDs_ = self.gds_validate_string(DXLIDs_, node, 'DXLIDs')
            self.DXLIDs = DXLIDs_
        elif nodeName_ == 'FirstPublishDateTime':
            FirstPublishDateTime_ = child_.text
            FirstPublishDateTime_ = self.gds_validate_string(FirstPublishDateTime_, node, 'FirstPublishDateTime')
            self.FirstPublishDateTime = FirstPublishDateTime_
        elif nodeName_ == 'Headline':
            Headline_ = child_.text
            Headline_ = self.gds_validate_string(Headline_, node, 'Headline')
            self.Headline = Headline_
        elif nodeName_ == 'Link':
            Link_ = child_.text
            Link_ = self.gds_validate_string(Link_, node, 'Link')
            self.Link = Link_
        elif nodeName_ == 'MappedIdentifiers':
            MappedIdentifiers_ = child_.text
            MappedIdentifiers_ = self.gds_validate_string(MappedIdentifiers_, node, 'MappedIdentifiers')
            self.MappedIdentifiers = MappedIdentifiers_
        elif nodeName_ == 'NewsIdentifier':
            NewsIdentifier_ = child_.text
            NewsIdentifier_ = self.gds_validate_string(NewsIdentifier_, node, 'NewsIdentifier')
            self.NewsIdentifier = NewsIdentifier_
        elif nodeName_ == 'PublishDateTime':
            PublishDateTime_ = child_.text
            PublishDateTime_ = self.gds_validate_string(PublishDateTime_, node, 'PublishDateTime')
            self.PublishDateTime = PublishDateTime_
        elif nodeName_ == 'Source':
            Source_ = child_.text
            Source_ = self.gds_validate_string(Source_, node, 'Source')
            self.Source = Source_
        elif nodeName_ == 'TagList':
            TagList_ = child_.text
            TagList_ = self.gds_validate_string(TagList_, node, 'TagList')
            self.TagList = TagList_
        elif nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
# end class GeneralType173


class DataDateType174(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType174)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType174.subclass:
            return DataDateType174.subclass(*args_, **kwargs_)
        else:
            return DataDateType174(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType174', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType174')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType174')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType174', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType174'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType174', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType175.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType174


class GeneralType175(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AccountCode=None, AccountName=None, AccountPath=None, Counterpart=None, CounterpartCode=None, PeerGroup=None, Search_bloombergCode=None, Search_clusterId=None, Search_instrumentId=None, Search_instrumentName=None, Search_ricCode=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.AccountCode = AccountCode
        self.AccountName = AccountName
        self.AccountPath = AccountPath
        self.Counterpart = Counterpart
        self.CounterpartCode = CounterpartCode
        self.PeerGroup = PeerGroup
        self.Search_bloombergCode = Search_bloombergCode
        self.Search_clusterId = Search_clusterId
        self.Search_instrumentId = Search_instrumentId
        self.Search_instrumentName = Search_instrumentName
        self.Search_ricCode = Search_ricCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType175)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType175.subclass:
            return GeneralType175.subclass(*args_, **kwargs_)
        else:
            return GeneralType175(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AccountCode(self):
        return self.AccountCode
    def set_AccountCode(self, AccountCode):
        self.AccountCode = AccountCode
    def get_AccountName(self):
        return self.AccountName
    def set_AccountName(self, AccountName):
        self.AccountName = AccountName
    def get_AccountPath(self):
        return self.AccountPath
    def set_AccountPath(self, AccountPath):
        self.AccountPath = AccountPath
    def get_Counterpart(self):
        return self.Counterpart
    def set_Counterpart(self, Counterpart):
        self.Counterpart = Counterpart
    def get_CounterpartCode(self):
        return self.CounterpartCode
    def set_CounterpartCode(self, CounterpartCode):
        self.CounterpartCode = CounterpartCode
    def get_PeerGroup(self):
        return self.PeerGroup
    def set_PeerGroup(self, PeerGroup):
        self.PeerGroup = PeerGroup
    def get_Search_bloombergCode(self):
        return self.Search_bloombergCode
    def set_Search_bloombergCode(self, Search_bloombergCode):
        self.Search_bloombergCode = Search_bloombergCode
    def get_Search_clusterId(self):
        return self.Search_clusterId
    def set_Search_clusterId(self, Search_clusterId):
        self.Search_clusterId = Search_clusterId
    def get_Search_instrumentId(self):
        return self.Search_instrumentId
    def set_Search_instrumentId(self, Search_instrumentId):
        self.Search_instrumentId = Search_instrumentId
    def get_Search_instrumentName(self):
        return self.Search_instrumentName
    def set_Search_instrumentName(self, Search_instrumentName):
        self.Search_instrumentName = Search_instrumentName
    def get_Search_ricCode(self):
        return self.Search_ricCode
    def set_Search_ricCode(self, Search_ricCode):
        self.Search_ricCode = Search_ricCode
    def hasContent_(self):
        if (
            self.AccountCode is not None or
            self.AccountName is not None or
            self.AccountPath is not None or
            self.Counterpart is not None or
            self.CounterpartCode is not None or
            self.PeerGroup is not None or
            self.Search_bloombergCode is not None or
            self.Search_clusterId is not None or
            self.Search_instrumentId is not None or
            self.Search_instrumentName is not None or
            self.Search_ricCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType175', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType175')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType175')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType175', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType175'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType175', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountCode>%s</%sAccountCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountCode), input_name='AccountCode')), namespaceprefix_ , eol_))
        if self.AccountName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountName>%s</%sAccountName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountName), input_name='AccountName')), namespaceprefix_ , eol_))
        if self.AccountPath is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountPath>%s</%sAccountPath>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountPath), input_name='AccountPath')), namespaceprefix_ , eol_))
        if self.Counterpart is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCounterpart>%s</%sCounterpart>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Counterpart), input_name='Counterpart')), namespaceprefix_ , eol_))
        if self.CounterpartCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCounterpartCode>%s</%sCounterpartCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CounterpartCode), input_name='CounterpartCode')), namespaceprefix_ , eol_))
        if self.PeerGroup is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPeerGroup>%s</%sPeerGroup>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PeerGroup), input_name='PeerGroup')), namespaceprefix_ , eol_))
        if self.Search_bloombergCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSearch_bloombergCode>%s</%sSearch_bloombergCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Search_bloombergCode), input_name='Search_bloombergCode')), namespaceprefix_ , eol_))
        if self.Search_clusterId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSearch_clusterId>%s</%sSearch_clusterId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Search_clusterId), input_name='Search_clusterId')), namespaceprefix_ , eol_))
        if self.Search_instrumentId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSearch_instrumentId>%s</%sSearch_instrumentId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Search_instrumentId), input_name='Search_instrumentId')), namespaceprefix_ , eol_))
        if self.Search_instrumentName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSearch_instrumentName>%s</%sSearch_instrumentName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Search_instrumentName), input_name='Search_instrumentName')), namespaceprefix_ , eol_))
        if self.Search_ricCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSearch_ricCode>%s</%sSearch_ricCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Search_ricCode), input_name='Search_ricCode')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AccountCode':
            AccountCode_ = child_.text
            AccountCode_ = self.gds_validate_string(AccountCode_, node, 'AccountCode')
            self.AccountCode = AccountCode_
        elif nodeName_ == 'AccountName':
            AccountName_ = child_.text
            AccountName_ = self.gds_validate_string(AccountName_, node, 'AccountName')
            self.AccountName = AccountName_
        elif nodeName_ == 'AccountPath':
            AccountPath_ = child_.text
            AccountPath_ = self.gds_validate_string(AccountPath_, node, 'AccountPath')
            self.AccountPath = AccountPath_
        elif nodeName_ == 'Counterpart':
            Counterpart_ = child_.text
            Counterpart_ = self.gds_validate_string(Counterpart_, node, 'Counterpart')
            self.Counterpart = Counterpart_
        elif nodeName_ == 'CounterpartCode':
            CounterpartCode_ = child_.text
            CounterpartCode_ = self.gds_validate_string(CounterpartCode_, node, 'CounterpartCode')
            self.CounterpartCode = CounterpartCode_
        elif nodeName_ == 'PeerGroup':
            PeerGroup_ = child_.text
            PeerGroup_ = self.gds_validate_string(PeerGroup_, node, 'PeerGroup')
            self.PeerGroup = PeerGroup_
        elif nodeName_ == 'Search_bloombergCode':
            Search_bloombergCode_ = child_.text
            Search_bloombergCode_ = self.gds_validate_string(Search_bloombergCode_, node, 'Search_bloombergCode')
            self.Search_bloombergCode = Search_bloombergCode_
        elif nodeName_ == 'Search_clusterId':
            Search_clusterId_ = child_.text
            Search_clusterId_ = self.gds_validate_string(Search_clusterId_, node, 'Search_clusterId')
            self.Search_clusterId = Search_clusterId_
        elif nodeName_ == 'Search_instrumentId':
            Search_instrumentId_ = child_.text
            Search_instrumentId_ = self.gds_validate_string(Search_instrumentId_, node, 'Search_instrumentId')
            self.Search_instrumentId = Search_instrumentId_
        elif nodeName_ == 'Search_instrumentName':
            Search_instrumentName_ = child_.text
            Search_instrumentName_ = self.gds_validate_string(Search_instrumentName_, node, 'Search_instrumentName')
            self.Search_instrumentName = Search_instrumentName_
        elif nodeName_ == 'Search_ricCode':
            Search_ricCode_ = child_.text
            Search_ricCode_ = self.gds_validate_string(Search_ricCode_, node, 'Search_ricCode')
            self.Search_ricCode = Search_ricCode_
# end class GeneralType175


class GeneralType176(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BB_TICKER=None, BBGID=None, CUSIP=None, DXLID=None, EXCHANGE=None, Headline=None, InstrumentName=None, InstrumentType=None, ISIN=None, MarketArea=None, MarketAreaHierarchyName=None, MarketAreaLevel=None, MarketAreaName=None, MarketPath=None, NewsIdentifier=None, PortfolioID=None, PortfolioName=None, PublishDateTime=None, QUICK=None, RegionMarketArea=None, Sector=None, SectorName=None, SEDOL=None, TICKER=None, TICKERCODE=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.BB_TICKER = BB_TICKER
        self.BBGID = BBGID
        self.CUSIP = CUSIP
        self.DXLID = DXLID
        self.EXCHANGE = EXCHANGE
        self.Headline = Headline
        self.InstrumentName = InstrumentName
        self.InstrumentType = InstrumentType
        self.ISIN = ISIN
        self.MarketArea = MarketArea
        self.MarketAreaHierarchyName = MarketAreaHierarchyName
        self.MarketAreaLevel = MarketAreaLevel
        self.MarketAreaName = MarketAreaName
        self.MarketPath = MarketPath
        self.NewsIdentifier = NewsIdentifier
        self.PortfolioID = PortfolioID
        self.PortfolioName = PortfolioName
        if isinstance(PublishDateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(PublishDateTime, '%Y-%m-%d').date()
        else:
            initvalue_ = PublishDateTime
        self.PublishDateTime = initvalue_
        self.QUICK = QUICK
        self.RegionMarketArea = RegionMarketArea
        self.Sector = Sector
        self.SectorName = SectorName
        self.SEDOL = SEDOL
        self.TICKER = TICKER
        self.TICKERCODE = TICKERCODE
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType176)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType176.subclass:
            return GeneralType176.subclass(*args_, **kwargs_)
        else:
            return GeneralType176(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BB_TICKER(self):
        return self.BB_TICKER
    def set_BB_TICKER(self, BB_TICKER):
        self.BB_TICKER = BB_TICKER
    def get_BBGID(self):
        return self.BBGID
    def set_BBGID(self, BBGID):
        self.BBGID = BBGID
    def get_CUSIP(self):
        return self.CUSIP
    def set_CUSIP(self, CUSIP):
        self.CUSIP = CUSIP
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_EXCHANGE(self):
        return self.EXCHANGE
    def set_EXCHANGE(self, EXCHANGE):
        self.EXCHANGE = EXCHANGE
    def get_Headline(self):
        return self.Headline
    def set_Headline(self, Headline):
        self.Headline = Headline
    def get_InstrumentName(self):
        return self.InstrumentName
    def set_InstrumentName(self, InstrumentName):
        self.InstrumentName = InstrumentName
    def get_InstrumentType(self):
        return self.InstrumentType
    def set_InstrumentType(self, InstrumentType):
        self.InstrumentType = InstrumentType
    def get_ISIN(self):
        return self.ISIN
    def set_ISIN(self, ISIN):
        self.ISIN = ISIN
    def get_MarketArea(self):
        return self.MarketArea
    def set_MarketArea(self, MarketArea):
        self.MarketArea = MarketArea
    def get_MarketAreaHierarchyName(self):
        return self.MarketAreaHierarchyName
    def set_MarketAreaHierarchyName(self, MarketAreaHierarchyName):
        self.MarketAreaHierarchyName = MarketAreaHierarchyName
    def get_MarketAreaLevel(self):
        return self.MarketAreaLevel
    def set_MarketAreaLevel(self, MarketAreaLevel):
        self.MarketAreaLevel = MarketAreaLevel
    def get_MarketAreaName(self):
        return self.MarketAreaName
    def set_MarketAreaName(self, MarketAreaName):
        self.MarketAreaName = MarketAreaName
    def get_MarketPath(self):
        return self.MarketPath
    def set_MarketPath(self, MarketPath):
        self.MarketPath = MarketPath
    def get_NewsIdentifier(self):
        return self.NewsIdentifier
    def set_NewsIdentifier(self, NewsIdentifier):
        self.NewsIdentifier = NewsIdentifier
    def get_PortfolioID(self):
        return self.PortfolioID
    def set_PortfolioID(self, PortfolioID):
        self.PortfolioID = PortfolioID
    def get_PortfolioName(self):
        return self.PortfolioName
    def set_PortfolioName(self, PortfolioName):
        self.PortfolioName = PortfolioName
    def get_PublishDateTime(self):
        return self.PublishDateTime
    def set_PublishDateTime(self, PublishDateTime):
        self.PublishDateTime = PublishDateTime
    def get_QUICK(self):
        return self.QUICK
    def set_QUICK(self, QUICK):
        self.QUICK = QUICK
    def get_RegionMarketArea(self):
        return self.RegionMarketArea
    def set_RegionMarketArea(self, RegionMarketArea):
        self.RegionMarketArea = RegionMarketArea
    def get_Sector(self):
        return self.Sector
    def set_Sector(self, Sector):
        self.Sector = Sector
    def get_SectorName(self):
        return self.SectorName
    def set_SectorName(self, SectorName):
        self.SectorName = SectorName
    def get_SEDOL(self):
        return self.SEDOL
    def set_SEDOL(self, SEDOL):
        self.SEDOL = SEDOL
    def get_TICKER(self):
        return self.TICKER
    def set_TICKER(self, TICKER):
        self.TICKER = TICKER
    def get_TICKERCODE(self):
        return self.TICKERCODE
    def set_TICKERCODE(self, TICKERCODE):
        self.TICKERCODE = TICKERCODE
    def hasContent_(self):
        if (
            self.BB_TICKER is not None or
            self.BBGID is not None or
            self.CUSIP is not None or
            self.DXLID is not None or
            self.EXCHANGE is not None or
            self.Headline is not None or
            self.InstrumentName is not None or
            self.InstrumentType is not None or
            self.ISIN is not None or
            self.MarketArea is not None or
            self.MarketAreaHierarchyName is not None or
            self.MarketAreaLevel is not None or
            self.MarketAreaName is not None or
            self.MarketPath is not None or
            self.NewsIdentifier is not None or
            self.PortfolioID is not None or
            self.PortfolioName is not None or
            self.PublishDateTime is not None or
            self.QUICK is not None or
            self.RegionMarketArea is not None or
            self.Sector is not None or
            self.SectorName is not None or
            self.SEDOL is not None or
            self.TICKER is not None or
            self.TICKERCODE is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType176', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType176')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType176')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType176', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType176'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType176', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BB_TICKER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBB_TICKER>%s</%sBB_TICKER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BB_TICKER), input_name='BB_TICKER')), namespaceprefix_ , eol_))
        if self.BBGID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBBGID>%s</%sBBGID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BBGID), input_name='BBGID')), namespaceprefix_ , eol_))
        if self.CUSIP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUSIP>%s</%sCUSIP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CUSIP), input_name='CUSIP')), namespaceprefix_ , eol_))
        if self.DXLID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDXLID>%s</%sDXLID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DXLID), input_name='DXLID')), namespaceprefix_ , eol_))
        if self.EXCHANGE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEXCHANGE>%s</%sEXCHANGE>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EXCHANGE), input_name='EXCHANGE')), namespaceprefix_ , eol_))
        if self.Headline is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHeadline>%s</%sHeadline>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Headline), input_name='Headline')), namespaceprefix_ , eol_))
        if self.InstrumentName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstrumentName>%s</%sInstrumentName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InstrumentName), input_name='InstrumentName')), namespaceprefix_ , eol_))
        if self.InstrumentType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstrumentType>%s</%sInstrumentType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InstrumentType), input_name='InstrumentType')), namespaceprefix_ , eol_))
        if self.ISIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sISIN>%s</%sISIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ISIN), input_name='ISIN')), namespaceprefix_ , eol_))
        if self.MarketArea is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarketArea>%s</%sMarketArea>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarketArea), input_name='MarketArea')), namespaceprefix_ , eol_))
        if self.MarketAreaHierarchyName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarketAreaHierarchyName>%s</%sMarketAreaHierarchyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarketAreaHierarchyName), input_name='MarketAreaHierarchyName')), namespaceprefix_ , eol_))
        if self.MarketAreaLevel is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarketAreaLevel>%s</%sMarketAreaLevel>%s' % (namespaceprefix_ , self.gds_format_float(self.MarketAreaLevel, input_name='MarketAreaLevel'), namespaceprefix_ , eol_))
        if self.MarketAreaName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarketAreaName>%s</%sMarketAreaName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarketAreaName), input_name='MarketAreaName')), namespaceprefix_ , eol_))
        if self.MarketPath is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarketPath>%s</%sMarketPath>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarketPath), input_name='MarketPath')), namespaceprefix_ , eol_))
        if self.NewsIdentifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNewsIdentifier>%s</%sNewsIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NewsIdentifier), input_name='NewsIdentifier')), namespaceprefix_ , eol_))
        if self.PortfolioID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPortfolioID>%s</%sPortfolioID>%s' % (namespaceprefix_ , self.gds_format_float(self.PortfolioID, input_name='PortfolioID'), namespaceprefix_ , eol_))
        if self.PortfolioName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPortfolioName>%s</%sPortfolioName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PortfolioName), input_name='PortfolioName')), namespaceprefix_ , eol_))
        if self.PublishDateTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPublishDateTime>%s</%sPublishDateTime>%s' % (namespaceprefix_ , self.gds_format_date(self.PublishDateTime, input_name='PublishDateTime'), namespaceprefix_ , eol_))
        if self.QUICK is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQUICK>%s</%sQUICK>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QUICK), input_name='QUICK')), namespaceprefix_ , eol_))
        if self.RegionMarketArea is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegionMarketArea>%s</%sRegionMarketArea>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegionMarketArea), input_name='RegionMarketArea')), namespaceprefix_ , eol_))
        if self.Sector is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSector>%s</%sSector>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Sector), input_name='Sector')), namespaceprefix_ , eol_))
        if self.SectorName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSectorName>%s</%sSectorName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SectorName), input_name='SectorName')), namespaceprefix_ , eol_))
        if self.SEDOL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSEDOL>%s</%sSEDOL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SEDOL), input_name='SEDOL')), namespaceprefix_ , eol_))
        if self.TICKER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTICKER>%s</%sTICKER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TICKER), input_name='TICKER')), namespaceprefix_ , eol_))
        if self.TICKERCODE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTICKERCODE>%s</%sTICKERCODE>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TICKERCODE), input_name='TICKERCODE')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BB_TICKER':
            BB_TICKER_ = child_.text
            BB_TICKER_ = self.gds_validate_string(BB_TICKER_, node, 'BB_TICKER')
            self.BB_TICKER = BB_TICKER_
        elif nodeName_ == 'BBGID':
            BBGID_ = child_.text
            BBGID_ = self.gds_validate_string(BBGID_, node, 'BBGID')
            self.BBGID = BBGID_
        elif nodeName_ == 'CUSIP':
            CUSIP_ = child_.text
            CUSIP_ = self.gds_validate_string(CUSIP_, node, 'CUSIP')
            self.CUSIP = CUSIP_
        elif nodeName_ == 'DXLID':
            DXLID_ = child_.text
            DXLID_ = self.gds_validate_string(DXLID_, node, 'DXLID')
            self.DXLID = DXLID_
        elif nodeName_ == 'EXCHANGE':
            EXCHANGE_ = child_.text
            EXCHANGE_ = self.gds_validate_string(EXCHANGE_, node, 'EXCHANGE')
            self.EXCHANGE = EXCHANGE_
        elif nodeName_ == 'Headline':
            Headline_ = child_.text
            Headline_ = self.gds_validate_string(Headline_, node, 'Headline')
            self.Headline = Headline_
        elif nodeName_ == 'InstrumentName':
            InstrumentName_ = child_.text
            InstrumentName_ = self.gds_validate_string(InstrumentName_, node, 'InstrumentName')
            self.InstrumentName = InstrumentName_
        elif nodeName_ == 'InstrumentType':
            InstrumentType_ = child_.text
            InstrumentType_ = self.gds_validate_string(InstrumentType_, node, 'InstrumentType')
            self.InstrumentType = InstrumentType_
        elif nodeName_ == 'ISIN':
            ISIN_ = child_.text
            ISIN_ = self.gds_validate_string(ISIN_, node, 'ISIN')
            self.ISIN = ISIN_
        elif nodeName_ == 'MarketArea':
            MarketArea_ = child_.text
            MarketArea_ = self.gds_validate_string(MarketArea_, node, 'MarketArea')
            self.MarketArea = MarketArea_
        elif nodeName_ == 'MarketAreaHierarchyName':
            MarketAreaHierarchyName_ = child_.text
            MarketAreaHierarchyName_ = self.gds_validate_string(MarketAreaHierarchyName_, node, 'MarketAreaHierarchyName')
            self.MarketAreaHierarchyName = MarketAreaHierarchyName_
        elif nodeName_ == 'MarketAreaLevel' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'MarketAreaLevel')
            self.MarketAreaLevel = fval_
        elif nodeName_ == 'MarketAreaName':
            MarketAreaName_ = child_.text
            MarketAreaName_ = self.gds_validate_string(MarketAreaName_, node, 'MarketAreaName')
            self.MarketAreaName = MarketAreaName_
        elif nodeName_ == 'MarketPath':
            MarketPath_ = child_.text
            MarketPath_ = self.gds_validate_string(MarketPath_, node, 'MarketPath')
            self.MarketPath = MarketPath_
        elif nodeName_ == 'NewsIdentifier':
            NewsIdentifier_ = child_.text
            NewsIdentifier_ = self.gds_validate_string(NewsIdentifier_, node, 'NewsIdentifier')
            self.NewsIdentifier = NewsIdentifier_
        elif nodeName_ == 'PortfolioID' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PortfolioID')
            self.PortfolioID = fval_
        elif nodeName_ == 'PortfolioName':
            PortfolioName_ = child_.text
            PortfolioName_ = self.gds_validate_string(PortfolioName_, node, 'PortfolioName')
            self.PortfolioName = PortfolioName_
        elif nodeName_ == 'PublishDateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.PublishDateTime = dval_
        elif nodeName_ == 'QUICK':
            QUICK_ = child_.text
            QUICK_ = self.gds_validate_string(QUICK_, node, 'QUICK')
            self.QUICK = QUICK_
        elif nodeName_ == 'RegionMarketArea':
            RegionMarketArea_ = child_.text
            RegionMarketArea_ = self.gds_validate_string(RegionMarketArea_, node, 'RegionMarketArea')
            self.RegionMarketArea = RegionMarketArea_
        elif nodeName_ == 'Sector':
            Sector_ = child_.text
            Sector_ = self.gds_validate_string(Sector_, node, 'Sector')
            self.Sector = Sector_
        elif nodeName_ == 'SectorName':
            SectorName_ = child_.text
            SectorName_ = self.gds_validate_string(SectorName_, node, 'SectorName')
            self.SectorName = SectorName_
        elif nodeName_ == 'SEDOL':
            SEDOL_ = child_.text
            SEDOL_ = self.gds_validate_string(SEDOL_, node, 'SEDOL')
            self.SEDOL = SEDOL_
        elif nodeName_ == 'TICKER':
            TICKER_ = child_.text
            TICKER_ = self.gds_validate_string(TICKER_, node, 'TICKER')
            self.TICKER = TICKER_
        elif nodeName_ == 'TICKERCODE':
            TICKERCODE_ = child_.text
            TICKERCODE_ = self.gds_validate_string(TICKERCODE_, node, 'TICKERCODE')
            self.TICKERCODE = TICKERCODE_
# end class GeneralType176


class GeneralType177(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MarketArea=None, ParentMarketArea=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.MarketArea = MarketArea
        self.ParentMarketArea = ParentMarketArea
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType177)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType177.subclass:
            return GeneralType177.subclass(*args_, **kwargs_)
        else:
            return GeneralType177(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MarketArea(self):
        return self.MarketArea
    def set_MarketArea(self, MarketArea):
        self.MarketArea = MarketArea
    def get_ParentMarketArea(self):
        return self.ParentMarketArea
    def set_ParentMarketArea(self, ParentMarketArea):
        self.ParentMarketArea = ParentMarketArea
    def hasContent_(self):
        if (
            self.MarketArea is not None or
            self.ParentMarketArea is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType177', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType177')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType177')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType177', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType177'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType177', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MarketArea is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarketArea>%s</%sMarketArea>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarketArea), input_name='MarketArea')), namespaceprefix_ , eol_))
        if self.ParentMarketArea is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sParentMarketArea>%s</%sParentMarketArea>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ParentMarketArea), input_name='ParentMarketArea')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MarketArea':
            MarketArea_ = child_.text
            MarketArea_ = self.gds_validate_string(MarketArea_, node, 'MarketArea')
            self.MarketArea = MarketArea_
        elif nodeName_ == 'ParentMarketArea':
            ParentMarketArea_ = child_.text
            ParentMarketArea_ = self.gds_validate_string(ParentMarketArea_, node, 'ParentMarketArea')
            self.ParentMarketArea = ParentMarketArea_
# end class GeneralType177


class DataDateType178(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType178)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType178.subclass:
            return DataDateType178.subclass(*args_, **kwargs_)
        else:
            return DataDateType178(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType178', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType178')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType178')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType178', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType178'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType178', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType179.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType178


class GeneralType179(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Balance=None, CollateralCurrency=None, CollateralType=None, Counterpart=None, Date=None, DividendRequirement=None, EndDate=None, Fee=None, FundName=None, IsBrokerToBrokerTrade=None, Quantity=None, Rebate=None, ReceiptTime=None, ReinvestmentRate=None, StartDate=None, TermType=None, TradeDate=None, TradeEntryTime=None, TradeFlow=None, TradeStatus=None, TradeStyle=None, TransactionRef=None, USDRebate=None, Value=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Balance = Balance
        self.CollateralCurrency = CollateralCurrency
        self.CollateralType = CollateralType
        self.Counterpart = Counterpart
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.DividendRequirement = DividendRequirement
        if isinstance(EndDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EndDate, '%Y-%m-%d').date()
        else:
            initvalue_ = EndDate
        self.EndDate = initvalue_
        self.Fee = Fee
        self.FundName = FundName
        self.IsBrokerToBrokerTrade = IsBrokerToBrokerTrade
        self.Quantity = Quantity
        self.Rebate = Rebate
        self.ReceiptTime = ReceiptTime
        self.ReinvestmentRate = ReinvestmentRate
        if isinstance(StartDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(StartDate, '%Y-%m-%d').date()
        else:
            initvalue_ = StartDate
        self.StartDate = initvalue_
        self.TermType = TermType
        if isinstance(TradeDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TradeDate, '%Y-%m-%d').date()
        else:
            initvalue_ = TradeDate
        self.TradeDate = initvalue_
        self.TradeEntryTime = TradeEntryTime
        self.TradeFlow = TradeFlow
        self.TradeStatus = TradeStatus
        self.TradeStyle = TradeStyle
        self.TransactionRef = TransactionRef
        self.USDRebate = USDRebate
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType179)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType179.subclass:
            return GeneralType179.subclass(*args_, **kwargs_)
        else:
            return GeneralType179(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Balance(self):
        return self.Balance
    def set_Balance(self, Balance):
        self.Balance = Balance
    def get_CollateralCurrency(self):
        return self.CollateralCurrency
    def set_CollateralCurrency(self, CollateralCurrency):
        self.CollateralCurrency = CollateralCurrency
    def get_CollateralType(self):
        return self.CollateralType
    def set_CollateralType(self, CollateralType):
        self.CollateralType = CollateralType
    def get_Counterpart(self):
        return self.Counterpart
    def set_Counterpart(self, Counterpart):
        self.Counterpart = Counterpart
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_DividendRequirement(self):
        return self.DividendRequirement
    def set_DividendRequirement(self, DividendRequirement):
        self.DividendRequirement = DividendRequirement
    def get_EndDate(self):
        return self.EndDate
    def set_EndDate(self, EndDate):
        self.EndDate = EndDate
    def get_Fee(self):
        return self.Fee
    def set_Fee(self, Fee):
        self.Fee = Fee
    def get_FundName(self):
        return self.FundName
    def set_FundName(self, FundName):
        self.FundName = FundName
    def get_IsBrokerToBrokerTrade(self):
        return self.IsBrokerToBrokerTrade
    def set_IsBrokerToBrokerTrade(self, IsBrokerToBrokerTrade):
        self.IsBrokerToBrokerTrade = IsBrokerToBrokerTrade
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_Rebate(self):
        return self.Rebate
    def set_Rebate(self, Rebate):
        self.Rebate = Rebate
    def get_ReceiptTime(self):
        return self.ReceiptTime
    def set_ReceiptTime(self, ReceiptTime):
        self.ReceiptTime = ReceiptTime
    def get_ReinvestmentRate(self):
        return self.ReinvestmentRate
    def set_ReinvestmentRate(self, ReinvestmentRate):
        self.ReinvestmentRate = ReinvestmentRate
    def get_StartDate(self):
        return self.StartDate
    def set_StartDate(self, StartDate):
        self.StartDate = StartDate
    def get_TermType(self):
        return self.TermType
    def set_TermType(self, TermType):
        self.TermType = TermType
    def get_TradeDate(self):
        return self.TradeDate
    def set_TradeDate(self, TradeDate):
        self.TradeDate = TradeDate
    def get_TradeEntryTime(self):
        return self.TradeEntryTime
    def set_TradeEntryTime(self, TradeEntryTime):
        self.TradeEntryTime = TradeEntryTime
    def get_TradeFlow(self):
        return self.TradeFlow
    def set_TradeFlow(self, TradeFlow):
        self.TradeFlow = TradeFlow
    def get_TradeStatus(self):
        return self.TradeStatus
    def set_TradeStatus(self, TradeStatus):
        self.TradeStatus = TradeStatus
    def get_TradeStyle(self):
        return self.TradeStyle
    def set_TradeStyle(self, TradeStyle):
        self.TradeStyle = TradeStyle
    def get_TransactionRef(self):
        return self.TransactionRef
    def set_TransactionRef(self, TransactionRef):
        self.TransactionRef = TransactionRef
    def get_USDRebate(self):
        return self.USDRebate
    def set_USDRebate(self, USDRebate):
        self.USDRebate = USDRebate
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def hasContent_(self):
        if (
            self.Balance is not None or
            self.CollateralCurrency is not None or
            self.CollateralType is not None or
            self.Counterpart is not None or
            self.Date is not None or
            self.DividendRequirement is not None or
            self.EndDate is not None or
            self.Fee is not None or
            self.FundName is not None or
            self.IsBrokerToBrokerTrade is not None or
            self.Quantity is not None or
            self.Rebate is not None or
            self.ReceiptTime is not None or
            self.ReinvestmentRate is not None or
            self.StartDate is not None or
            self.TermType is not None or
            self.TradeDate is not None or
            self.TradeEntryTime is not None or
            self.TradeFlow is not None or
            self.TradeStatus is not None or
            self.TradeStyle is not None or
            self.TransactionRef is not None or
            self.USDRebate is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType179', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType179')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType179')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType179', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType179'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType179', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Balance is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBalance>%s</%sBalance>%s' % (namespaceprefix_ , self.gds_format_float(self.Balance, input_name='Balance'), namespaceprefix_ , eol_))
        if self.CollateralCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCollateralCurrency>%s</%sCollateralCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CollateralCurrency), input_name='CollateralCurrency')), namespaceprefix_ , eol_))
        if self.CollateralType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCollateralType>%s</%sCollateralType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CollateralType), input_name='CollateralType')), namespaceprefix_ , eol_))
        if self.Counterpart is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCounterpart>%s</%sCounterpart>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Counterpart), input_name='Counterpart')), namespaceprefix_ , eol_))
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.DividendRequirement is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividendRequirement>%s</%sDividendRequirement>%s' % (namespaceprefix_ , self.gds_format_float(self.DividendRequirement, input_name='DividendRequirement'), namespaceprefix_ , eol_))
        if self.EndDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEndDate>%s</%sEndDate>%s' % (namespaceprefix_ , self.gds_format_date(self.EndDate, input_name='EndDate'), namespaceprefix_ , eol_))
        if self.Fee is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFee>%s</%sFee>%s' % (namespaceprefix_ , self.gds_format_float(self.Fee, input_name='Fee'), namespaceprefix_ , eol_))
        if self.FundName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFundName>%s</%sFundName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FundName), input_name='FundName')), namespaceprefix_ , eol_))
        if self.IsBrokerToBrokerTrade is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsBrokerToBrokerTrade>%s</%sIsBrokerToBrokerTrade>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsBrokerToBrokerTrade), input_name='IsBrokerToBrokerTrade')), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.Rebate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRebate>%s</%sRebate>%s' % (namespaceprefix_ , self.gds_format_float(self.Rebate, input_name='Rebate'), namespaceprefix_ , eol_))
        if self.ReceiptTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReceiptTime>%s</%sReceiptTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReceiptTime), input_name='ReceiptTime')), namespaceprefix_ , eol_))
        if self.ReinvestmentRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReinvestmentRate>%s</%sReinvestmentRate>%s' % (namespaceprefix_ , self.gds_format_float(self.ReinvestmentRate, input_name='ReinvestmentRate'), namespaceprefix_ , eol_))
        if self.StartDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStartDate>%s</%sStartDate>%s' % (namespaceprefix_ , self.gds_format_date(self.StartDate, input_name='StartDate'), namespaceprefix_ , eol_))
        if self.TermType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTermType>%s</%sTermType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TermType), input_name='TermType')), namespaceprefix_ , eol_))
        if self.TradeDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradeDate>%s</%sTradeDate>%s' % (namespaceprefix_ , self.gds_format_date(self.TradeDate, input_name='TradeDate'), namespaceprefix_ , eol_))
        if self.TradeEntryTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradeEntryTime>%s</%sTradeEntryTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TradeEntryTime), input_name='TradeEntryTime')), namespaceprefix_ , eol_))
        if self.TradeFlow is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradeFlow>%s</%sTradeFlow>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TradeFlow), input_name='TradeFlow')), namespaceprefix_ , eol_))
        if self.TradeStatus is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradeStatus>%s</%sTradeStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TradeStatus), input_name='TradeStatus')), namespaceprefix_ , eol_))
        if self.TradeStyle is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradeStyle>%s</%sTradeStyle>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TradeStyle), input_name='TradeStyle')), namespaceprefix_ , eol_))
        if self.TransactionRef is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransactionRef>%s</%sTransactionRef>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransactionRef), input_name='TransactionRef')), namespaceprefix_ , eol_))
        if self.USDRebate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUSDRebate>%s</%sUSDRebate>%s' % (namespaceprefix_ , self.gds_format_float(self.USDRebate, input_name='USDRebate'), namespaceprefix_ , eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_format_float(self.Value, input_name='Value'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Balance' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Balance')
            self.Balance = fval_
        elif nodeName_ == 'CollateralCurrency':
            CollateralCurrency_ = child_.text
            CollateralCurrency_ = self.gds_validate_string(CollateralCurrency_, node, 'CollateralCurrency')
            self.CollateralCurrency = CollateralCurrency_
        elif nodeName_ == 'CollateralType':
            CollateralType_ = child_.text
            CollateralType_ = self.gds_validate_string(CollateralType_, node, 'CollateralType')
            self.CollateralType = CollateralType_
        elif nodeName_ == 'Counterpart':
            Counterpart_ = child_.text
            Counterpart_ = self.gds_validate_string(Counterpart_, node, 'Counterpart')
            self.Counterpart = Counterpart_
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
        elif nodeName_ == 'DividendRequirement' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DividendRequirement')
            self.DividendRequirement = fval_
        elif nodeName_ == 'EndDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.EndDate = dval_
        elif nodeName_ == 'Fee' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Fee')
            self.Fee = fval_
        elif nodeName_ == 'FundName':
            FundName_ = child_.text
            FundName_ = self.gds_validate_string(FundName_, node, 'FundName')
            self.FundName = FundName_
        elif nodeName_ == 'IsBrokerToBrokerTrade':
            IsBrokerToBrokerTrade_ = child_.text
            IsBrokerToBrokerTrade_ = self.gds_validate_string(IsBrokerToBrokerTrade_, node, 'IsBrokerToBrokerTrade')
            self.IsBrokerToBrokerTrade = IsBrokerToBrokerTrade_
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Quantity')
            self.Quantity = fval_
        elif nodeName_ == 'Rebate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Rebate')
            self.Rebate = fval_
        elif nodeName_ == 'ReceiptTime':
            ReceiptTime_ = child_.text
            ReceiptTime_ = self.gds_validate_string(ReceiptTime_, node, 'ReceiptTime')
            self.ReceiptTime = ReceiptTime_
        elif nodeName_ == 'ReinvestmentRate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ReinvestmentRate')
            self.ReinvestmentRate = fval_
        elif nodeName_ == 'StartDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.StartDate = dval_
        elif nodeName_ == 'TermType':
            TermType_ = child_.text
            TermType_ = self.gds_validate_string(TermType_, node, 'TermType')
            self.TermType = TermType_
        elif nodeName_ == 'TradeDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TradeDate = dval_
        elif nodeName_ == 'TradeEntryTime':
            TradeEntryTime_ = child_.text
            TradeEntryTime_ = self.gds_validate_string(TradeEntryTime_, node, 'TradeEntryTime')
            self.TradeEntryTime = TradeEntryTime_
        elif nodeName_ == 'TradeFlow':
            TradeFlow_ = child_.text
            TradeFlow_ = self.gds_validate_string(TradeFlow_, node, 'TradeFlow')
            self.TradeFlow = TradeFlow_
        elif nodeName_ == 'TradeStatus':
            TradeStatus_ = child_.text
            TradeStatus_ = self.gds_validate_string(TradeStatus_, node, 'TradeStatus')
            self.TradeStatus = TradeStatus_
        elif nodeName_ == 'TradeStyle':
            TradeStyle_ = child_.text
            TradeStyle_ = self.gds_validate_string(TradeStyle_, node, 'TradeStyle')
            self.TradeStyle = TradeStyle_
        elif nodeName_ == 'TransactionRef':
            TransactionRef_ = child_.text
            TransactionRef_ = self.gds_validate_string(TransactionRef_, node, 'TransactionRef')
            self.TransactionRef = TransactionRef_
        elif nodeName_ == 'USDRebate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'USDRebate')
            self.USDRebate = fval_
        elif nodeName_ == 'Value' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Value')
            self.Value = fval_
# end class GeneralType179


class GeneralType180(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DXLID=None, InstrumentID=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DXLID = DXLID
        self.InstrumentID = InstrumentID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType180)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType180.subclass:
            return GeneralType180.subclass(*args_, **kwargs_)
        else:
            return GeneralType180(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_InstrumentID(self):
        return self.InstrumentID
    def set_InstrumentID(self, InstrumentID):
        self.InstrumentID = InstrumentID
    def hasContent_(self):
        if (
            self.DXLID is not None or
            self.InstrumentID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType180', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType180')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType180')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType180', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType180'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType180', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DXLID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDXLID>%s</%sDXLID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DXLID), input_name='DXLID')), namespaceprefix_ , eol_))
        if self.InstrumentID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstrumentID>%s</%sInstrumentID>%s' % (namespaceprefix_ , self.gds_format_float(self.InstrumentID, input_name='InstrumentID'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DXLID':
            DXLID_ = child_.text
            DXLID_ = self.gds_validate_string(DXLID_, node, 'DXLID')
            self.DXLID = DXLID_
        elif nodeName_ == 'InstrumentID' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'InstrumentID')
            self.InstrumentID = fval_
# end class GeneralType180


class DataDateType181(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType181)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType181.subclass:
            return DataDateType181.subclass(*args_, **kwargs_)
        else:
            return DataDateType181(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType181', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType181')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType181')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType181', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType181'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType181', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType182.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType181


class GeneralType182(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReturnQuantity=None, ReturnValue=None, TradeDate=None, TradeQuantity=None, TradeValue=None, VWAF=None, VWAR=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ReturnQuantity = ReturnQuantity
        self.ReturnValue = ReturnValue
        if isinstance(TradeDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TradeDate, '%Y-%m-%d').date()
        else:
            initvalue_ = TradeDate
        self.TradeDate = initvalue_
        self.TradeQuantity = TradeQuantity
        self.TradeValue = TradeValue
        self.VWAF = VWAF
        self.VWAR = VWAR
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType182)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType182.subclass:
            return GeneralType182.subclass(*args_, **kwargs_)
        else:
            return GeneralType182(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReturnQuantity(self):
        return self.ReturnQuantity
    def set_ReturnQuantity(self, ReturnQuantity):
        self.ReturnQuantity = ReturnQuantity
    def get_ReturnValue(self):
        return self.ReturnValue
    def set_ReturnValue(self, ReturnValue):
        self.ReturnValue = ReturnValue
    def get_TradeDate(self):
        return self.TradeDate
    def set_TradeDate(self, TradeDate):
        self.TradeDate = TradeDate
    def get_TradeQuantity(self):
        return self.TradeQuantity
    def set_TradeQuantity(self, TradeQuantity):
        self.TradeQuantity = TradeQuantity
    def get_TradeValue(self):
        return self.TradeValue
    def set_TradeValue(self, TradeValue):
        self.TradeValue = TradeValue
    def get_VWAF(self):
        return self.VWAF
    def set_VWAF(self, VWAF):
        self.VWAF = VWAF
    def get_VWAR(self):
        return self.VWAR
    def set_VWAR(self, VWAR):
        self.VWAR = VWAR
    def hasContent_(self):
        if (
            self.ReturnQuantity is not None or
            self.ReturnValue is not None or
            self.TradeDate is not None or
            self.TradeQuantity is not None or
            self.TradeValue is not None or
            self.VWAF is not None or
            self.VWAR is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType182', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType182')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType182')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType182', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType182'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType182', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReturnQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReturnQuantity>%s</%sReturnQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.ReturnQuantity, input_name='ReturnQuantity'), namespaceprefix_ , eol_))
        if self.ReturnValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReturnValue>%s</%sReturnValue>%s' % (namespaceprefix_ , self.gds_format_float(self.ReturnValue, input_name='ReturnValue'), namespaceprefix_ , eol_))
        if self.TradeDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradeDate>%s</%sTradeDate>%s' % (namespaceprefix_ , self.gds_format_date(self.TradeDate, input_name='TradeDate'), namespaceprefix_ , eol_))
        if self.TradeQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradeQuantity>%s</%sTradeQuantity>%s' % (namespaceprefix_ , self.gds_format_float(self.TradeQuantity, input_name='TradeQuantity'), namespaceprefix_ , eol_))
        if self.TradeValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradeValue>%s</%sTradeValue>%s' % (namespaceprefix_ , self.gds_format_float(self.TradeValue, input_name='TradeValue'), namespaceprefix_ , eol_))
        if self.VWAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAF>%s</%sVWAF>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAF, input_name='VWAF'), namespaceprefix_ , eol_))
        if self.VWAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAR>%s</%sVWAR>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAR, input_name='VWAR'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReturnQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ReturnQuantity')
            self.ReturnQuantity = fval_
        elif nodeName_ == 'ReturnValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ReturnValue')
            self.ReturnValue = fval_
        elif nodeName_ == 'TradeDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TradeDate = dval_
        elif nodeName_ == 'TradeQuantity' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TradeQuantity')
            self.TradeQuantity = fval_
        elif nodeName_ == 'TradeValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TradeValue')
            self.TradeValue = fval_
        elif nodeName_ == 'VWAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAF')
            self.VWAF = fval_
        elif nodeName_ == 'VWAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAR')
            self.VWAR = fval_
# end class GeneralType182


class DataDateType183(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType183)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType183.subclass:
            return DataDateType183.subclass(*args_, **kwargs_)
        else:
            return DataDateType183(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType183', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType183')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType183')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType183', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType183'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType183', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType184.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType183


class GeneralType184(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ExchangeRate=None, RiskFreeRate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ExchangeRate = ExchangeRate
        self.RiskFreeRate = RiskFreeRate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType184)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType184.subclass:
            return GeneralType184.subclass(*args_, **kwargs_)
        else:
            return GeneralType184(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ExchangeRate(self):
        return self.ExchangeRate
    def set_ExchangeRate(self, ExchangeRate):
        self.ExchangeRate = ExchangeRate
    def get_RiskFreeRate(self):
        return self.RiskFreeRate
    def set_RiskFreeRate(self, RiskFreeRate):
        self.RiskFreeRate = RiskFreeRate
    def hasContent_(self):
        if (
            self.ExchangeRate is not None or
            self.RiskFreeRate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType184', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType184')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType184')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType184', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType184'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType184', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ExchangeRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExchangeRate>%s</%sExchangeRate>%s' % (namespaceprefix_ , self.gds_format_float(self.ExchangeRate, input_name='ExchangeRate'), namespaceprefix_ , eol_))
        if self.RiskFreeRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiskFreeRate>%s</%sRiskFreeRate>%s' % (namespaceprefix_ , self.gds_format_float(self.RiskFreeRate, input_name='RiskFreeRate'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ExchangeRate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ExchangeRate')
            self.ExchangeRate = fval_
        elif nodeName_ == 'RiskFreeRate' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RiskFreeRate')
            self.RiskFreeRate = fval_
# end class GeneralType184


class DataDateType185(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, Inventory=None, Reinvestment=None, Trading=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.Inventory = Inventory
        self.Reinvestment = Reinvestment
        self.Trading = Trading
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType185)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType185.subclass:
            return DataDateType185.subclass(*args_, **kwargs_)
        else:
            return DataDateType185(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Inventory(self):
        return self.Inventory
    def set_Inventory(self, Inventory):
        self.Inventory = Inventory
    def get_Reinvestment(self):
        return self.Reinvestment
    def set_Reinvestment(self, Reinvestment):
        self.Reinvestment = Reinvestment
    def get_Trading(self):
        return self.Trading
    def set_Trading(self, Trading):
        self.Trading = Trading
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.Inventory is not None or
            self.Reinvestment is not None or
            self.Trading is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType185', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType185')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType185')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType185', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType185'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType185', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Inventory is not None:
            self.Inventory.export(outfile, level, namespaceprefix_, name_='Inventory', pretty_print=pretty_print)
        if self.Reinvestment is not None:
            self.Reinvestment.export(outfile, level, namespaceprefix_, name_='Reinvestment', pretty_print=pretty_print)
        if self.Trading is not None:
            self.Trading.export(outfile, level, namespaceprefix_, name_='Trading', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Inventory':
            obj_ = InventoryType186.factory(parent_object_=self)
            obj_.build(child_)
            self.Inventory = obj_
            obj_.original_tagname_ = 'Inventory'
        elif nodeName_ == 'Reinvestment':
            obj_ = ReinvestmentType187.factory(parent_object_=self)
            obj_.build(child_)
            self.Reinvestment = obj_
            obj_.original_tagname_ = 'Reinvestment'
        elif nodeName_ == 'Trading':
            obj_ = TradingType188.factory(parent_object_=self)
            obj_.build(child_)
            self.Trading = obj_
            obj_.original_tagname_ = 'Trading'
# end class DataDateType185


class InventoryType186(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LendableValue=None, Utilisation=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.LendableValue = LendableValue
        self.Utilisation = Utilisation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InventoryType186)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InventoryType186.subclass:
            return InventoryType186.subclass(*args_, **kwargs_)
        else:
            return InventoryType186(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LendableValue(self):
        return self.LendableValue
    def set_LendableValue(self, LendableValue):
        self.LendableValue = LendableValue
    def get_Utilisation(self):
        return self.Utilisation
    def set_Utilisation(self, Utilisation):
        self.Utilisation = Utilisation
    def hasContent_(self):
        if (
            self.LendableValue is not None or
            self.Utilisation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InventoryType186', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InventoryType186')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InventoryType186')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InventoryType186', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InventoryType186'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InventoryType186', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LendableValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableValue>%s</%sLendableValue>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableValue, input_name='LendableValue'), namespaceprefix_ , eol_))
        if self.Utilisation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisation>%s</%sUtilisation>%s' % (namespaceprefix_ , self.gds_format_float(self.Utilisation, input_name='Utilisation'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LendableValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableValue')
            self.LendableValue = fval_
        elif nodeName_ == 'Utilisation' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Utilisation')
            self.Utilisation = fval_
# end class InventoryType186


class ReinvestmentType187(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RiDailyReturn=None, RiReturn=None, RiReturnToLendable=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.RiDailyReturn = RiDailyReturn
        self.RiReturn = RiReturn
        self.RiReturnToLendable = RiReturnToLendable
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReinvestmentType187)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReinvestmentType187.subclass:
            return ReinvestmentType187.subclass(*args_, **kwargs_)
        else:
            return ReinvestmentType187(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RiDailyReturn(self):
        return self.RiDailyReturn
    def set_RiDailyReturn(self, RiDailyReturn):
        self.RiDailyReturn = RiDailyReturn
    def get_RiReturn(self):
        return self.RiReturn
    def set_RiReturn(self, RiReturn):
        self.RiReturn = RiReturn
    def get_RiReturnToLendable(self):
        return self.RiReturnToLendable
    def set_RiReturnToLendable(self, RiReturnToLendable):
        self.RiReturnToLendable = RiReturnToLendable
    def hasContent_(self):
        if (
            self.RiDailyReturn is not None or
            self.RiReturn is not None or
            self.RiReturnToLendable is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReinvestmentType187', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReinvestmentType187')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReinvestmentType187')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReinvestmentType187', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReinvestmentType187'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReinvestmentType187', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RiDailyReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiDailyReturn>%s</%sRiDailyReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.RiDailyReturn, input_name='RiDailyReturn'), namespaceprefix_ , eol_))
        if self.RiReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiReturn>%s</%sRiReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.RiReturn, input_name='RiReturn'), namespaceprefix_ , eol_))
        if self.RiReturnToLendable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiReturnToLendable>%s</%sRiReturnToLendable>%s' % (namespaceprefix_ , self.gds_format_float(self.RiReturnToLendable, input_name='RiReturnToLendable'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RiDailyReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RiDailyReturn')
            self.RiDailyReturn = fval_
        elif nodeName_ == 'RiReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RiReturn')
            self.RiReturn = fval_
        elif nodeName_ == 'RiReturnToLendable' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RiReturnToLendable')
            self.RiReturnToLendable = fval_
# end class ReinvestmentType187


class TradingType188(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AverageTenure=None, Date=None, SlDailyReturn=None, SlReturnToLendable=None, TotalDailyReturn=None, TotalReturn=None, TotalReturnToLendable=None, Utilisation=None, ValueOnLoan=None, ValueOnLoanVsCash=None, ValueOnLoanVsNonCash=None, VWAF=None, VWAR=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.AverageTenure = AverageTenure
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.SlDailyReturn = SlDailyReturn
        self.SlReturnToLendable = SlReturnToLendable
        self.TotalDailyReturn = TotalDailyReturn
        self.TotalReturn = TotalReturn
        self.TotalReturnToLendable = TotalReturnToLendable
        self.Utilisation = Utilisation
        self.ValueOnLoan = ValueOnLoan
        self.ValueOnLoanVsCash = ValueOnLoanVsCash
        self.ValueOnLoanVsNonCash = ValueOnLoanVsNonCash
        self.VWAF = VWAF
        self.VWAR = VWAR
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TradingType188)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TradingType188.subclass:
            return TradingType188.subclass(*args_, **kwargs_)
        else:
            return TradingType188(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AverageTenure(self):
        return self.AverageTenure
    def set_AverageTenure(self, AverageTenure):
        self.AverageTenure = AverageTenure
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_SlDailyReturn(self):
        return self.SlDailyReturn
    def set_SlDailyReturn(self, SlDailyReturn):
        self.SlDailyReturn = SlDailyReturn
    def get_SlReturnToLendable(self):
        return self.SlReturnToLendable
    def set_SlReturnToLendable(self, SlReturnToLendable):
        self.SlReturnToLendable = SlReturnToLendable
    def get_TotalDailyReturn(self):
        return self.TotalDailyReturn
    def set_TotalDailyReturn(self, TotalDailyReturn):
        self.TotalDailyReturn = TotalDailyReturn
    def get_TotalReturn(self):
        return self.TotalReturn
    def set_TotalReturn(self, TotalReturn):
        self.TotalReturn = TotalReturn
    def get_TotalReturnToLendable(self):
        return self.TotalReturnToLendable
    def set_TotalReturnToLendable(self, TotalReturnToLendable):
        self.TotalReturnToLendable = TotalReturnToLendable
    def get_Utilisation(self):
        return self.Utilisation
    def set_Utilisation(self, Utilisation):
        self.Utilisation = Utilisation
    def get_ValueOnLoan(self):
        return self.ValueOnLoan
    def set_ValueOnLoan(self, ValueOnLoan):
        self.ValueOnLoan = ValueOnLoan
    def get_ValueOnLoanVsCash(self):
        return self.ValueOnLoanVsCash
    def set_ValueOnLoanVsCash(self, ValueOnLoanVsCash):
        self.ValueOnLoanVsCash = ValueOnLoanVsCash
    def get_ValueOnLoanVsNonCash(self):
        return self.ValueOnLoanVsNonCash
    def set_ValueOnLoanVsNonCash(self, ValueOnLoanVsNonCash):
        self.ValueOnLoanVsNonCash = ValueOnLoanVsNonCash
    def get_VWAF(self):
        return self.VWAF
    def set_VWAF(self, VWAF):
        self.VWAF = VWAF
    def get_VWAR(self):
        return self.VWAR
    def set_VWAR(self, VWAR):
        self.VWAR = VWAR
    def hasContent_(self):
        if (
            self.AverageTenure is not None or
            self.Date is not None or
            self.SlDailyReturn is not None or
            self.SlReturnToLendable is not None or
            self.TotalDailyReturn is not None or
            self.TotalReturn is not None or
            self.TotalReturnToLendable is not None or
            self.Utilisation is not None or
            self.ValueOnLoan is not None or
            self.ValueOnLoanVsCash is not None or
            self.ValueOnLoanVsNonCash is not None or
            self.VWAF is not None or
            self.VWAR is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TradingType188', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TradingType188')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TradingType188')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TradingType188', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TradingType188'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TradingType188', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AverageTenure is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAverageTenure>%s</%sAverageTenure>%s' % (namespaceprefix_ , self.gds_format_float(self.AverageTenure, input_name='AverageTenure'), namespaceprefix_ , eol_))
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.SlDailyReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSlDailyReturn>%s</%sSlDailyReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.SlDailyReturn, input_name='SlDailyReturn'), namespaceprefix_ , eol_))
        if self.SlReturnToLendable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSlReturnToLendable>%s</%sSlReturnToLendable>%s' % (namespaceprefix_ , self.gds_format_float(self.SlReturnToLendable, input_name='SlReturnToLendable'), namespaceprefix_ , eol_))
        if self.TotalDailyReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalDailyReturn>%s</%sTotalDailyReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.TotalDailyReturn, input_name='TotalDailyReturn'), namespaceprefix_ , eol_))
        if self.TotalReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalReturn>%s</%sTotalReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.TotalReturn, input_name='TotalReturn'), namespaceprefix_ , eol_))
        if self.TotalReturnToLendable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalReturnToLendable>%s</%sTotalReturnToLendable>%s' % (namespaceprefix_ , self.gds_format_float(self.TotalReturnToLendable, input_name='TotalReturnToLendable'), namespaceprefix_ , eol_))
        if self.Utilisation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisation>%s</%sUtilisation>%s' % (namespaceprefix_ , self.gds_format_float(self.Utilisation, input_name='Utilisation'), namespaceprefix_ , eol_))
        if self.ValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoan>%s</%sValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoan, input_name='ValueOnLoan'), namespaceprefix_ , eol_))
        if self.ValueOnLoanVsCash is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanVsCash>%s</%sValueOnLoanVsCash>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoanVsCash, input_name='ValueOnLoanVsCash'), namespaceprefix_ , eol_))
        if self.ValueOnLoanVsNonCash is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanVsNonCash>%s</%sValueOnLoanVsNonCash>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoanVsNonCash, input_name='ValueOnLoanVsNonCash'), namespaceprefix_ , eol_))
        if self.VWAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAF>%s</%sVWAF>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAF, input_name='VWAF'), namespaceprefix_ , eol_))
        if self.VWAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAR>%s</%sVWAR>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAR, input_name='VWAR'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AverageTenure' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AverageTenure')
            self.AverageTenure = fval_
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
        elif nodeName_ == 'SlDailyReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SlDailyReturn')
            self.SlDailyReturn = fval_
        elif nodeName_ == 'SlReturnToLendable' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SlReturnToLendable')
            self.SlReturnToLendable = fval_
        elif nodeName_ == 'TotalDailyReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TotalDailyReturn')
            self.TotalDailyReturn = fval_
        elif nodeName_ == 'TotalReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TotalReturn')
            self.TotalReturn = fval_
        elif nodeName_ == 'TotalReturnToLendable' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TotalReturnToLendable')
            self.TotalReturnToLendable = fval_
        elif nodeName_ == 'Utilisation' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Utilisation')
            self.Utilisation = fval_
        elif nodeName_ == 'ValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoan')
            self.ValueOnLoan = fval_
        elif nodeName_ == 'ValueOnLoanVsCash' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoanVsCash')
            self.ValueOnLoanVsCash = fval_
        elif nodeName_ == 'ValueOnLoanVsNonCash' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoanVsNonCash')
            self.ValueOnLoanVsNonCash = fval_
        elif nodeName_ == 'VWAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAF')
            self.VWAF = fval_
        elif nodeName_ == 'VWAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAR')
            self.VWAR = fval_
# end class TradingType188


class TradingType189(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Currency=None, MarketArea=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Currency = Currency
        self.MarketArea = MarketArea
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TradingType189)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TradingType189.subclass:
            return TradingType189.subclass(*args_, **kwargs_)
        else:
            return TradingType189(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Currency(self):
        return self.Currency
    def set_Currency(self, Currency):
        self.Currency = Currency
    def get_MarketArea(self):
        return self.MarketArea
    def set_MarketArea(self, MarketArea):
        self.MarketArea = MarketArea
    def hasContent_(self):
        if (
            self.Currency is not None or
            self.MarketArea is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TradingType189', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TradingType189')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TradingType189')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TradingType189', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TradingType189'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TradingType189', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Currency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrency>%s</%sCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Currency), input_name='Currency')), namespaceprefix_ , eol_))
        if self.MarketArea is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarketArea>%s</%sMarketArea>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarketArea), input_name='MarketArea')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Currency':
            Currency_ = child_.text
            Currency_ = self.gds_validate_string(Currency_, node, 'Currency')
            self.Currency = Currency_
        elif nodeName_ == 'MarketArea':
            MarketArea_ = child_.text
            MarketArea_ = self.gds_validate_string(MarketArea_, node, 'MarketArea')
            self.MarketArea = MarketArea_
# end class TradingType189


class DataDateType190(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, Analytics=None, Inventory=None, Reinvestment=None, Trading=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.Analytics = Analytics
        self.Inventory = Inventory
        self.Reinvestment = Reinvestment
        self.Trading = Trading
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType190)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType190.subclass:
            return DataDateType190.subclass(*args_, **kwargs_)
        else:
            return DataDateType190(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Analytics(self):
        return self.Analytics
    def set_Analytics(self, Analytics):
        self.Analytics = Analytics
    def get_Inventory(self):
        return self.Inventory
    def set_Inventory(self, Inventory):
        self.Inventory = Inventory
    def get_Reinvestment(self):
        return self.Reinvestment
    def set_Reinvestment(self, Reinvestment):
        self.Reinvestment = Reinvestment
    def get_Trading(self):
        return self.Trading
    def set_Trading(self, Trading):
        self.Trading = Trading
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.Analytics is not None or
            self.Inventory is not None or
            self.Reinvestment is not None or
            self.Trading is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType190', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType190')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType190')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType190', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType190'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType190', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Analytics is not None:
            self.Analytics.export(outfile, level, namespaceprefix_, name_='Analytics', pretty_print=pretty_print)
        if self.Inventory is not None:
            self.Inventory.export(outfile, level, namespaceprefix_, name_='Inventory', pretty_print=pretty_print)
        if self.Reinvestment is not None:
            self.Reinvestment.export(outfile, level, namespaceprefix_, name_='Reinvestment', pretty_print=pretty_print)
        if self.Trading is not None:
            self.Trading.export(outfile, level, namespaceprefix_, name_='Trading', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Analytics':
            obj_ = AnalyticsType.factory(parent_object_=self)
            obj_.build(child_)
            self.Analytics = obj_
            obj_.original_tagname_ = 'Analytics'
        elif nodeName_ == 'Inventory':
            obj_ = InventoryType191.factory(parent_object_=self)
            obj_.build(child_)
            self.Inventory = obj_
            obj_.original_tagname_ = 'Inventory'
        elif nodeName_ == 'Reinvestment':
            obj_ = ReinvestmentType192.factory(parent_object_=self)
            obj_.build(child_)
            self.Reinvestment = obj_
            obj_.original_tagname_ = 'Reinvestment'
        elif nodeName_ == 'Trading':
            obj_ = TradingType193.factory(parent_object_=self)
            obj_.build(child_)
            self.Trading = obj_
            obj_.original_tagname_ = 'Trading'
# end class DataDateType190


class AnalyticsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MissedRevenue=None, OpportunityGain=None, OutperformanceRevenue=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.MissedRevenue = MissedRevenue
        self.OpportunityGain = OpportunityGain
        self.OutperformanceRevenue = OutperformanceRevenue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AnalyticsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AnalyticsType.subclass:
            return AnalyticsType.subclass(*args_, **kwargs_)
        else:
            return AnalyticsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MissedRevenue(self):
        return self.MissedRevenue
    def set_MissedRevenue(self, MissedRevenue):
        self.MissedRevenue = MissedRevenue
    def get_OpportunityGain(self):
        return self.OpportunityGain
    def set_OpportunityGain(self, OpportunityGain):
        self.OpportunityGain = OpportunityGain
    def get_OutperformanceRevenue(self):
        return self.OutperformanceRevenue
    def set_OutperformanceRevenue(self, OutperformanceRevenue):
        self.OutperformanceRevenue = OutperformanceRevenue
    def hasContent_(self):
        if (
            self.MissedRevenue is not None or
            self.OpportunityGain is not None or
            self.OutperformanceRevenue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AnalyticsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AnalyticsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AnalyticsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AnalyticsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AnalyticsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AnalyticsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MissedRevenue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMissedRevenue>%s</%sMissedRevenue>%s' % (namespaceprefix_ , self.gds_format_float(self.MissedRevenue, input_name='MissedRevenue'), namespaceprefix_ , eol_))
        if self.OpportunityGain is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOpportunityGain>%s</%sOpportunityGain>%s' % (namespaceprefix_ , self.gds_format_float(self.OpportunityGain, input_name='OpportunityGain'), namespaceprefix_ , eol_))
        if self.OutperformanceRevenue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOutperformanceRevenue>%s</%sOutperformanceRevenue>%s' % (namespaceprefix_ , self.gds_format_float(self.OutperformanceRevenue, input_name='OutperformanceRevenue'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MissedRevenue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'MissedRevenue')
            self.MissedRevenue = fval_
        elif nodeName_ == 'OpportunityGain' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'OpportunityGain')
            self.OpportunityGain = fval_
        elif nodeName_ == 'OutperformanceRevenue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'OutperformanceRevenue')
            self.OutperformanceRevenue = fval_
# end class AnalyticsType


class InventoryType191(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LendableValue=None, Utilisation=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.LendableValue = LendableValue
        self.Utilisation = Utilisation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InventoryType191)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InventoryType191.subclass:
            return InventoryType191.subclass(*args_, **kwargs_)
        else:
            return InventoryType191(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LendableValue(self):
        return self.LendableValue
    def set_LendableValue(self, LendableValue):
        self.LendableValue = LendableValue
    def get_Utilisation(self):
        return self.Utilisation
    def set_Utilisation(self, Utilisation):
        self.Utilisation = Utilisation
    def hasContent_(self):
        if (
            self.LendableValue is not None or
            self.Utilisation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InventoryType191', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InventoryType191')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InventoryType191')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InventoryType191', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InventoryType191'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InventoryType191', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LendableValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLendableValue>%s</%sLendableValue>%s' % (namespaceprefix_ , self.gds_format_float(self.LendableValue, input_name='LendableValue'), namespaceprefix_ , eol_))
        if self.Utilisation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisation>%s</%sUtilisation>%s' % (namespaceprefix_ , self.gds_format_float(self.Utilisation, input_name='Utilisation'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LendableValue' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LendableValue')
            self.LendableValue = fval_
        elif nodeName_ == 'Utilisation' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Utilisation')
            self.Utilisation = fval_
# end class InventoryType191


class ReinvestmentType192(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReinvestedValueOnLoan=None, RiReturn=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ReinvestedValueOnLoan = ReinvestedValueOnLoan
        self.RiReturn = RiReturn
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReinvestmentType192)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReinvestmentType192.subclass:
            return ReinvestmentType192.subclass(*args_, **kwargs_)
        else:
            return ReinvestmentType192(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReinvestedValueOnLoan(self):
        return self.ReinvestedValueOnLoan
    def set_ReinvestedValueOnLoan(self, ReinvestedValueOnLoan):
        self.ReinvestedValueOnLoan = ReinvestedValueOnLoan
    def get_RiReturn(self):
        return self.RiReturn
    def set_RiReturn(self, RiReturn):
        self.RiReturn = RiReturn
    def hasContent_(self):
        if (
            self.ReinvestedValueOnLoan is not None or
            self.RiReturn is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReinvestmentType192', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReinvestmentType192')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReinvestmentType192')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReinvestmentType192', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReinvestmentType192'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReinvestmentType192', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReinvestedValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReinvestedValueOnLoan>%s</%sReinvestedValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.ReinvestedValueOnLoan, input_name='ReinvestedValueOnLoan'), namespaceprefix_ , eol_))
        if self.RiReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRiReturn>%s</%sRiReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.RiReturn, input_name='RiReturn'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReinvestedValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ReinvestedValueOnLoan')
            self.ReinvestedValueOnLoan = fval_
        elif nodeName_ == 'RiReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'RiReturn')
            self.RiReturn = fval_
# end class ReinvestmentType192


class TradingType193(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AverageTenure=None, TotalDailyReturn=None, Utilisation=None, ValueOnLoan=None, ValueOnLoanVsCash=None, ValueOnLoanVsNonCash=None, VWAF=None, VWAR=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.AverageTenure = AverageTenure
        self.TotalDailyReturn = TotalDailyReturn
        self.Utilisation = Utilisation
        self.ValueOnLoan = ValueOnLoan
        self.ValueOnLoanVsCash = ValueOnLoanVsCash
        self.ValueOnLoanVsNonCash = ValueOnLoanVsNonCash
        self.VWAF = VWAF
        self.VWAR = VWAR
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TradingType193)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TradingType193.subclass:
            return TradingType193.subclass(*args_, **kwargs_)
        else:
            return TradingType193(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AverageTenure(self):
        return self.AverageTenure
    def set_AverageTenure(self, AverageTenure):
        self.AverageTenure = AverageTenure
    def get_TotalDailyReturn(self):
        return self.TotalDailyReturn
    def set_TotalDailyReturn(self, TotalDailyReturn):
        self.TotalDailyReturn = TotalDailyReturn
    def get_Utilisation(self):
        return self.Utilisation
    def set_Utilisation(self, Utilisation):
        self.Utilisation = Utilisation
    def get_ValueOnLoan(self):
        return self.ValueOnLoan
    def set_ValueOnLoan(self, ValueOnLoan):
        self.ValueOnLoan = ValueOnLoan
    def get_ValueOnLoanVsCash(self):
        return self.ValueOnLoanVsCash
    def set_ValueOnLoanVsCash(self, ValueOnLoanVsCash):
        self.ValueOnLoanVsCash = ValueOnLoanVsCash
    def get_ValueOnLoanVsNonCash(self):
        return self.ValueOnLoanVsNonCash
    def set_ValueOnLoanVsNonCash(self, ValueOnLoanVsNonCash):
        self.ValueOnLoanVsNonCash = ValueOnLoanVsNonCash
    def get_VWAF(self):
        return self.VWAF
    def set_VWAF(self, VWAF):
        self.VWAF = VWAF
    def get_VWAR(self):
        return self.VWAR
    def set_VWAR(self, VWAR):
        self.VWAR = VWAR
    def hasContent_(self):
        if (
            self.AverageTenure is not None or
            self.TotalDailyReturn is not None or
            self.Utilisation is not None or
            self.ValueOnLoan is not None or
            self.ValueOnLoanVsCash is not None or
            self.ValueOnLoanVsNonCash is not None or
            self.VWAF is not None or
            self.VWAR is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TradingType193', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TradingType193')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TradingType193')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TradingType193', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TradingType193'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TradingType193', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AverageTenure is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAverageTenure>%s</%sAverageTenure>%s' % (namespaceprefix_ , self.gds_format_float(self.AverageTenure, input_name='AverageTenure'), namespaceprefix_ , eol_))
        if self.TotalDailyReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalDailyReturn>%s</%sTotalDailyReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.TotalDailyReturn, input_name='TotalDailyReturn'), namespaceprefix_ , eol_))
        if self.Utilisation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUtilisation>%s</%sUtilisation>%s' % (namespaceprefix_ , self.gds_format_float(self.Utilisation, input_name='Utilisation'), namespaceprefix_ , eol_))
        if self.ValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoan>%s</%sValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoan, input_name='ValueOnLoan'), namespaceprefix_ , eol_))
        if self.ValueOnLoanVsCash is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanVsCash>%s</%sValueOnLoanVsCash>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoanVsCash, input_name='ValueOnLoanVsCash'), namespaceprefix_ , eol_))
        if self.ValueOnLoanVsNonCash is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoanVsNonCash>%s</%sValueOnLoanVsNonCash>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoanVsNonCash, input_name='ValueOnLoanVsNonCash'), namespaceprefix_ , eol_))
        if self.VWAF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAF>%s</%sVWAF>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAF, input_name='VWAF'), namespaceprefix_ , eol_))
        if self.VWAR is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVWAR>%s</%sVWAR>%s' % (namespaceprefix_ , self.gds_format_float(self.VWAR, input_name='VWAR'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AverageTenure' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AverageTenure')
            self.AverageTenure = fval_
        elif nodeName_ == 'TotalDailyReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TotalDailyReturn')
            self.TotalDailyReturn = fval_
        elif nodeName_ == 'Utilisation' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Utilisation')
            self.Utilisation = fval_
        elif nodeName_ == 'ValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoan')
            self.ValueOnLoan = fval_
        elif nodeName_ == 'ValueOnLoanVsCash' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoanVsCash')
            self.ValueOnLoanVsCash = fval_
        elif nodeName_ == 'ValueOnLoanVsNonCash' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoanVsNonCash')
            self.ValueOnLoanVsNonCash = fval_
        elif nodeName_ == 'VWAF' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAF')
            self.VWAF = fval_
        elif nodeName_ == 'VWAR' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'VWAR')
            self.VWAR = fval_
# end class TradingType193


class DataDateType194(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType194)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType194.subclass:
            return DataDateType194.subclass(*args_, **kwargs_)
        else:
            return DataDateType194(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType194', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType194')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType194')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType194', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType194'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType194', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType195.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType194


class GeneralType195(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Counterpart=None, CounterpartName=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Counterpart = Counterpart
        self.CounterpartName = CounterpartName
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType195)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType195.subclass:
            return GeneralType195.subclass(*args_, **kwargs_)
        else:
            return GeneralType195(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Counterpart(self):
        return self.Counterpart
    def set_Counterpart(self, Counterpart):
        self.Counterpart = Counterpart
    def get_CounterpartName(self):
        return self.CounterpartName
    def set_CounterpartName(self, CounterpartName):
        self.CounterpartName = CounterpartName
    def hasContent_(self):
        if (
            self.Counterpart is not None or
            self.CounterpartName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType195', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType195')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType195')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType195', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType195'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType195', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Counterpart is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCounterpart>%s</%sCounterpart>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Counterpart), input_name='Counterpart')), namespaceprefix_ , eol_))
        if self.CounterpartName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCounterpartName>%s</%sCounterpartName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CounterpartName), input_name='CounterpartName')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Counterpart':
            Counterpart_ = child_.text
            Counterpart_ = self.gds_validate_string(Counterpart_, node, 'Counterpart')
            self.Counterpart = Counterpart_
        elif nodeName_ == 'CounterpartName':
            CounterpartName_ = child_.text
            CounterpartName_ = self.gds_validate_string(CounterpartName_, node, 'CounterpartName')
            self.CounterpartName = CounterpartName_
# end class GeneralType195


class DataDateType196(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType196)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType196.subclass:
            return DataDateType196.subclass(*args_, **kwargs_)
        else:
            return DataDateType196(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType196', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType196')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType196')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType196', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType196'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType196', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType197.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType196


class GeneralType197(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DailySLReturn=None, ValueOnLoan=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DailySLReturn = DailySLReturn
        self.ValueOnLoan = ValueOnLoan
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType197)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType197.subclass:
            return GeneralType197.subclass(*args_, **kwargs_)
        else:
            return GeneralType197(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DailySLReturn(self):
        return self.DailySLReturn
    def set_DailySLReturn(self, DailySLReturn):
        self.DailySLReturn = DailySLReturn
    def get_ValueOnLoan(self):
        return self.ValueOnLoan
    def set_ValueOnLoan(self, ValueOnLoan):
        self.ValueOnLoan = ValueOnLoan
    def hasContent_(self):
        if (
            self.DailySLReturn is not None or
            self.ValueOnLoan is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType197', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType197')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType197')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType197', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType197'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType197', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DailySLReturn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDailySLReturn>%s</%sDailySLReturn>%s' % (namespaceprefix_ , self.gds_format_float(self.DailySLReturn, input_name='DailySLReturn'), namespaceprefix_ , eol_))
        if self.ValueOnLoan is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueOnLoan>%s</%sValueOnLoan>%s' % (namespaceprefix_ , self.gds_format_float(self.ValueOnLoan, input_name='ValueOnLoan'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DailySLReturn' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DailySLReturn')
            self.DailySLReturn = fval_
        elif nodeName_ == 'ValueOnLoan' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValueOnLoan')
            self.ValueOnLoan = fval_
# end class GeneralType197


class DataDateType198(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, General=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(value, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(value, '%Y-%m-%d').date()
        else:
            initvalue_ = value
        self.value = initvalue_
        self.General = General
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataDateType198)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataDateType198.subclass:
            return DataDateType198.subclass(*args_, **kwargs_)
        else:
            return DataDateType198(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_General(self):
        return self.General
    def set_General(self, General):
        self.General = General
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def hasContent_(self):
        if (
            self.General is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType198', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataDateType198')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataDateType198')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataDateType198', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataDateType198'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_date(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataDateType198', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.General is not None:
            self.General.export(outfile, level, namespaceprefix_, name_='General', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'General':
            obj_ = GeneralType199.factory(parent_object_=self)
            obj_.build(child_)
            self.General = obj_
            obj_.original_tagname_ = 'General'
# end class DataDateType198


class GeneralType199(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AccountCode=None, AccountName=None, AccountPath=None, PeerGroup=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.AccountCode = AccountCode
        self.AccountName = AccountName
        self.AccountPath = AccountPath
        self.PeerGroup = PeerGroup
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralType199)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralType199.subclass:
            return GeneralType199.subclass(*args_, **kwargs_)
        else:
            return GeneralType199(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AccountCode(self):
        return self.AccountCode
    def set_AccountCode(self, AccountCode):
        self.AccountCode = AccountCode
    def get_AccountName(self):
        return self.AccountName
    def set_AccountName(self, AccountName):
        self.AccountName = AccountName
    def get_AccountPath(self):
        return self.AccountPath
    def set_AccountPath(self, AccountPath):
        self.AccountPath = AccountPath
    def get_PeerGroup(self):
        return self.PeerGroup
    def set_PeerGroup(self, PeerGroup):
        self.PeerGroup = PeerGroup
    def hasContent_(self):
        if (
            self.AccountCode is not None or
            self.AccountName is not None or
            self.AccountPath is not None or
            self.PeerGroup is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType199', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralType199')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralType199')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralType199', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralType199'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralType199', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountCode>%s</%sAccountCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountCode), input_name='AccountCode')), namespaceprefix_ , eol_))
        if self.AccountName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountName>%s</%sAccountName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountName), input_name='AccountName')), namespaceprefix_ , eol_))
        if self.AccountPath is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountPath>%s</%sAccountPath>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountPath), input_name='AccountPath')), namespaceprefix_ , eol_))
        if self.PeerGroup is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPeerGroup>%s</%sPeerGroup>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PeerGroup), input_name='PeerGroup')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AccountCode':
            AccountCode_ = child_.text
            AccountCode_ = self.gds_validate_string(AccountCode_, node, 'AccountCode')
            self.AccountCode = AccountCode_
        elif nodeName_ == 'AccountName':
            AccountName_ = child_.text
            AccountName_ = self.gds_validate_string(AccountName_, node, 'AccountName')
            self.AccountName = AccountName_
        elif nodeName_ == 'AccountPath':
            AccountPath_ = child_.text
            AccountPath_ = self.gds_validate_string(AccountPath_, node, 'AccountPath')
            self.AccountPath = AccountPath_
        elif nodeName_ == 'PeerGroup':
            PeerGroup_ = child_.text
            PeerGroup_ = self.gds_validate_string(PeerGroup_, node, 'PeerGroup')
            self.PeerGroup = PeerGroup_
# end class GeneralType199


class SourceType200(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, Description=None, DataType=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Name = _cast(None, Name)
        self.Description = _cast(None, Description)
        if DataType is None:
            self.DataType = []
        else:
            self.DataType = DataType
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SourceType200)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SourceType200.subclass:
            return SourceType200.subclass(*args_, **kwargs_)
        else:
            return SourceType200(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataType(self):
        return self.DataType
    def set_DataType(self, DataType):
        self.DataType = DataType
    def add_DataType(self, value):
        self.DataType.append(value)
    def add_DataType(self, value):
        self.DataType.append(value)
    def insert_DataType_at(self, index, value):
        self.DataType.insert(index, value)
    def replace_DataType_at(self, index, value):
        self.DataType[index] = value
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.DataType
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SourceType200', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SourceType200')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SourceType200')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SourceType200', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SourceType200'):
        if self.Name is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            outfile.write(' Name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Name), input_name='Name')), ))
        if self.Description is not None and 'Description' not in already_processed:
            already_processed.add('Description')
            outfile.write(' Description=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Description), input_name='Description')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SourceType200', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DataType_ in self.DataType:
            DataType_.export(outfile, level, namespaceprefix_, name_='DataType', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Name', node)
        if value is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            self.Name = value
        value = find_attr_value_('Description', node)
        if value is not None and 'Description' not in already_processed:
            already_processed.add('Description')
            self.Description = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataType':
            obj_ = DataTypeType.factory(parent_object_=self)
            obj_.build(child_)
            self.DataType.append(obj_)
            obj_.original_tagname_ = 'DataType'
# end class SourceType200


class DataTypeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, Description=None, Identifier=None, Category=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Name = _cast(None, Name)
        self.Description = _cast(None, Description)
        if Identifier is None:
            self.Identifier = []
        else:
            self.Identifier = Identifier
        if Category is None:
            self.Category = []
        else:
            self.Category = Category
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataTypeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataTypeType.subclass:
            return DataTypeType.subclass(*args_, **kwargs_)
        else:
            return DataTypeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Identifier(self):
        return self.Identifier
    def set_Identifier(self, Identifier):
        self.Identifier = Identifier
    def add_Identifier(self, value):
        self.Identifier.append(value)
    def add_Identifier(self, value):
        self.Identifier.append(value)
    def insert_Identifier_at(self, index, value):
        self.Identifier.insert(index, value)
    def replace_Identifier_at(self, index, value):
        self.Identifier[index] = value
    def get_Category(self):
        return self.Category
    def set_Category(self, Category):
        self.Category = Category
    def add_Category(self, value):
        self.Category.append(value)
    def add_Category(self, value):
        self.Category.append(value)
    def insert_Category_at(self, index, value):
        self.Category.insert(index, value)
    def replace_Category_at(self, index, value):
        self.Category[index] = value
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Identifier or
            self.Category
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataTypeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataTypeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataTypeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataTypeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataTypeType'):
        if self.Name is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            outfile.write(' Name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Name), input_name='Name')), ))
        if self.Description is not None and 'Description' not in already_processed:
            already_processed.add('Description')
            outfile.write(' Description=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Description), input_name='Description')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataTypeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Identifier_ in self.Identifier:
            Identifier_.export(outfile, level, namespaceprefix_, name_='Identifier', pretty_print=pretty_print)
        for Category_ in self.Category:
            Category_.export(outfile, level, namespaceprefix_, name_='Category', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Name', node)
        if value is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            self.Name = value
        value = find_attr_value_('Description', node)
        if value is not None and 'Description' not in already_processed:
            already_processed.add('Description')
            self.Description = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Identifier':
            obj_ = IdentifierType.factory(parent_object_=self)
            obj_.build(child_)
            self.Identifier.append(obj_)
            obj_.original_tagname_ = 'Identifier'
        elif nodeName_ == 'Category':
            obj_ = CategoryType.factory(parent_object_=self)
            obj_.build(child_)
            self.Category.append(obj_)
            obj_.original_tagname_ = 'Category'
# end class DataTypeType


class IdentifierType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, SupportsRanking=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Name = _cast(None, Name)
        self.SupportsRanking = _cast(bool, SupportsRanking)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IdentifierType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IdentifierType.subclass:
            return IdentifierType.subclass(*args_, **kwargs_)
        else:
            return IdentifierType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_SupportsRanking(self):
        return self.SupportsRanking
    def set_SupportsRanking(self, SupportsRanking):
        self.SupportsRanking = SupportsRanking
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='IdentifierType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IdentifierType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IdentifierType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IdentifierType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='IdentifierType'):
        if self.Name is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            outfile.write(' Name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Name), input_name='Name')), ))
        if self.SupportsRanking is not None and 'SupportsRanking' not in already_processed:
            already_processed.add('SupportsRanking')
            outfile.write(' SupportsRanking="%s"' % self.gds_format_boolean(self.SupportsRanking, input_name='SupportsRanking'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='IdentifierType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Name', node)
        if value is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            self.Name = value
        value = find_attr_value_('SupportsRanking', node)
        if value is not None and 'SupportsRanking' not in already_processed:
            already_processed.add('SupportsRanking')
            if value in ('true', '1'):
                self.SupportsRanking = True
            elif value in ('false', '0'):
                self.SupportsRanking = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class IdentifierType


class CategoryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, Description=None, Field=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Name = _cast(None, Name)
        self.Description = _cast(None, Description)
        if Field is None:
            self.Field = []
        else:
            self.Field = Field
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CategoryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CategoryType.subclass:
            return CategoryType.subclass(*args_, **kwargs_)
        else:
            return CategoryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Field(self):
        return self.Field
    def set_Field(self, Field):
        self.Field = Field
    def add_Field(self, value):
        self.Field.append(value)
    def add_Field(self, value):
        self.Field.append(value)
    def insert_Field_at(self, index, value):
        self.Field.insert(index, value)
    def replace_Field_at(self, index, value):
        self.Field[index] = value
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Field
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CategoryType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CategoryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CategoryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CategoryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CategoryType'):
        if self.Name is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            outfile.write(' Name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Name), input_name='Name')), ))
        if self.Description is not None and 'Description' not in already_processed:
            already_processed.add('Description')
            outfile.write(' Description=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Description), input_name='Description')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CategoryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Field_ in self.Field:
            Field_.export(outfile, level, namespaceprefix_, name_='Field', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Name', node)
        if value is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            self.Name = value
        value = find_attr_value_('Description', node)
        if value is not None and 'Description' not in already_processed:
            already_processed.add('Description')
            self.Description = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Field':
            obj_ = FieldType.factory(parent_object_=self)
            obj_.build(child_)
            self.Field.append(obj_)
            obj_.original_tagname_ = 'Field'
# end class CategoryType


class FieldType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, Description=None, Permissions=None, Modifier=None, Filter=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Name = _cast(None, Name)
        self.Description = _cast(None, Description)
        self.Permissions = _cast(None, Permissions)
        if Modifier is None:
            self.Modifier = []
        else:
            self.Modifier = Modifier
        if Filter is None:
            self.Filter = []
        else:
            self.Filter = Filter
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FieldType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FieldType.subclass:
            return FieldType.subclass(*args_, **kwargs_)
        else:
            return FieldType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Modifier(self):
        return self.Modifier
    def set_Modifier(self, Modifier):
        self.Modifier = Modifier
    def add_Modifier(self, value):
        self.Modifier.append(value)
    def add_Modifier(self, value):
        self.Modifier.append(value)
    def insert_Modifier_at(self, index, value):
        self.Modifier.insert(index, value)
    def replace_Modifier_at(self, index, value):
        self.Modifier[index] = value
    def get_Filter(self):
        return self.Filter
    def set_Filter(self, Filter):
        self.Filter = Filter
    def add_Filter(self, value):
        self.Filter.append(value)
    def add_Filter(self, value):
        self.Filter.append(value)
    def insert_Filter_at(self, index, value):
        self.Filter.insert(index, value)
    def replace_Filter_at(self, index, value):
        self.Filter[index] = value
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_Permissions(self):
        return self.Permissions
    def set_Permissions(self, Permissions):
        self.Permissions = Permissions
    def hasContent_(self):
        if (
            self.Modifier or
            self.Filter
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FieldType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FieldType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FieldType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FieldType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FieldType'):
        if self.Name is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            outfile.write(' Name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Name), input_name='Name')), ))
        if self.Description is not None and 'Description' not in already_processed:
            already_processed.add('Description')
            outfile.write(' Description=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Description), input_name='Description')), ))
        if self.Permissions is not None and 'Permissions' not in already_processed:
            already_processed.add('Permissions')
            outfile.write(' Permissions=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Permissions), input_name='Permissions')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FieldType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Modifier_ in self.Modifier:
            Modifier_.export(outfile, level, namespaceprefix_, name_='Modifier', pretty_print=pretty_print)
        for Filter_ in self.Filter:
            Filter_.export(outfile, level, namespaceprefix_, name_='Filter', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Name', node)
        if value is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            self.Name = value
        value = find_attr_value_('Description', node)
        if value is not None and 'Description' not in already_processed:
            already_processed.add('Description')
            self.Description = value
        value = find_attr_value_('Permissions', node)
        if value is not None and 'Permissions' not in already_processed:
            already_processed.add('Permissions')
            self.Permissions = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Modifier':
            obj_ = ModifierType.factory(parent_object_=self)
            obj_.build(child_)
            self.Modifier.append(obj_)
            obj_.original_tagname_ = 'Modifier'
        elif nodeName_ == 'Filter':
            obj_ = FilterType201.factory(parent_object_=self)
            obj_.build(child_)
            self.Filter.append(obj_)
            obj_.original_tagname_ = 'Filter'
# end class FieldType


class ModifierType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, Description=None, RangeMin=None, RangeMax=None, Value=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Name = _cast(None, Name)
        self.Description = _cast(None, Description)
        self.RangeMin = _cast(int, RangeMin)
        self.RangeMax = _cast(int, RangeMax)
        if Value is None:
            self.Value = []
        else:
            self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ModifierType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ModifierType.subclass:
            return ModifierType.subclass(*args_, **kwargs_)
        else:
            return ModifierType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def add_Value(self, value):
        self.Value.append(value)
    def add_Value(self, value):
        self.Value.append(value)
    def insert_Value_at(self, index, value):
        self.Value.insert(index, value)
    def replace_Value_at(self, index, value):
        self.Value[index] = value
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_RangeMin(self):
        return self.RangeMin
    def set_RangeMin(self, RangeMin):
        self.RangeMin = RangeMin
    def get_RangeMax(self):
        return self.RangeMax
    def set_RangeMax(self, RangeMax):
        self.RangeMax = RangeMax
    def hasContent_(self):
        if (
            self.Value
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ModifierType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ModifierType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ModifierType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ModifierType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ModifierType'):
        if self.Name is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            outfile.write(' Name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Name), input_name='Name')), ))
        if self.Description is not None and 'Description' not in already_processed:
            already_processed.add('Description')
            outfile.write(' Description=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Description), input_name='Description')), ))
        if self.RangeMin is not None and 'RangeMin' not in already_processed:
            already_processed.add('RangeMin')
            outfile.write(' RangeMin="%s"' % self.gds_format_integer(self.RangeMin, input_name='RangeMin'))
        if self.RangeMax is not None and 'RangeMax' not in already_processed:
            already_processed.add('RangeMax')
            outfile.write(' RangeMax="%s"' % self.gds_format_integer(self.RangeMax, input_name='RangeMax'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ModifierType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Value_ in self.Value:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Value_), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Name', node)
        if value is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            self.Name = value
        value = find_attr_value_('Description', node)
        if value is not None and 'Description' not in already_processed:
            already_processed.add('Description')
            self.Description = value
        value = find_attr_value_('RangeMin', node)
        if value is not None and 'RangeMin' not in already_processed:
            already_processed.add('RangeMin')
            try:
                self.RangeMin = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('RangeMax', node)
        if value is not None and 'RangeMax' not in already_processed:
            already_processed.add('RangeMax')
            try:
                self.RangeMax = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value.append(Value_)
# end class ModifierType


class Value(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Value)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Value.subclass:
            return Value.subclass(*args_, **kwargs_)
        else:
            return Value(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Value', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Value')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Value')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Value', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Value'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Value', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Value


class FilterType201(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, Description=None, Value=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Name = _cast(None, Name)
        self.Description = _cast(None, Description)
        if Value is None:
            self.Value = []
        else:
            self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FilterType201)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FilterType201.subclass:
            return FilterType201.subclass(*args_, **kwargs_)
        else:
            return FilterType201(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def add_Value(self, value):
        self.Value.append(value)
    def add_Value(self, value):
        self.Value.append(value)
    def insert_Value_at(self, index, value):
        self.Value.insert(index, value)
    def replace_Value_at(self, index, value):
        self.Value[index] = value
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Value
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FilterType201', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FilterType201')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FilterType201')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FilterType201', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FilterType201'):
        if self.Name is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            outfile.write(' Name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Name), input_name='Name')), ))
        if self.Description is not None and 'Description' not in already_processed:
            already_processed.add('Description')
            outfile.write(' Description=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Description), input_name='Description')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FilterType201', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Value_ in self.Value:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Value_), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Name', node)
        if value is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            self.Name = value
        value = find_attr_value_('Description', node)
        if value is not None and 'Description' not in already_processed:
            already_processed.add('Description')
            self.Description = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value.append(Value_)
# end class FilterType201


class DataUpdateInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DataDate=None, DataType=None, LastUpdatedDate=None, InstrumentUpdateInfo=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(DataDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DataDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = DataDate
        self.DataDate = initvalue_
        self.DataType = _cast(None, DataType)
        if isinstance(LastUpdatedDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LastUpdatedDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = LastUpdatedDate
        self.LastUpdatedDate = initvalue_
        if InstrumentUpdateInfo is None:
            self.InstrumentUpdateInfo = []
        else:
            self.InstrumentUpdateInfo = InstrumentUpdateInfo
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataUpdateInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataUpdateInfoType.subclass:
            return DataUpdateInfoType.subclass(*args_, **kwargs_)
        else:
            return DataUpdateInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_InstrumentUpdateInfo(self):
        return self.InstrumentUpdateInfo
    def set_InstrumentUpdateInfo(self, InstrumentUpdateInfo):
        self.InstrumentUpdateInfo = InstrumentUpdateInfo
    def add_InstrumentUpdateInfo(self, value):
        self.InstrumentUpdateInfo.append(value)
    def add_InstrumentUpdateInfo(self, value):
        self.InstrumentUpdateInfo.append(value)
    def insert_InstrumentUpdateInfo_at(self, index, value):
        self.InstrumentUpdateInfo.insert(index, value)
    def replace_InstrumentUpdateInfo_at(self, index, value):
        self.InstrumentUpdateInfo[index] = value
    def get_DataDate(self):
        return self.DataDate
    def set_DataDate(self, DataDate):
        self.DataDate = DataDate
    def get_DataType(self):
        return self.DataType
    def set_DataType(self, DataType):
        self.DataType = DataType
    def get_LastUpdatedDate(self):
        return self.LastUpdatedDate
    def set_LastUpdatedDate(self, LastUpdatedDate):
        self.LastUpdatedDate = LastUpdatedDate
    def hasContent_(self):
        if (
            self.InstrumentUpdateInfo
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataUpdateInfoType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataUpdateInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataUpdateInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataUpdateInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataUpdateInfoType'):
        if self.DataDate is not None and 'DataDate' not in already_processed:
            already_processed.add('DataDate')
            outfile.write(' DataDate="%s"' % self.gds_format_datetime(self.DataDate, input_name='DataDate'))
        if self.DataType is not None and 'DataType' not in already_processed:
            already_processed.add('DataType')
            outfile.write(' DataType=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DataType), input_name='DataType')), ))
        if self.LastUpdatedDate is not None and 'LastUpdatedDate' not in already_processed:
            already_processed.add('LastUpdatedDate')
            outfile.write(' LastUpdatedDate="%s"' % self.gds_format_datetime(self.LastUpdatedDate, input_name='LastUpdatedDate'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DataUpdateInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for InstrumentUpdateInfo_ in self.InstrumentUpdateInfo:
            InstrumentUpdateInfo_.export(outfile, level, namespaceprefix_, name_='InstrumentUpdateInfo', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DataDate', node)
        if value is not None and 'DataDate' not in already_processed:
            already_processed.add('DataDate')
            try:
                self.DataDate = self.gds_parse_datetime(value)
            except ValueError as exp:
                raise ValueError('Bad date-time attribute (DataDate): %s' % exp)
        value = find_attr_value_('DataType', node)
        if value is not None and 'DataType' not in already_processed:
            already_processed.add('DataType')
            self.DataType = value
        value = find_attr_value_('LastUpdatedDate', node)
        if value is not None and 'LastUpdatedDate' not in already_processed:
            already_processed.add('LastUpdatedDate')
            try:
                self.LastUpdatedDate = self.gds_parse_datetime(value)
            except ValueError as exp:
                raise ValueError('Bad date-time attribute (LastUpdatedDate): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'InstrumentUpdateInfo':
            obj_ = InstrumentUpdateInfoType.factory(parent_object_=self)
            obj_.build(child_)
            self.InstrumentUpdateInfo.append(obj_)
            obj_.original_tagname_ = 'InstrumentUpdateInfo'
# end class DataUpdateInfoType


class InstrumentUpdateInfoType(GeneratedsSuper):
    """Data Explorers identifier.The last date and time this instrument was
    updated."""
    subclass = None
    superclass = None
    def __init__(self, DXLID=None, LastUpdatedDate=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.DXLID = _cast(None, DXLID)
        if isinstance(LastUpdatedDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LastUpdatedDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = LastUpdatedDate
        self.LastUpdatedDate = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InstrumentUpdateInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InstrumentUpdateInfoType.subclass:
            return InstrumentUpdateInfoType.subclass(*args_, **kwargs_)
        else:
            return InstrumentUpdateInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DXLID(self):
        return self.DXLID
    def set_DXLID(self, DXLID):
        self.DXLID = DXLID
    def get_LastUpdatedDate(self):
        return self.LastUpdatedDate
    def set_LastUpdatedDate(self, LastUpdatedDate):
        self.LastUpdatedDate = LastUpdatedDate
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentUpdateInfoType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InstrumentUpdateInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InstrumentUpdateInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InstrumentUpdateInfoType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InstrumentUpdateInfoType'):
        if self.DXLID is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            outfile.write(' DXLID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DXLID), input_name='DXLID')), ))
        if self.LastUpdatedDate is not None and 'LastUpdatedDate' not in already_processed:
            already_processed.add('LastUpdatedDate')
            outfile.write(' LastUpdatedDate="%s"' % self.gds_format_datetime(self.LastUpdatedDate, input_name='LastUpdatedDate'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstrumentUpdateInfoType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DXLID', node)
        if value is not None and 'DXLID' not in already_processed:
            already_processed.add('DXLID')
            self.DXLID = value
        value = find_attr_value_('LastUpdatedDate', node)
        if value is not None and 'LastUpdatedDate' not in already_processed:
            already_processed.add('LastUpdatedDate')
            try:
                self.LastUpdatedDate = self.gds_parse_datetime(value)
            except ValueError as exp:
                raise ValueError('Bad date-time attribute (LastUpdatedDate): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class InstrumentUpdateInfoType


class ItemType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Text=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Code = _cast(int, Code)
        self.Text = _cast(None, Text)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemType.subclass:
            return ItemType.subclass(*args_, **kwargs_)
        else:
            return ItemType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Text(self):
        return self.Text
    def set_Text(self, Text):
        self.Text = Text
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ItemType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ItemType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ItemType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ItemType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ItemType'):
        if self.Code is not None and 'Code' not in already_processed:
            already_processed.add('Code')
            outfile.write(' Code="%s"' % self.gds_format_integer(self.Code, input_name='Code'))
        if self.Text is not None and 'Text' not in already_processed:
            already_processed.add('Text')
            outfile.write(' Text=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Text), input_name='Text')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ItemType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Code', node)
        if value is not None and 'Code' not in already_processed:
            already_processed.add('Code')
            try:
                self.Code = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('Text', node)
        if value is not None and 'Text' not in already_processed:
            already_processed.add('Text')
            self.Text = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ItemType


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Response'
        rootClass = Response
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Response'
        rootClass = Response
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Response'
        rootClass = Response
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Response'
        rootClass = Response
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from dxlxml import *\n\n')
        sys.stdout.write('import dxlxml as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "Account",
    "AccountDetailType",
    "AccountPerformance",
    "ActiveInventoryType",
    "ActiveInventoryType128",
    "ActiveInventoryType149",
    "AnalyticsType",
    "AssetType",
    "Ban",
    "BanDetailsType",
    "BasketPositionsType",
    "BasketPositionsType7",
    "BasketType95",
    "BenchmarkInformationType",
    "BenchmarkPerformance",
    "BondPricing",
    "BondPricingDetail",
    "BondPricingType",
    "CalculationType",
    "CapitalChangesType",
    "CapitalChangesType107",
    "CategoryType",
    "ClassificationType",
    "Client",
    "ClientInstrument",
    "ClientTransaction",
    "ClientVariance",
    "ClusterType",
    "CodesType",
    "Collateral",
    "CollateralDataType",
    "CompanyType",
    "Constituent",
    "ConstituentChangesType",
    "ConstituentsType",
    "ConstituentsType101",
    "ConstituentsType9",
    "ConstituentsType96",
    "CounterpartDetail",
    "CounterpartDetailType",
    "CounterpartDetailType109",
    "CounterpartDetailType45",
    "CreationRedemptionType",
    "Currency",
    "DIME",
    "DataDateType",
    "DataDateType100",
    "DataDateType104",
    "DataDateType106",
    "DataDateType110",
    "DataDateType114",
    "DataDateType117",
    "DataDateType119",
    "DataDateType123",
    "DataDateType125",
    "DataDateType127",
    "DataDateType13",
    "DataDateType146",
    "DataDateType148",
    "DataDateType15",
    "DataDateType161",
    "DataDateType163",
    "DataDateType165",
    "DataDateType167",
    "DataDateType169",
    "DataDateType17",
    "DataDateType172",
    "DataDateType174",
    "DataDateType178",
    "DataDateType181",
    "DataDateType183",
    "DataDateType185",
    "DataDateType19",
    "DataDateType190",
    "DataDateType194",
    "DataDateType196",
    "DataDateType198",
    "DataDateType20",
    "DataDateType23",
    "DataDateType26",
    "DataDateType28",
    "DataDateType3",
    "DataDateType31",
    "DataDateType33",
    "DataDateType36",
    "DataDateType38",
    "DataDateType41",
    "DataDateType43",
    "DataDateType46",
    "DataDateType49",
    "DataDateType56",
    "DataDateType6",
    "DataDateType63",
    "DataDateType65",
    "DataDateType68",
    "DataDateType70",
    "DataDateType72",
    "DataDateType75",
    "DataDateType8",
    "DataDateType81",
    "DataDateType85",
    "DataDateType86",
    "DataDateType89",
    "DataDateType92",
    "DataDateType94",
    "DataDateType98",
    "DataFeed",
    "DataFeedStatusType",
    "DataRunType",
    "DataSourceType",
    "DataStatusType",
    "DataTypeType",
    "DataUpdateInfoType",
    "DataUpdates",
    "DeltaType",
    "DeltaType121",
    "DeltaType129",
    "DeltaType132",
    "DeltaType135",
    "DeltaType141",
    "DeltaType153",
    "DeltaType156",
    "DeltaType25",
    "DirectionType",
    "Disclosure",
    "DisclosureDetailsType",
    "DistributionType",
    "DistributionType84",
    "Dividend",
    "DividendDetail",
    "DividendInformationType",
    "DividendPointsType",
    "DividendType88",
    "DividendsType",
    "DividendsType1",
    "DividendsType10",
    "DividendsType12",
    "DividendsType2",
    "DividendsType90",
    "ETFPositionsType",
    "ETFType",
    "ETFsType",
    "ETPCompositionType",
    "ETPEncyclopaediaType",
    "EncyclopediaType",
    "EncyclopediaType4",
    "EncyclopediaType5",
    "Exchange",
    "ExchangeDetailsType",
    "ExchangeRatesType",
    "ExchangeRatesType102",
    "ExchangeType",
    "FTPType",
    "FactorsType",
    "FeesandExpensesType",
    "FieldType",
    "FilterDefinitionType",
    "FilterType201",
    "FutureExchangesType",
    "GeneralInformationType",
    "GeneralInformationType103",
    "GeneralInformationType108",
    "GeneralInformationType87",
    "GeneralInformationType91",
    "GeneralInformationType93",
    "GeneralInformationType97",
    "GeneralInformationType99",
    "GeneralType",
    "GeneralType105",
    "GeneralType111",
    "GeneralType115",
    "GeneralType120",
    "GeneralType122",
    "GeneralType126",
    "GeneralType130",
    "GeneralType147",
    "GeneralType158",
    "GeneralType159",
    "GeneralType160",
    "GeneralType162",
    "GeneralType170",
    "GeneralType171",
    "GeneralType173",
    "GeneralType175",
    "GeneralType176",
    "GeneralType177",
    "GeneralType179",
    "GeneralType180",
    "GeneralType182",
    "GeneralType184",
    "GeneralType195",
    "GeneralType197",
    "GeneralType199",
    "GeneralType21",
    "GeneralType22",
    "GeneralType24",
    "GeneralType27",
    "GeneralType29",
    "GeneralType30",
    "GeneralType32",
    "GeneralType34",
    "GeneralType35",
    "GeneralType37",
    "GeneralType39",
    "GeneralType40",
    "GeneralType42",
    "GeneralType44",
    "GeneralType47",
    "GeneralType50",
    "GeneralType64",
    "GeneralType66",
    "GeneralType69",
    "GeneralType71",
    "GeneralType73",
    "GeneralType82",
    "HeaderType",
    "HeaderType11",
    "IM",
    "IdentifierType",
    "IndexType",
    "IndexType133",
    "IndexType138",
    "IndexType142",
    "IndicatorsType",
    "IndicatorsType150",
    "IndicesType",
    "InputDataType",
    "Instrument",
    "InstrumentDataType",
    "InstrumentDataType124",
    "InstrumentDataType144",
    "InstrumentDataType164",
    "InstrumentDataType166",
    "InstrumentDataType168",
    "InstrumentDataType76",
    "InstrumentDataType80",
    "InstrumentDetail",
    "InstrumentDetailType",
    "InstrumentDetailType48",
    "InstrumentDistributionType",
    "InstrumentSummaryType",
    "InstrumentType74",
    "InstrumentUpdateInfoType",
    "InstrumentsType",
    "Intraday",
    "IntradayInputDataType",
    "Inventory",
    "InventoryType",
    "InventoryType131",
    "InventoryType152",
    "InventoryType186",
    "InventoryType191",
    "InventoryType57",
    "InventoryType77",
    "ItemType",
    "LegalInformationType",
    "LicenseType",
    "ListingInformationType",
    "ListingsType",
    "ManagementandStructureType",
    "Margin",
    "Market",
    "MarketColourType",
    "MarketColourType134",
    "MarketColourType154",
    "MarketDataType",
    "MarketDetail",
    "MarketDetailType",
    "MarketDetailType116",
    "MarketDetailType55",
    "MarketHierarchy",
    "MarketShareType",
    "Message",
    "Meta",
    "MetricType",
    "MetricType137",
    "MetricType52",
    "MetricType59",
    "MetricsType",
    "MetricsType136",
    "MetricsType51",
    "MetricsType58",
    "MetricsType83",
    "ModelType",
    "ModifierType",
    "News",
    "NotificationType16",
    "NotificationsType",
    "NotificationsType18",
    "OverUtilisationType",
    "PeerGroupType",
    "Pending",
    "PeriodType",
    "PeriodType143",
    "PeriodType151",
    "PointsType",
    "PointsType14",
    "PositionsType",
    "ProfitandLossBinsType",
    "ProviderType",
    "Public",
    "PublishedInformationType",
    "PxPeerGroupType",
    "RankedCounterpart",
    "RankedCounterpartType",
    "RankedCounterpartType113",
    "RankedCounterpartType62",
    "RankedFundType",
    "RankedInstrument",
    "RankedInstrumentType",
    "RankedInstrumentType67",
    "RateBucketsType",
    "Rates",
    "ReinvestmentType",
    "ReinvestmentType187",
    "ReinvestmentType192",
    "ReinvestmentType53",
    "ReinvestmentType60",
    "RelatedInstruments",
    "Repo",
    "ReportRunnerType",
    "ReportsType",
    "RerateType",
    "RerateType139",
    "ResearchSignals",
    "Response",
    "ResultsType",
    "RowExclusionDetailType",
    "SF",
    "SOLA",
    "Screen",
    "Search",
    "SearchAll",
    "SearchType",
    "ServiceProvidersType",
    "ShortSqueezeType",
    "ShortSqueezeType78",
    "SignOffType",
    "SourceType200",
    "StockType",
    "TaxCodesType",
    "TradingType",
    "TradingType112",
    "TradingType118",
    "TradingType140",
    "TradingType145",
    "TradingType155",
    "TradingType157",
    "TradingType188",
    "TradingType189",
    "TradingType193",
    "TradingType54",
    "TradingType61",
    "TradingType79",
    "Transaction",
    "TransactionDataType",
    "TransactionType",
    "TriPartyTrading",
    "VarianceType"
]
